//=============================================================================
// DO NOT MODIFY THIS FILE MANUALLY!!
// THIS FILE IS GENERATED BY NETPROTO.
// IF YOU HAVE ANY QUESTIONS PLEASE CONTACT LUJIAN.
//=============================================================================

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Collections.Generic;
#if !NOT_USE_FAST_STREAM
using BinaryReader = Common.FastestBinaryReader;
using BinaryWriter = Common.FastestBinaryWriter;
#endif
namespace Network.Messages
{
	
//////////////////////////////////////////////////////////////////////////
//<-发出去     ;      ->收消息
/////////////////////////////////////////////////////////////////////////
// LoginServer 2 User
	public class LS2U_LoginResult : BaseMessage
	{
		static new public BaseMessage Create( BinaryReader s ) {
			var ret = new LS2U_LoginResult();
			ret.Deserialize( s );
			return ret;
		}
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_LS2U_LoginResult;

		#region members
		/// <summary>
		///  0为登录成功，非0为登录失败原因
		/// </summary>
		public SByte m_result = 0;
		/// <summary>
		/// 
		/// </summary>
		public UInt64 m_accountID = 0;
		/// <summary>
		/// 
		/// </summary>
		 public String m_identity = String.Empty;
		/// <summary>
		/// 不为空，手机必须展示
		/// </summary>
		 public String m_msg = String.Empty;
		#endregion

		#region methods
		public override int Deserialize( BinaryReader reader ) {
			long pos = reader.BaseStream.Position;
			m_result = MessageSerializer.Read_SByte( reader );
			m_accountID = MessageSerializer.Read_UInt64( reader );
			m_identity = MessageSerializer.Read_String( reader );
			m_msg = MessageSerializer.Read_String( reader );
			return (int)( reader.BaseStream.Position - pos );
		}
		#endregion
	}

	
//-define( LoginResultSucc, 0 ).
//-define( LoginResultSearchFail, 1 ).
//-define( LoginResultAccountDenied, 2 ).%%黑名单
//-define( LoginResultDbErr, 9 ).
	public class GameServerInfo : SerializeAble
	{
		#region members
		/// <summary>
		/// 
		/// </summary>
		public Int16 m_lineid = 0;
		/// <summary>
		/// 
		/// </summary>
		 public String m_name = String.Empty;
		/// <summary>
		/// 
		/// </summary>
		 public String m_ip = String.Empty;
		/// <summary>
		/// 
		/// </summary>
		public Int16 m_port = 0;
		/// <summary>
		/// 
		/// </summary>
		public SByte m_state = 0;
		#endregion

		#region methods
		public override int Serialize( BinaryWriter writer ) {
			long pos = writer.BaseStream.Position;
			MessageSerializer.Write_Int16( writer, m_lineid );
			MessageSerializer.Write_String( writer, m_name );
			MessageSerializer.Write_String( writer, m_ip );
			MessageSerializer.Write_Int16( writer, m_port );
			MessageSerializer.Write_SByte( writer, m_state );
			return (int)( writer.BaseStream.Position - pos );
		}
		public override int Deserialize( BinaryReader reader ) {
			long pos = reader.BaseStream.Position;
			m_lineid = MessageSerializer.Read_Int16( reader );
			m_name = MessageSerializer.Read_String( reader );
			m_ip = MessageSerializer.Read_String( reader );
			m_port = MessageSerializer.Read_Int16( reader );
			m_state = MessageSerializer.Read_SByte( reader );
			return (int)( reader.BaseStream.Position - pos );
		}
		#endregion
	}

	public partial class MessageSerializer
	{
		static public GameServerInfo Read_GameServerInfo( BinaryReader s ) {
			var ret = new GameServerInfo();
			ret.Deserialize( s );
			return ret;
		}
		static public List<GameServerInfo> ReadList_GameServerInfo( BinaryReader s ) {
			Int16 count = s.ReadInt16();
			if ( count <= 0 ) {
				return null;
			}
			var ret = new List<GameServerInfo>( count );
			for ( int i = 0; i < count; ++i ) {
				ret.Add( Read_GameServerInfo( s ) );
			}
			return ret;
		}
		static public void Write_GameServerInfo( BinaryWriter s, GameServerInfo value ) {
			value.Serialize( s );
		}
		static public void WriteList_GameServerInfo( BinaryWriter s, List<GameServerInfo> value ) {
			if ( value != null ) {
				Write_Int16( s, (Int16)value.Count );
				for ( int i = 0; i < value.Count; ++i ) {
					value[i].Serialize( s );
				}
			} else {
				Write_Int16( s, 0 );
			}
		}
	}

	
//#define GameServer_State_UnCheckPass			0		//正常
//#define GameServer_State_CheckPass				1		//火爆
//#define GameServer_State_Running					2		//爆满
//#define GameServer_State_ForbidLogin			3		//维护
//#define GameServer_State_Closed					4		//维护
//#define GameServer_State_SpecCanVisable			5	//测试人员可见
	public class LS2U_GameLineServerList : BaseMessage
	{
		static new public BaseMessage Create( BinaryReader s ) {
			var ret = new LS2U_GameLineServerList();
			ret.Deserialize( s );
			return ret;
		}
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_LS2U_GameLineServerList;

		#region members
		/// <summary>
		/// 
		/// </summary>
		public List<GameServerInfo> m_gameServers = null;
		#endregion

		#region methods
		public override int Deserialize( BinaryReader reader ) {
			long pos = reader.BaseStream.Position;
			m_gameServers = MessageSerializer.ReadList_GameServerInfo( reader );
			return (int)( reader.BaseStream.Position - pos );
		}
		#endregion
	}

	
//请求线路列表
	public class U2LS_RequestGSLine : BaseMessage
	{
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_U2LS_RequestGSLine;

		#region members
		#endregion

		#region methods
		public override int Serialize( BinaryWriter writer ) {
			long pos = writer.BaseStream.Position;
			return (int)( writer.BaseStream.Position - pos );
		}
		#endregion
	}

	
	public class LS2U_LoginQue : BaseMessage
	{
		static new public BaseMessage Create( BinaryReader s ) {
			var ret = new LS2U_LoginQue();
			ret.Deserialize( s );
			return ret;
		}
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_LS2U_LoginQue;

		#region members
		/// <summary>
		/// 自己在队列中的序号
		/// </summary>
		public UInt64 m_currentNumber = 0;
		#endregion

		#region methods
		public override int Deserialize( BinaryReader reader ) {
			long pos = reader.BaseStream.Position;
			m_currentNumber = MessageSerializer.Read_UInt64( reader );
			return (int)( reader.BaseStream.Position - pos );
		}
		#endregion
	}

	
//gs在用GameServerInfo
	public class GS2U_ChangeLineResponse : BaseMessage
	{
		static new public BaseMessage Create( BinaryReader s ) {
			var ret = new GS2U_ChangeLineResponse();
			ret.Deserialize( s );
			return ret;
		}
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_GS2U_ChangeLineResponse;

		#region members
		/// <summary>
		/// 线路列表
		/// </summary>
		public List<GameServerInfo> m_gameServers = null;
		/// <summary>
		/// 验证码
		/// </summary>
		 public String m_identity = String.Empty;
		#endregion

		#region methods
		public override int Deserialize( BinaryReader reader ) {
			long pos = reader.BaseStream.Position;
			m_gameServers = MessageSerializer.ReadList_GameServerInfo( reader );
			m_identity = MessageSerializer.Read_String( reader );
			return (int)( reader.BaseStream.Position - pos );
		}
		#endregion
	}

	
//////////////////////////////////////////////////////////////////////////
// User 2 LoginServer
	public class U2LS_Login_Normal : BaseMessage
	{
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_U2LS_Login_Normal;

		#region members
		/// <summary>
		///  平台帐号（游戏内帐号用平台id来绑定创建）
		/// </summary>
		 public String m_platformAccount = String.Empty;
		/// <summary>
		///  平台名
		/// </summary>
		 public String m_platformName = String.Empty;
		/// <summary>
		///  平台昵称，没有就填空串
		/// </summary>
		 public String m_platformNickName = String.Empty;
		/// <summary>
		/// 
		/// </summary>
		public Int64 m_time = 0;
		/// <summary>
		/// 
		/// </summary>
		 public String m_sign = String.Empty;
		/// <summary>
		///  程序生成，每个设备不能重复
		/// </summary>
		 public String m_deviceId = String.Empty;
		/// <summary>
		///  手机串号
		/// </summary>
		 public String m_imei = String.Empty;
		/// <summary>
		///  苹果推号
		/// </summary>
		 public String m_idfa = String.Empty;
		/// <summary>
		///  网卡号
		/// </summary>
		 public String m_mac = String.Empty;
		/// <summary>
		///  扩展参数串
		/// </summary>
		 public String m_extParam = String.Empty;
		/// <summary>
		///  资源版本
		/// </summary>
		public Int32 m_versionRes = 0;
		/// <summary>
		///  执行程序版本
		/// </summary>
		public Int32 m_versionExe = 0;
		/// <summary>
		///  游戏版本？？
		/// </summary>
		public Int32 m_versionGame = 0;
		/// <summary>
		///  协议版本
		/// </summary>
		public Int32 m_versionPro = 0;
		#endregion

		#region methods
		public override int Serialize( BinaryWriter writer ) {
			long pos = writer.BaseStream.Position;
			MessageSerializer.Write_String( writer, m_platformAccount );
			MessageSerializer.Write_String( writer, m_platformName );
			MessageSerializer.Write_String( writer, m_platformNickName );
			MessageSerializer.Write_Int64( writer, m_time );
			MessageSerializer.Write_String( writer, m_sign );
			MessageSerializer.Write_String( writer, m_deviceId );
			MessageSerializer.Write_String( writer, m_imei );
			MessageSerializer.Write_String( writer, m_idfa );
			MessageSerializer.Write_String( writer, m_mac );
			MessageSerializer.Write_String( writer, m_extParam );
			MessageSerializer.Write_Int32( writer, m_versionRes );
			MessageSerializer.Write_Int32( writer, m_versionExe );
			MessageSerializer.Write_Int32( writer, m_versionGame );
			MessageSerializer.Write_Int32( writer, m_versionPro );
			return (int)( writer.BaseStream.Position - pos );
		}
		#endregion
	}

	
// funcell web消息
	public class Web2LS_Crypto : BaseMessage
	{
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_Web2LS_Crypto;

		#region members
		/// <summary>
		///  加密消息体
		/// </summary>
		 public String m_bodyJsonStr = String.Empty;
		#endregion

		#region methods
		public override int Serialize( BinaryWriter writer ) {
			long pos = writer.BaseStream.Position;
			MessageSerializer.Write_String( writer, m_bodyJsonStr );
			return (int)( writer.BaseStream.Position - pos );
		}
		#endregion
	}

	
// funcell web消息
	public class Web2LS_Normal : BaseMessage
	{
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_Web2LS_Normal;

		#region members
		/// <summary>
		///  未加密消息体
		/// </summary>
		 public String m_bodyJsonStr = String.Empty;
		#endregion

		#region methods
		public override int Serialize( BinaryWriter writer ) {
			long pos = writer.BaseStream.Position;
			MessageSerializer.Write_String( writer, m_bodyJsonStr );
			return (int)( writer.BaseStream.Position - pos );
		}
		#endregion
	}

	
// funcell 回复web消息
	public class LS2Web_CryptoAck : BaseMessage
	{
		static new public BaseMessage Create( BinaryReader s ) {
			var ret = new LS2Web_CryptoAck();
			ret.Deserialize( s );
			return ret;
		}
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_LS2Web_CryptoAck;

		#region members
		/// <summary>
		///  加密消息体
		/// </summary>
		 public String m_bodyJsonStr = String.Empty;
		#endregion

		#region methods
		public override int Deserialize( BinaryReader reader ) {
			long pos = reader.BaseStream.Position;
			m_bodyJsonStr = MessageSerializer.Read_String( reader );
			return (int)( reader.BaseStream.Position - pos );
		}
		#endregion
	}

	
// funcell 回复web消息
	public class LS2Web_NormalAck : BaseMessage
	{
		static new public BaseMessage Create( BinaryReader s ) {
			var ret = new LS2Web_NormalAck();
			ret.Deserialize( s );
			return ret;
		}
		override public MessageType GetId() {
			return ID;
		}
		public const MessageType ID = MessageType.MSG_LS2Web_NormalAck;

		#region members
		/// <summary>
		///  未加密消息体
		/// </summary>
		 public String m_bodyJsonStr = String.Empty;
		#endregion

		#region methods
		public override int Deserialize( BinaryReader reader ) {
			long pos = reader.BaseStream.Position;
			m_bodyJsonStr = MessageSerializer.Read_String( reader );
			return (int)( reader.BaseStream.Position - pos );
		}
		#endregion
	}

}
//EOF
