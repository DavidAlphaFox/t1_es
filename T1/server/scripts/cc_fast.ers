#!/usr/bin/env escript
-module(cc_fast).
-author(tiancheng).

-define(IsOnlyCht, 1).
-define(CompileEts, compileEts).
-define(CompileFilesEts, compileFilesEts).
-define(CompileListDEts, get_dets_name(ServerType)).
-define(ST_GS, game_server).
-define(ST_CS, center_server).

-record(rec_serverfile, {
	fileName = "",
	changeTime = 0
}).


main(Args) ->
    file:make_dir("../ebin"),
	ets:new(?CompileEts, [public, named_table, {keypos, 1}]),
	ets:new(?CompileFilesEts, [public, named_table, {keypos, 1},{write_concurrency, true},{read_concurrency, true}]),
    main1(Args),
	ok.
	
main1([ServerType]) ->
	dispatchInput0(list_to_integer(ServerType));
main1(_Any) ->	
	menu0(),
	ok.
	
	

menu0() ->
	color:info_log(
        "~n##########################################################~n"
        "~n"
        "\t1.~p~n"
        "\t2.~p~n"
        "~n"
        "\t0.exit~n"
        "~n##########################################################~n~n"
    ,[?ST_GS, ?ST_CS]),
	set_title(unknown_server, unkonw_region, unknown_type, unknown_mode),
    InputNoStr = io:get_line("Please enter your choice:"),
    {InputNo, _Rest} = string:to_integer(InputNoStr),
    dispatchInput0(InputNo).


dispatchInput0(0) ->
    ok;
dispatchInput0(1) -> menu1(?ST_GS);
dispatchInput0(2) -> menu1(?ST_CS);
dispatchInput0(_) -> menu0().


-ifdef(IsOnlyCht).
menu1(ServerType) ->
    ensure_dets(ServerType),
	dispatchInput(ServerType, 2).
-else.
menu1(ServerType) ->
    ensure_dets(ServerType),
	color:info_log(
		"~n##########################################################~n"
		"\t\tLUNA multi-language compile~n"
		"~n"
		"\t1.(chs) China~n"
		"\t2.(cht) Taiwan~n"
		"\t3.(enu) English~n"
		"\t4.(kor) Korea~n"
		"\t5.(xmt) Malaysia~n"
		"\t6.(tha) Thailand~n"
		"\t7.(rus) Russia~n"
		"\t8.(jpn) Japan~n"
		"\t9.(vietnam)  Vietnam~n"
		"~n"
		"\t[0  ].exit~n"
		"\t[888].package~n"
		"~n##########################################################~n~n"
	),
	%% 现在还没有多语言版本
	InputNoStr = io:get_line("Please enter your choice:"),
	{InputNo, _Rest} = string:to_integer(InputNoStr),
	dispatchInput(ServerType, InputNo).
-endif.

dispatchInput(ServerType, 0) ->
	dets:close(get_dets_name(ServerType)),
	ok;
dispatchInput(ServerType, 1) -> menu2(ServerType, chs);
dispatchInput(ServerType, 2) -> menu2(ServerType, cht);
dispatchInput(ServerType, 3) -> menu2(ServerType, enu);
dispatchInput(ServerType, 4) -> menu2(ServerType, kor);
dispatchInput(ServerType, 5) -> menu2(ServerType, xmt);
dispatchInput(ServerType, 6) -> menu2(ServerType, tha);
dispatchInput(ServerType, 7) -> menu2(ServerType, rus);
dispatchInput(ServerType, 8) -> menu2(ServerType, jpn);
dispatchInput(ServerType, 9) -> menu2(ServerType, vietnam);
dispatchInput(ServerType, 888) ->
	jump_package(ServerType),
	menu0();
dispatchInput(ServerType, _) -> menu1(ServerType).

menu2(ServerType, Lang) ->
	color:info_log(
		"~n##########################################################~n"
		"\t\tselect compile sub order~n"
		"~n"
		"\t> 1.   ~p(release)~n"
		"~n"
		"\t> 11.  ~p(debug)~n"
%%		"~n"
%%		"\t> 2.   gs fast(release)~n"
		"\t> 12.  ~p fast(debug)~n"
		"~n"
%%		"\t> 23.  Engineer(release)~n"
		"\t> 24.  Engineer(debug)~n"
		"~n"
		"\t> 0.   exit~n"
		"\t> 8.   clean~n"
		"\t> 9.   return main...~n"
		"\t> 888. package~n"
		"~n##########################################################~n~n",
	[ServerType, ServerType, ServerType]),
	set_title(ServerType, Lang, unknown_type, unknown_mode),
	InputNoStr = io:get_line("Please enter your choice:"),
	{InputNo, _Rest} = string:to_integer(InputNoStr),
	dispatchInput2(ServerType, Lang, InputNo).

dispatchInput2(ServerType, Lang, 1) ->
	setCompileFastParam(undefined),
	compile(ServerType, Lang, 1);
%%dispatchInput2(ServerType, Lang, 2) ->
%%	Data = getChangeFileList(ServerType),
%%	setCompileFastParam(Data),
%%	timer:sleep(2000),
%%	compile(Lang, 2);
dispatchInput2(ServerType, Lang, 11) ->
	setCompileFastParam(undefined),
	compile(ServerType, Lang, 11);
dispatchInput2(ServerType, Lang, 12) ->
	Data = getChangeFileList(ServerType),
	setCompileFastParam(Data),
	timer:sleep(2000),
	compile(ServerType, Lang, 12);
dispatchInput2(ServerType, _, 0) ->
	dets:close(get_dets_name(ServerType)),
	erlang:halt();
dispatchInput2(ServerType, Lang, 888) ->
	jump_package(ServerType),
	menu2(ServerType, Lang);
dispatchInput2(_ServerType, _Lang, 9) ->
	menu0();
dispatchInput2(ServerType, Lang, 8) ->
	dets:delete_all_objects(get_dets_name(ServerType)),
	os:cmd("cd ../ebin/ && del /q /s *.*"),
	color:warn_log("===> clean success!! <===~n~n"),
	menu2(ServerType, Lang);
%%dispatchInput2(ServerType, Lang, 23) ->
%%	setSearchFileData(undefined),
%%	searchFile(false, {Lang, 23}, scan_all_files(ServerType));
dispatchInput2(ServerType, Lang, 24) ->
	setSearchFileData(undefined),
	searchFile(ServerType, false, {Lang, 24}, scan_all_files(ServerType));
dispatchInput2(ServerType, Lang, _) ->
	menu2(ServerType, Lang).

searchFile(ServerType, false, {Lang, _XH} = Param1, {_HrlFileList, ErlFileList, _Opts} = Param2) ->
	color:info_log("\t[0] ===> return to main menu~n", []),
	InputNoStr1 = io:get_line("Input search file key words:"),
	InputNoStr2 = string_strip(string_strip(InputNoStr1), "\n"),
	case InputNoStr2 of
		"0" ->
			setSearchFileData(undefined),
			menu2(ServerType, Lang);
		_ ->
			F =
				fun(File, {IsEnough, {Number, AccL}} = Data) ->
					case Number >= 30 of
						true ->
							{true, {Number, AccL}};
						_ ->
							LowerFile = string:to_lower(File),
							LowerInput = string:to_lower(InputNoStr2),
							case string:str(LowerFile, LowerInput) > 0 of
								true ->
									{IsEnough, {Number + 1, [{Number + 1, File} | AccL]}};
								_ ->
									Data
							end
					end
				end,
			{_, {Num, List}} = foldlEx(F, {false, {0, []}}, ErlFileList),
			case Num > 0 of
				true ->
					FF =
						fun({N, File}) ->
							color:warn_log("[~p] ===> ~ts", [N, File])
						end,
					lists:foreach(FF, lists:reverse(List)),
					setSearchFileData(List),
					searchFile(ServerType, true, Param1, Param2);
				_ ->
					color:warn_log("No search~n"),
					searchFile(ServerType, false, Param1, Param2)
			end
	end;
	
searchFile(ServerType, _, {Lang, _XH} = Param1, {_HrlFileList, _ErlFileList, Opts} = Param2) ->
	color:warn_log("[*] ===> compile all searched ~p file(s)", [safe_length(getSearchFileData())]),
	color:warn_log("[0] ===> return to main menu", []),
	
	InputNoStr1 = io:get_line("Input compile file index:"),
	InputNoStr2 = string_strip(string_strip(InputNoStr1), "\n"),
	case InputNoStr2 of
		"0" ->
			setSearchFileData(undefined),
			menu2(ServerType, Lang);
		_ ->
			case InputNoStr2 of
				"*" ->
					compileSearchFile(ServerType, 0, Param1, Opts, getSearchFileData());
				_ ->
				case string:to_integer(InputNoStr2) of
					{Index, []} when erlang:is_integer(Index)->
						compileSearchFile(ServerType, Index, Param1, Opts, getSearchFileData());
					_ ->
						skip
				end			
			end,
			searchFile(ServerType,  false, Param1, Param2)
	end.
	
safe_length(L) when is_list(L) ->
	length(L);
safe_length(_)->
	0.

compileSearchFile(_ServerType, _Index, _Param1, _Opts, undefined)->
	skip;
compileSearchFile(ServerType, 0, {Lang, XH}, Opts, List)->
	FileList = [File || {_, File} <- List],
	setCompileFastParam({true, FileList, Opts, []}),
	compile(ServerType, Lang, XH);
compileSearchFile(ServerType, Index, {Lang, XH}, Opts, List)->
	case lists:keyfind(Index, 1, List) of
		{_, File} ->
			setCompileFastParam({true, [File], Opts, []}),
			compile(ServerType, Lang, XH);
		_ ->
			skip
	end.	


setSearchFileData(Data) ->
	put('SearchFileData', Data).
getSearchFileData() ->
	get('SearchFileData').

foldlEx(_, {true, _} = Accu, _) -> Accu;
foldlEx(F, Accu, [Hd|Tail]) ->
	foldlEx(F, F(Hd, Accu), Tail);
foldlEx(F, Accu, []) when is_function(F, 2) -> Accu.

getCompileServer(1) -> release;
getCompileServer(2) -> release;
getCompileServer(23) -> release;
getCompileServer(11) -> debug;
getCompileServer(24) -> debug;
getCompileServer(_) -> debug.

jump_package(?ST_GS) ->
	erlang:spawn(fun()-> os:cmd("start escript.exe ps_gs.ers") end),
	ok;
jump_package(?ST_CS) ->
	erlang:spawn(fun()-> os:cmd("start escript.exe ps_cs.ers") end),
	ok.

compile(ServerType, Lang, 1) ->
	color:warn_log("now path:~p", [file:get_cwd()]),
	%% 先生成版本文件
    set_title(ServerType, Lang, getCompileServer(1), allCompile),
	Ret=os:cmd("start /B escript.exe version.ers"),
	io:format("~ts~n",[Ret]),
	waitATime(5000),

	%% 用于Release编译打包
	Target = getCompileServer(1),
	FileName = io_lib:format("compile_~p_~p_~p.txt", [ServerType, Lang, Target]),
	file:write_file(FileName, ""),
	CmdStr = io_lib:format("cd ../ && make all Region=\"~p\" -j8 > scripts/~ts", [Lang, FileName]),

	color:warn_log("compile [~p,~p] start [~ts], please wait...~n", [Lang, Target, time_format()]),
	os:cmd(CmdStr),

	case checkCompileError(FileName) of
		0 ->
			color:info_log("@@@compile [~p,~p] success@@@ at ~ts ~n", [Lang, Target, time_format()]);
		_ ->
			color:error_log("***compile [~p,~p] ERROR ERROR ERROR !!!*** ~ts ~n", [Lang, Target, time_format()])
	end,

	menu2(ServerType, Lang);
compile(ServerType, Lang, V) ->
	color:warn_log("now path:~p~n", [file:get_cwd()]),
	Target = getCompileServer(V),
	ets:delete_all_objects(?CompileEts),
	ets:insert(?CompileFilesEts,{1,0}),

	{Schedulers, LogFile, Opts, FileList} = make_cfg(ServerType, Lang, Target, V),
	{TaskNum, Ms} = make_worker(ServerType, FileList, Schedulers, LogFile, Lang, Target, Opts),

	try
		loop_wait(TaskNum),

		compile_done(ServerType, Ms, LogFile, Lang, Target)
	catch
		_:Why:St->
			color:error_log("***compile [~p,~p] ERROR ERROR ERROR !!!*** ~ts ~p,~p ~n",
				[Lang, Target, time_format(), Why, St])
	end,

	menu2(ServerType, Lang).

checkCompileError(FileName)->
	{ok,Binary} = file:read_file(FileName),
	Content = binary_to_list(Binary),
	case string:str(Content, "recipe for target") of
		0 ->
			string:str(Content, "failed");
		V ->
			V
	end.

waitATime(Time) ->
	receive
		tttttttttttttttcccccccccccccccc ->
			ok
	after Time ->
		ok
	end.

loop_wait(0) ->
	skip;
loop_wait(N) ->
	receive
		{'DOWN', _MRef, _process, _Pid, normal} ->
			ok;
		{'DOWN', MRef, process, Pid, Reason} ->
			color:warn_log("~p|~p finished ~p~n",[Pid, MRef, Reason]);
		{Pid, Result} ->
			color:info_log("~p finished ~p~n",[Pid,  Result])
	end,
	loop_wait(N - 1).

compile2(ServerType, SrcFile, Opts, LogFile, FileNumbers) ->
	Ret = compile:file(SrcFile, [return, report_errors, error_summary, bin_opt_info | Opts]), %% report,
	{CompileResult, Str} = check_return(SrcFile, Ret),

	case CompileResult =/= error of
		true ->
			CurChangeTime = getFileChangeTime(SrcFile),
			dets:insert(get_dets_name(ServerType), #rec_serverfile{fileName = SrcFile, changeTime = CurChangeTime});
		_ ->
			skip
	end,

	CompiledFileNumber = ets:update_counter(?CompileFilesEts, 1, {2, 1}),
	dLog(LogFile, "[~ts] compiled[~w%] ~s ~p ~ts",
		[time_format(), erlang:trunc(CompiledFileNumber/FileNumbers * 1000)/10, filename:basename(SrcFile), CompileResult =/= error,  Str], CompileResult),
	ok.

check_return(_SrcFile, {ok,_}) ->
	{ok, ""};
check_return(_SrcFile, {ok, _Mod, []}) ->
	{ok, ""};
check_return(_SrcFile, {ok, _Mod, Binary}) ->
	{warn, io_lib:format("~n~ts", [report_warnings(Binary)])};
check_return(_SrcFile, {ok, _Mod, _Binary, Warnings}) ->
	{warn, io_lib:format("~n~ts", [report_warnings(Warnings)])};
check_return(SrcFile, {error, Errors, Warnings}) ->
	Msg = report_errors(Errors),
	ets:insert(?CompileEts, {SrcFile, Msg}),
	{error, io_lib:format("~n~ts~n~ts", [Msg, report_warnings(Warnings)])};
check_return(SrcFile, error) ->
	ets:insert(?CompileEts, {SrcFile, "error"}),
	{error, "error"};
check_return(SrcFile, _Reason) ->
	ets:insert(?CompileEts, {SrcFile, "unknow reason"}),
	{error, "unknow reason"}.

check_compile_error(_FileName) ->
	ets:info(?CompileEts, size).

make_worker(_, [], _Schedulers, _LogFile, _Lang, _Target, _Opts) ->
	{0, os:system_time(milli_seconds)};
make_worker(ServerType, FileList, Schedulers, LogFile, Lang, Target, Opts) ->

	FileNumbers = erlang:length(FileList),
	Once = trunc(FileNumbers / Schedulers),

	L1 = ssplit_all(Once, FileList),
	TaskNum = length(L1),

	dLog(LogFile,
		"~n*********************************************************~n"
		"*********************************************************~n"
		"*  ~ts ~p ~p ~p files ~p workers\t*~n"
		"*********************************************************~n"
		"*********************************************************~n",
		[time_format(), Target, Lang, FileNumbers, TaskNum], ok),


	StartTime = os:system_time(milli_seconds),
	lists:foldl(
		fun(FLMe, Idx) ->
			erlang:spawn_monitor(
				fun() ->
					try
						Atom = list_to_atom("compile_" ++ integer_to_list(Idx)),
						true = erlang:register(Atom, self()),
						lists:foreach(
						fun(File) ->
						    case check_compile_error(LogFile) of
						        0 ->
						            compile2(ServerType, File, Opts, LogFile, FileNumbers);
						        _ ->
						            skip
						    end
						end, FLMe)
					catch
						_ : _ ->
							skip
					end
				end),
			Idx + 1
		end, 1, L1),
	{TaskNum, StartTime}.

compile_done(ServerType, StartTime, LogFile, Lang, Target) ->
	DiffMs = os:system_time(milli_seconds) - StartTime,
	Now = time_format(),

	dLog(LogFile, "~n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^~n~n", ok),

	case check_compile_error(LogFile) of
		0 ->
			%% 如果执行单独编译一个文件，则不允许更新头文件
			case getSearchFileData() of
				undefined ->
					F =
						fun(File) ->
							CurChangeTime = getFileChangeTime(File),
							dets:insert(get_dets_name(ServerType), #rec_serverfile{fileName = File, changeTime = CurChangeTime})
						end,
					case getCompileFastParam() of
						{_, _FileList, _Opts, HrlList} ->
							%% 快速编译成功，更新部分头文件
							lists:foreach(F, HrlList);
						_ ->
							%% 全部编译成功，更新头文件
							{HrlFileList, _ErlFileList, _Opts} = scan_all_files(ServerType),
							lists:foreach(F, HrlFileList)
					end;
				_ ->
					skip
			end,

			dLog(LogFile, "~n@@@compile [~p,~p] success@@@ at ~ts ~p seconds ~n",
				[Lang, Target, Now, DiffMs / 1000], ok);
		_ ->
			ets:foldl(
				fun({SrcFile, ErrMsg}, _) ->
					dLog(LogFile, "~ts~n~ts", [filename:basename(SrcFile), ErrMsg], error),
					ok
				end, 0, ?CompileEts),
			dLog(LogFile, "~n!!!! compile [~p,~p] ERROR ERROR ERROR !!!*** at ~ts  ~p seconds ~n",
				[Lang, Target, Now, DiffMs / 1000], error)
	end,

	dLog(LogFile, "~n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^~n~n", ok),
	ok.

make_cfg(ServerType, Lang, Target, _V) ->
	FileName = io_lib:format("compile_~p_~p_~p.txt", [ServerType, Lang, Target]),
	file:write_file(FileName, ""),

	{CompileType, FileList, Opts} = scan_files(ServerType, getCompileFastParam()),
	Schedulers = erlang:min(schedulers(), erlang:length(FileList)),

	set_title(ServerType, Lang, Target, CompileType),
	{Schedulers, FileName, make_opts(Opts, Lang, Target), FileList}.

scan_files(_ServerType, {IsFast, FileList, Opts, _})->
	case IsFast of
		true ->
			{fastCompile, FileList, Opts};
		_ ->
			{allCompile, FileList, Opts}
	end;
scan_files(ServerType, undefined)->
	{_, SrcList, Opts}  = get_server_config(ServerType),

	SrcFileList =
	    lists:foldl(
	    fun(SrcDir, AccList) ->
	         filelib:fold_files(SrcDir, ".erl$$", true, fun(File, Acc) -> [File | Acc] end, AccList)
	    end, [], SrcList),
	{allCompile, SrcFileList, Opts}.

scan_all_files(ServerType)->
	{_, SrcList, Opts} = get_server_config(ServerType),

	SrcFileList =
	    lists:foldl(
	    fun(SrcDir, AccList) ->
	         filelib:fold_files(SrcDir, ".erl$$", true, fun(File, Acc) -> [File | Acc] end, AccList)
	    end, [], SrcList),

    IncFileList =
        lists:foldl(
        fun(SrcDir, AccList) ->
             filelib:fold_files(SrcDir, ".hrl$$", true, fun(File, Acc) -> [File | Acc] end, AccList)
        end, [], SrcList),

	{IncFileList, SrcFileList, Opts}.


get_server_config(ServerType) ->
	{ok, [Config]} = file:consult("./mm.config"),
	do_get_server_config(ServerType, Config).

do_get_server_config(_, []) ->
	[];
do_get_server_config(ServerType, [{ServerType, _, _} = Config | _]) ->
	Config;
do_get_server_config(ServerType, [_ | Configs]) ->
	do_get_server_config(ServerType, Configs).

schedulers()->
	case catch erlang:system_info(schedulers_online) of
		{'EXIT', _} ->
			4;
		Cpu when Cpu > 1 ->
			Cpu - 1;
		Cpu ->
			Cpu
	end.

make_opts(Opts, Lang, debug) ->
	[{d, 'Region', Lang}, debug_info | Opts];
make_opts(Opts, Lang, release) ->
	[{d, 'Region', Lang},{d,'RELEASE'} | Opts].

set_title(ServerType, Lang, Mode, CompileType) ->
	case os:type() of
		{win32, _} ->
			{_, Cwd} = file:get_cwd(),
			os:cmd(io_lib:format('title \"~p <<~p>> <<~p>> <<~p>> <<~p>>\"', [erlang:list_to_binary(Cwd), ServerType, Lang, Mode,CompileType]));
		_ ->
			skip
	end.

time_format() -> time_format(erlang:timestamp()).

time_format(Now) ->
	{{Y, M, D}, {H, MM, S}} = calendar:now_to_local_time(Now),
	time_format1(Y, M, D, H, MM, S).
time_format1(Y, M, D, H, MM, S) ->
	lists:concat([Y, "-", one_to_two(M), "-", one_to_two(D), " ",
		one_to_two(H), ":", one_to_two(MM), ":", one_to_two(S)]).
one_to_two(One) -> io_lib:format("~2..0B", [One]).


ssplit_all(N, L) ->
	Len = length(L),
	do_ssplit(N, L, Len, []).

%%---
do_ssplit(_, [], _, Acc) ->
	Acc;
do_ssplit(N, L1, Len, Acc) ->
	{L2, L3} = do_ssplit1(N, L1, Len),
	do_ssplit(N, L3, Len - N, [L2 | Acc]).

%%---
do_ssplit1(N, L, Len) when N =< Len ->
	lists:split(N, L);
do_ssplit1(_N, L, _Len) ->
	{L, []}.

report_errors(Errors) ->
	Es =
		lists:foldl(
			fun({{F, _L}, Eds}, Acc) ->
				list_errors(F, Eds, Acc);
				({F, Eds}, Acc) ->
					list_errors(F, Eds, Acc)
			end, [], Errors),
	lists:flatten(lists:reverse(Es)).

report_warnings(Ws0) ->
	P = "Warning: ",
	Ws = lists:foldl(
		fun({{F, _L}, Eds}, Acc) ->
			format_message(F, P, Eds, Acc);
			({F, Eds}, Acc) ->
				format_message(F, P, Eds, Acc)
		end, [], Ws0),
%%	Ws = lists:sort(Ws1),

	lists:flatten(lists:reverse(Ws)).

format_message(F, P, [{none, Mod, E} | Es], Acc) ->
	Msg = io_lib:format("[~ts] ~ts: ~s~ts\n",
		[time_format(), filename:basename(F), P, Mod:format_error(E)]),
	format_message(F, P, Es, [Msg | Acc]);
format_message(F, P, [{{Line, Column} = _Loc, Mod, E} | Es], Acc) ->
	Msg = io_lib:format("[~ts] ~ts:~w:~w ~s~ts\n",
		[time_format(),filename:basename(F), Line, Column, P, Mod:format_error(E)]),
	format_message(F, P, Es, [Msg | Acc]);
format_message(F, P, [{Line, Mod, E} | Es], Acc) ->
	Msg = io_lib:format("[~ts] ~ts:~w: ~s~ts\n",
		[time_format(),filename:basename(F), Line, P, Mod:format_error(E)]),
	format_message(F, P, Es, [Msg | Acc]);
format_message(F, P, [{Mod, E} | Es], Acc) ->
	%% Not documented and not expected to be used any more, but
	%% keep a while just in case.
	Msg = io_lib:format("[~ts] ~ts: ~s~ts\n",
		[time_format(),filename:basename(F), P, Mod:format_error(E)]),
	format_message(F, P, Es, [Msg | Acc]);
format_message(_, _, [], Acc) -> Acc.

list_errors(F, [{none, Mod, E} | Es], Acc) ->
	Msg = io_lib:format("[~ts] ~ts: ~ts\n",
		[time_format(),filename:basename(F), Mod:format_error(E)]),
	list_errors(F, Es, [Msg | Acc]);
list_errors(F, [{{Line, Column}, Mod, E} | Es], Acc) ->
	Msg = io_lib:format("[~ts] ~ts:~w:~w: ~ts\n",
		[time_format(),filename:basename(F), Line, Column, Mod:format_error(E)]),
	list_errors(F, Es, [Msg | Acc]);
list_errors(F, [{Line, Mod, E} | Es], Acc) ->
	Msg = io_lib:format("[~ts] ~ts:~w: ~ts\n",
		[time_format(),filename:basename(F), Line, Mod:format_error(E)]),
	list_errors(F, Es, [Msg | Acc]);
list_errors(F, [{Mod, E} | Es], Acc) ->
	%% Not documented and not expected to be used any more, but
	%% keep a while just in case.
	Msg = io_lib:format("[~ts] ~ts: ~ts\n",
		[time_format(),filename:basename(F), Mod:format_error(E)]),
	list_errors(F, Es, [Msg | Acc]);
list_errors(_F, [], Acc) -> Acc.

getChangeFileList(ServerType) ->
	{HrlFileList, ErlFileList, Opts} = scan_all_files(ServerType),
	color:warn_log("===> scan files number include[~p] scr[~p]", [erlang:length(HrlFileList), erlang:length(ErlFileList)]),
	HrlChangeList = saveFileChangeTime(ServerType, HrlFileList),
	color:warn_log("===> hrl changs number:~p", [erlang:length(HrlChangeList)]),
	ErlChangeList = saveFileChangeTime(ServerType, ErlFileList),
	color:warn_log("===> erl changs number:~p", [erlang:length(ErlChangeList)]),
	case HrlChangeList of
		[] ->
			color:warn_log("===> compile fast ...~n"),
			{true, ErlChangeList, Opts, []};
		_ ->
			color:warn_log("===> compile all ...~n"),
			{false, ErlFileList, Opts, HrlFileList}
	end.

saveFileChangeTime(ServerType, List) ->
	F =
		fun(File, AccL) ->
			CurChangeTime = getFileChangeTime(File),
			case dets:lookup(get_dets_name(ServerType), File) of
				[#rec_serverfile{changeTime = ChangeTime}] when CurChangeTime =:= ChangeTime ->
					AccL;
				_ ->
					[File | AccL]
			end
		end,
	lists:foldl(F, [], List).

%% 用MD5代替系统修改时间
getFileChangeTime(File) ->
	getFileMd5(File);
getFileChangeTime(File) ->
	case file:read_file_info(File, [{time, posix}]) of
		{ok, Info} ->
			erlang:element(5, Info);
		_ ->
			color:error_log("===> read getFileChangeTime:~ts failed~n", [File]),
			throw(readfileerror)
	end.

getFileMd5(File) ->
	case file:read_file(File) of
		{ok, Data} ->
			erlang:md5(Data);
		_ ->
			color:error_log("===> read getFileMd5:~ts failed~n", [File]),
			throw(readfilemd5error)
	end.

setCompileFastParam(Param) ->
	put('CompileFastParam', Param).
getCompileFastParam() ->
	get('CompileFastParam').

string_strip(Str)-> string:strip(Str).

string_strip(Str, [])-> 
	Str;
string_strip(Str, [CH | L])-> 
	string_strip(string:strip(Str, both, CH), L).



dLog(File, Fmt, Flag) ->
	dLog(File,Fmt, [], Flag).

dLog(File,Fmt, Args, Flag)->
	Str = io_lib:format(Fmt, Args),
	file:write_file(File, io_lib:format("~ts~n",[Str]), [append]),
	case Flag of
		error ->
			color:error_log(Str);
		warn ->
			color:warn_log(Str);
		_ ->
			color:info_log(Str)
	end.

ensure_dets(ServerType) ->
    dets:open_file(get_dets_name(ServerType),
        [
            {keypos, #rec_serverfile.fileName},
            {type, set},
            {auto_save, 1000},
            {file, get_dets_file(ServerType)}
        ]).

get_dets_name(ServerType) ->
    list_to_atom(lists:concat([compileServerFileListDEts,"_", ServerType])).

get_dets_file(ServerType) ->
    lists:flatten(io_lib:format("compileListDEtsFile.~p.data", [ServerType])).