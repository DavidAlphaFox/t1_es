#!/usr/bin/env escript
%% coding: latin-1
%%%-------------------------------------------------------------------
%%% @author mwh
%%% @copyright (C) 2017, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 08. 六 2017 9:32
%%%-------------------------------------------------------------------

%% 热更新
-define(ST_GS, 1).
-define(ST_CS, 2).
-define(ST_HTTP, 3).

-define(OP_EXIT, 0).

-define(OP_START_GS, 1).
-define(OP_COMPILE_GS, 11).
-define(OP_DEL_LOG_GS, 111).
-define(OP_PK_GS, 1111).

-define(OP_START_CS, 2).
-define(OP_COMPILE_CS, 22).
-define(OP_DEL_LOG_CS, 222).
-define(OP_PK_CS, 2222).

-define(OP_DEL_LOG_ALL, 9).

-define(OP_REF, 901).
-define(OP_DIALYZER, 902).

-define(OP_EDIT_NETMSG, 903).
-define(OP_EDIT_ERRORCODE, 904).
-define(OP_EDIT_LOGDEFINE, 905).

-define(OP_GEN_NETMSG, 911).
-define(OP_GEN_RW_CODE, 912).
-define(OP_GEN_ERRORCODE, 913).
-define(OP_GEN_LOGDEFINE, 914).
-define(OP_EXPORT_DBSTRUCT, 915).
-define(OP_BAK_DBSTRUCT, 916).



-define(OP_TCP, 991).
-define(OP_SET_TERMINAL_COLOR_BELOW_WIN10, 997).
-define(OP_SET_TERMINAL_COLOR, 998).
-define(OP_SET_WINDOW_RSH, 999).


-define(DEV_MODE, dev).
-define(USR_MODE, usr).

main(Args) ->
	os:cmd("chcp 65001"),
    case Args of
    [] -> menu(?DEV_MODE);
    [Mode | _] -> menu(list_to_atom(Mode))
    end,
    ok.

show_cmd(?DEV_MODE) ->
    color:info_log(
            "~n##########################################################~n"

    		"\t~-10.wgs_开服~n"
            "\t~-10.wgs_编译~n"
    		"\t~-10.wgs_删除日志~n"
    		"\t~-10.wgs_打包~n"
            " #~n"

    		"\t~-10.wcs_开服~n"
            "\t~-10.wcs_编译~n"
    		"\t~-10.wcs_删除日志~n"
    		"\t~-10.wcs_打包~n"
            " #~n"

            "\t~-10.w删除日志(all)~n"
            " #~n"

			"\t********************************************************~n"
			"\t** 请确保编辑器(notepad++)安装路径已经加入环境变量(path)~n"
			"\t********************************************************~n"

            "\t~-10.w代码检查(xref)~n"
            "\t~-10.w代码检查(dialyzer)~n"
            "~n"
			"\t~-10.w编辑_网络消息()~n"
            "\t~-10.w编辑_ErrorCode~n"
			"\t~-10.w编辑_Logdefine~n"
            "~n"

            "\t~-10.w生成代码_网络消息~n"
            "\t~-10.w生成代码_*_rw(根据rec_rw.hrl)~n"
            "\t~-10.w生成代码_error code~n"
            "\t~-10.w生成代码_log define~n"
            "\t~-10.w生成代码_数据库结构~n"
            "\t~-10.w备份数据库表结构~n"
            " #~n"
            
    		"\t~-10.wtcp测试~n"
            "\t~-10.wwindows控制台支持彩色显示(win10之前的版本)~n"
            "\t~-10.wwindows控制台支持彩色显示~n"
			"\t~-10.wwindows支持部署分布式服务器~n"
            "\t~-10.w退出~n"
            "~n##########################################################~n~n",
            [
                ?OP_START_GS, ?OP_COMPILE_GS, ?OP_DEL_LOG_GS, ?OP_PK_GS,

    			?OP_START_CS, ?OP_COMPILE_CS, ?OP_DEL_LOG_CS, ?OP_PK_CS,

                ?OP_DEL_LOG_ALL,

                ?OP_REF, ?OP_DIALYZER,
				
				?OP_EDIT_NETMSG, ?OP_EDIT_ERRORCODE,  ?OP_EDIT_LOGDEFINE,

                ?OP_GEN_NETMSG, ?OP_GEN_RW_CODE, ?OP_GEN_ERRORCODE, ?OP_GEN_LOGDEFINE, ?OP_EXPORT_DBSTRUCT, ?OP_BAK_DBSTRUCT,

                ?OP_TCP, ?OP_SET_TERMINAL_COLOR_BELOW_WIN10, ?OP_SET_TERMINAL_COLOR, ?OP_SET_WINDOW_RSH,
                ?OP_EXIT
            ]
        );
show_cmd(_) ->
    color:info_log(
            "~n##########################################################~n"

            "\t~-10.wgs_开服~n"
            "\t~-10.wgs_编译~n"
    		"\t~-10.wgs_删除日志~n"
            " #~n"

    		"\t~-10.wcs_开服~n"
            "\t~-10.wcs_编译~n"
    		"\t~-10.wcs_删除日志~n"
    		" #~n"

            "\t~-10.w删除日志(all)~n"
            " #~n"

            "\t~-10.wwindows控制台支持彩色显示(win10之前的版本)~n"
            "\t~-10.wwindows控制台支持彩色显示~n"
            "\t~-10.w退出~n"
            "~n##########################################################~n~n",
            [
                ?OP_START_GS, ?OP_COMPILE_GS, ?OP_DEL_LOG_GS,

    			?OP_START_CS, ?OP_COMPILE_CS, ?OP_DEL_LOG_CS,

                ?OP_DEL_LOG_ALL,


                ?OP_SET_TERMINAL_COLOR_BELOW_WIN10, ?OP_SET_TERMINAL_COLOR,
                ?OP_EXIT
            ]
        ).

menu(Mode) ->
    os:cmd("CHCP 65001"),
    {ok, Cwd} = file:get_cwd(),
    os:cmd(io_lib:format('title \"~ts\"',[Cwd])),

    show_cmd(Mode),

    InputNoStr = io:get_line("Please enter your choice:"),
    [T | _] = string:tokens(string_strip(InputNoStr, "\n"), " "),
    {IT, _} = string:to_integer(T),
    Ret = dispatchInput2(IT),
    wait(Ret),
    menu(Mode).

dispatchInput2(?OP_EXIT) ->
    erlang:halt();
dispatchInput2(?OP_DEL_LOG_ALL) ->
    erlang:spawn_monitor(fun() -> os:cmd(" cd ..\\ && del /q /s *.log && del /q /s *.err") end),
    color:warn_log("->delete *.log done!<-~n");
dispatchInput2(?OP_DEL_LOG_GS) ->
    erlang:spawn_monitor(fun() -> os:cmd(" cd ..\\app\\game && del /q /s *.log && del /q /s *.err") end);
dispatchInput2(?OP_DEL_LOG_CS) ->
    erlang:spawn_monitor(fun() -> os:cmd(" cd ..\\app\\center && del /q /s *.log && del /q /s *.err") end);
dispatchInput2(?OP_START_GS) ->
    erlang:spawn_monitor(fun() -> os:cmd("cd  ..\\app\\game\\scripts && start start.bat") end);
dispatchInput2(?OP_START_CS) ->
    erlang:spawn_monitor(fun() -> os:cmd("cd  ..\\app\\center\\scripts && start start.bat") end);
dispatchInput2(?OP_PK_GS) ->
    erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat escript.exe ps_gs.ers") end);
dispatchInput2(?OP_PK_CS) ->
    erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat escript.exe ps_cs.ers") end);
dispatchInput2(?OP_COMPILE_GS) ->
    erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat escript.exe fast_compile.ers 1") end);
dispatchInput2(?OP_COMPILE_CS) ->
    erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat escript.exe fast_compile.ers 2") end);
dispatchInput2(?OP_REF) ->
    erlang:spawn_monitor(fun() -> os:cmd("start xref.bat") end);
dispatchInput2(?OP_DIALYZER) ->
    erlang:spawn_monitor(fun() -> os:cmd("start dialyzer_tool.bat") end);
dispatchInput2(?OP_TCP) ->
     erlang:spawn_monitor(fun() -> os:cmd("start tcp_test.bat") end);
dispatchInput2(?OP_GEN_ERRORCODE) ->
    erlang:spawn_monitor(fun() -> os:cmd("start errorcode.bat") end);
 dispatchInput2(?OP_GEN_LOGDEFINE) ->
     erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat escript.exe log_define.ers") end);
dispatchInput2(?OP_GEN_NETMSG) ->
    erlang:spawn_monitor(fun() -> os:cmd("start netmsg.bat") end);
 dispatchInput2(?OP_GEN_RW_CODE) ->
     erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat rw_code.bat") end);
dispatchInput2(?OP_EXPORT_DBSTRUCT) ->
    erlang:spawn_monitor(fun() -> os:cmd("start export_db.bat") end);
dispatchInput2(?OP_BAK_DBSTRUCT) ->
    erlang:spawn_monitor(fun() -> os:cmd("start bak_db.bat") end);

%% 
dispatchInput2(?OP_EDIT_NETMSG) ->
    erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat notepad++.exe ../../Tools/NetProtor/msg/*.h") end);
dispatchInput2(?OP_EDIT_ERRORCODE) ->
    erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat notepad++.exe ../../Tools/ErrorCode/ErrorCode.h") end);	
dispatchInput2(?OP_EDIT_LOGDEFINE) ->
    erlang:spawn_monitor(fun() -> os:cmd("start subcall.bat notepad++.exe Logdefine.config") end);	

dispatchInput2(?OP_SET_TERMINAL_COLOR_BELOW_WIN10) ->
     erlang:spawn_monitor(fun() -> os:cmd("start /WAIT installColor.bat") end);
dispatchInput2(?OP_SET_TERMINAL_COLOR) ->
     erlang:spawn_monitor(fun() -> os:cmd("start /WAIT terminal_color.bat") end);	
dispatchInput2(?OP_SET_WINDOW_RSH) ->
     erlang:spawn_monitor(fun() -> os:cmd("start /WAIT win_rsh.bat") end);		 
dispatchInput2(_) ->
    color:error_log("\t!!! error retry !!!~n~n").

wait({Pid, _rcMRef}) when is_pid(Pid) ->
   %% receive
   %%     {'DOWN', _MRef, _process, _Pid, normal} ->
   %%         ok;
   %%     {'DOWN', _MRef, process, Pid, _Reason} ->
   %%         ok;
   %%     {Pid, _Result} ->
   %%         ok
   %% end,
   timer:sleep(1000),
    ok;
wait(_) -> skip.


string_strip(Str, []) ->
    Str;
string_strip(Str, [CH | L]) ->
    string_strip(string:strip(Str, both, CH), L).
