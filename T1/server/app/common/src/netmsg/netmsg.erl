%%% This File Is AUTO GENERATED, Don't Modify it MANUALLY!!!
-module(netmsg).

-compile(nowarn_unused_vars).

-include("netmsg.hrl").
-include("type.hrl").
-import(binary_lib, [
	read_int64/1,
	read_int32/1,
	read_int16/1,
	read_int8/1,
	read_uint64/1,
	read_uint32/1,
	read_uint16/1,
	read_uint8/1,
	read_bool/1,
	read_float/1,
	read_double/1,
	read_string/1,
	read_array/2,
	write_int64/1,
	write_int32/1,
	write_int16/1,
	write_int8/1,
	write_uint64/1,
	write_uint32/1,
	write_uint16/1,
	write_uint8/1,
	write_bool/1,
	write_float/1,
	write_double/1,
	write_string/1,
	write_array/2
]).

-export([decode/2, encode/1, name/1, cmd_list/0]).

%GENERATED from file:Date.h => GS2U_DateFindTreasure_Welcome_Sync
decode(?GS2U_DateFindTreasure_Welcome_Sync,Bin0) ->
	{ V_timeForBegin, Bin1 } = read_uint16( Bin0 ),
	{ V_timeForEnd, Bin2 } = read_uint16( Bin1 ),
	{ V_score, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_DateFindTreasure_Welcome_Sync {
		timeForBegin = V_timeForBegin,
		timeForEnd = V_timeForEnd,
		score = V_score
		},
	Bin3 };

%GENERATED from file:Date.h => GS2U_DateLink_BuffAddScore_Sync
decode(?GS2U_DateLink_BuffAddScore_Sync,Bin0) ->
	{ V_score, Bin1 } = read_uint16( Bin0 ),
	{ V_scoreAll, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_DateLink_BuffAddScore_Sync {
		score = V_score,
		scoreAll = V_scoreAll
		},
	Bin2 };

%GENERATED from file:Date.h => GS2U_DateLink_BuffAddTime_Sync
decode(?GS2U_DateLink_BuffAddTime_Sync,Bin0) ->
	{ V_timeAdd, Bin1 } = read_uint16( Bin0 ),
	{ V_timeRemainder, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_DateLink_BuffAddTime_Sync {
		timeAdd = V_timeAdd,
		timeRemainder = V_timeRemainder
		},
	Bin2 };

%GENERATED from file:Date.h => GS2U_DateLink_BuffBuff_Sync
decode(?GS2U_DateLink_BuffBuff_Sync,Bin0) ->
	{ V_buffID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_DateLink_BuffBuff_Sync {
		buffID = V_buffID
		},
	Bin1 };

%GENERATED from file:Date.h => GS2U_DateLink_BuffPower_Sync
decode(?GS2U_DateLink_BuffPower_Sync,Bin0) ->
	{ V_time, Bin1 } = read_uint8( Bin0 ),
	{ V_power, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_DateLink_BuffPower_Sync {
		time = V_time,
		power = V_power
		},
	Bin2 };

%GENERATED from file:Date.h => GS2U_DateLink_DeduffBuff_Sync
decode(?GS2U_DateLink_DeduffBuff_Sync,Bin0) ->
	{ V_buffID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_DateLink_DeduffBuff_Sync {
		buffID = V_buffID
		},
	Bin1 };

%GENERATED from file:Date.h => GS2U_DateLink_GameEnd_Sync
decode(?GS2U_DateLink_GameEnd_Sync,Bin0) ->
	{ V_reason, Bin1 } = read_uint8( Bin0 ),
	{ V_time, Bin2 } = read_uint8( Bin1 ),
	{ V_score, Bin3 } = read_uint16( Bin2 ),
	{ V_id, Bin4 } = read_uint8( Bin3 ),
	{ V_isAssist, Bin5 } = read_bool( Bin4 ),
	{ #pk_GS2U_DateLink_GameEnd_Sync {
		reason = V_reason,
		time = V_time,
		score = V_score,
		id = V_id,
		isAssist = V_isAssist
		},
	Bin5 };

%GENERATED from file:Date.h => GS2U_DateLink_Link_Sync
decode(?GS2U_DateLink_Link_Sync,Bin0) ->
	{ V_indexA, Bin1 } = read_uint8( Bin0 ),
	{ V_xA, Bin2 } = read_float( Bin1 ),
	{ V_yA, Bin3 } = read_float( Bin2 ),
	{ V_indexB, Bin4 } = read_uint8( Bin3 ),
	{ V_xB, Bin5 } = read_float( Bin4 ),
	{ V_yB, Bin6 } = read_float( Bin5 ),
	{ V_combo, Bin7 } = read_uint8( Bin6 ),
	{ V_comboMax, Bin8 } = read_uint8( Bin7 ),
	{ V_score, Bin9 } = read_uint16( Bin8 ),
	{ V_scoreAll, Bin10 } = read_uint16( Bin9 ),
	{ V_listGemMatrix, Bin11 } = read_array(Bin10, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_DateLink_Link_Sync {
		indexA = V_indexA,
		xA = V_xA,
		yA = V_yA,
		indexB = V_indexB,
		xB = V_xB,
		yB = V_yB,
		combo = V_combo,
		comboMax = V_comboMax,
		score = V_score,
		scoreAll = V_scoreAll,
		listGemMatrix = V_listGemMatrix
		},
	Bin11 };

%GENERATED from file:Date.h => GS2U_DateLink_MainTime_Sync
decode(?GS2U_DateLink_MainTime_Sync,Bin0) ->
	{ V_timeRemainder, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_DateLink_MainTime_Sync {
		timeRemainder = V_timeRemainder
		},
	Bin1 };

%GENERATED from file:Date.h => GS2U_DateLink_ResetGem_Sync
decode(?GS2U_DateLink_ResetGem_Sync,Bin0) ->
	{ V_listGem, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ V_resetCount, Bin2 } = read_uint8( Bin1 ),
	{ V_resetCD, Bin3 } = read_uint8( Bin2 ),
	{ V_listGemMatrix, Bin4 } = read_array(Bin3, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_DateLink_ResetGem_Sync {
		listGem = V_listGem,
		resetCount = V_resetCount,
		resetCD = V_resetCD,
		listGemMatrix = V_listGemMatrix
		},
	Bin4 };

%GENERATED from file:Date.h => GS2U_DateLink_Select_Ack
decode(?GS2U_DateLink_Select_Ack,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_index, Bin2 } = read_uint8( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ V_isSelect, Bin5 } = read_bool( Bin4 ),
	{ V_listGemMatrix, Bin6 } = read_array(Bin5, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_DateLink_Select_Ack {
		roleID = V_roleID,
		index = V_index,
		x = V_x,
		y = V_y,
		isSelect = V_isSelect,
		listGemMatrix = V_listGemMatrix
		},
	Bin6 };

%GENERATED from file:Date.h => GS2U_DateLink_Welcome_Sync
decode(?GS2U_DateLink_Welcome_Sync,Bin0) ->
	{ V_timeForBegin, Bin1 } = read_uint16( Bin0 ),
	{ V_timeForEnd, Bin2 } = read_uint16( Bin1 ),
	{ V_timePower, Bin3 } = read_uint8( Bin2 ),
	{ V_listGem, Bin4 } = read_array(Bin3, fun(X) -> read_uint16( X ) end),
	{ V_score, Bin5 } = read_uint16( Bin4 ),
	{ V_indexA, Bin6 } = read_uint8( Bin5 ),
	{ V_indexB, Bin7 } = read_uint8( Bin6 ),
	{ V_power, Bin8 } = read_uint8( Bin7 ),
	{ V_resetCount, Bin9 } = read_uint8( Bin8 ),
	{ V_listGemMatrix, Bin10 } = read_array(Bin9, fun(X) -> read_uint8( X ) end),
	{ V_resetCD, Bin11 } = read_uint8( Bin10 ),
	{ #pk_GS2U_DateLink_Welcome_Sync {
		timeForBegin = V_timeForBegin,
		timeForEnd = V_timeForEnd,
		timePower = V_timePower,
		listGem = V_listGem,
		score = V_score,
		indexA = V_indexA,
		indexB = V_indexB,
		power = V_power,
		resetCount = V_resetCount,
		listGemMatrix = V_listGemMatrix,
		resetCD = V_resetCD
		},
	Bin11 };

%GENERATED from file:Date.h => GS2U_DatePoolShooting_Welcome_Sync
decode(?GS2U_DatePoolShooting_Welcome_Sync,Bin0) ->
	{ V_timeForBegin, Bin1 } = read_uint16( Bin0 ),
	{ V_timeForEnd, Bin2 } = read_uint16( Bin1 ),
	{ V_score, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_DatePoolShooting_Welcome_Sync {
		timeForBegin = V_timeForBegin,
		timeForEnd = V_timeForEnd,
		score = V_score
		},
	Bin3 };

%GENERATED from file:Date.h => GS2U_DatePushBox_GreateNPC_Sync
decode(?GS2U_DatePushBox_GreateNPC_Sync,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_z, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_DatePushBox_GreateNPC_Sync {
		code = V_code,
		x = V_x,
		z = V_z
		},
	Bin3 };

%GENERATED from file:Date.h => GS2U_DatePushBox_Succeed_Sync
decode(?GS2U_DatePushBox_Succeed_Sync,Bin0) ->
	{ V_isSucceed, Bin1 } = read_bool( Bin0 ),
	{ V_isDelete, Bin2 } = read_bool( Bin1 ),
	{ V_code, Bin3 } = read_uint64( Bin2 ),
	{ V_x, Bin4 } = read_float( Bin3 ),
	{ V_z, Bin5 } = read_float( Bin4 ),
	{ V_score, Bin6 } = read_uint16( Bin5 ),
	{ #pk_GS2U_DatePushBox_Succeed_Sync {
		isSucceed = V_isSucceed,
		isDelete = V_isDelete,
		code = V_code,
		x = V_x,
		z = V_z,
		score = V_score
		},
	Bin6 };

%GENERATED from file:Date.h => GS2U_DatePushBox_Welcome_Sync
decode(?GS2U_DatePushBox_Welcome_Sync,Bin0) ->
	{ V_timeForBegin, Bin1 } = read_uint16( Bin0 ),
	{ V_timeForEnd, Bin2 } = read_uint16( Bin1 ),
	{ V_score, Bin3 } = read_uint16( Bin2 ),
	{ V_listGemMatrix, Bin4 } = read_array(Bin3, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_DatePushBox_Welcome_Sync {
		timeForBegin = V_timeForBegin,
		timeForEnd = V_timeForEnd,
		score = V_score,
		listGemMatrix = V_listGemMatrix
		},
	Bin4 };

%GENERATED from file:Date.h => GS2U_Date_FindTreasure_Sync
decode(?GS2U_Date_FindTreasure_Sync,Bin0) ->
	{ V_score, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_Date_FindTreasure_Sync {
		score = V_score
		},
	Bin1 };

%GENERATED from file:Date.h => GS2U_Date_PlayerAnimation_Sync
decode(?GS2U_Date_PlayerAnimation_Sync,Bin0) ->
	{ #pk_GS2U_Date_PlayerAnimation_Sync {

		},
	Bin0 };

%GENERATED from file:Date.h => GS2U_Date_RefreshSocre_Sync
decode(?GS2U_Date_RefreshSocre_Sync,Bin0) ->
	{ V_score, Bin1 } = read_uint16( Bin0 ),
	{ V_hitA, Bin2 } = read_bool( Bin1 ),
	{ V_hitB, Bin3 } = read_bool( Bin2 ),
	{ #pk_GS2U_Date_RefreshSocre_Sync {
		score = V_score,
		hitA = V_hitA,
		hitB = V_hitB
		},
	Bin3 };

%GENERATED from file:Date.h => GS2U_Date_ResetBox_Sync
decode(?GS2U_Date_ResetBox_Sync,Bin0) ->
	{ V_refreshNum, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_Date_ResetBox_Sync {
		refreshNum = V_refreshNum
		},
	Bin1 };

%GENERATED from file:Date.h => GS2U_Date_ResetFindTreasure_Sync
decode(?GS2U_Date_ResetFindTreasure_Sync,Bin0) ->
	{ #pk_GS2U_Date_ResetFindTreasure_Sync {

		},
	Bin0 };

%GENERATED from file:Date.h => GS2U_Date_ResetPoolShooting_Sync
decode(?GS2U_Date_ResetPoolShooting_Sync,Bin0) ->
	{ V_listPoolShootingPosIndex, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_Date_ResetPoolShooting_Sync {
		listPoolShootingPosIndex = V_listPoolShootingPosIndex
		},
	Bin1 };

%GENERATED from file:Date.h => GS2U_MonsterMoveSync
decode(?GS2U_MonsterMoveSync,Bin0) ->
	{ V_monsterPosList, Bin1 } = read_array(Bin0, fun(X) -> decode_DateMonsterPos( X ) end),
	{ #pk_GS2U_MonsterMoveSync {
		monsterPosList = V_monsterPosList
		},
	Bin1 };

%GENERATED from file:Date.h => U2GS_DateEnter_Request
decode(?U2GS_DateEnter_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_DateEnter_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:Date.h => U2GS_DateLink_Giveup_Requset
decode(?U2GS_DateLink_Giveup_Requset,Bin0) ->
	{ #pk_U2GS_DateLink_Giveup_Requset {

		},
	Bin0 };

%GENERATED from file:Date.h => U2GS_DateLink_ResetGem_Request
decode(?U2GS_DateLink_ResetGem_Request,Bin0) ->
	{ #pk_U2GS_DateLink_ResetGem_Request {

		},
	Bin0 };

%GENERATED from file:Date.h => U2GS_DateLink_Select_Request
decode(?U2GS_DateLink_Select_Request,Bin0) ->
	{ V_x, Bin1 } = read_float( Bin0 ),
	{ V_y, Bin2 } = read_float( Bin1 ),
	{ V_index, Bin3 } = read_uint8( Bin2 ),
	{ V_isSelect, Bin4 } = read_bool( Bin3 ),
	{ #pk_U2GS_DateLink_Select_Request {
		x = V_x,
		y = V_y,
		index = V_index,
		isSelect = V_isSelect
		},
	Bin4 };

%GENERATED from file:Date.h => U2GS_DatePushBox_Request
decode(?U2GS_DatePushBox_Request,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_z, Bin3 } = read_float( Bin2 ),
	{ V_isDelete, Bin4 } = read_bool( Bin3 ),
	{ #pk_U2GS_DatePushBox_Request {
		code = V_code,
		x = V_x,
		z = V_z,
		isDelete = V_isDelete
		},
	Bin4 };

%GENERATED from file:Date.h => U2GS_DateShooting_Over
decode(?U2GS_DateShooting_Over,Bin0) ->
	{ #pk_U2GS_DateShooting_Over {

		},
	Bin0 };

%GENERATED from file:LS2User.h => GS2U_ChangeLineResponse
decode(?GS2U_ChangeLineResponse,Bin0) ->
	{ V_gameServers, Bin1 } = read_array(Bin0, fun(X) -> decode_GameServerInfo( X ) end),
	{ V_identity, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_ChangeLineResponse {
		gameServers = V_gameServers,
		identity = V_identity
		},
	Bin2 };

%GENERATED from file:LS2User.h => LS2U_GameLineServerList
decode(?LS2U_GameLineServerList,Bin0) ->
	{ V_gameServers, Bin1 } = read_array(Bin0, fun(X) -> decode_GameServerInfo( X ) end),
	{ #pk_LS2U_GameLineServerList {
		gameServers = V_gameServers
		},
	Bin1 };

%GENERATED from file:LS2User.h => LS2U_LoginQue
decode(?LS2U_LoginQue,Bin0) ->
	{ V_currentNumber, Bin1 } = read_uint64( Bin0 ),
	{ #pk_LS2U_LoginQue {
		currentNumber = V_currentNumber
		},
	Bin1 };

%GENERATED from file:LS2User.h => LS2U_LoginResult
decode(?LS2U_LoginResult,Bin0) ->
	{ V_result, Bin1 } = read_int8( Bin0 ),
	{ V_accountID, Bin2 } = read_uint64( Bin1 ),
	{ V_identity, Bin3 } = read_string( Bin2 ),
	{ V_msg, Bin4 } = read_string( Bin3 ),
	{ #pk_LS2U_LoginResult {
		result = V_result,
		accountID = V_accountID,
		identity = V_identity,
		msg = V_msg
		},
	Bin4 };

%GENERATED from file:LS2User.h => LS2Web_CryptoAck
decode(?LS2Web_CryptoAck,Bin0) ->
	{ V_bodyJsonStr, Bin1 } = read_string( Bin0 ),
	{ #pk_LS2Web_CryptoAck {
		bodyJsonStr = V_bodyJsonStr
		},
	Bin1 };

%GENERATED from file:LS2User.h => LS2Web_NormalAck
decode(?LS2Web_NormalAck,Bin0) ->
	{ V_bodyJsonStr, Bin1 } = read_string( Bin0 ),
	{ #pk_LS2Web_NormalAck {
		bodyJsonStr = V_bodyJsonStr
		},
	Bin1 };

%GENERATED from file:LS2User.h => U2LS_Login_Normal
decode(?U2LS_Login_Normal,Bin0) ->
	{ V_platformAccount, Bin1 } = read_string( Bin0 ),
	{ V_platformName, Bin2 } = read_string( Bin1 ),
	{ V_platformNickName, Bin3 } = read_string( Bin2 ),
	{ V_time, Bin4 } = read_int64( Bin3 ),
	{ V_sign, Bin5 } = read_string( Bin4 ),
	{ V_deviceId, Bin6 } = read_string( Bin5 ),
	{ V_imei, Bin7 } = read_string( Bin6 ),
	{ V_idfa, Bin8 } = read_string( Bin7 ),
	{ V_mac, Bin9 } = read_string( Bin8 ),
	{ V_extParam, Bin10 } = read_string( Bin9 ),
	{ V_versionRes, Bin11 } = read_int32( Bin10 ),
	{ V_versionExe, Bin12 } = read_int32( Bin11 ),
	{ V_versionGame, Bin13 } = read_int32( Bin12 ),
	{ V_versionPro, Bin14 } = read_int32( Bin13 ),
	{ V_versionPackageHash, Bin15 } = read_int32( Bin14 ),
	{ #pk_U2LS_Login_Normal {
		platformAccount = V_platformAccount,
		platformName = V_platformName,
		platformNickName = V_platformNickName,
		time = V_time,
		sign = V_sign,
		deviceId = V_deviceId,
		imei = V_imei,
		idfa = V_idfa,
		mac = V_mac,
		extParam = V_extParam,
		versionRes = V_versionRes,
		versionExe = V_versionExe,
		versionGame = V_versionGame,
		versionPro = V_versionPro,
		versionPackageHash = V_versionPackageHash
		},
	Bin15 };

%GENERATED from file:LS2User.h => U2LS_RequestGSLine
decode(?U2LS_RequestGSLine,Bin0) ->
	{ #pk_U2LS_RequestGSLine {

		},
	Bin0 };

%GENERATED from file:LS2User.h => Web2LS_Crypto
decode(?Web2LS_Crypto,Bin0) ->
	{ V_bodyJsonStr, Bin1 } = read_string( Bin0 ),
	{ #pk_Web2LS_Crypto {
		bodyJsonStr = V_bodyJsonStr
		},
	Bin1 };

%GENERATED from file:LS2User.h => Web2LS_Normal
decode(?Web2LS_Normal,Bin0) ->
	{ V_bodyJsonStr, Bin1 } = read_string( Bin0 ),
	{ #pk_Web2LS_Normal {
		bodyJsonStr = V_bodyJsonStr
		},
	Bin1 };

%GENERATED from file:achieve.h => GS2U_AchieveSchedule
decode(?GS2U_AchieveSchedule,Bin0) ->
	{ V_achieveID, Bin1 } = read_uint16( Bin0 ),
	{ V_scheduleRewardID, Bin2 } = read_uint8( Bin1 ),
	{ V_scheduleCompleteNum, Bin3 } = read_uint32( Bin2 ),
	{ V_scheduleCompleteID, Bin4 } = read_uint8( Bin3 ),
	{ #pk_GS2U_AchieveSchedule {
		achieveID = V_achieveID,
		scheduleRewardID = V_scheduleRewardID,
		scheduleCompleteNum = V_scheduleCompleteNum,
		scheduleCompleteID = V_scheduleCompleteID
		},
	Bin4 };

%GENERATED from file:achieve.h => GS2U_AchieveScheduleList
decode(?GS2U_AchieveScheduleList,Bin0) ->
	{ V_scheduleList, Bin1 } = read_array(Bin0, fun(X) -> decode_AchieveSchedule( X ) end),
	{ #pk_GS2U_AchieveScheduleList {
		scheduleList = V_scheduleList
		},
	Bin1 };

%GENERATED from file:achieve.h => GS2U_AddTitle
decode(?GS2U_AddTitle,Bin0) ->
	{ V_titleID, Bin1 } = read_uint16( Bin0 ),
	{ V_endTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_AddTitle {
		titleID = V_titleID,
		endTime = V_endTime
		},
	Bin2 };

%GENERATED from file:achieve.h => GS2U_BadgeInfo
decode(?GS2U_BadgeInfo,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_BadgeInfo {
		mapID = V_mapID,
		itemID = V_itemID
		},
	Bin2 };

%GENERATED from file:achieve.h => GS2U_BadgeInfoList
decode(?GS2U_BadgeInfoList,Bin0) ->
	{ V_badgeInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_BadgeInfo( X ) end),
	{ #pk_GS2U_BadgeInfoList {
		badgeInfoList = V_badgeInfoList
		},
	Bin1 };

%GENERATED from file:achieve.h => GS2U_DelTitle
decode(?GS2U_DelTitle,Bin0) ->
	{ V_titleID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_DelTitle {
		titleID = V_titleID
		},
	Bin1 };

%GENERATED from file:achieve.h => GS2U_InitDailyActiveInfo
decode(?GS2U_InitDailyActiveInfo,Bin0) ->
	{ V_dailyActiveInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_DailyActiveInfo( X ) end),
	{ V_receivedAwardList, Bin2 } = read_array(Bin1, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_InitDailyActiveInfo {
		dailyActiveInfoList = V_dailyActiveInfoList,
		receivedAwardList = V_receivedAwardList
		},
	Bin2 };

%GENERATED from file:achieve.h => GS2U_OwnTitleList
decode(?GS2U_OwnTitleList,Bin0) ->
	{ V_titleInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_TitleInfo( X ) end),
	{ #pk_GS2U_OwnTitleList {
		titleInfoList = V_titleInfoList
		},
	Bin1 };

%GENERATED from file:achieve.h => GS2U_ReceiveDailyActiveAwardResult
decode(?GS2U_ReceiveDailyActiveAwardResult,Bin0) ->
	{ V_dailyActivityValue, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_ReceiveDailyActiveAwardResult {
		dailyActivityValue = V_dailyActivityValue
		},
	Bin1 };

%GENERATED from file:achieve.h => GS2U_UpdateDailyActiveInfo
decode(?GS2U_UpdateDailyActiveInfo,Bin0) ->
	{ V_dailyActiveInfo, Bin1 } = decode_DailyActiveInfo( Bin0 ),
	{ #pk_GS2U_UpdateDailyActiveInfo {
		dailyActiveInfo = V_dailyActiveInfo
		},
	Bin1 };

%GENERATED from file:achieve.h => U2GS_ChangeCustomTitleText
decode(?U2GS_ChangeCustomTitleText,Bin0) ->
	{ V_titleID, Bin1 } = read_uint16( Bin0 ),
	{ V_type, Bin2 } = read_uint16( Bin1 ),
	{ V_text, Bin3 } = read_string( Bin2 ),
	{ #pk_U2GS_ChangeCustomTitleText {
		titleID = V_titleID,
		type = V_type,
		text = V_text
		},
	Bin3 };

%GENERATED from file:achieve.h => U2GS_ChangeLimiteTitleState
decode(?U2GS_ChangeLimiteTitleState,Bin0) ->
	{ V_titleID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ChangeLimiteTitleState {
		titleID = V_titleID
		},
	Bin1 };

%GENERATED from file:achieve.h => U2GS_ChangeTitleState
decode(?U2GS_ChangeTitleState,Bin0) ->
	{ V_titleSlot1, Bin1 } = read_uint16( Bin0 ),
	{ V_titleSlot2, Bin2 } = read_uint16( Bin1 ),
	{ V_titleSlot3, Bin3 } = read_uint16( Bin2 ),
	{ V_colorSlot, Bin4 } = read_uint16( Bin3 ),
	{ V_floorSlot, Bin5 } = read_uint16( Bin4 ),
	{ #pk_U2GS_ChangeTitleState {
		titleSlot1 = V_titleSlot1,
		titleSlot2 = V_titleSlot2,
		titleSlot3 = V_titleSlot3,
		colorSlot = V_colorSlot,
		floorSlot = V_floorSlot
		},
	Bin5 };

%GENERATED from file:achieve.h => U2GS_ReceiveAchieveValue
decode(?U2GS_ReceiveAchieveValue,Bin0) ->
	{ V_achieveID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ReceiveAchieveValue {
		achieveID = V_achieveID
		},
	Bin1 };

%GENERATED from file:achieve.h => U2GS_ReceiveDailyActiveAward
decode(?U2GS_ReceiveDailyActiveAward,Bin0) ->
	{ V_dailyActivityValue, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ReceiveDailyActiveAward {
		dailyActivityValue = V_dailyActivityValue
		},
	Bin1 };

%GENERATED from file:activity.h => ArenaTeamMemberPrepare
decode(?ArenaTeamMemberPrepare,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_isPrepare, Bin2 } = read_bool( Bin1 ),
	{ #pk_ArenaTeamMemberPrepare {
		id = V_id,
		isPrepare = V_isPrepare
		},
	Bin2 };

%GENERATED from file:activity.h => CrosArenaMatch
decode(?CrosArenaMatch,Bin0) ->
	{ V_isMatch, Bin1 } = read_bool( Bin0 ),
	{ #pk_CrosArenaMatch {
		isMatch = V_isMatch
		},
	Bin1 };

%GENERATED from file:activity.h => DeleteArenaTeamMember
decode(?DeleteArenaTeamMember,Bin0) ->
	{ V_isMyself, Bin1 } = read_bool( Bin0 ),
	{ V_id, Bin2 } = read_uint64( Bin1 ),
	{ #pk_DeleteArenaTeamMember {
		isMyself = V_isMyself,
		id = V_id
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_ACCityMonsterSurplusTime
decode(?GS2U_ACCityMonsterSurplusTime,Bin0) ->
	{ V_surplusTime, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_ACCityMonsterSurplusTime {
		surplusTime = V_surplusTime
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_ActionList
decode(?GS2U_ActionList,Bin0) ->
	{ V_correctID, Bin1 } = read_uint32( Bin0 ),
	{ V_danceIDs, Bin2 } = read_array(Bin1, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_ActionList {
		correctID = V_correctID,
		danceIDs = V_danceIDs
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_ActivityEnd
decode(?GS2U_ActivityEnd,Bin0) ->
	{ #pk_GS2U_ActivityEnd {

		},
	Bin0 };

%GENERATED from file:activity.h => GS2U_ActivityState
decode(?GS2U_ActivityState,Bin0) ->
	{ V_activityID, Bin1 } = read_uint16( Bin0 ),
	{ V_mapID, Bin2 } = read_uint32( Bin1 ),
	{ V_phase, Bin3 } = read_int16( Bin2 ),
	{ #pk_GS2U_ActivityState {
		activityID = V_activityID,
		mapID = V_mapID,
		phase = V_phase
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_ActivityStateInfo
decode(?GS2U_ActivityStateInfo,Bin0) ->
	{ V_infos, Bin1 } = decode_ActivityState( Bin0 ),
	{ #pk_GS2U_ActivityStateInfo {
		infos = V_infos
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_ActivityStateInit
decode(?GS2U_ActivityStateInit,Bin0) ->
	{ V_infos, Bin1 } = read_array(Bin0, fun(X) -> decode_ActivityState( X ) end),
	{ #pk_GS2U_ActivityStateInit {
		infos = V_infos
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_AddArenaTeamMemberRequest
decode(?GS2U_AddArenaTeamMemberRequest,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_AddArenaTeamMemberRequest {
		roleID = V_roleID,
		name = V_name
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_AllAnswerQuestion
decode(?GS2U_AllAnswerQuestion,Bin0) ->
	{ V_questionID, Bin1 } = read_uint32( Bin0 ),
	{ V_startTime, Bin2 } = read_uint64( Bin1 ),
	{ V_currentAnswer, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_AllAnswerQuestion {
		questionID = V_questionID,
		startTime = V_startTime,
		currentAnswer = V_currentAnswer
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_AngelInvestmentList
decode(?GS2U_AngelInvestmentList,Bin0) ->
	{ V_lists, Bin1 } = read_array(Bin0, fun(X) -> decode_AngelInvestmentData( X ) end),
	{ #pk_GS2U_AngelInvestmentList {
		lists = V_lists
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_AnswerFirstAndLuckyPlayer
decode(?GS2U_AnswerFirstAndLuckyPlayer,Bin0) ->
	{ V_playerName, Bin1 } = read_array(Bin0, fun(X) -> read_string( X ) end),
	{ #pk_GS2U_AnswerFirstAndLuckyPlayer {
		playerName = V_playerName
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_AnswerQuestion
decode(?GS2U_AnswerQuestion,Bin0) ->
	{ V_startTime, Bin1 } = read_uint64( Bin0 ),
	{ V_answerNum, Bin2 } = read_uint8( Bin1 ),
	{ V_questionList, Bin3 } = read_array(Bin2, fun(X) -> decode_Question( X ) end),
	{ #pk_GS2U_AnswerQuestion {
		startTime = V_startTime,
		answerNum = V_answerNum,
		questionList = V_questionList
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_AnswerRank
decode(?GS2U_AnswerRank,Bin0) ->
	{ V_data, Bin1 } = read_array(Bin0, fun(X) -> decode_ActivityAnswerRankData( X ) end),
	{ V_isover, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_AnswerRank {
		data = V_data,
		isover = V_isover
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_ApplyAnswerResult
decode(?GS2U_ApplyAnswerResult,Bin0) ->
	{ V_result, Bin1 } = read_uint8( Bin0 ),
	{ V_endTime, Bin2 } = read_uint64( Bin1 ),
	{ V_roomID, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_ApplyAnswerResult {
		result = V_result,
		endTime = V_endTime,
		roomID = V_roomID
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_ArenaBattleList
decode(?GS2U_ArenaBattleList,Bin0) ->
	{ V_res, Bin1 } = read_uint8( Bin0 ),
	{ V_bList, Bin2 } = read_array(Bin1, fun(X) -> decode_ArenaBattle( X ) end),
	{ #pk_GS2U_ArenaBattleList {
		res = V_res,
		bList = V_bList
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_ArenaRoleDead
decode(?GS2U_ArenaRoleDead,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_ArenaRoleDead {
		id = V_id
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_ArenaRoleList
decode(?GS2U_ArenaRoleList,Bin0) ->
	{ V_time, Bin1 } = read_uint16( Bin0 ),
	{ V_roleList, Bin2 } = read_array(Bin1, fun(X) -> decode_ArenaRole( X ) end),
	{ #pk_GS2U_ArenaRoleList {
		time = V_time,
		roleList = V_roleList
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_AttackerDefenderQuotaNumberAck
decode(?GS2U_AttackerDefenderQuotaNumberAck,Bin0) ->
	{ V_activityID, Bin1 } = read_uint16( Bin0 ),
	{ V_mapID, Bin2 } = read_uint32( Bin1 ),
	{ V_acctackerQuotaNum, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_AttackerDefenderQuotaNumberAck {
		activityID = V_activityID,
		mapID = V_mapID,
		acctackerQuotaNum = V_acctackerQuotaNum
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_BreakDance
decode(?GS2U_BreakDance,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_BreakDance {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_ChangeGuardianDeclaration
decode(?GS2U_ChangeGuardianDeclaration,Bin0) ->
	{ V_isChange, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_ChangeGuardianDeclaration {
		isChange = V_isChange
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_CollectionWords_Sync
decode(?GS2U_CollectionWords_Sync,Bin0) ->
	{ V_state, Bin1 } = decode_collectionWords_State( Bin0 ),
	{ V_listRewardCfg, Bin2 } = read_array(Bin1, fun(X) -> decode_collectionWords_RewardCfg( X ) end),
	{ #pk_GS2U_CollectionWords_Sync {
		state = V_state,
		listRewardCfg = V_listRewardCfg
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_CrosArenaBattleHighRanks
decode(?GS2U_CrosArenaBattleHighRanks,Bin0) ->
	{ V_ranks, Bin1 } = read_array(Bin0, fun(X) -> decode_CrosArenaBattleHighRank( X ) end),
	{ #pk_GS2U_CrosArenaBattleHighRanks {
		ranks = V_ranks
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_CrosArenaBattleRanks
decode(?GS2U_CrosArenaBattleRanks,Bin0) ->
	{ V_ranks, Bin1 } = read_array(Bin0, fun(X) -> decode_CrosArenaBattleRank( X ) end),
	{ #pk_GS2U_CrosArenaBattleRanks {
		ranks = V_ranks
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_CrosBattleExploits
decode(?GS2U_CrosBattleExploits,Bin0) ->
	{ V_ranks, Bin1 } = read_array(Bin0, fun(X) -> decode_CrosBattleExploit( X ) end),
	{ #pk_GS2U_CrosBattleExploits {
		ranks = V_ranks
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_CurEscortType
decode(?GS2U_CurEscortType,Bin0) ->
	{ V_escortType, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_CurEscortType {
		escortType = V_escortType
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_DarknessCamp
decode(?GS2U_DarknessCamp,Bin0) ->
	{ V_camp, Bin1 } = read_uint8( Bin0 ),
	{ V_integral, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_DarknessCamp {
		camp = V_camp,
		integral = V_integral
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_DarknessInfo
decode(?GS2U_DarknessInfo,Bin0) ->
	{ V_state, Bin1 } = decode_DarknessState( Bin0 ),
	{ V_buyMoneyType, Bin2 } = read_uint8( Bin1 ),
	{ V_buyMoney, Bin3 } = read_int32( Bin2 ),
	{ #pk_GS2U_DarknessInfo {
		state = V_state,
		buyMoneyType = V_buyMoneyType,
		buyMoney = V_buyMoney
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_DarknessKillOrBeKill
decode(?GS2U_DarknessKillOrBeKill,Bin0) ->
	{ V_targetName, Bin1 } = read_string( Bin0 ),
	{ V_isSuccess, Bin2 } = read_bool( Bin1 ),
	{ V_changePebble, Bin3 } = read_int32( Bin2 ),
	{ #pk_GS2U_DarknessKillOrBeKill {
		targetName = V_targetName,
		isSuccess = V_isSuccess,
		changePebble = V_changePebble
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_DarknessQuenenState
decode(?GS2U_DarknessQuenenState,Bin0) ->
	{ V_entrance, Bin1 } = read_uint8( Bin0 ),
	{ V_floor, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_DarknessQuenenState {
		entrance = V_entrance,
		floor = V_floor
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_DarknessRank
decode(?GS2U_DarknessRank,Bin0) ->
	{ V_camp1, Bin1 } = read_array(Bin0, fun(X) -> decode_DarknessPlayerRank( X ) end),
	{ V_camp2, Bin2 } = read_array(Bin1, fun(X) -> decode_DarknessPlayerRank( X ) end),
	{ #pk_GS2U_DarknessRank {
		camp1 = V_camp1,
		camp2 = V_camp2
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_DarknessState
decode(?GS2U_DarknessState,Bin0) ->
	{ V_state, Bin1 } = decode_DarknessState( Bin0 ),
	{ #pk_GS2U_DarknessState {
		state = V_state
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_DeadLineGiftList
decode(?GS2U_DeadLineGiftList,Bin0) ->
	{ V_code, Bin1 } = read_uint16( Bin0 ),
	{ V_msg, Bin2 } = read_array(Bin1, fun(X) -> decode_DeadlineGift( X ) end),
	{ #pk_GS2U_DeadLineGiftList {
		code = V_code,
		msg = V_msg
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_DestinyStar
decode(?GS2U_DestinyStar,Bin0) ->
	{ V_stars, Bin1 } = read_array(Bin0, fun(X) -> decode_LotteryItem( X ) end),
	{ #pk_GS2U_DestinyStar {
		stars = V_stars
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_EnterDarkness
decode(?GS2U_EnterDarkness,Bin0) ->
	{ V_entrances, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_EnterDarkness {
		entrances = V_entrances
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_EscortResult
decode(?GS2U_EscortResult,Bin0) ->
	{ V_escortType, Bin1 } = read_uint16( Bin0 ),
	{ V_endReason, Bin2 } = read_uint8( Bin1 ),
	{ V_isSuccess, Bin3 } = read_bool( Bin2 ),
	{ V_rewards, Bin4 } = read_array(Bin3, fun(X) -> decode_EscortResultReward( X ) end),
	{ V_plunder, Bin5 } = read_array(Bin4, fun(X) -> decode_EscortPlunderMoney( X ) end),
	{ #pk_GS2U_EscortResult {
		escortType = V_escortType,
		endReason = V_endReason,
		isSuccess = V_isSuccess,
		rewards = V_rewards,
		plunder = V_plunder
		},
	Bin5 };

%GENERATED from file:activity.h => GS2U_GBList
decode(?GS2U_GBList,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_lineList, Bin2 } = read_array(Bin1, fun(X) -> decode_GBMapLineInfo( X ) end),
	{ V_info, Bin3 } = decode_PlayerGBInfo( Bin2 ),
	{ #pk_GS2U_GBList {
		mapID = V_mapID,
		lineList = V_lineList,
		info = V_info
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_GetChargeOrUseGiftAck
decode(?GS2U_GetChargeOrUseGiftAck,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_ruleID, Bin2 } = read_uint8( Bin1 ),
	{ V_success, Bin3 } = read_bool( Bin2 ),
	{ #pk_GS2U_GetChargeOrUseGiftAck {
		type = V_type,
		ruleID = V_ruleID,
		success = V_success
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_Goblin_Open_State
decode(?GS2U_Goblin_Open_State,Bin0) ->
	{ V_isOpen, Bin1 } = read_bool( Bin0 ),
	{ V_mapID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_Goblin_Open_State {
		isOpen = V_isOpen,
		mapID = V_mapID
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_HDBattleCD
decode(?GS2U_HDBattleCD,Bin0) ->
	{ V_time, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_HDBattleCD {
		time = V_time
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_HDBattleExploits
decode(?GS2U_HDBattleExploits,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_exploits, Bin2 } = read_array(Bin1, fun(X) -> decode_HDBattleExploit( X ) end),
	{ #pk_GS2U_HDBattleExploits {
		type = V_type,
		exploits = V_exploits
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_HDBattleOpenSurplusTime
decode(?GS2U_HDBattleOpenSurplusTime,Bin0) ->
	{ V_surplusTime, Bin1 } = read_int16( Bin0 ),
	{ #pk_GS2U_HDBattleOpenSurplusTime {
		surplusTime = V_surplusTime
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_HDBattlePhase
decode(?GS2U_HDBattlePhase,Bin0) ->
	{ V_phase, Bin1 } = read_uint8( Bin0 ),
	{ V_param1, Bin2 } = read_uint16( Bin1 ),
	{ V_param2, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_HDBattlePhase {
		phase = V_phase,
		param1 = V_param1,
		param2 = V_param2
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_HDGatherSuccess
decode(?GS2U_HDGatherSuccess,Bin0) ->
	{ V_gatherID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_HDGatherSuccess {
		gatherID = V_gatherID
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_IconLight
decode(?GS2U_IconLight,Bin0) ->
	{ V_id, Bin1 } = read_uint8( Bin0 ),
	{ V_light, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_IconLight {
		id = V_id,
		light = V_light
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_InitWildBossInfo
decode(?GS2U_InitWildBossInfo,Bin0) ->
	{ V_infos, Bin1 } = read_array(Bin0, fun(X) -> decode_WildBossInfo( X ) end),
	{ #pk_GS2U_InitWildBossInfo {
		infos = V_infos
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_JoinHDBattle
decode(?GS2U_JoinHDBattle,Bin0) ->
	{ #pk_GS2U_JoinHDBattle {

		},
	Bin0 };

%GENERATED from file:activity.h => GS2U_KillMonsterReward
decode(?GS2U_KillMonsterReward,Bin0) ->
	{ V_rewardItemList, Bin1 } = read_array(Bin0, fun(X) -> decode_RewardItem( X ) end),
	{ #pk_GS2U_KillMonsterReward {
		rewardItemList = V_rewardItemList
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_KillPlayerNumber
decode(?GS2U_KillPlayerNumber,Bin0) ->
	{ V_sortNumber, Bin1 } = read_uint32( Bin0 ),
	{ V_killNumber, Bin2 } = read_uint32( Bin1 ),
	{ V_lxKillNumber, Bin3 } = read_uint32( Bin2 ),
	{ V_needKill, Bin4 } = read_uint32( Bin3 ),
	{ V_remainSecond, Bin5 } = read_uint32( Bin4 ),
	{ V_gatherNumber, Bin6 } = read_uint32( Bin5 ),
	{ V_needGatherNumber, Bin7 } = read_uint32( Bin6 ),
	{ #pk_GS2U_KillPlayerNumber {
		sortNumber = V_sortNumber,
		killNumber = V_killNumber,
		lxKillNumber = V_lxKillNumber,
		needKill = V_needKill,
		remainSecond = V_remainSecond,
		gatherNumber = V_gatherNumber,
		needGatherNumber = V_needGatherNumber
		},
	Bin7 };

%GENERATED from file:activity.h => GS2U_KillRank
decode(?GS2U_KillRank,Bin0) ->
	{ V_rank, Bin1 } = read_array(Bin0, fun(X) -> decode_KillRank( X ) end),
	{ #pk_GS2U_KillRank {
		rank = V_rank
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_KingBattleBuffInfo
decode(?GS2U_KingBattleBuffInfo,Bin0) ->
	{ V_mirrorBuffcfgID, Bin1 } = read_uint64( Bin0 ),
	{ V_defenderBuffcfgID, Bin2 } = read_uint64( Bin1 ),
	{ V_attackerBuffcfgID, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_KingBattleBuffInfo {
		mirrorBuffcfgID = V_mirrorBuffcfgID,
		defenderBuffcfgID = V_defenderBuffcfgID,
		attackerBuffcfgID = V_attackerBuffcfgID
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_KingBattleRepairMirror
decode(?GS2U_KingBattleRepairMirror,Bin0) ->
	{ V_mirrorMaxHp, Bin1 } = read_uint64( Bin0 ),
	{ V_mirrorCurrentHp, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_KingBattleRepairMirror {
		mirrorMaxHp = V_mirrorMaxHp,
		mirrorCurrentHp = V_mirrorCurrentHp
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_KingBattleResult
decode(?GS2U_KingBattleResult,Bin0) ->
	{ V_isKing, Bin1 } = read_bool( Bin0 ),
	{ V_isNewKing, Bin2 } = read_bool( Bin1 ),
	{ V_killNumOrHurt, Bin3 } = read_uint64( Bin2 ),
	{ V_days, Bin4 } = read_uint8( Bin3 ),
	{ V_declaration, Bin5 } = read_string( Bin4 ),
	{ V_name, Bin6 } = read_string( Bin5 ),
	{ V_roleID, Bin7 } = read_uint64( Bin6 ),
	{ V_career, Bin8 } = read_uint32( Bin7 ),
	{ V_race, Bin9 } = read_int8( Bin8 ),
	{ V_sex, Bin10 } = read_int8( Bin9 ),
	{ V_head, Bin11 } = read_int32( Bin10 ),
	{ V_wingLevel, Bin12 } = read_int32( Bin11 ),
	{ V_fashionIDs, Bin13 } = read_array(Bin12, fun(X) -> read_int32( X ) end),
	{ V_equipIDList, Bin14 } = read_array(Bin13, fun(X) -> decode_PlayerKingBattleEquip( X ) end),
	{ V_equipLevelList, Bin15 } = read_array(Bin14, fun(X) -> decode_PlayerKingBattleEquipLevel( X ) end),
	{ #pk_GS2U_KingBattleResult {
		isKing = V_isKing,
		isNewKing = V_isNewKing,
		killNumOrHurt = V_killNumOrHurt,
		days = V_days,
		declaration = V_declaration,
		name = V_name,
		roleID = V_roleID,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		wingLevel = V_wingLevel,
		fashionIDs = V_fashionIDs,
		equipIDList = V_equipIDList,
		equipLevelList = V_equipLevelList
		},
	Bin15 };

%GENERATED from file:activity.h => GS2U_LotteryMoney
decode(?GS2U_LotteryMoney,Bin0) ->
	{ V_pondGold, Bin1 } = read_uint64( Bin0 ),
	{ V_pondDiamond, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_LotteryMoney {
		pondGold = V_pondGold,
		pondDiamond = V_pondDiamond
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_LotteryNote
decode(?GS2U_LotteryNote,Bin0) ->
	{ V_notes, Bin1 } = read_array(Bin0, fun(X) -> decode_LotteryNote( X ) end),
	{ #pk_GS2U_LotteryNote {
		notes = V_notes
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_LotteryResetTime
decode(?GS2U_LotteryResetTime,Bin0) ->
	{ V_goldFreeRstTime, Bin1 } = read_uint64( Bin0 ),
	{ V_diamondFreeRstTime, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_LotteryResetTime {
		goldFreeRstTime = V_goldFreeRstTime,
		diamondFreeRstTime = V_diamondFreeRstTime
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_LotteryResult
decode(?GS2U_LotteryResult,Bin0) ->
	{ V_item, Bin1 } = read_array(Bin0, fun(X) -> decode_LotteryItem( X ) end),
	{ #pk_GS2U_LotteryResult {
		item = V_item
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_MapBossInfo
decode(?GS2U_MapBossInfo,Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ V_bossID, Bin2 } = read_uint32( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_isTeam, Bin4 } = read_bool( Bin3 ),
	{ V_refreshTime, Bin5 } = read_uint64( Bin4 ),
	{ V_code, Bin6 } = read_uint64( Bin5 ),
	{ #pk_GS2U_MapBossInfo {
		mapID = V_mapID,
		bossID = V_bossID,
		name = V_name,
		isTeam = V_isTeam,
		refreshTime = V_refreshTime,
		code = V_code
		},
	Bin6 };

%GENERATED from file:activity.h => GS2U_MarrorInfoAck
decode(?GS2U_MarrorInfoAck,Bin0) ->
	{ V_nickName, Bin1 } = read_string( Bin0 ),
	{ V_playerLevel, Bin2 } = read_uint16( Bin1 ),
	{ V_playerForce, Bin3 } = read_uint32( Bin2 ),
	{ V_roleID, Bin4 } = read_uint64( Bin3 ),
	{ V_playerCode, Bin5 } = read_uint64( Bin4 ),
	{ V_career, Bin6 } = read_uint32( Bin5 ),
	{ V_race, Bin7 } = read_int8( Bin6 ),
	{ V_sex, Bin8 } = read_int8( Bin7 ),
	{ V_head, Bin9 } = read_int32( Bin8 ),
	{ V_wingLevel, Bin10 } = read_int32( Bin9 ),
	{ V_clique, Bin11 } = read_string( Bin10 ),
	{ V_defendDays, Bin12 } = read_uint32( Bin11 ),
	{ V_mirrorMaxHp, Bin13 } = read_uint64( Bin12 ),
	{ V_mirrorLastHp, Bin14 } = read_uint64( Bin13 ),
	{ V_fashionIDs, Bin15 } = read_array(Bin14, fun(X) -> read_int32( X ) end),
	{ V_equipIDList, Bin16 } = read_array(Bin15, fun(X) -> decode_PlayerKingBattleEquip( X ) end),
	{ V_equipLevelList, Bin17 } = read_array(Bin16, fun(X) -> decode_PlayerKingBattleEquipLevel( X ) end),
	{ V_declaration, Bin18 } = read_string( Bin17 ),
	{ #pk_GS2U_MarrorInfoAck {
		nickName = V_nickName,
		playerLevel = V_playerLevel,
		playerForce = V_playerForce,
		roleID = V_roleID,
		playerCode = V_playerCode,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		wingLevel = V_wingLevel,
		clique = V_clique,
		defendDays = V_defendDays,
		mirrorMaxHp = V_mirrorMaxHp,
		mirrorLastHp = V_mirrorLastHp,
		fashionIDs = V_fashionIDs,
		equipIDList = V_equipIDList,
		equipLevelList = V_equipLevelList,
		declaration = V_declaration
		},
	Bin18 };

%GENERATED from file:activity.h => GS2U_MyAnswerRank
decode(?GS2U_MyAnswerRank,Bin0) ->
	{ V_ranking, Bin1 } = read_uint16( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_MyAnswerRank {
		ranking = V_ranking,
		value = V_value
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_NoticeWildBossDead
decode(?GS2U_NoticeWildBossDead,Bin0) ->
	{ V_info, Bin1 } = decode_WildBossInfo( Bin0 ),
	{ #pk_GS2U_NoticeWildBossDead {
		info = V_info
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_NoticeWildBossTarget
decode(?GS2U_NoticeWildBossTarget,Bin0) ->
	{ V_targetCode, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_isTeam, Bin3 } = read_bool( Bin2 ),
	{ V_isShow, Bin4 } = read_bool( Bin3 ),
	{ #pk_GS2U_NoticeWildBossTarget {
		targetCode = V_targetCode,
		name = V_name,
		isTeam = V_isTeam,
		isShow = V_isShow
		},
	Bin4 };

%GENERATED from file:activity.h => GS2U_OperateAct_Exchange
decode(?GS2U_OperateAct_Exchange,Bin0) ->
	{ V_exchangeID, Bin1 } = read_uint32( Bin0 ),
	{ V_exchangeType, Bin2 } = read_uint8( Bin1 ),
	{ V_roleExchangedNum, Bin3 } = read_uint8( Bin2 ),
	{ V_roleMaxExchangeNum, Bin4 } = read_uint8( Bin3 ),
	{ V_exchangeArg, Bin5 } = read_uint16( Bin4 ),
	{ V_exchangeNum, Bin6 } = read_uint16( Bin5 ),
	{ V_startTime, Bin7 } = read_uint32( Bin6 ),
	{ V_endTime, Bin8 } = read_uint32( Bin7 ),
	{ V_name, Bin9 } = read_string( Bin8 ),
	{ V_title, Bin10 } = read_string( Bin9 ),
	{ V_content, Bin11 } = read_string( Bin10 ),
	{ V_requireList, Bin12 } = read_array(Bin11, fun(X) -> decode_OperateActExchangeRequire( X ) end),
	{ #pk_GS2U_OperateAct_Exchange {
		exchangeID = V_exchangeID,
		exchangeType = V_exchangeType,
		roleExchangedNum = V_roleExchangedNum,
		roleMaxExchangeNum = V_roleMaxExchangeNum,
		exchangeArg = V_exchangeArg,
		exchangeNum = V_exchangeNum,
		startTime = V_startTime,
		endTime = V_endTime,
		name = V_name,
		title = V_title,
		content = V_content,
		requireList = V_requireList
		},
	Bin12 };

%GENERATED from file:activity.h => GS2U_OperateExchangeAck
decode(?GS2U_OperateExchangeAck,Bin0) ->
	{ V_exchangeID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_OperateExchangeAck {
		exchangeID = V_exchangeID
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_PlayerAnswer
decode(?GS2U_PlayerAnswer,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_questionID, Bin2 } = read_uint32( Bin1 ),
	{ V_isright, Bin3 } = read_bool( Bin2 ),
	{ V_answers, Bin4 } = read_string( Bin3 ),
	{ V_isFirstAnser, Bin5 } = read_uint32( Bin4 ),
	{ V_roleName, Bin6 } = read_string( Bin5 ),
	{ V_level, Bin7 } = read_uint8( Bin6 ),
	{ V_career, Bin8 } = read_uint32( Bin7 ),
	{ V_sex, Bin9 } = read_uint8( Bin8 ),
	{ V_race, Bin10 } = read_uint8( Bin9 ),
	{ V_head, Bin11 } = read_int32( Bin10 ),
	{ V_frameID, Bin12 } = read_uint16( Bin11 ),
	{ V_isVoice, Bin13 } = read_bool( Bin12 ),
	{ #pk_GS2U_PlayerAnswer {
		roleID = V_roleID,
		questionID = V_questionID,
		isright = V_isright,
		answers = V_answers,
		isFirstAnser = V_isFirstAnser,
		roleName = V_roleName,
		level = V_level,
		career = V_career,
		sex = V_sex,
		race = V_race,
		head = V_head,
		frameID = V_frameID,
		isVoice = V_isVoice
		},
	Bin13 };

%GENERATED from file:activity.h => GS2U_PlayerAnswerInfo
decode(?GS2U_PlayerAnswerInfo,Bin0) ->
	{ V_trueNum, Bin1 } = read_uint32( Bin0 ),
	{ V_totalExp, Bin2 } = read_uint32( Bin1 ),
	{ V_totalCoin, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_PlayerAnswerInfo {
		trueNum = V_trueNum,
		totalExp = V_totalExp,
		totalCoin = V_totalCoin
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_PlayerAnswerResult
decode(?GS2U_PlayerAnswerResult,Bin0) ->
	{ V_result, Bin1 } = read_int32( Bin0 ),
	{ V_trueAnswer, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_PlayerAnswerResult {
		result = V_result,
		trueAnswer = V_trueAnswer
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_QueueNumber
decode(?GS2U_QueueNumber,Bin0) ->
	{ V_queueNumber, Bin1 } = read_uint32( Bin0 ),
	{ V_isStart, Bin2 } = read_bool( Bin1 ),
	{ V_isIMApply, Bin3 } = read_bool( Bin2 ),
	{ #pk_GS2U_QueueNumber {
		queueNumber = V_queueNumber,
		isStart = V_isStart,
		isIMApply = V_isIMApply
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_RequestChargeOrUseListAck
decode(?GS2U_RequestChargeOrUseListAck,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_activityName, Bin2 } = read_string( Bin1 ),
	{ V_activityDesc, Bin3 } = read_string( Bin2 ),
	{ V_beginTime, Bin4 } = read_uint32( Bin3 ),
	{ V_endTime, Bin5 } = read_uint32( Bin4 ),
	{ V_amountInTime, Bin6 } = read_uint32( Bin5 ),
	{ V_ruleInfoList, Bin7 } = read_array(Bin6, fun(X) -> decode_ChargeOrUseRuleInfo( X ) end),
	{ #pk_GS2U_RequestChargeOrUseListAck {
		type = V_type,
		activityName = V_activityName,
		activityDesc = V_activityDesc,
		beginTime = V_beginTime,
		endTime = V_endTime,
		amountInTime = V_amountInTime,
		ruleInfoList = V_ruleInfoList
		},
	Bin7 };

%GENERATED from file:activity.h => GS2U_RequestCollectionWordsAwardAck
decode(?GS2U_RequestCollectionWordsAwardAck,Bin0) ->
	{ V_requestAwardID, Bin1 } = read_uint32( Bin0 ),
	{ V_isSuccess, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_RequestCollectionWordsAwardAck {
		requestAwardID = V_requestAwardID,
		isSuccess = V_isSuccess
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_RequestPictureNoticeAck
decode(?GS2U_RequestPictureNoticeAck,Bin0) ->
	{ V_data, Bin1 } = read_array(Bin0, fun(X) -> decode_Picture_notice( X ) end),
	{ #pk_GS2U_RequestPictureNoticeAck {
		data = V_data
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_ReturnEscortList
decode(?GS2U_ReturnEscortList,Bin0) ->
	{ V_etlist, Bin1 } = read_array(Bin0, fun(X) -> decode_EscortTeam( X ) end),
	{ #pk_GS2U_ReturnEscortList {
		etlist = V_etlist
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_RobitAutoAnswer
decode(?GS2U_RobitAutoAnswer,Bin0) ->
	{ V_answerList, Bin1 } = read_array(Bin0, fun(X) -> decode_RobitAnswer( X ) end),
	{ #pk_GS2U_RobitAutoAnswer {
		answerList = V_answerList
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_SelectCamp
decode(?GS2U_SelectCamp,Bin0) ->
	{ V_camp1, Bin1 } = read_array(Bin0, fun(X) -> decode_DarknessPlayerRank( X ) end),
	{ V_cam1Num, Bin2 } = read_uint32( Bin1 ),
	{ V_camp2, Bin3 } = read_array(Bin2, fun(X) -> decode_DarknessPlayerRank( X ) end),
	{ V_cam2Num, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_SelectCamp {
		camp1 = V_camp1,
		cam1Num = V_cam1Num,
		camp2 = V_camp2,
		cam2Num = V_cam2Num
		},
	Bin4 };

%GENERATED from file:activity.h => GS2U_SelectDanceID
decode(?GS2U_SelectDanceID,Bin0) ->
	{ V_danceID, Bin1 } = read_uint32( Bin0 ),
	{ V_correct, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_SelectDanceID {
		danceID = V_danceID,
		correct = V_correct
		},
	Bin2 };

%GENERATED from file:activity.h => GS2U_SelfDarkness
decode(?GS2U_SelfDarkness,Bin0) ->
	{ V_self, Bin1 } = decode_DarknessPlayerRank( Bin0 ),
	{ V_isNeedSelectCamp, Bin2 } = read_bool( Bin1 ),
	{ V_bossID, Bin3 } = read_uint32( Bin2 ),
	{ V_syFreshTime, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_SelfDarkness {
		self = V_self,
		isNeedSelectCamp = V_isNeedSelectCamp,
		bossID = V_bossID,
		syFreshTime = V_syFreshTime
		},
	Bin4 };

%GENERATED from file:activity.h => GS2U_SendAnswerData
decode(?GS2U_SendAnswerData,Bin0) ->
	{ V_questionID, Bin1 } = read_uint32( Bin0 ),
	{ V_endTime, Bin2 } = read_uint64( Bin1 ),
	{ V_currentAnswer, Bin3 } = read_uint32( Bin2 ),
	{ V_data, Bin4 } = read_array(Bin3, fun(X) -> decode_ActivityAnswerRankData( X ) end),
	{ #pk_GS2U_SendAnswerData {
		questionID = V_questionID,
		endTime = V_endTime,
		currentAnswer = V_currentAnswer,
		data = V_data
		},
	Bin4 };

%GENERATED from file:activity.h => GS2U_SevenMissionDataList
decode(?GS2U_SevenMissionDataList,Bin0) ->
	{ V_days, Bin1 } = read_uint8( Bin0 ),
	{ V_timeoutSeconds, Bin2 } = read_uint32( Bin1 ),
	{ V_lists, Bin3 } = read_array(Bin2, fun(X) -> decode_SevenDayMissionData( X ) end),
	{ #pk_GS2U_SevenMissionDataList {
		days = V_days,
		timeoutSeconds = V_timeoutSeconds,
		lists = V_lists
		},
	Bin3 };

%GENERATED from file:activity.h => GS2U_SevenMissionDataUpdate
decode(?GS2U_SevenMissionDataUpdate,Bin0) ->
	{ V_isFinish, Bin1 } = read_bool( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ V_max, Bin3 } = read_uint16( Bin2 ),
	{ V_missionid, Bin4 } = read_uint16( Bin3 ),
	{ #pk_GS2U_SevenMissionDataUpdate {
		isFinish = V_isFinish,
		number = V_number,
		max = V_max,
		missionid = V_missionid
		},
	Bin4 };

%GENERATED from file:activity.h => GS2U_SwitchDance
decode(?GS2U_SwitchDance,Bin0) ->
	{ V_second, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_SwitchDance {
		second = V_second
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_SyncGBInfo
decode(?GS2U_SyncGBInfo,Bin0) ->
	{ V_info, Bin1 } = decode_PlayerGBInfo( Bin0 ),
	{ #pk_GS2U_SyncGBInfo {
		info = V_info
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_TriggerEvent
decode(?GS2U_TriggerEvent,Bin0) ->
	{ #pk_GS2U_TriggerEvent {

		},
	Bin0 };

%GENERATED from file:activity.h => GS2U_TriggerEventResult
decode(?GS2U_TriggerEventResult,Bin0) ->
	{ V_eventID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_TriggerEventResult {
		eventID = V_eventID
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_UneedleaveOutMap
decode(?GS2U_UneedleaveOutMap,Bin0) ->
	{ V_type, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_UneedleaveOutMap {
		type = V_type
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_UpdateArenaTeamMember
decode(?GS2U_UpdateArenaTeamMember,Bin0) ->
	{ V_teamMemberInfos, Bin1 } = read_array(Bin0, fun(X) -> decode_ArenaTeamMemberInfo( X ) end),
	{ #pk_GS2U_UpdateArenaTeamMember {
		teamMemberInfos = V_teamMemberInfos
		},
	Bin1 };

%GENERATED from file:activity.h => GS2U_WorldLevel
decode(?GS2U_WorldLevel,Bin0) ->
	{ V_worldLevel, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_WorldLevel {
		worldLevel = V_worldLevel
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_AddArenaTeamMember
decode(?U2GS_AddArenaTeamMember,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_AddArenaTeamMember {
		id = V_id
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_AddArenaTeamMemberAck
decode(?U2GS_AddArenaTeamMemberAck,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_result, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_AddArenaTeamMemberAck {
		roleID = V_roleID,
		result = V_result
		},
	Bin2 };

%GENERATED from file:activity.h => U2GS_AngelInvestment
decode(?U2GS_AngelInvestment,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_AngelInvestment {
		id = V_id
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_AngelInvestmentGet
decode(?U2GS_AngelInvestmentGet,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_AngelInvestmentGet {
		id = V_id
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_ApplyAnswer
decode(?U2GS_ApplyAnswer,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_ApplyAnswer {
		type = V_type
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_ApplyDance
decode(?U2GS_ApplyDance,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_ApplyDance {
		type = V_type
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_AttackDefenderQuotaNumber
decode(?U2GS_AttackDefenderQuotaNumber,Bin0) ->
	{ V_activityID, Bin1 } = read_uint16( Bin0 ),
	{ V_mapID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_AttackDefenderQuotaNumber {
		activityID = V_activityID,
		mapID = V_mapID
		},
	Bin2 };

%GENERATED from file:activity.h => U2GS_BreakDance
decode(?U2GS_BreakDance,Bin0) ->
	{ #pk_U2GS_BreakDance {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_BuyTime
decode(?U2GS_BuyTime,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_BuyTime {
		id = V_id
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_CancelApply
decode(?U2GS_CancelApply,Bin0) ->
	{ #pk_U2GS_CancelApply {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_DanceArea
decode(?U2GS_DanceArea,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_DanceArea {
		type = V_type
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_DarknessRank
decode(?U2GS_DarknessRank,Bin0) ->
	{ #pk_U2GS_DarknessRank {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_DeadLineGiftBuy
decode(?U2GS_DeadLineGiftBuy,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ V_giftID, Bin2 } = read_uint16( Bin1 ),
	{ V_itemBuyNum, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_DeadLineGiftBuy {
		id = V_id,
		giftID = V_giftID,
		itemBuyNum = V_itemBuyNum
		},
	Bin3 };

%GENERATED from file:activity.h => U2GS_DeadLineGiftOpen
decode(?U2GS_DeadLineGiftOpen,Bin0) ->
	{ #pk_U2GS_DeadLineGiftOpen {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_GBLeaveRange
decode(?U2GS_GBLeaveRange,Bin0) ->
	{ #pk_U2GS_GBLeaveRange {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_GBLockGather
decode(?U2GS_GBLockGather,Bin0) ->
	{ V_gatherCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_GBLockGather {
		gatherCode = V_gatherCode
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_GBRequestEnterMapLine
decode(?U2GS_GBRequestEnterMapLine,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_lineID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_GBRequestEnterMapLine {
		mapID = V_mapID,
		lineID = V_lineID
		},
	Bin2 };

%GENERATED from file:activity.h => U2GS_GetAnswerScore
decode(?U2GS_GetAnswerScore,Bin0) ->
	{ #pk_U2GS_GetAnswerScore {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_GetChargeOrUseGift
decode(?U2GS_GetChargeOrUseGift,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_ruleID, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_GetChargeOrUseGift {
		type = V_type,
		ruleID = V_ruleID
		},
	Bin2 };

%GENERATED from file:activity.h => U2GS_GiveMarrorFlower
decode(?U2GS_GiveMarrorFlower,Bin0) ->
	{ #pk_U2GS_GiveMarrorFlower {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_GuardianDeclaration
decode(?U2GS_GuardianDeclaration,Bin0) ->
	{ V_declaration, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_GuardianDeclaration {
		declaration = V_declaration
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_KillRank
decode(?U2GS_KillRank,Bin0) ->
	{ #pk_U2GS_KillRank {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleBuyAttackerBuff
decode(?U2GS_KingBattleBuyAttackerBuff,Bin0) ->
	{ #pk_U2GS_KingBattleBuyAttackerBuff {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleBuyAttackerBuffOneKey
decode(?U2GS_KingBattleBuyAttackerBuffOneKey,Bin0) ->
	{ #pk_U2GS_KingBattleBuyAttackerBuffOneKey {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleBuyDeffenderBuff
decode(?U2GS_KingBattleBuyDeffenderBuff,Bin0) ->
	{ #pk_U2GS_KingBattleBuyDeffenderBuff {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleBuyDeffenderBuffOneKey
decode(?U2GS_KingBattleBuyDeffenderBuffOneKey,Bin0) ->
	{ #pk_U2GS_KingBattleBuyDeffenderBuffOneKey {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleBuyMirrorBuff
decode(?U2GS_KingBattleBuyMirrorBuff,Bin0) ->
	{ #pk_U2GS_KingBattleBuyMirrorBuff {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleBuyMirrorBuffOneKey
decode(?U2GS_KingBattleBuyMirrorBuffOneKey,Bin0) ->
	{ #pk_U2GS_KingBattleBuyMirrorBuffOneKey {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleGetBuffInfo
decode(?U2GS_KingBattleGetBuffInfo,Bin0) ->
	{ #pk_U2GS_KingBattleGetBuffInfo {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_KingBattleRepairMirror
decode(?U2GS_KingBattleRepairMirror,Bin0) ->
	{ V_isRepairAll, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_KingBattleRepairMirror {
		isRepairAll = V_isRepairAll
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_OpenLotteryForm
decode(?U2GS_OpenLotteryForm,Bin0) ->
	{ #pk_U2GS_OpenLotteryForm {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_OpenSelectCamp
decode(?U2GS_OpenSelectCamp,Bin0) ->
	{ #pk_U2GS_OpenSelectCamp {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_OperateExchange
decode(?U2GS_OperateExchange,Bin0) ->
	{ V_exchangeID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_OperateExchange {
		exchangeID = V_exchangeID
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_OperateExchangeRefresh
decode(?U2GS_OperateExchangeRefresh,Bin0) ->
	{ #pk_U2GS_OperateExchangeRefresh {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_PlayerAnswer
decode(?U2GS_PlayerAnswer,Bin0) ->
	{ V_questionID, Bin1 } = read_uint32( Bin0 ),
	{ V_isright, Bin2 } = read_bool( Bin1 ),
	{ V_isVoice, Bin3 } = read_bool( Bin2 ),
	{ V_answers, Bin4 } = read_string( Bin3 ),
	{ #pk_U2GS_PlayerAnswer {
		questionID = V_questionID,
		isright = V_isright,
		isVoice = V_isVoice,
		answers = V_answers
		},
	Bin4 };

%GENERATED from file:activity.h => U2GS_PlayerAnswerQuestion
decode(?U2GS_PlayerAnswerQuestion,Bin0) ->
	{ V_questionID, Bin1 } = read_uint32( Bin0 ),
	{ V_answers, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_PlayerAnswerQuestion {
		questionID = V_questionID,
		answers = V_answers
		},
	Bin2 };

%GENERATED from file:activity.h => U2GS_QueryActivityState
decode(?U2GS_QueryActivityState,Bin0) ->
	{ V_activityID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_QueryActivityState {
		activityID = V_activityID
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_QueryAngelInvestment
decode(?U2GS_QueryAngelInvestment,Bin0) ->
	{ #pk_U2GS_QueryAngelInvestment {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_QueryMapBossInfo
decode(?U2GS_QueryMapBossInfo,Bin0) ->
	{ V_targetCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_QueryMapBossInfo {
		targetCode = V_targetCode
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_QuerySevenMissionData
decode(?U2GS_QuerySevenMissionData,Bin0) ->
	{ #pk_U2GS_QuerySevenMissionData {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_ReadyArena
decode(?U2GS_ReadyArena,Bin0) ->
	{ #pk_U2GS_ReadyArena {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestCollectionWordsAward
decode(?U2GS_RequestCollectionWordsAward,Bin0) ->
	{ V_requestAwardID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestCollectionWordsAward {
		requestAwardID = V_requestAwardID
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_RequestCrosArenaRanks
decode(?U2GS_RequestCrosArenaRanks,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestCrosArenaRanks {
		type = V_type
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_RequestCrosRanks
decode(?U2GS_RequestCrosRanks,Bin0) ->
	{ #pk_U2GS_RequestCrosRanks {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestDarknessInfo
decode(?U2GS_RequestDarknessInfo,Bin0) ->
	{ #pk_U2GS_RequestDarknessInfo {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestEnterDarkness
decode(?U2GS_RequestEnterDarkness,Bin0) ->
	{ V_entrance, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestEnterDarkness {
		entrance = V_entrance
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_RequestEnterNvasionMap
decode(?U2GS_RequestEnterNvasionMap,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_RequestEnterNvasionMap {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_RequestEntrance
decode(?U2GS_RequestEntrance,Bin0) ->
	{ #pk_U2GS_RequestEntrance {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestEscortList
decode(?U2GS_RequestEscortList,Bin0) ->
	{ #pk_U2GS_RequestEscortList {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestEscortRob
decode(?U2GS_RequestEscortRob,Bin0) ->
	{ V_sequenceNumber, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_RequestEscortRob {
		sequenceNumber = V_sequenceNumber
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_RequestEscortSolo
decode(?U2GS_RequestEscortSolo,Bin0) ->
	{ #pk_U2GS_RequestEscortSolo {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestEscortTeam
decode(?U2GS_RequestEscortTeam,Bin0) ->
	{ #pk_U2GS_RequestEscortTeam {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestGBList
decode(?U2GS_RequestGBList,Bin0) ->
	{ #pk_U2GS_RequestGBList {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestHDBattle
decode(?U2GS_RequestHDBattle,Bin0) ->
	{ #pk_U2GS_RequestHDBattle {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestHDBattleCD
decode(?U2GS_RequestHDBattleCD,Bin0) ->
	{ #pk_U2GS_RequestHDBattleCD {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestHDBattleExploits
decode(?U2GS_RequestHDBattleExploits,Bin0) ->
	{ #pk_U2GS_RequestHDBattleExploits {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestInActivity
decode(?U2GS_RequestInActivity,Bin0) ->
	{ V_activityID, Bin1 } = read_uint16( Bin0 ),
	{ V_mapID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_RequestInActivity {
		activityID = V_activityID,
		mapID = V_mapID
		},
	Bin2 };

%GENERATED from file:activity.h => U2GS_RequestJoinHDBattle
decode(?U2GS_RequestJoinHDBattle,Bin0) ->
	{ #pk_U2GS_RequestJoinHDBattle {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestLottery
decode(?U2GS_RequestLottery,Bin0) ->
	{ V_isGold, Bin1 } = read_bool( Bin0 ),
	{ V_isFree, Bin2 } = read_bool( Bin1 ),
	{ V_number, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_RequestLottery {
		isGold = V_isGold,
		isFree = V_isFree,
		number = V_number
		},
	Bin3 };

%GENERATED from file:activity.h => U2GS_RequestLotteryResetTime
decode(?U2GS_RequestLotteryResetTime,Bin0) ->
	{ #pk_U2GS_RequestLotteryResetTime {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestMarrorInfo
decode(?U2GS_RequestMarrorInfo,Bin0) ->
	{ #pk_U2GS_RequestMarrorInfo {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_RequestOPActivityConfList
decode(?U2GS_RequestOPActivityConfList,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestOPActivityConfList {
		type = V_type
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_RequestQueueNumber
decode(?U2GS_RequestQueueNumber,Bin0) ->
	{ #pk_U2GS_RequestQueueNumber {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_SelectCamp
decode(?U2GS_SelectCamp,Bin0) ->
	{ V_camp, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_SelectCamp {
		camp = V_camp
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_SelectDanceID
decode(?U2GS_SelectDanceID,Bin0) ->
	{ V_danceID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_SelectDanceID {
		danceID = V_danceID
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_SelfDarkness
decode(?U2GS_SelfDarkness,Bin0) ->
	{ #pk_U2GS_SelfDarkness {

		},
	Bin0 };

%GENERATED from file:activity.h => U2GS_SevenMissionCompletion
decode(?U2GS_SevenMissionCompletion,Bin0) ->
	{ V_missionid, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_SevenMissionCompletion {
		missionid = V_missionid
		},
	Bin1 };

%GENERATED from file:activity.h => U2GS_StartArena
decode(?U2GS_StartArena,Bin0) ->
	{ #pk_U2GS_StartArena {

		},
	Bin0 };

%GENERATED from file:arena.h => GS2U_BattleNotes
decode(?GS2U_BattleNotes,Bin0) ->
	{ V_lsInfo, Bin1 } = read_array(Bin0, fun(X) -> decode_LadderLS( X ) end),
	{ V_selfInfo, Bin2 } = read_array(Bin1, fun(X) -> decode_LadderMatchInfo( X ) end),
	{ #pk_GS2U_BattleNotes {
		lsInfo = V_lsInfo,
		selfInfo = V_selfInfo
		},
	Bin2 };

%GENERATED from file:arena.h => GS2U_BattleStartSec
decode(?GS2U_BattleStartSec,Bin0) ->
	{ V_second, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_BattleStartSec {
		second = V_second
		},
	Bin1 };

%GENERATED from file:arena.h => GS2U_Ladder1v1BattleEnd
decode(?GS2U_Ladder1v1BattleEnd,Bin0) ->
	{ V_result, Bin1 } = read_uint8( Bin0 ),
	{ V_exploit, Bin2 } = read_uint32( Bin1 ),
	{ V_rank, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_Ladder1v1BattleEnd {
		result = V_result,
		exploit = V_exploit,
		rank = V_rank
		},
	Bin3 };

%GENERATED from file:arena.h => GS2U_LadderTargetList
decode(?GS2U_LadderTargetList,Bin0) ->
	{ V_targets, Bin1 } = read_array(Bin0, fun(X) -> decode_LadderTargetInfo( X ) end),
	{ V_selfInfo, Bin2 } = decode_SelfBattleInfo( Bin1 ),
	{ #pk_GS2U_LadderTargetList {
		targets = V_targets,
		selfInfo = V_selfInfo
		},
	Bin2 };

%GENERATED from file:arena.h => GS2U_PrepareSec
decode(?GS2U_PrepareSec,Bin0) ->
	{ V_second, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_PrepareSec {
		second = V_second
		},
	Bin1 };

%GENERATED from file:arena.h => GS2U_ReturnKingList
decode(?GS2U_ReturnKingList,Bin0) ->
	{ V_kings, Bin1 } = read_array(Bin0, fun(X) -> decode_KingRole( X ) end),
	{ #pk_GS2U_ReturnKingList {
		kings = V_kings
		},
	Bin1 };

%GENERATED from file:arena.h => U2GS_AtuoSubmitTask
decode(?U2GS_AtuoSubmitTask,Bin0) ->
	{ #pk_U2GS_AtuoSubmitTask {

		},
	Bin0 };

%GENERATED from file:arena.h => U2GS_ChallengeTargetByRank
decode(?U2GS_ChallengeTargetByRank,Bin0) ->
	{ V_ranksort, Bin1 } = read_uint32( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_ChallengeTargetByRank {
		ranksort = V_ranksort,
		name = V_name
		},
	Bin2 };

%GENERATED from file:arena.h => U2GS_ChallengeTargetByRoleID
decode(?U2GS_ChallengeTargetByRoleID,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_ChallengeTargetByRoleID {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:arena.h => U2GS_FreshLadderTargetList
decode(?U2GS_FreshLadderTargetList,Bin0) ->
	{ #pk_U2GS_FreshLadderTargetList {

		},
	Bin0 };

%GENERATED from file:arena.h => U2GS_GiveUpChallenge
decode(?U2GS_GiveUpChallenge,Bin0) ->
	{ #pk_U2GS_GiveUpChallenge {

		},
	Bin0 };

%GENERATED from file:arena.h => U2GS_OpenLadder1v1
decode(?U2GS_OpenLadder1v1,Bin0) ->
	{ #pk_U2GS_OpenLadder1v1 {

		},
	Bin0 };

%GENERATED from file:arena.h => U2GS_RequestBattleNotes
decode(?U2GS_RequestBattleNotes,Bin0) ->
	{ #pk_U2GS_RequestBattleNotes {

		},
	Bin0 };

%GENERATED from file:arena.h => U2GS_RequestKingList
decode(?U2GS_RequestKingList,Bin0) ->
	{ #pk_U2GS_RequestKingList {

		},
	Bin0 };

%GENERATED from file:arena.h => U2GS_RequestPlayerInfo
decode(?U2GS_RequestPlayerInfo,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RequestPlayerInfo {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:arena.h => U2GS_WorshipTarget
decode(?U2GS_WorshipTarget,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_WorshipTarget {
		roleID = V_roleID,
		roleName = V_roleName
		},
	Bin2 };

%GENERATED from file:aruna.h => GS2U_FreshWWFormData
decode(?GS2U_FreshWWFormData,Bin0) ->
	{ V_data, Bin1 } = decode_WWFormData( Bin0 ),
	{ #pk_GS2U_FreshWWFormData {
		data = V_data
		},
	Bin1 };

%GENERATED from file:aruna.h => GS2U_WWEscortResult
decode(?GS2U_WWEscortResult,Bin0) ->
	{ V_old_phase, Bin1 } = read_uint16( Bin0 ),
	{ V_old_schedule, Bin2 } = read_uint32( Bin1 ),
	{ V_new_phase, Bin3 } = read_uint16( Bin2 ),
	{ V_new_schedule, Bin4 } = read_uint32( Bin3 ),
	{ V_sample_point, Bin5 } = read_uint32( Bin4 ),
	{ V_success, Bin6 } = read_bool( Bin5 ),
	{ #pk_GS2U_WWEscortResult {
		old_phase = V_old_phase,
		old_schedule = V_old_schedule,
		new_phase = V_new_phase,
		new_schedule = V_new_schedule,
		sample_point = V_sample_point,
		success = V_success
		},
	Bin6 };

%GENERATED from file:aruna.h => GS2U_WWFormData
decode(?GS2U_WWFormData,Bin0) ->
	{ V_isFreshRank, Bin1 } = read_bool( Bin0 ),
	{ V_isInit, Bin2 } = read_bool( Bin1 ),
	{ V_rankList, Bin3 } = read_array(Bin2, fun(X) -> decode_WWRank( X ) end),
	{ V_data, Bin4 } = decode_WWFormData( Bin3 ),
	{ #pk_GS2U_WWFormData {
		isFreshRank = V_isFreshRank,
		isInit = V_isInit,
		rankList = V_rankList,
		data = V_data
		},
	Bin4 };

%GENERATED from file:aruna.h => GS2U_WWList
decode(?GS2U_WWList,Bin0) ->
	{ V_lineList, Bin1 } = read_array(Bin0, fun(X) -> decode_WWMapLineInfo( X ) end),
	{ #pk_GS2U_WWList {
		lineList = V_lineList
		},
	Bin1 };

%GENERATED from file:aruna.h => GS2U_WWPlayerInfo
decode(?GS2U_WWPlayerInfo,Bin0) ->
	{ V_contribution, Bin1 } = read_uint32( Bin0 ),
	{ V_sample_point, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_WWPlayerInfo {
		contribution = V_contribution,
		sample_point = V_sample_point
		},
	Bin2 };

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfo
decode(?GS2U_WWSyncMapInfo,Bin0) ->
	{ V_phase, Bin1 } = read_uint16( Bin0 ),
	{ V_schedule, Bin2 } = read_uint32( Bin1 ),
	{ V_acPhase, Bin3 } = read_uint8( Bin2 ),
	{ V_upper, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_WWSyncMapInfo {
		phase = V_phase,
		schedule = V_schedule,
		acPhase = V_acPhase,
		upper = V_upper
		},
	Bin4 };

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfoOne
decode(?GS2U_WWSyncMapInfoOne,Bin0) ->
	{ V_residueSec, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_WWSyncMapInfoOne {
		residueSec = V_residueSec
		},
	Bin1 };

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfoThree
decode(?GS2U_WWSyncMapInfoThree,Bin0) ->
	{ V_selfServerName, Bin1 } = read_string( Bin0 ),
	{ V_selfPoint, Bin2 } = read_uint32( Bin1 ),
	{ V_targetServerName, Bin3 } = read_string( Bin2 ),
	{ V_targetPoint, Bin4 } = read_uint32( Bin3 ),
	{ V_distance, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_WWSyncMapInfoThree {
		selfServerName = V_selfServerName,
		selfPoint = V_selfPoint,
		targetServerName = V_targetServerName,
		targetPoint = V_targetPoint,
		distance = V_distance
		},
	Bin5 };

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfoTwo
decode(?GS2U_WWSyncMapInfoTwo,Bin0) ->
	{ V_curTimes, Bin1 } = read_uint8( Bin0 ),
	{ V_maxTimes, Bin2 } = read_uint8( Bin1 ),
	{ V_targets, Bin3 } = read_array(Bin2, fun(X) -> decode_WWSyncMapPhaseTwo( X ) end),
	{ #pk_GS2U_WWSyncMapInfoTwo {
		curTimes = V_curTimes,
		maxTimes = V_maxTimes,
		targets = V_targets
		},
	Bin3 };

%GENERATED from file:aruna.h => U2GS_GetLastReward
decode(?U2GS_GetLastReward,Bin0) ->
	{ #pk_U2GS_GetLastReward {

		},
	Bin0 };

%GENERATED from file:aruna.h => U2GS_GetPhaseReward
decode(?U2GS_GetPhaseReward,Bin0) ->
	{ #pk_U2GS_GetPhaseReward {

		},
	Bin0 };

%GENERATED from file:aruna.h => U2GS_RequestWWForm
decode(?U2GS_RequestWWForm,Bin0) ->
	{ V_isFreshRank, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_RequestWWForm {
		isFreshRank = V_isFreshRank
		},
	Bin1 };

%GENERATED from file:aruna.h => U2GS_RequestWWLineList
decode(?U2GS_RequestWWLineList,Bin0) ->
	{ #pk_U2GS_RequestWWLineList {

		},
	Bin0 };

%GENERATED from file:aruna.h => U2GS_RequestWWPlayerInfo
decode(?U2GS_RequestWWPlayerInfo,Bin0) ->
	{ #pk_U2GS_RequestWWPlayerInfo {

		},
	Bin0 };

%GENERATED from file:aruna.h => U2GS_SubmitSamplePoint
decode(?U2GS_SubmitSamplePoint,Bin0) ->
	{ V_configID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_SubmitSamplePoint {
		configID = V_configID
		},
	Bin1 };

%GENERATED from file:aruna.h => U2GS_WWRequestEnterMapLine
decode(?U2GS_WWRequestEnterMapLine,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_lineID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_WWRequestEnterMapLine {
		mapID = V_mapID,
		lineID = V_lineID
		},
	Bin2 };

%GENERATED from file:bag.h => DelImpression
decode(?DelImpression,Bin0) ->
	{ V_uid, Bin1 } = read_uint16( Bin0 ),
	{ #pk_DelImpression {
		uid = V_uid
		},
	Bin1 };

%GENERATED from file:bag.h => DelTag
decode(?DelTag,Bin0) ->
	{ V_index, Bin1 } = read_uint8( Bin0 ),
	{ #pk_DelTag {
		index = V_index
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_AddEquipItemToBag
decode(?GS2U_AddEquipItemToBag,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_items, Bin3 } = read_array(Bin2, fun(X) -> decode_EquipItemInfo( X ) end),
	{ #pk_GS2U_AddEquipItemToBag {
		type = V_type,
		code = V_code,
		items = V_items
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_AddImpressionResult
decode(?GS2U_AddImpressionResult,Bin0) ->
	{ V_result, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_AddImpressionResult {
		result = V_result
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_AddNormalItemToBag
decode(?GS2U_AddNormalItemToBag,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_addNum, Bin3 } = read_uint32( Bin2 ),
	{ V_items, Bin4 } = read_array(Bin3, fun(X) -> decode_NormalItemInfo( X ) end),
	{ #pk_GS2U_AddNormalItemToBag {
		type = V_type,
		code = V_code,
		addNum = V_addNum,
		items = V_items
		},
	Bin4 };

%GENERATED from file:bag.h => GS2U_AddPraise
decode(?GS2U_AddPraise,Bin0) ->
	{ #pk_GS2U_AddPraise {

		},
	Bin0 };

%GENERATED from file:bag.h => GS2U_AddTagResult
decode(?GS2U_AddTagResult,Bin0) ->
	{ V_result, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_AddTagResult {
		result = V_result
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_DeleteGoods
decode(?GS2U_DeleteGoods,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_goodsUIDs, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_DeleteGoods {
		type = V_type,
		goodsUIDs = V_goodsUIDs
		},
	Bin2 };

%GENERATED from file:bag.h => GS2U_EquipEnhancedProp
decode(?GS2U_EquipEnhancedProp,Bin0) ->
	{ V_equipUID, Bin1 } = read_uint64( Bin0 ),
	{ V_enProps, Bin2 } = read_array(Bin1, fun(X) -> decode_EquipEnhancedProp( X ) end),
	{ V_price, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_EquipEnhancedProp {
		equipUID = V_equipUID,
		enProps = V_enProps,
		price = V_price
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_EquipGemInfoUpdate
decode(?GS2U_EquipGemInfoUpdate,Bin0) ->
	{ V_equipGemInfo, Bin1 } = decode_EquipGemInfo( Bin0 ),
	{ #pk_GS2U_EquipGemInfoUpdate {
		equipGemInfo = V_equipGemInfo
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_EquipGemInfos
decode(?GS2U_EquipGemInfos,Bin0) ->
	{ V_equipGemInfos, Bin1 } = read_array(Bin0, fun(X) -> decode_EquipGemInfo( X ) end),
	{ #pk_GS2U_EquipGemInfos {
		equipGemInfos = V_equipGemInfos
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_EquipRecastInfo
decode(?GS2U_EquipRecastInfo,Bin0) ->
	{ V_recastType, Bin1 } = read_uint16( Bin0 ),
	{ V_score, Bin2 } = read_uint16( Bin1 ),
	{ V_recastInfo, Bin3 } = decode_RecastPosInfo( Bin2 ),
	{ #pk_GS2U_EquipRecastInfo {
		recastType = V_recastType,
		score = V_score,
		recastInfo = V_recastInfo
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_EquipRecastInfoInit
decode(?GS2U_EquipRecastInfoInit,Bin0) ->
	{ V_recastInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_RecastPosInfo( X ) end),
	{ #pk_GS2U_EquipRecastInfoInit {
		recastInfoList = V_recastInfoList
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_EquipRefineLevel
decode(?GS2U_EquipRefineLevel,Bin0) ->
	{ V_equipRefines, Bin1 } = read_array(Bin0, fun(X) -> decode_EquipRefineLevel( X ) end),
	{ #pk_GS2U_EquipRefineLevel {
		equipRefines = V_equipRefines
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_EquipRefineResult
decode(?GS2U_EquipRefineResult,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ V_bless, Bin3 } = read_uint16( Bin2 ),
	{ V_level, Bin4 } = read_uint8( Bin3 ),
	{ #pk_GS2U_EquipRefineResult {
		code = V_code,
		type = V_type,
		bless = V_bless,
		level = V_level
		},
	Bin4 };

%GENERATED from file:bag.h => GS2U_EquipRefineResultOneKey
decode(?GS2U_EquipRefineResultOneKey,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_levelOld, Bin2 } = read_uint8( Bin1 ),
	{ V_levelNew, Bin3 } = read_uint8( Bin2 ),
	{ V_typeList, Bin4 } = read_array(Bin3, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_EquipRefineResultOneKey {
		code = V_code,
		levelOld = V_levelOld,
		levelNew = V_levelNew,
		typeList = V_typeList
		},
	Bin4 };

%GENERATED from file:bag.h => GS2U_EquipUpStarInfoList
decode(?GS2U_EquipUpStarInfoList,Bin0) ->
	{ V_equipUpStars, Bin1 } = read_array(Bin0, fun(X) -> decode_EquipUpStarInfo( X ) end),
	{ #pk_GS2U_EquipUpStarInfoList {
		equipUpStars = V_equipUpStars
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_EquipUpStarRes
decode(?GS2U_EquipUpStarRes,Bin0) ->
	{ V_equipUpStarInfo, Bin1 } = decode_EquipUpStarInfo( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ V_index, Bin3 } = read_uint16( Bin2 ),
	{ V_costList, Bin4 } = read_array(Bin3, fun(X) -> decode_starCostItem( X ) end),
	{ V_coin, Bin5 } = read_uint32( Bin4 ),
	{ V_res, Bin6 } = read_uint8( Bin5 ),
	{ #pk_GS2U_EquipUpStarRes {
		equipUpStarInfo = V_equipUpStarInfo,
		type = V_type,
		index = V_index,
		costList = V_costList,
		coin = V_coin,
		res = V_res
		},
	Bin6 };

%GENERATED from file:bag.h => GS2U_EqupmentCombinAck
decode(?GS2U_EqupmentCombinAck,Bin0) ->
	{ V_combinID, Bin1 } = read_uint32( Bin0 ),
	{ V_success, Bin2 } = read_bool( Bin1 ),
	{ V_items, Bin3 } = read_array(Bin2, fun(X) -> decode_EquipItemInfo( X ) end),
	{ #pk_GS2U_EqupmentCombinAck {
		combinID = V_combinID,
		success = V_success,
		items = V_items
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_ExchangeResult
decode(?GS2U_ExchangeResult,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_itemCount, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_ExchangeResult {
		id = V_id,
		itemCount = V_itemCount
		},
	Bin2 };

%GENERATED from file:bag.h => GS2U_Forbidden_Load_Photo
decode(?GS2U_Forbidden_Load_Photo,Bin0) ->
	{ V_forbiddenTime, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_Forbidden_Load_Photo {
		forbiddenTime = V_forbiddenTime
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_GainPraise
decode(?GS2U_GainPraise,Bin0) ->
	{ #pk_GS2U_GainPraise {

		},
	Bin0 };

%GENERATED from file:bag.h => GS2U_GemEmbedAdd
decode(?GS2U_GemEmbedAdd,Bin0) ->
	{ V_gemEmbedInfo, Bin1 } = decode_GemEmbedInfo( Bin0 ),
	{ #pk_GS2U_GemEmbedAdd {
		gemEmbedInfo = V_gemEmbedInfo
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_GemEmbedDelete
decode(?GS2U_GemEmbedDelete,Bin0) ->
	{ V_gemUIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_GemEmbedDelete {
		gemUIDs = V_gemUIDs
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_GemEmbedInit
decode(?GS2U_GemEmbedInit,Bin0) ->
	{ V_gemEmbedInfos, Bin1 } = read_array(Bin0, fun(X) -> decode_GemEmbedInfo( X ) end),
	{ #pk_GS2U_GemEmbedInit {
		gemEmbedInfos = V_gemEmbedInfos
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_GemEmbedMakeResult
decode(?GS2U_GemEmbedMakeResult,Bin0) ->
	{ V_gemUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_GemEmbedMakeResult {
		gemUID = V_gemUID
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_GetEssenceNum
decode(?GS2U_GetEssenceNum,Bin0) ->
	{ V_purpleEssence, Bin1 } = read_uint32( Bin0 ),
	{ V_goldenEssence, Bin2 } = read_uint32( Bin1 ),
	{ V_itemList, Bin3 } = read_array(Bin2, fun(X) -> decode_washReturnItemInfo( X ) end),
	{ #pk_GS2U_GetEssenceNum {
		purpleEssence = V_purpleEssence,
		goldenEssence = V_goldenEssence,
		itemList = V_itemList
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_InitEquip
decode(?GS2U_InitEquip,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_items, Bin2 } = read_array(Bin1, fun(X) -> decode_EquipItemInfo( X ) end),
	{ #pk_GS2U_InitEquip {
		type = V_type,
		items = V_items
		},
	Bin2 };

%GENERATED from file:bag.h => GS2U_InitItem
decode(?GS2U_InitItem,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_items, Bin2 } = read_array(Bin1, fun(X) -> decode_NormalItemInfo( X ) end),
	{ #pk_GS2U_InitItem {
		type = V_type,
		items = V_items
		},
	Bin2 };

%GENERATED from file:bag.h => GS2U_InitRecycle
decode(?GS2U_InitRecycle,Bin0) ->
	{ V_items, Bin1 } = read_array(Bin0, fun(X) -> decode_RecycleItem( X ) end),
	{ V_equips, Bin2 } = read_array(Bin1, fun(X) -> decode_RecycleEquip( X ) end),
	{ #pk_GS2U_InitRecycle {
		items = V_items,
		equips = V_equips
		},
	Bin2 };

%GENERATED from file:bag.h => GS2U_InitSlot
decode(?GS2U_InitSlot,Bin0) ->
	{ V_slots, Bin1 } = read_array(Bin0, fun(X) -> decode_BagSlot( X ) end),
	{ #pk_GS2U_InitSlot {
		slots = V_slots
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_LockGoods
decode(?GS2U_LockGoods,Bin0) ->
	{ V_goodsUID, Bin1 } = read_uint64( Bin0 ),
	{ V_bagType, Bin2 } = read_uint8( Bin1 ),
	{ V_isLocked, Bin3 } = read_bool( Bin2 ),
	{ #pk_GS2U_LockGoods {
		goodsUID = V_goodsUID,
		bagType = V_bagType,
		isLocked = V_isLocked
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_LookRPInfo_Fashion
decode(?GS2U_LookRPInfo_Fashion,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_datas, Bin2 } = read_array(Bin1, fun(X) -> decode_RPView_FashionInfo( X ) end),
	{ V_activeFashionSuitList, Bin3 } = read_array(Bin2, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_LookRPInfo_Fashion {
		roleID = V_roleID,
		datas = V_datas,
		activeFashionSuitList = V_activeFashionSuitList
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_LookRPInfo_Marriage
decode(?GS2U_LookRPInfo_Marriage,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_id, Bin2 } = read_uint64( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_sex, Bin4 } = read_uint8( Bin3 ),
	{ V_weddingDay, Bin5 } = read_uint32( Bin4 ),
	{ V_closeness, Bin6 } = read_uint32( Bin5 ),
	{ #pk_GS2U_LookRPInfo_Marriage {
		roleID = V_roleID,
		id = V_id,
		name = V_name,
		sex = V_sex,
		weddingDay = V_weddingDay,
		closeness = V_closeness
		},
	Bin6 };

%GENERATED from file:bag.h => GS2U_LookRPInfo_Pet
decode(?GS2U_LookRPInfo_Pet,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_petInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_RPView_PetBaseInfo( X ) end),
	{ V_infoList, Bin3 } = read_array(Bin2, fun(X) -> decode_RPView_AssistBattleInfo( X ) end),
	{ #pk_GS2U_LookRPInfo_Pet {
		roleID = V_roleID,
		petInfoList = V_petInfoList,
		infoList = V_infoList
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_LookRPInfo_Result
decode(?GS2U_LookRPInfo_Result,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_career, Bin3 } = read_uint32( Bin2 ),
	{ V_race, Bin4 } = read_int8( Bin3 ),
	{ V_sex, Bin5 } = read_int8( Bin4 ),
	{ V_head, Bin6 } = read_uint32( Bin5 ),
	{ V_frameID, Bin7 } = read_uint16( Bin6 ),
	{ V_level, Bin8 } = read_uint8( Bin7 ),
	{ V_roleForce, Bin9 } = read_uint32( Bin8 ),
	{ V_equipHonorLevel, Bin10 } = read_uint8( Bin9 ),
	{ V_guildName, Bin11 } = read_string( Bin10 ),
	{ V_playerKillValue, Bin12 } = read_int32( Bin11 ),
	{ V_wingLevel, Bin13 } = read_int32( Bin12 ),
	{ V_propValues, Bin14 } = read_array(Bin13, fun(X) -> read_float( X ) end),
	{ V_equips, Bin15 } = read_array(Bin14, fun(X) -> decode_EquipItemInfo( X ) end),
	{ V_fashionList, Bin16 } = read_array(Bin15, fun(X) -> read_uint32( X ) end),
	{ V_equipRefines, Bin17 } = read_array(Bin16, fun(X) -> decode_EquipRefineLevel( X ) end),
	{ V_equipStar, Bin18 } = read_array(Bin17, fun(X) -> decode_EquipStarLevel( X ) end),
	{ V_equipGemInfos, Bin19 } = read_array(Bin18, fun(X) -> decode_EquipGemInfo( X ) end),
	{ V_recastInfoList, Bin20 } = read_array(Bin19, fun(X) -> decode_RecastPosInfo( X ) end),
	{ #pk_GS2U_LookRPInfo_Result {
		roleID = V_roleID,
		roleName = V_roleName,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		level = V_level,
		roleForce = V_roleForce,
		equipHonorLevel = V_equipHonorLevel,
		guildName = V_guildName,
		playerKillValue = V_playerKillValue,
		wingLevel = V_wingLevel,
		propValues = V_propValues,
		equips = V_equips,
		fashionList = V_fashionList,
		equipRefines = V_equipRefines,
		equipStar = V_equipStar,
		equipGemInfos = V_equipGemInfos,
		recastInfoList = V_recastInfoList
		},
	Bin20 };

%GENERATED from file:bag.h => GS2U_PlayerExtenInfo
decode(?GS2U_PlayerExtenInfo,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_PlayerExtenInfo {
		type = V_type
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_QueryEquipResult
decode(?GS2U_QueryEquipResult,Bin0) ->
	{ V_equipInfo, Bin1 } = decode_EquipItemInfo( Bin0 ),
	{ #pk_GS2U_QueryEquipResult {
		equipInfo = V_equipInfo
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_QueryItemResult
decode(?GS2U_QueryItemResult,Bin0) ->
	{ V_itemInfo, Bin1 } = decode_NormalItemInfo( Bin0 ),
	{ #pk_GS2U_QueryItemResult {
		itemInfo = V_itemInfo
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_Report
decode(?GS2U_Report,Bin0) ->
	{ #pk_GS2U_Report {

		},
	Bin0 };

%GENERATED from file:bag.h => GS2U_Report_Max
decode(?GS2U_Report_Max,Bin0) ->
	{ #pk_GS2U_Report_Max {

		},
	Bin0 };

%GENERATED from file:bag.h => GS2U_RequesBuyIDAck
decode(?GS2U_RequesBuyIDAck,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ V_succ, Bin3 } = read_bool( Bin2 ),
	{ #pk_GS2U_RequesBuyIDAck {
		type = V_type,
		id = V_id,
		succ = V_succ
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_RequestExchangeResourceForeverLimitIDAck
decode(?GS2U_RequestExchangeResourceForeverLimitIDAck,Bin0) ->
	{ V_iDList, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_RequestExchangeResourceForeverLimitIDAck {
		iDList = V_iDList
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_RequestForeverLimitIDAck
decode(?GS2U_RequestForeverLimitIDAck,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_iDList, Bin2 } = read_array(Bin1, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_RequestForeverLimitIDAck {
		type = V_type,
		iDList = V_iDList
		},
	Bin2 };

%GENERATED from file:bag.h => GS2U_ResourceExchangeList
decode(?GS2U_ResourceExchangeList,Bin0) ->
	{ V_resources, Bin1 } = read_array(Bin0, fun(X) -> decode_ExchangeResource( X ) end),
	{ #pk_GS2U_ResourceExchangeList {
		resources = V_resources
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_UpLoadingPhotoResult
decode(?GS2U_UpLoadingPhotoResult,Bin0) ->
	{ V_result, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_UpLoadingPhotoResult {
		result = V_result
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_UpdateEquipItem
decode(?GS2U_UpdateEquipItem,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_operate, Bin2 } = read_uint8( Bin1 ),
	{ V_items, Bin3 } = read_array(Bin2, fun(X) -> decode_EquipItemInfo( X ) end),
	{ #pk_GS2U_UpdateEquipItem {
		type = V_type,
		operate = V_operate,
		items = V_items
		},
	Bin3 };

%GENERATED from file:bag.h => GS2U_UpdateFurnitureStorageSlot
decode(?GS2U_UpdateFurnitureStorageSlot,Bin0) ->
	{ V_slotNum, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_UpdateFurnitureStorageSlot {
		slotNum = V_slotNum
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_UpdateNormalItem
decode(?GS2U_UpdateNormalItem,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_items, Bin2 } = read_array(Bin1, fun(X) -> decode_NormalItemInfo( X ) end),
	{ #pk_GS2U_UpdateNormalItem {
		type = V_type,
		items = V_items
		},
	Bin2 };

%GENERATED from file:bag.h => GS2U_UseItemFireWorksNotice
decode(?GS2U_UseItemFireWorksNotice,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_UseItemFireWorksNotice {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:bag.h => GS2U_WashEquip
decode(?GS2U_WashEquip,Bin0) ->
	{ V_equipPos, Bin1 } = read_uint16( Bin0 ),
	{ V_index, Bin2 } = read_uint16( Bin1 ),
	{ V_propInfo, Bin3 } = decode_EquipPropInfo( Bin2 ),
	{ #pk_GS2U_WashEquip {
		equipPos = V_equipPos,
		index = V_index,
		propInfo = V_propInfo
		},
	Bin3 };

%GENERATED from file:bag.h => GS2u_OwnPortraitFrame
decode(?GS2u_OwnPortraitFrame,Bin0) ->
	{ V_state, Bin1 } = read_uint8( Bin0 ),
	{ V_portraitFrameList, Bin2 } = read_array(Bin1, fun(X) -> decode_PortraitFrame( X ) end),
	{ #pk_GS2u_OwnPortraitFrame {
		state = V_state,
		portraitFrameList = V_portraitFrameList
		},
	Bin2 };

%GENERATED from file:bag.h => MoveGoods
decode(?MoveGoods,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_source, Bin2 } = read_uint8( Bin1 ),
	{ V_target, Bin3 } = read_uint8( Bin2 ),
	{ #pk_MoveGoods {
		itemUID = V_itemUID,
		source = V_source,
		target = V_target
		},
	Bin3 };

%GENERATED from file:bag.h => OpenNewBagSlot
decode(?OpenNewBagSlot,Bin0) ->
	{ V_bagType, Bin1 } = read_uint8( Bin0 ),
	{ V_openNum, Bin2 } = read_uint8( Bin1 ),
	{ #pk_OpenNewBagSlot {
		bagType = V_bagType,
		openNum = V_openNum
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_AddImpression
decode(?U2GS_AddImpression,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_impression, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_AddImpression {
		roleID = V_roleID,
		impression = V_impression
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_AddPraise
decode(?U2GS_AddPraise,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_AddPraise {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_AddTag
decode(?U2GS_AddTag,Bin0) ->
	{ V_tag, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_AddTag {
		tag = V_tag
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_EquipEnhanced
decode(?U2GS_EquipEnhanced,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_equipUID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_EquipEnhanced {
		type = V_type,
		equipUID = V_equipUID
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_EquipRecast
decode(?U2GS_EquipRecast,Bin0) ->
	{ V_equipPos, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_EquipRecast {
		equipPos = V_equipPos
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_EquipRecastAdvance
decode(?U2GS_EquipRecastAdvance,Bin0) ->
	{ V_equipPos, Bin1 } = read_uint16( Bin0 ),
	{ V_pos, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_EquipRecastAdvance {
		equipPos = V_equipPos,
		pos = V_pos
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_EquipRefine
decode(?U2GS_EquipRefine,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_goodluckCharmId, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_EquipRefine {
		type = V_type,
		goodluckCharmId = V_goodluckCharmId
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_EquipRefineOneKey
decode(?U2GS_EquipRefineOneKey,Bin0) ->
	{ #pk_U2GS_EquipRefineOneKey {

		},
	Bin0 };

%GENERATED from file:bag.h => U2GS_EquipResolve
decode(?U2GS_EquipResolve,Bin0) ->
	{ V_equipUIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_EquipResolve {
		equipUIDs = V_equipUIDs
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_EquipUpStar
decode(?U2GS_EquipUpStar,Bin0) ->
	{ V_pos, Bin1 } = read_uint8( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_EquipUpStar {
		pos = V_pos,
		type = V_type
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_EquipUpStarOneKey
decode(?U2GS_EquipUpStarOneKey,Bin0) ->
	{ #pk_U2GS_EquipUpStarOneKey {

		},
	Bin0 };

%GENERATED from file:bag.h => U2GS_GemEmbedMake
decode(?U2GS_GemEmbedMake,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_count, Bin2 } = read_uint32( Bin1 ),
	{ V_flag, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_GemEmbedMake {
		id = V_id,
		count = V_count,
		flag = V_flag
		},
	Bin3 };

%GENERATED from file:bag.h => U2GS_GemEmbedMakeOnce
decode(?U2GS_GemEmbedMakeOnce,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_bindCount, Bin2 } = read_uint32( Bin1 ),
	{ V_unBindCount, Bin3 } = read_uint32( Bin2 ),
	{ #pk_U2GS_GemEmbedMakeOnce {
		id = V_id,
		bindCount = V_bindCount,
		unBindCount = V_unBindCount
		},
	Bin3 };

%GENERATED from file:bag.h => U2GS_GemEmbedOff
decode(?U2GS_GemEmbedOff,Bin0) ->
	{ V_gemUIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_GemEmbedOff {
		gemUIDs = V_gemUIDs
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_GemEmbedOn
decode(?U2GS_GemEmbedOn,Bin0) ->
	{ V_gemEmbedInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_GemEmbedInfo( X ) end),
	{ #pk_U2GS_GemEmbedOn {
		gemEmbedInfoList = V_gemEmbedInfoList
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_GemOperate
decode(?U2GS_GemOperate,Bin0) ->
	{ V_opType, Bin1 } = read_uint16( Bin0 ),
	{ V_equipPos, Bin2 } = read_uint16( Bin1 ),
	{ V_gemPos, Bin3 } = read_uint8( Bin2 ),
	{ V_params, Bin4 } = read_uint64( Bin3 ),
	{ #pk_U2GS_GemOperate {
		opType = V_opType,
		equipPos = V_equipPos,
		gemPos = V_gemPos,
		params = V_params
		},
	Bin4 };

%GENERATED from file:bag.h => U2GS_GetPortraitFrameList
decode(?U2GS_GetPortraitFrameList,Bin0) ->
	{ #pk_U2GS_GetPortraitFrameList {

		},
	Bin0 };

%GENERATED from file:bag.h => U2GS_HonorLevel
decode(?U2GS_HonorLevel,Bin0) ->
	{ #pk_U2GS_HonorLevel {

		},
	Bin0 };

%GENERATED from file:bag.h => U2GS_LockGoods
decode(?U2GS_LockGoods,Bin0) ->
	{ V_goodsUID, Bin1 } = read_uint64( Bin0 ),
	{ V_bagType, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_LockGoods {
		goodsUID = V_goodsUID,
		bagType = V_bagType
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_LookRPInfo_Request
decode(?U2GS_LookRPInfo_Request,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_view_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_LookRPInfo_Request {
		roleID = V_roleID,
		view_type = V_view_type
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_OperatePortraitFrame
decode(?U2GS_OperatePortraitFrame,Bin0) ->
	{ V_state, Bin1 } = read_uint8( Bin0 ),
	{ V_id, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_OperatePortraitFrame {
		state = V_state,
		id = V_id
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_PlayerExtenInfo
decode(?U2GS_PlayerExtenInfo,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_info, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_PlayerExtenInfo {
		type = V_type,
		info = V_info
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_QueryEquipByUID
decode(?U2GS_QueryEquipByUID,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_equipUID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_QueryEquipByUID {
		roleID = V_roleID,
		equipUID = V_equipUID
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_Report
decode(?U2GS_Report,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Report {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_RequesBuyID
decode(?U2GS_RequesBuyID,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_RequesBuyID {
		type = V_type,
		id = V_id
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_RequesForeverLimitID
decode(?U2GS_RequesForeverLimitID,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequesForeverLimitID {
		type = V_type
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_RequestExchangeResource
decode(?U2GS_RequestExchangeResource,Bin0) ->
	{ #pk_U2GS_RequestExchangeResource {

		},
	Bin0 };

%GENERATED from file:bag.h => U2GS_RequestExchangeResourceForeverLimitID
decode(?U2GS_RequestExchangeResourceForeverLimitID,Bin0) ->
	{ #pk_U2GS_RequestExchangeResourceForeverLimitID {

		},
	Bin0 };

%GENERATED from file:bag.h => U2GS_ResourceExchange
decode(?U2GS_ResourceExchange,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_itemCount, Bin2 } = read_uint16( Bin1 ),
	{ V_opType, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_ResourceExchange {
		id = V_id,
		itemCount = V_itemCount,
		opType = V_opType
		},
	Bin3 };

%GENERATED from file:bag.h => U2GS_SellAllEquip
decode(?U2GS_SellAllEquip,Bin0) ->
	{ #pk_U2GS_SellAllEquip {

		},
	Bin0 };

%GENERATED from file:bag.h => U2GS_SharedEquip
decode(?U2GS_SharedEquip,Bin0) ->
	{ V_equipUIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_SharedEquip {
		equipUIDs = V_equipUIDs
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_SortItem
decode(?U2GS_SortItem,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_SortItem {
		type = V_type
		},
	Bin1 };

%GENERATED from file:bag.h => U2GS_UseItem
decode(?U2GS_UseItem,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_useNum, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_UseItem {
		itemUID = V_itemUID,
		useNum = V_useNum
		},
	Bin2 };

%GENERATED from file:bag.h => U2GS_UseMarriageTitleItem
decode(?U2GS_UseMarriageTitleItem,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_useNum, Bin2 } = read_uint16( Bin1 ),
	{ V_text, Bin3 } = read_string( Bin2 ),
	{ #pk_U2GS_UseMarriageTitleItem {
		itemUID = V_itemUID,
		useNum = V_useNum,
		text = V_text
		},
	Bin3 };

%GENERATED from file:bag.h => U2GS_WashEquip
decode(?U2GS_WashEquip,Bin0) ->
	{ V_equipPos, Bin1 } = read_uint16( Bin0 ),
	{ V_propID, Bin2 } = read_uint16( Bin1 ),
	{ V_propValue, Bin3 } = read_float( Bin2 ),
	{ V_index, Bin4 } = read_uint16( Bin3 ),
	{ #pk_U2GS_WashEquip {
		equipPos = V_equipPos,
		propID = V_propID,
		propValue = V_propValue,
		index = V_index
		},
	Bin4 };

%GENERATED from file:bag.h => UpLoadingPhoto
decode(?UpLoadingPhoto,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_sectionNum, Bin3 } = read_uint8( Bin2 ),
	{ V_sectionIndex, Bin4 } = read_uint8( Bin3 ),
	{ V_data, Bin5 } = read_array(Bin4, fun(X) -> read_uint8( X ) end),
	{ #pk_UpLoadingPhoto {
		type = V_type,
		roleID = V_roleID,
		sectionNum = V_sectionNum,
		sectionIndex = V_sectionIndex,
		data = V_data
		},
	Bin5 };

%GENERATED from file:battle.h => C2S_PlayerUseShiftSkill
decode(?C2S_PlayerUseShiftSkill,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint32( Bin1 ),
	{ V_serial, Bin3 } = read_uint32( Bin2 ),
	{ V_targetCodeList, Bin4 } = read_array(Bin3, fun(X) -> read_uint64( X ) end),
	{ V_x, Bin5 } = read_float( Bin4 ),
	{ V_y, Bin6 } = read_float( Bin5 ),
	{ #pk_C2S_PlayerUseShiftSkill {
		code = V_code,
		skillId = V_skillId,
		serial = V_serial,
		targetCodeList = V_targetCodeList,
		x = V_x,
		y = V_y
		},
	Bin6 };

%GENERATED from file:battle.h => C2S_PlayerUseSkill
decode(?C2S_PlayerUseSkill,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint64( Bin1 ),
	{ V_serial, Bin3 } = read_uint32( Bin2 ),
	{ V_targetCodeList, Bin4 } = read_array(Bin3, fun(X) -> read_uint64( X ) end),
	{ #pk_C2S_PlayerUseSkill {
		code = V_code,
		skillId = V_skillId,
		serial = V_serial,
		targetCodeList = V_targetCodeList
		},
	Bin4 };

%GENERATED from file:battle.h => GS2U_AttackOffsetEffect
decode(?GS2U_AttackOffsetEffect,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_targetCode, Bin2 } = read_uint64( Bin1 ),
	{ V_skillId, Bin3 } = read_uint32( Bin2 ),
	{ V_serial, Bin4 } = read_uint32( Bin3 ),
	{ V_code, Bin5 } = read_uint64( Bin4 ),
	{ V_x, Bin6 } = read_float( Bin5 ),
	{ V_y, Bin7 } = read_float( Bin6 ),
	{ #pk_GS2U_AttackOffsetEffect {
		userCode = V_userCode,
		targetCode = V_targetCode,
		skillId = V_skillId,
		serial = V_serial,
		code = V_code,
		x = V_x,
		y = V_y
		},
	Bin7 };

%GENERATED from file:battle.h => GS2U_AttackResult
decode(?GS2U_AttackResult,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_targetCode, Bin2 } = read_uint64( Bin1 ),
	{ V_skillId, Bin3 } = read_uint32( Bin2 ),
	{ V_serial, Bin4 } = read_uint32( Bin3 ),
	{ V_result, Bin5 } = read_array(Bin4, fun(X) -> read_uint32( X ) end),
	{ V_bhp_per, Bin6 } = read_uint8( Bin5 ),
	{ V_ahp_per, Bin7 } = read_uint8( Bin6 ),
	{ V_diffHp, Bin8 } = read_int32( Bin7 ),
	{ V_damageHp, Bin9 } = read_array(Bin8, fun(X) -> read_int32( X ) end),
	{ V_arList, Bin10 } = read_array(Bin9, fun(X) -> decode_AttackResultList( X ) end),
	{ #pk_GS2U_AttackResult {
		userCode = V_userCode,
		targetCode = V_targetCode,
		skillId = V_skillId,
		serial = V_serial,
		result = V_result,
		bhp_per = V_bhp_per,
		ahp_per = V_ahp_per,
		diffHp = V_diffHp,
		damageHp = V_damageHp,
		arList = V_arList
		},
	Bin10 };

%GENERATED from file:battle.h => GS2U_AttackSpeed
decode(?GS2U_AttackSpeed,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_speed, Bin2 } = read_float( Bin1 ),
	{ #pk_GS2U_AttackSpeed {
		code = V_code,
		speed = V_speed
		},
	Bin2 };

%GENERATED from file:battle.h => GS2U_BattleLearnRequest
decode(?GS2U_BattleLearnRequest,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_BattleLearnRequest {
		code = V_code,
		name = V_name
		},
	Bin2 };

%GENERATED from file:battle.h => GS2U_BattleLearnResult
decode(?GS2U_BattleLearnResult,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_targetCode, Bin2 } = read_uint64( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_targetName, Bin4 } = read_string( Bin3 ),
	{ V_result, Bin5 } = read_uint8( Bin4 ),
	{ #pk_GS2U_BattleLearnResult {
		code = V_code,
		targetCode = V_targetCode,
		name = V_name,
		targetName = V_targetName,
		result = V_result
		},
	Bin5 };

%GENERATED from file:battle.h => GS2U_BreakSkill
decode(?GS2U_BreakSkill,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint32( Bin1 ),
	{ V_serial, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_BreakSkill {
		userCode = V_userCode,
		skillId = V_skillId,
		serial = V_serial
		},
	Bin3 };

%GENERATED from file:battle.h => GS2U_CallSkill
decode(?GS2U_CallSkill,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_CallSkill {
		userCode = V_userCode,
		skillId = V_skillId
		},
	Bin2 };

%GENERATED from file:battle.h => GS2U_CarrierUseSkillToObject
decode(?GS2U_CarrierUseSkillToObject,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint32( Bin1 ),
	{ V_serial, Bin3 } = read_uint32( Bin2 ),
	{ V_targetCodeList, Bin4 } = read_array(Bin3, fun(X) -> read_uint64( X ) end),
	{ V_time, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_CarrierUseSkillToObject {
		userCode = V_userCode,
		skillId = V_skillId,
		serial = V_serial,
		targetCodeList = V_targetCodeList,
		time = V_time
		},
	Bin5 };

%GENERATED from file:battle.h => GS2U_Dead
decode(?GS2U_Dead,Bin0) ->
	{ V_deadActorCode, Bin1 } = read_uint64( Bin0 ),
	{ V_killerCode, Bin2 } = read_uint64( Bin1 ),
	{ V_killerName, Bin3 } = read_string( Bin2 ),
	{ V_skillID, Bin4 } = read_uint32( Bin3 ),
	{ V_monsterID, Bin5 } = read_uint16( Bin4 ),
	{ V_serverstringsID, Bin6 } = read_uint32( Bin5 ),
	{ #pk_GS2U_Dead {
		deadActorCode = V_deadActorCode,
		killerCode = V_killerCode,
		killerName = V_killerName,
		skillID = V_skillID,
		monsterID = V_monsterID,
		serverstringsID = V_serverstringsID
		},
	Bin6 };

%GENERATED from file:battle.h => GS2U_DeadToTeam
decode(?GS2U_DeadToTeam,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_killerCode, Bin2 } = read_uint64( Bin1 ),
	{ V_killerName, Bin3 } = read_string( Bin2 ),
	{ V_monsterID, Bin4 } = read_uint16( Bin3 ),
	{ V_serverstringsID, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_DeadToTeam {
		roleID = V_roleID,
		killerCode = V_killerCode,
		killerName = V_killerName,
		monsterID = V_monsterID,
		serverstringsID = V_serverstringsID
		},
	Bin5 };

%GENERATED from file:battle.h => GS2U_ForceDeadNow
decode(?GS2U_ForceDeadNow,Bin0) ->
	{ V_deadActorCode, Bin1 } = read_uint64( Bin0 ),
	{ V_killerCode, Bin2 } = read_uint64( Bin1 ),
	{ V_killerName, Bin3 } = read_string( Bin2 ),
	{ V_skillID, Bin4 } = read_uint32( Bin3 ),
	{ V_monsterID, Bin5 } = read_uint16( Bin4 ),
	{ V_serverstringsID, Bin6 } = read_uint32( Bin5 ),
	{ #pk_GS2U_ForceDeadNow {
		deadActorCode = V_deadActorCode,
		killerCode = V_killerCode,
		killerName = V_killerName,
		skillID = V_skillID,
		monsterID = V_monsterID,
		serverstringsID = V_serverstringsID
		},
	Bin6 };

%GENERATED from file:battle.h => GS2U_IsTriggerCountDown
decode(?GS2U_IsTriggerCountDown,Bin0) ->
	{ V_flag, Bin1 } = read_uint8( Bin0 ),
	{ V_isTrigger, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_IsTriggerCountDown {
		flag = V_flag,
		isTrigger = V_isTrigger
		},
	Bin2 };

%GENERATED from file:battle.h => GS2U_MonsterSpeed
decode(?GS2U_MonsterSpeed,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_speed, Bin2 } = read_float( Bin1 ),
	{ V_moveStatus, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GS2U_MonsterSpeed {
		code = V_code,
		speed = V_speed,
		moveStatus = V_moveStatus
		},
	Bin3 };

%GENERATED from file:battle.h => GS2U_ResponseBattleAck
decode(?GS2U_ResponseBattleAck,Bin0) ->
	{ #pk_GS2U_ResponseBattleAck {

		},
	Bin0 };

%GENERATED from file:battle.h => GS2U_ResponseChangePKMode
decode(?GS2U_ResponseChangePKMode,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_pkMode, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_ResponseChangePKMode {
		code = V_code,
		pkMode = V_pkMode
		},
	Bin2 };

%GENERATED from file:battle.h => GS2U_TriggerSkill
decode(?GS2U_TriggerSkill,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint32( Bin1 ),
	{ V_targetCode, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_TriggerSkill {
		userCode = V_userCode,
		skillId = V_skillId,
		targetCode = V_targetCode
		},
	Bin3 };

%GENERATED from file:battle.h => GS2U_TrunBattleInitList
decode(?GS2U_TrunBattleInitList,Bin0) ->
	{ V_il, Bin1 } = read_array(Bin0, fun(X) -> decode_TurnBattleInit( X ) end),
	{ #pk_GS2U_TrunBattleInitList {
		il = V_il
		},
	Bin1 };

%GENERATED from file:battle.h => GS2U_TrunBattleResultList
decode(?GS2U_TrunBattleResultList,Bin0) ->
	{ V_rl, Bin1 } = read_array(Bin0, fun(X) -> decode_TrunBattleResult( X ) end),
	{ #pk_GS2U_TrunBattleResultList {
		rl = V_rl
		},
	Bin1 };

%GENERATED from file:battle.h => GS2U_UseSkillToObject
decode(?GS2U_UseSkillToObject,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint32( Bin1 ),
	{ V_serial, Bin3 } = read_uint32( Bin2 ),
	{ V_targetCodeList, Bin4 } = read_array(Bin3, fun(X) -> read_uint64( X ) end),
	{ V_time, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_UseSkillToObject {
		userCode = V_userCode,
		skillId = V_skillId,
		serial = V_serial,
		targetCodeList = V_targetCodeList,
		time = V_time
		},
	Bin5 };

%GENERATED from file:battle.h => GS2U_UseSkillToPos
decode(?GS2U_UseSkillToPos,Bin0) ->
	{ V_userCode, Bin1 } = read_uint64( Bin0 ),
	{ V_skillId, Bin2 } = read_uint32( Bin1 ),
	{ V_serial, Bin3 } = read_uint32( Bin2 ),
	{ V_targetCodeList, Bin4 } = read_array(Bin3, fun(X) -> read_uint64( X ) end),
	{ V_x, Bin5 } = read_float( Bin4 ),
	{ V_y, Bin6 } = read_float( Bin5 ),
	{ #pk_GS2U_UseSkillToPos {
		userCode = V_userCode,
		skillId = V_skillId,
		serial = V_serial,
		targetCodeList = V_targetCodeList,
		x = V_x,
		y = V_y
		},
	Bin6 };

%GENERATED from file:battle.h => U2GS_BattleLearn
decode(?U2GS_BattleLearn,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_BattleLearn {
		code = V_code
		},
	Bin1 };

%GENERATED from file:battle.h => U2GS_BattleLearnAck
decode(?U2GS_BattleLearnAck,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_result, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_BattleLearnAck {
		code = V_code,
		result = V_result
		},
	Bin2 };

%GENERATED from file:battle.h => U2GS_RequestBattleAck
decode(?U2GS_RequestBattleAck,Bin0) ->
	{ V_num, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestBattleAck {
		num = V_num
		},
	Bin1 };

%GENERATED from file:battle.h => U2GS_RequestBattleEnd
decode(?U2GS_RequestBattleEnd,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestBattleEnd {
		type = V_type
		},
	Bin1 };

%GENERATED from file:battle.h => U2GS_RequestChangePKMode
decode(?U2GS_RequestChangePKMode,Bin0) ->
	{ V_pkMode, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_RequestChangePKMode {
		pkMode = V_pkMode
		},
	Bin1 };

%GENERATED from file:buff.h => GS2U_BuffHurt
decode(?GS2U_BuffHurt,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_buffUID, Bin2 } = read_uint64( Bin1 ),
	{ V_buffID, Bin3 } = read_uint32( Bin2 ),
	{ V_damageHp, Bin4 } = read_int32( Bin3 ),
	{ V_hp_per, Bin5 } = read_uint8( Bin4 ),
	{ #pk_GS2U_BuffHurt {
		code = V_code,
		buffUID = V_buffUID,
		buffID = V_buffID,
		damageHp = V_damageHp,
		hp_per = V_hp_per
		},
	Bin5 };

%GENERATED from file:buff.h => GS2U_BuffInfo
decode(?GS2U_BuffInfo,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_buffUID, Bin2 } = read_uint64( Bin1 ),
	{ V_buffID, Bin3 } = read_uint32( Bin2 ),
	{ V_skillID, Bin4 } = read_uint32( Bin3 ),
	{ V_level, Bin5 } = read_uint32( Bin4 ),
	{ V_flag, Bin6 } = read_uint8( Bin5 ),
	{ V_serial, Bin7 } = read_uint32( Bin6 ),
	{ V_endTime, Bin8 } = read_int32( Bin7 ),
	{ #pk_GS2U_BuffInfo {
		code = V_code,
		buffUID = V_buffUID,
		buffID = V_buffID,
		skillID = V_skillID,
		level = V_level,
		flag = V_flag,
		serial = V_serial,
		endTime = V_endTime
		},
	Bin8 };

%GENERATED from file:buff.h => GS2U_BuyBuffSuccess
decode(?GS2U_BuyBuffSuccess,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_BuyBuffSuccess {
		id = V_id
		},
	Bin1 };

%GENERATED from file:buff.h => U2GS_BuyBuff
decode(?U2GS_BuyBuff,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_BuyBuff {
		id = V_id
		},
	Bin1 };

%GENERATED from file:buff.h => U2GS_DelBuff
decode(?U2GS_DelBuff,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_buffID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_DelBuff {
		code = V_code,
		buffID = V_buffID
		},
	Bin2 };

%GENERATED from file:business.h => GS2U_BusinessCAInfo
decode(?GS2U_BusinessCAInfo,Bin0) ->
	{ V_cas, Bin1 } = read_array(Bin0, fun(X) -> decode_BusinessCAInfo( X ) end),
	{ #pk_GS2U_BusinessCAInfo {
		cas = V_cas
		},
	Bin1 };

%GENERATED from file:business.h => GS2U_BusinessInfo
decode(?GS2U_BusinessInfo,Bin0) ->
	{ V_lists, Bin1 } = read_array(Bin0, fun(X) -> decode_Business( X ) end),
	{ #pk_GS2U_BusinessInfo {
		lists = V_lists
		},
	Bin1 };

%GENERATED from file:business.h => GS2U_BusinessPlayerInfo
decode(?GS2U_BusinessPlayerInfo,Bin0) ->
	{ V_activityType, Bin1 } = read_uint8( Bin0 ),
	{ V_claimMoney, Bin2 } = read_float( Bin1 ),
	{ V_claimGold, Bin3 } = read_uint32( Bin2 ),
	{ V_claimIsBuy, Bin4 } = read_uint8( Bin3 ),
	{ V_claimConsume, Bin5 } = read_array(Bin4, fun(X) -> decode_CoinConsume( X ) end),
	{ V_claimNum, Bin6 } = read_array(Bin5, fun(X) -> decode_ActivityNum( X ) end),
	{ #pk_GS2U_BusinessPlayerInfo {
		activityType = V_activityType,
		claimMoney = V_claimMoney,
		claimGold = V_claimGold,
		claimIsBuy = V_claimIsBuy,
		claimConsume = V_claimConsume,
		claimNum = V_claimNum
		},
	Bin6 };

%GENERATED from file:business.h => GS2U_DialCostList
decode(?GS2U_DialCostList,Bin0) ->
	{ V_costs, Bin1 } = read_array(Bin0, fun(X) -> decode_DialCost( X ) end),
	{ #pk_GS2U_DialCostList {
		costs = V_costs
		},
	Bin1 };

%GENERATED from file:business.h => GS2U_DialItemList
decode(?GS2U_DialItemList,Bin0) ->
	{ V_items, Bin1 } = read_array(Bin0, fun(X) -> decode_DialItem( X ) end),
	{ #pk_GS2U_DialItemList {
		items = V_items
		},
	Bin1 };

%GENERATED from file:business.h => GS2U_DialRewardList
decode(?GS2U_DialRewardList,Bin0) ->
	{ V_rewards, Bin1 } = read_array(Bin0, fun(X) -> decode_DialReward( X ) end),
	{ #pk_GS2U_DialRewardList {
		rewards = V_rewards
		},
	Bin1 };

%GENERATED from file:business.h => GS2U_JqueryrotateResult
decode(?GS2U_JqueryrotateResult,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_info, Bin2 } = decode_SelfDialInfo( Bin1 ),
	{ V_results, Bin3 } = read_array(Bin2, fun(X) -> decode_DialItem( X ) end),
	{ #pk_GS2U_JqueryrotateResult {
		type = V_type,
		info = V_info,
		results = V_results
		},
	Bin3 };

%GENERATED from file:business.h => GS2U_RechargeSuccess
decode(?GS2U_RechargeSuccess,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_activityType, Bin2 } = read_uint8( Bin1 ),
	{ V_claimGold, Bin3 } = read_uint32( Bin2 ),
	{ V_claimMoney, Bin4 } = read_float( Bin3 ),
	{ V_coins, Bin5 } = read_array(Bin4, fun(X) -> decode_CoinConsume( X ) end),
	{ V_items, Bin6 } = read_array(Bin5, fun(X) -> decode_ActivitySuccessItem( X ) end),
	{ #pk_GS2U_RechargeSuccess {
		id = V_id,
		activityType = V_activityType,
		claimGold = V_claimGold,
		claimMoney = V_claimMoney,
		coins = V_coins,
		items = V_items
		},
	Bin6 };

%GENERATED from file:business.h => GS2U_SelfDialInfo
decode(?GS2U_SelfDialInfo,Bin0) ->
	{ V_infos, Bin1 } = read_array(Bin0, fun(X) -> decode_SelfDialInfo( X ) end),
	{ #pk_GS2U_SelfDialInfo {
		infos = V_infos
		},
	Bin1 };

%GENERATED from file:business.h => U2GS_RequestBusinessInfo
decode(?U2GS_RequestBusinessInfo,Bin0) ->
	{ V_activityType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestBusinessInfo {
		activityType = V_activityType
		},
	Bin1 };

%GENERATED from file:business.h => U2GS_RequestGetBox
decode(?U2GS_RequestGetBox,Bin0) ->
	{ V_boxType, Bin1 } = read_uint8( Bin0 ),
	{ V_getTimes, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_RequestGetBox {
		boxType = V_boxType,
		getTimes = V_getTimes
		},
	Bin2 };

%GENERATED from file:business.h => U2GS_RequestGetGift
decode(?U2GS_RequestGetGift,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestGetGift {
		id = V_id
		},
	Bin1 };

%GENERATED from file:business.h => U2GS_RequestJqueryrotate
decode(?U2GS_RequestJqueryrotate,Bin0) ->
	{ V_boxType, Bin1 } = read_uint8( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_RequestJqueryrotate {
		boxType = V_boxType,
		id = V_id
		},
	Bin2 };

%GENERATED from file:business.h => U2GS_RequestSelfDialInfo
decode(?U2GS_RequestSelfDialInfo,Bin0) ->
	{ #pk_U2GS_RequestSelfDialInfo {

		},
	Bin0 };

%GENERATED from file:companion.h => GS2U_InviteFriendToMe
decode(?GS2U_InviteFriendToMe,Bin0) ->
	{ V_inviteRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_inviteName, Bin2 } = read_string( Bin1 ),
	{ V_mapID, Bin3 } = read_uint32( Bin2 ),
	{ V_x, Bin4 } = read_float( Bin3 ),
	{ V_y, Bin5 } = read_float( Bin4 ),
	{ #pk_GS2U_InviteFriendToMe {
		inviteRoleID = V_inviteRoleID,
		inviteName = V_inviteName,
		mapID = V_mapID,
		x = V_x,
		y = V_y
		},
	Bin5 };

%GENERATED from file:companion.h => GS2U_RecvInviteFriend
decode(?GS2U_RecvInviteFriend,Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ V_companionID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_RecvInviteFriend {
		name = V_name,
		companionID = V_companionID
		},
	Bin2 };

%GENERATED from file:companion.h => GS2U_RequestCompanion
decode(?GS2U_RequestCompanion,Bin0) ->
	{ V_members, Bin1 } = read_array(Bin0, fun(X) -> decode_CompanionMember( X ) end),
	{ V_max_member, Bin2 } = read_uint16( Bin1 ),
	{ V_profileLevel, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_RequestCompanion {
		members = V_members,
		max_member = V_max_member,
		profileLevel = V_profileLevel
		},
	Bin3 };

%GENERATED from file:companion.h => GS2U_ToTargetFriendAck
decode(?GS2U_ToTargetFriendAck,Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_ToTargetFriendAck {
		mapID = V_mapID,
		x = V_x,
		y = V_y
		},
	Bin3 };

%GENERATED from file:companion.h => U2GS_AgreeInvite
decode(?U2GS_AgreeInvite,Bin0) ->
	{ V_companionID, Bin1 } = read_uint64( Bin0 ),
	{ V_isAgree, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_AgreeInvite {
		companionID = V_companionID,
		isAgree = V_isAgree
		},
	Bin2 };

%GENERATED from file:companion.h => U2GS_ChangePoseID
decode(?U2GS_ChangePoseID,Bin0) ->
	{ V_poseID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ChangePoseID {
		poseID = V_poseID
		},
	Bin1 };

%GENERATED from file:companion.h => U2GS_CreateCompanion
decode(?U2GS_CreateCompanion,Bin0) ->
	{ #pk_U2GS_CreateCompanion {

		},
	Bin0 };

%GENERATED from file:companion.h => U2GS_ExitCompanion
decode(?U2GS_ExitCompanion,Bin0) ->
	{ #pk_U2GS_ExitCompanion {

		},
	Bin0 };

%GENERATED from file:companion.h => U2GS_InviteFriend
decode(?U2GS_InviteFriend,Bin0) ->
	{ V_target_roleid, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_InviteFriend {
		target_roleid = V_target_roleid
		},
	Bin1 };

%GENERATED from file:companion.h => U2GS_InviteToMe
decode(?U2GS_InviteToMe,Bin0) ->
	{ #pk_U2GS_InviteToMe {

		},
	Bin0 };

%GENERATED from file:companion.h => U2GS_KickCompanion
decode(?U2GS_KickCompanion,Bin0) ->
	{ V_target_roleid, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_KickCompanion {
		target_roleid = V_target_roleid
		},
	Bin1 };

%GENERATED from file:companion.h => U2GS_RequestCompanion
decode(?U2GS_RequestCompanion,Bin0) ->
	{ #pk_U2GS_RequestCompanion {

		},
	Bin0 };

%GENERATED from file:companion.h => U2GS_ToTargetFriend
decode(?U2GS_ToTargetFriend,Bin0) ->
	{ V_target_roleid, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_ToTargetFriend {
		target_roleid = V_target_roleid
		},
	Bin1 };

%GENERATED from file:companion.h => U2GS_ToTargetFriendResult
decode(?U2GS_ToTargetFriendResult,Bin0) ->
	{ V_inviteRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_comming, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_ToTargetFriendResult {
		inviteRoleID = V_inviteRoleID,
		comming = V_comming
		},
	Bin2 };

%GENERATED from file:copy.h => ActiveGuildCopy
decode(?ActiveGuildCopy,Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_ActiveGuildCopy {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:copy.h => GS2U_BossBattleRankResult
decode(?GS2U_BossBattleRankResult,Bin0) ->
	{ V_curBossID, Bin1 } = read_uint32( Bin0 ),
	{ V_curPLeftTime, Bin2 } = read_uint32( Bin1 ),
	{ V_curGLeftTime, Bin3 } = read_uint32( Bin2 ),
	{ V_curRankNum, Bin4 } = read_uint32( Bin3 ),
	{ V_curGuildRankNum, Bin5 } = read_uint32( Bin4 ),
	{ V_rankList, Bin6 } = read_array(Bin5, fun(X) -> decode_BossRankInfo( X ) end),
	{ V_guildrankList, Bin7 } = read_array(Bin6, fun(X) -> decode_BossRankInfo( X ) end),
	{ #pk_GS2U_BossBattleRankResult {
		curBossID = V_curBossID,
		curPLeftTime = V_curPLeftTime,
		curGLeftTime = V_curGLeftTime,
		curRankNum = V_curRankNum,
		curGuildRankNum = V_curGuildRankNum,
		rankList = V_rankList,
		guildrankList = V_guildrankList
		},
	Bin7 };

%GENERATED from file:copy.h => GS2U_BossBattleState
decode(?GS2U_BossBattleState,Bin0) ->
	{ V_flag, Bin1 } = read_uint8( Bin0 ),
	{ V_mapID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_BossBattleState {
		flag = V_flag,
		mapID = V_mapID
		},
	Bin2 };

%GENERATED from file:copy.h => GS2U_ChapterInfo
decode(?GS2U_ChapterInfo,Bin0) ->
	{ V_chapter, Bin1 } = decode_chapterInfo( Bin0 ),
	{ #pk_GS2U_ChapterInfo {
		chapter = V_chapter
		},
	Bin1 };

%GENERATED from file:copy.h => GS2U_CopyMapLeftTime
decode(?GS2U_CopyMapLeftTime,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_leftTimeMs, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_CopyMapLeftTime {
		mapID = V_mapID,
		leftTimeMs = V_leftTimeMs
		},
	Bin2 };

%GENERATED from file:copy.h => GS2U_CopyMapSchedulePlayAnimation
decode(?GS2U_CopyMapSchedulePlayAnimation,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_schedule, Bin2 } = read_uint32( Bin1 ),
	{ V_animationID, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_CopyMapSchedulePlayAnimation {
		mapID = V_mapID,
		schedule = V_schedule,
		animationID = V_animationID
		},
	Bin3 };

%GENERATED from file:copy.h => GS2U_CopyMapSchedulePlayCharacter
decode(?GS2U_CopyMapSchedulePlayCharacter,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_schedule, Bin2 } = read_uint32( Bin1 ),
	{ V_characterIDs, Bin3 } = read_array(Bin2, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_CopyMapSchedulePlayCharacter {
		mapID = V_mapID,
		schedule = V_schedule,
		characterIDs = V_characterIDs
		},
	Bin3 };

%GENERATED from file:copy.h => GS2U_CopySpecialSchedule
decode(?GS2U_CopySpecialSchedule,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_schedule, Bin2 } = read_uint16( Bin1 ),
	{ V_code, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_CopySpecialSchedule {
		mapID = V_mapID,
		schedule = V_schedule,
		code = V_code
		},
	Bin3 };

%GENERATED from file:copy.h => GS2U_DevilCopyMapRankList
decode(?GS2U_DevilCopyMapRankList,Bin0) ->
	{ V_instanceGroup, Bin1 } = read_uint32( Bin0 ),
	{ V_rankList, Bin2 } = read_array(Bin1, fun(X) -> decode_CopyMapRankInfo( X ) end),
	{ #pk_GS2U_DevilCopyMapRankList {
		instanceGroup = V_instanceGroup,
		rankList = V_rankList
		},
	Bin2 };

%GENERATED from file:copy.h => GS2U_DevilCopyMapStarList
decode(?GS2U_DevilCopyMapStarList,Bin0) ->
	{ V_starList, Bin1 } = read_array(Bin0, fun(X) -> decode_DevilCopyMapStarInfo( X ) end),
	{ #pk_GS2U_DevilCopyMapStarList {
		starList = V_starList
		},
	Bin1 };

%GENERATED from file:copy.h => GS2U_FestivalTimeInfo
decode(?GS2U_FestivalTimeInfo,Bin0) ->
	{ V_timeinfo, Bin1 } = read_array(Bin0, fun(X) -> decode_OneFestivalTimeInfo( X ) end),
	{ #pk_GS2U_FestivalTimeInfo {
		timeinfo = V_timeinfo
		},
	Bin1 };

%GENERATED from file:copy.h => GS2U_IsGuildCopyOpen
decode(?GS2U_IsGuildCopyOpen,Bin0) ->
	{ V_flag, Bin1 } = read_bool( Bin0 ),
	{ V_time, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_IsGuildCopyOpen {
		flag = V_flag,
		time = V_time
		},
	Bin2 };

%GENERATED from file:copy.h => GS2U_MaterialInfo
decode(?GS2U_MaterialInfo,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_leftSeconds, Bin2 } = read_uint32( Bin1 ),
	{ V_chapter, Bin3 } = decode_chapterInfo( Bin2 ),
	{ V_towerList, Bin4 } = read_array(Bin3, fun(X) -> decode_towerInfo( X ) end),
	{ #pk_GS2U_MaterialInfo {
		mapID = V_mapID,
		leftSeconds = V_leftSeconds,
		chapter = V_chapter,
		towerList = V_towerList
		},
	Bin4 };

%GENERATED from file:copy.h => GS2U_MoneyDungeonInfo
decode(?GS2U_MoneyDungeonInfo,Bin0) ->
	{ V_leftSeconds, Bin1 } = read_uint32( Bin0 ),
	{ V_maxChapter, Bin2 } = read_uint16( Bin1 ),
	{ V_curChapter, Bin3 } = read_uint16( Bin2 ),
	{ V_listMonsterID, Bin4 } = read_array(Bin3, fun(X) -> read_uint16( X ) end),
	{ V_listMonsterCountMax, Bin5 } = read_array(Bin4, fun(X) -> read_uint8( X ) end),
	{ V_listMonsterCountKill, Bin6 } = read_array(Bin5, fun(X) -> read_uint8( X ) end),
	{ V_curLeftCount, Bin7 } = read_uint8( Bin6 ),
	{ #pk_GS2U_MoneyDungeonInfo {
		leftSeconds = V_leftSeconds,
		maxChapter = V_maxChapter,
		curChapter = V_curChapter,
		listMonsterID = V_listMonsterID,
		listMonsterCountMax = V_listMonsterCountMax,
		listMonsterCountKill = V_listMonsterCountKill,
		curLeftCount = V_curLeftCount
		},
	Bin7 };

%GENERATED from file:copy.h => GS2U_SendGuildCopyOpenTime
decode(?GS2U_SendGuildCopyOpenTime,Bin0) ->
	{ V_time, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_SendGuildCopyOpenTime {
		time = V_time
		},
	Bin1 };

%GENERATED from file:copy.h => GS2U_SpiritArea_Tick_Sync
decode(?GS2U_SpiritArea_Tick_Sync,Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_timeAll, Bin2 } = read_uint32( Bin1 ),
	{ V_wave, Bin3 } = read_uint8( Bin2 ),
	{ V_state, Bin4 } = read_uint8( Bin3 ),
	{ V_isAssist, Bin5 } = read_bool( Bin4 ),
	{ #pk_GS2U_SpiritArea_Tick_Sync {
		time = V_time,
		timeAll = V_timeAll,
		wave = V_wave,
		state = V_state,
		isAssist = V_isAssist
		},
	Bin5 };

%GENERATED from file:copy.h => GS2U_SpiritArea_Wake_Sync
decode(?GS2U_SpiritArea_Wake_Sync,Bin0) ->
	{ V_skillID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_SpiritArea_Wake_Sync {
		skillID = V_skillID
		},
	Bin1 };

%GENERATED from file:copy.h => GS2U_TowerInfo
decode(?GS2U_TowerInfo,Bin0) ->
	{ V_info, Bin1 } = decode_towerInfo( Bin0 ),
	{ #pk_GS2U_TowerInfo {
		info = V_info
		},
	Bin1 };

%GENERATED from file:copy.h => GS2U_UpdateDevilCopyMapStar
decode(?GS2U_UpdateDevilCopyMapStar,Bin0) ->
	{ V_starInfo, Bin1 } = decode_DevilCopyMapStarInfo( Bin0 ),
	{ #pk_GS2U_UpdateDevilCopyMapStar {
		starInfo = V_starInfo
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS2U_BuyCopyReward
decode(?U2GS2U_BuyCopyReward,Bin0) ->
	{ V_mapSubType, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS2U_BuyCopyReward {
		mapSubType = V_mapSubType
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS2U_CopyMapScheduleShow2
decode(?U2GS2U_CopyMapScheduleShow2,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_show2ID, Bin2 } = read_uint16( Bin1 ),
	{ V_groupID, Bin3 } = read_uint64( Bin2 ),
	{ V_scheduleID, Bin4 } = read_uint32( Bin3 ),
	{ V_isInit, Bin5 } = read_bool( Bin4 ),
	{ #pk_U2GS2U_CopyMapScheduleShow2 {
		mapID = V_mapID,
		show2ID = V_show2ID,
		groupID = V_groupID,
		scheduleID = V_scheduleID,
		isInit = V_isInit
		},
	Bin5 };

%GENERATED from file:copy.h => U2GS_BuyFestivalPacket
decode(?U2GS_BuyFestivalPacket,Bin0) ->
	{ V_festivalID, Bin1 } = read_uint32( Bin0 ),
	{ V_packetID, Bin2 } = read_uint32( Bin1 ),
	{ V_buynum, Bin3 } = read_uint32( Bin2 ),
	{ #pk_U2GS_BuyFestivalPacket {
		festivalID = V_festivalID,
		packetID = V_packetID,
		buynum = V_buynum
		},
	Bin3 };

%GENERATED from file:copy.h => U2GS_CopyMapSchedulePlayAnimationOver
decode(?U2GS_CopyMapSchedulePlayAnimationOver,Bin0) ->
	{ V_animationID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_CopyMapSchedulePlayAnimationOver {
		animationID = V_animationID
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS_CopyMapSchedulePlayCharacterOver
decode(?U2GS_CopyMapSchedulePlayCharacterOver,Bin0) ->
	{ V_schedule, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_CopyMapSchedulePlayCharacterOver {
		schedule = V_schedule
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS_EnterBossBattle
decode(?U2GS_EnterBossBattle,Bin0) ->
	{ #pk_U2GS_EnterBossBattle {

		},
	Bin0 };

%GENERATED from file:copy.h => U2GS_EnterFestivalCopy
decode(?U2GS_EnterFestivalCopy,Bin0) ->
	{ V_festivalID, Bin1 } = read_uint32( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_EnterFestivalCopy {
		festivalID = V_festivalID,
		type = V_type
		},
	Bin2 };

%GENERATED from file:copy.h => U2GS_EnterGuildCopy
decode(?U2GS_EnterGuildCopy,Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_EnterGuildCopy {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS_GoonCopyMap
decode(?U2GS_GoonCopyMap,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_GoonCopyMap {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS_MoneyDungeonGiveup
decode(?U2GS_MoneyDungeonGiveup,Bin0) ->
	{ #pk_U2GS_MoneyDungeonGiveup {

		},
	Bin0 };

%GENERATED from file:copy.h => U2GS_MoneyDungeonNext
decode(?U2GS_MoneyDungeonNext,Bin0) ->
	{ #pk_U2GS_MoneyDungeonNext {

		},
	Bin0 };

%GENERATED from file:copy.h => U2GS_QueryDevilCopyMapRankList
decode(?U2GS_QueryDevilCopyMapRankList,Bin0) ->
	{ V_instanceGroup, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_QueryDevilCopyMapRankList {
		instanceGroup = V_instanceGroup
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS_QueryDevilCopyMapStarList
decode(?U2GS_QueryDevilCopyMapStarList,Bin0) ->
	{ #pk_U2GS_QueryDevilCopyMapStarList {

		},
	Bin0 };

%GENERATED from file:copy.h => U2GS_RequestAutoDeal
decode(?U2GS_RequestAutoDeal,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_RequestAutoDeal {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS_RequestMaterialInfo
decode(?U2GS_RequestMaterialInfo,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_RequestMaterialInfo {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:copy.h => U2GS_UpTower
decode(?U2GS_UpTower,Bin0) ->
	{ V_dataID, Bin1 } = read_uint32( Bin0 ),
	{ V_type, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_UpTower {
		dataID = V_dataID,
		type = V_type
		},
	Bin2 };

%GENERATED from file:copy.h => U2GS_startNextChapter
decode(?U2GS_startNextChapter,Bin0) ->
	{ #pk_U2GS_startNextChapter {

		},
	Bin0 };

%GENERATED from file:copy.h => UpdataGuildHurtToBoss
decode(?UpdataGuildHurtToBoss,Bin0) ->
	{ V_hurt, Bin1 } = read_uint64( Bin0 ),
	{ #pk_UpdataGuildHurtToBoss {
		hurt = V_hurt
		},
	Bin1 };

%GENERATED from file:copy.h => UpdataHurtToBoss
decode(?UpdataHurtToBoss,Bin0) ->
	{ V_hurt, Bin1 } = read_uint64( Bin0 ),
	{ #pk_UpdataHurtToBoss {
		hurt = V_hurt
		},
	Bin1 };

%GENERATED from file:fashion.h => GS2U_ActiveFashionSuitList
decode(?GS2U_ActiveFashionSuitList,Bin0) ->
	{ V_activeFashionSuitList, Bin1 } = read_array(Bin0, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_ActiveFashionSuitList {
		activeFashionSuitList = V_activeFashionSuitList
		},
	Bin1 };

%GENERATED from file:fashion.h => GS2U_FashionGiftAck
decode(?GS2U_FashionGiftAck,Bin0) ->
	{ V_getFashionGiftAckList, Bin1 } = read_array(Bin0, fun(X) -> decode_getFashionGiftAck( X ) end),
	{ #pk_GS2U_FashionGiftAck {
		getFashionGiftAckList = V_getFashionGiftAckList
		},
	Bin1 };

%GENERATED from file:fashion.h => GS2U_FashionList
decode(?GS2U_FashionList,Bin0) ->
	{ V_datas, Bin1 } = read_array(Bin0, fun(X) -> decode_FashionInfo( X ) end),
	{ #pk_GS2U_FashionList {
		datas = V_datas
		},
	Bin1 };

%GENERATED from file:fashion.h => GS2U_FashionResult
decode(?GS2U_FashionResult,Bin0) ->
	{ V_fashionID, Bin1 } = read_uint32( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ V_value, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_FashionResult {
		fashionID = V_fashionID,
		type = V_type,
		value = V_value
		},
	Bin3 };

%GENERATED from file:fashion.h => GS2U_FashionRoomLevelUp
decode(?GS2U_FashionRoomLevelUp,Bin0) ->
	{ V_roomLevel, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_FashionRoomLevelUp {
		roomLevel = V_roomLevel
		},
	Bin1 };

%GENERATED from file:fashion.h => U2GS_ActiveFashionSuit
decode(?U2GS_ActiveFashionSuit,Bin0) ->
	{ V_flag, Bin1 } = read_bool( Bin0 ),
	{ V_fashionSuitID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_ActiveFashionSuit {
		flag = V_flag,
		fashionSuitID = V_fashionSuitID
		},
	Bin2 };

%GENERATED from file:fashion.h => U2GS_BuyFashion
decode(?U2GS_BuyFashion,Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_fashionID, Bin2 } = read_uint32( Bin1 ),
	{ V_time, Bin3 } = read_uint32( Bin2 ),
	{ V_type, Bin4 } = read_uint8( Bin3 ),
	{ #pk_U2GS_BuyFashion {
		itemID = V_itemID,
		fashionID = V_fashionID,
		time = V_time,
		type = V_type
		},
	Bin4 };

%GENERATED from file:fashion.h => U2GS_FashionBuyRequest
decode(?U2GS_FashionBuyRequest,Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_sex, Bin2 } = read_int32( Bin1 ),
	{ V_itemid, Bin3 } = read_uint32( Bin2 ),
	{ V_tarRoleID, Bin4 } = read_uint64( Bin3 ),
	{ V_give, Bin5 } = read_string( Bin4 ),
	{ #pk_U2GS_FashionBuyRequest {
		id = V_id,
		sex = V_sex,
		itemid = V_itemid,
		tarRoleID = V_tarRoleID,
		give = V_give
		},
	Bin5 };

%GENERATED from file:fashion.h => U2GS_FashionRoomLevelUp
decode(?U2GS_FashionRoomLevelUp,Bin0) ->
	{ #pk_U2GS_FashionRoomLevelUp {

		},
	Bin0 };

%GENERATED from file:fashion.h => U2GS_FashionThanksMail
decode(?U2GS_FashionThanksMail,Bin0) ->
	{ V_beGiveName, Bin1 } = read_string( Bin0 ),
	{ V_giveName, Bin2 } = read_string( Bin1 ),
	{ V_giveRole, Bin3 } = read_uint64( Bin2 ),
	{ #pk_U2GS_FashionThanksMail {
		beGiveName = V_beGiveName,
		giveName = V_giveName,
		giveRole = V_giveRole
		},
	Bin3 };

%GENERATED from file:fashion.h => U2GS_IsDisplayFashion
decode(?U2GS_IsDisplayFashion,Bin0) ->
	{ V_flag, Bin1 } = read_int8( Bin0 ),
	{ #pk_U2GS_IsDisplayFashion {
		flag = V_flag
		},
	Bin1 };

%GENERATED from file:fashion.h => U2GS_OperateFashion
decode(?U2GS_OperateFashion,Bin0) ->
	{ V_fashionID, Bin1 } = read_uint32( Bin0 ),
	{ V_flag, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_OperateFashion {
		fashionID = V_fashionID,
		flag = V_flag
		},
	Bin2 };

%GENERATED from file:floating.h => GS2U_FloatingAward
decode(?GS2U_FloatingAward,Bin0) ->
	{ V_rewardList, Bin1 } = read_array(Bin0, fun(X) -> decode_FloatingAward( X ) end),
	{ #pk_GS2U_FloatingAward {
		rewardList = V_rewardList
		},
	Bin1 };

%GENERATED from file:floating.h => GS2U_FloatingSchedule
decode(?GS2U_FloatingSchedule,Bin0) ->
	{ V_lastcluesID, Bin1 } = read_uint32( Bin0 ),
	{ V_isInit, Bin2 } = read_bool( Bin1 ),
	{ V_condList, Bin3 } = read_array(Bin2, fun(X) -> decode_Conditions( X ) end),
	{ #pk_GS2U_FloatingSchedule {
		lastcluesID = V_lastcluesID,
		isInit = V_isInit,
		condList = V_condList
		},
	Bin3 };

%GENERATED from file:floating.h => GS2U_ReceiveFloatingAward
decode(?GS2U_ReceiveFloatingAward,Bin0) ->
	{ V_isSuccss, Bin1 } = read_bool( Bin0 ),
	{ V_reward, Bin2 } = decode_FloatingAward( Bin1 ),
	{ #pk_GS2U_ReceiveFloatingAward {
		isSuccss = V_isSuccss,
		reward = V_reward
		},
	Bin2 };

%GENERATED from file:floating.h => U2GS_RequestFloatingAward
decode(?U2GS_RequestFloatingAward,Bin0) ->
	{ V_pieceID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestFloatingAward {
		pieceID = V_pieceID
		},
	Bin1 };

%GENERATED from file:friend.h => GS2U_Friend2AddFromBlack_Ask
decode(?GS2U_Friend2AddFromBlack_Ask,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_Friend2AddFromBlack_Ask {
		id = V_id,
		name = V_name
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2ApplicantReset_Sync
decode(?GS2U_Friend2ApplicantReset_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint16( Bin0 ),
	{ V_page, Bin2 } = read_uint8( Bin1 ),
	{ V_listInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_Friend2InfoBase( X ) end),
	{ #pk_GS2U_Friend2ApplicantReset_Sync {
		count = V_count,
		page = V_page,
		listInfo = V_listInfo
		},
	Bin3 };

%GENERATED from file:friend.h => GS2U_Friend2BanFromFormal_Ask
decode(?GS2U_Friend2BanFromFormal_Ask,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_Friend2BanFromFormal_Ask {
		id = V_id,
		name = V_name
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2BanWithUnbanAndDel_Ask
decode(?GS2U_Friend2BanWithUnbanAndDel_Ask,Bin0) ->
	{ V_idUnban, Bin1 } = read_uint64( Bin0 ),
	{ V_nameUnban, Bin2 } = read_string( Bin1 ),
	{ V_idDel, Bin3 } = read_uint64( Bin2 ),
	{ V_nameDel, Bin4 } = read_string( Bin3 ),
	{ #pk_GS2U_Friend2BanWithUnbanAndDel_Ask {
		idUnban = V_idUnban,
		nameUnban = V_nameUnban,
		idDel = V_idDel,
		nameDel = V_nameDel
		},
	Bin4 };

%GENERATED from file:friend.h => GS2U_Friend2BanWithUnban_Ask
decode(?GS2U_Friend2BanWithUnban_Ask,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_Friend2BanWithUnban_Ask {
		id = V_id,
		name = V_name
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2BlackReset_Sync
decode(?GS2U_Friend2BlackReset_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint16( Bin0 ),
	{ V_page, Bin2 } = read_uint8( Bin1 ),
	{ V_listInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_Friend2InfoBase( X ) end),
	{ #pk_GS2U_Friend2BlackReset_Sync {
		count = V_count,
		page = V_page,
		listInfo = V_listInfo
		},
	Bin3 };

%GENERATED from file:friend.h => GS2U_Friend2ClosenessChange_Sync
decode(?GS2U_Friend2ClosenessChange_Sync,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_closeness, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_Friend2ClosenessChange_Sync {
		id = V_id,
		closeness = V_closeness
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2CrossAdd2Failed_Ack
decode(?GS2U_Friend2CrossAdd2Failed_Ack,Bin0) ->
	{ V_reason, Bin1 } = read_uint32( Bin0 ),
	{ V_listDel, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_Friend2CrossAdd2Failed_Ack {
		reason = V_reason,
		listDel = V_listDel
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2CrossAdd2_Ack
decode(?GS2U_Friend2CrossAdd2_Ack,Bin0) ->
	{ V_info, Bin1 } = decode_Friend2InfoCross( Bin0 ),
	{ #pk_GS2U_Friend2CrossAdd2_Ack {
		info = V_info
		},
	Bin1 };

%GENERATED from file:friend.h => GS2U_Friend2CrossAdd_Sync
decode(?GS2U_Friend2CrossAdd_Sync,Bin0) ->
	{ V_info, Bin1 } = decode_Friend2InfoCross( Bin0 ),
	{ V_listDel, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_Friend2CrossAdd_Sync {
		info = V_info,
		listDel = V_listDel
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2CrossAll_Sync
decode(?GS2U_Friend2CrossAll_Sync,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_listAll, Bin2 } = read_array(Bin1, fun(X) -> decode_Friend2InfoCross( X ) end),
	{ #pk_GS2U_Friend2CrossAll_Sync {
		type = V_type,
		listAll = V_listAll
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2CrossDel_Ack
decode(?GS2U_Friend2CrossDel_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_isFix, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_Friend2CrossDel_Ack {
		id = V_id,
		isFix = V_isFix
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2CrossInit_Sync
decode(?GS2U_Friend2CrossInit_Sync,Bin0) ->
	{ V_listCross, Bin1 } = read_array(Bin0, fun(X) -> decode_Friend2InfoCross( X ) end),
	{ V_listApply, Bin2 } = read_array(Bin1, fun(X) -> decode_Friend2InfoCross( X ) end),
	{ #pk_GS2U_Friend2CrossInit_Sync {
		listCross = V_listCross,
		listApply = V_listApply
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2ForLook_Ack
decode(?GS2U_Friend2ForLook_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_relation, Bin3 } = read_uint8( Bin2 ),
	{ V_like, Bin4 } = read_uint32( Bin3 ),
	{ V_isGiveLike, Bin5 } = read_bool( Bin4 ),
	{ V_level, Bin6 } = read_uint16( Bin5 ),
	{ V_charm, Bin7 } = read_uint32( Bin6 ),
	{ #pk_GS2U_Friend2ForLook_Ack {
		id = V_id,
		name = V_name,
		relation = V_relation,
		like = V_like,
		isGiveLike = V_isGiveLike,
		level = V_level,
		charm = V_charm
		},
	Bin7 };

%GENERATED from file:friend.h => GS2U_Friend2FormalChatVoice_AckR
decode(?GS2U_Friend2FormalChatVoice_AckR,Bin0) ->
	{ V_senderID, Bin1 } = read_uint64( Bin0 ),
	{ V_receiverID, Bin2 } = read_uint64( Bin1 ),
	{ V_time, Bin3 } = read_uint32( Bin2 ),
	{ V_duration, Bin4 } = read_float( Bin3 ),
	{ V_count, Bin5 } = read_uint8( Bin4 ),
	{ V_index, Bin6 } = read_uint8( Bin5 ),
	{ V_data, Bin7 } = read_array(Bin6, fun(X) -> read_uint8( X ) end),
	{ V_relation, Bin8 } = read_uint8( Bin7 ),
	{ #pk_GS2U_Friend2FormalChatVoice_AckR {
		senderID = V_senderID,
		receiverID = V_receiverID,
		time = V_time,
		duration = V_duration,
		count = V_count,
		index = V_index,
		data = V_data,
		relation = V_relation
		},
	Bin8 };

%GENERATED from file:friend.h => GS2U_Friend2FormalChatVoice_AckS
decode(?GS2U_Friend2FormalChatVoice_AckS,Bin0) ->
	{ V_senderID, Bin1 } = read_uint64( Bin0 ),
	{ V_receiverID, Bin2 } = read_uint64( Bin1 ),
	{ V_time, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_Friend2FormalChatVoice_AckS {
		senderID = V_senderID,
		receiverID = V_receiverID,
		time = V_time
		},
	Bin3 };

%GENERATED from file:friend.h => GS2U_Friend2FormalChat_Ack
decode(?GS2U_Friend2FormalChat_Ack,Bin0) ->
	{ V_senderID, Bin1 } = read_uint64( Bin0 ),
	{ V_receiverID, Bin2 } = read_uint64( Bin1 ),
	{ V_time, Bin3 } = read_uint32( Bin2 ),
	{ V_content, Bin4 } = read_string( Bin3 ),
	{ V_relation, Bin5 } = read_uint8( Bin4 ),
	{ #pk_GS2U_Friend2FormalChat_Ack {
		senderID = V_senderID,
		receiverID = V_receiverID,
		time = V_time,
		content = V_content,
		relation = V_relation
		},
	Bin5 };

%GENERATED from file:friend.h => GS2U_Friend2FormalForMarriage_Sync
decode(?GS2U_Friend2FormalForMarriage_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint16( Bin0 ),
	{ V_hasAP, Bin2 } = read_bool( Bin1 ),
	{ V_page, Bin3 } = read_uint8( Bin2 ),
	{ V_listInfo, Bin4 } = read_array(Bin3, fun(X) -> decode_Friend2InfoFormal( X ) end),
	{ #pk_GS2U_Friend2FormalForMarriage_Sync {
		count = V_count,
		hasAP = V_hasAP,
		page = V_page,
		listInfo = V_listInfo
		},
	Bin4 };

%GENERATED from file:friend.h => GS2U_Friend2FormalReset_Sync
decode(?GS2U_Friend2FormalReset_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint16( Bin0 ),
	{ V_hasAP, Bin2 } = read_bool( Bin1 ),
	{ V_page, Bin3 } = read_uint8( Bin2 ),
	{ V_listInfo, Bin4 } = read_array(Bin3, fun(X) -> decode_Friend2InfoFormal( X ) end),
	{ #pk_GS2U_Friend2FormalReset_Sync {
		count = V_count,
		hasAP = V_hasAP,
		page = V_page,
		listInfo = V_listInfo
		},
	Bin4 };

%GENERATED from file:friend.h => GS2U_Friend2GetBack_AddRet
decode(?GS2U_Friend2GetBack_AddRet,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_Friend2GetBack_AddRet {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => GS2U_Friend2GetBack_IgnoreRet
decode(?GS2U_Friend2GetBack_IgnoreRet,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_Friend2GetBack_IgnoreRet {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => GS2U_Friend2GetBack_SyncInfo
decode(?GS2U_Friend2GetBack_SyncInfo,Bin0) ->
	{ V_getBackList, Bin1 } = read_array(Bin0, fun(X) -> decode_Friend2GetBackInfo( X ) end),
	{ #pk_GS2U_Friend2GetBack_SyncInfo {
		getBackList = V_getBackList
		},
	Bin1 };

%GENERATED from file:friend.h => GS2U_Friend2MakeFormal_Sync
decode(?GS2U_Friend2MakeFormal_Sync,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_Friend2MakeFormal_Sync {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => GS2U_Friend2Recommend_Ack
decode(?GS2U_Friend2Recommend_Ack,Bin0) ->
	{ V_listInfo, Bin1 } = read_array(Bin0, fun(X) -> decode_Friend2InfoBase( X ) end),
	{ V_isPush, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_Friend2Recommend_Ack {
		listInfo = V_listInfo,
		isPush = V_isPush
		},
	Bin2 };

%GENERATED from file:friend.h => GS2U_Friend2Search_Ack
decode(?GS2U_Friend2Search_Ack,Bin0) ->
	{ V_listInfo, Bin1 } = read_array(Bin0, fun(X) -> decode_Friend2InfoBase( X ) end),
	{ #pk_GS2U_Friend2Search_Ack {
		listInfo = V_listInfo
		},
	Bin1 };

%GENERATED from file:friend.h => GS2U_Friend2SimpleList_Ack
decode(?GS2U_Friend2SimpleList_Ack,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_count, Bin2 } = read_uint16( Bin1 ),
	{ V_index, Bin3 } = read_uint16( Bin2 ),
	{ V_listInfo, Bin4 } = read_array(Bin3, fun(X) -> decode_Friend2InfoSimple( X ) end),
	{ #pk_GS2U_Friend2SimpleList_Ack {
		type = V_type,
		count = V_count,
		index = V_index,
		listInfo = V_listInfo
		},
	Bin4 };

%GENERATED from file:friend.h => GS2U_Friend2TempReset_Sync
decode(?GS2U_Friend2TempReset_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint16( Bin0 ),
	{ V_page, Bin2 } = read_uint8( Bin1 ),
	{ V_listInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_Friend2InfoBase( X ) end),
	{ #pk_GS2U_Friend2TempReset_Sync {
		count = V_count,
		page = V_page,
		listInfo = V_listInfo
		},
	Bin3 };

%GENERATED from file:friend.h => GS2U_Friend2WantChat_Ack
decode(?GS2U_Friend2WantChat_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_info, Bin2 } = decode_Friend2InfoBase( Bin1 ),
	{ V_relation, Bin3 } = read_uint8( Bin2 ),
	{ V_count, Bin4 } = read_uint16( Bin3 ),
	{ V_hasAP, Bin5 } = read_bool( Bin4 ),
	{ V_page, Bin6 } = read_uint8( Bin5 ),
	{ V_listInfo, Bin7 } = read_array(Bin6, fun(X) -> decode_Friend2InfoFormal( X ) end),
	{ #pk_GS2U_Friend2WantChat_Ack {
		id = V_id,
		info = V_info,
		relation = V_relation,
		count = V_count,
		hasAP = V_hasAP,
		page = V_page,
		listInfo = V_listInfo
		},
	Bin7 };

%GENERATED from file:friend.h => GS2u_Friend2Like_Ack
decode(?GS2u_Friend2Like_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_like, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2u_Friend2Like_Ack {
		id = V_id,
		name = V_name,
		like = V_like
		},
	Bin3 };

%GENERATED from file:friend.h => U2GS_Friend2AddFromBlack_Reply
decode(?U2GS_Friend2AddFromBlack_Reply,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_isAgreed, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_Friend2AddFromBlack_Reply {
		id = V_id,
		isAgreed = V_isAgreed
		},
	Bin2 };

%GENERATED from file:friend.h => U2GS_Friend2Add_Request
decode(?U2GS_Friend2Add_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2Add_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2ApplicantUseOneKey_Request
decode(?U2GS_Friend2ApplicantUseOneKey_Request,Bin0) ->
	{ V_isAgreed, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_Friend2ApplicantUseOneKey_Request {
		isAgreed = V_isAgreed
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2ApplicantUse_Request
decode(?U2GS_Friend2ApplicantUse_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_isAgreed, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_Friend2ApplicantUse_Request {
		id = V_id,
		isAgreed = V_isAgreed
		},
	Bin2 };

%GENERATED from file:friend.h => U2GS_Friend2Applicant_Request
decode(?U2GS_Friend2Applicant_Request,Bin0) ->
	{ V_page, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Friend2Applicant_Request {
		page = V_page
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2BanWithDel_Reply
decode(?U2GS_Friend2BanWithDel_Reply,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_isAgreed, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_Friend2BanWithDel_Reply {
		id = V_id,
		isAgreed = V_isAgreed
		},
	Bin2 };

%GENERATED from file:friend.h => U2GS_Friend2BanWithUnbanAndDel_Reply
decode(?U2GS_Friend2BanWithUnbanAndDel_Reply,Bin0) ->
	{ V_idUnban, Bin1 } = read_uint64( Bin0 ),
	{ V_idDel, Bin2 } = read_uint64( Bin1 ),
	{ V_isAgreed, Bin3 } = read_bool( Bin2 ),
	{ #pk_U2GS_Friend2BanWithUnbanAndDel_Reply {
		idUnban = V_idUnban,
		idDel = V_idDel,
		isAgreed = V_isAgreed
		},
	Bin3 };

%GENERATED from file:friend.h => U2GS_Friend2BanWithUnban_Reply
decode(?U2GS_Friend2BanWithUnban_Reply,Bin0) ->
	{ V_idUnban, Bin1 } = read_uint64( Bin0 ),
	{ V_idBan, Bin2 } = read_uint64( Bin1 ),
	{ V_isAgreed, Bin3 } = read_bool( Bin2 ),
	{ #pk_U2GS_Friend2BanWithUnban_Reply {
		idUnban = V_idUnban,
		idBan = V_idBan,
		isAgreed = V_isAgreed
		},
	Bin3 };

%GENERATED from file:friend.h => U2GS_Friend2Ban_Request
decode(?U2GS_Friend2Ban_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2Ban_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2Black_Request
decode(?U2GS_Friend2Black_Request,Bin0) ->
	{ V_page, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Friend2Black_Request {
		page = V_page
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2CrossAdd2_Request
decode(?U2GS_Friend2CrossAdd2_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_isAgreed, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_Friend2CrossAdd2_Request {
		id = V_id,
		isAgreed = V_isAgreed
		},
	Bin2 };

%GENERATED from file:friend.h => U2GS_Friend2CrossAdd_Request
decode(?U2GS_Friend2CrossAdd_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2CrossAdd_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2CrossAll_Request
decode(?U2GS_Friend2CrossAll_Request,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Friend2CrossAll_Request {
		type = V_type
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2CrossDel_Request
decode(?U2GS_Friend2CrossDel_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2CrossDel_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2Del_Request
decode(?U2GS_Friend2Del_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2Del_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2ForLook_Request
decode(?U2GS_Friend2ForLook_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2ForLook_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2FormalChatVoice_Request
decode(?U2GS_Friend2FormalChatVoice_Request,Bin0) ->
	{ V_receiverID, Bin1 } = read_uint64( Bin0 ),
	{ V_time, Bin2 } = read_uint32( Bin1 ),
	{ V_duration, Bin3 } = read_float( Bin2 ),
	{ V_count, Bin4 } = read_uint8( Bin3 ),
	{ V_index, Bin5 } = read_uint8( Bin4 ),
	{ V_data, Bin6 } = read_array(Bin5, fun(X) -> read_uint8( X ) end),
	{ #pk_U2GS_Friend2FormalChatVoice_Request {
		receiverID = V_receiverID,
		time = V_time,
		duration = V_duration,
		count = V_count,
		index = V_index,
		data = V_data
		},
	Bin6 };

%GENERATED from file:friend.h => U2GS_Friend2FormalChat_Request
decode(?U2GS_Friend2FormalChat_Request,Bin0) ->
	{ V_receiverID, Bin1 } = read_uint64( Bin0 ),
	{ V_content, Bin2 } = read_string( Bin1 ),
	{ V_time, Bin3 } = read_uint32( Bin2 ),
	{ #pk_U2GS_Friend2FormalChat_Request {
		receiverID = V_receiverID,
		content = V_content,
		time = V_time
		},
	Bin3 };

%GENERATED from file:friend.h => U2GS_Friend2FormalForMarriage_Request
decode(?U2GS_Friend2FormalForMarriage_Request,Bin0) ->
	{ V_page, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Friend2FormalForMarriage_Request {
		page = V_page
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2FormalOP_Request
decode(?U2GS_Friend2FormalOP_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_opType, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_Friend2FormalOP_Request {
		id = V_id,
		opType = V_opType
		},
	Bin2 };

%GENERATED from file:friend.h => U2GS_Friend2Formal_Request
decode(?U2GS_Friend2Formal_Request,Bin0) ->
	{ V_page, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Friend2Formal_Request {
		page = V_page
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2GetBack_Add
decode(?U2GS_Friend2GetBack_Add,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2GetBack_Add {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2GetBack_Ignore
decode(?U2GS_Friend2GetBack_Ignore,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2GetBack_Ignore {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2GetBack_OneKeyToAdd
decode(?U2GS_Friend2GetBack_OneKeyToAdd,Bin0) ->
	{ #pk_U2GS_Friend2GetBack_OneKeyToAdd {

		},
	Bin0 };

%GENERATED from file:friend.h => U2GS_Friend2LimitSearch_Request
decode(?U2GS_Friend2LimitSearch_Request,Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_Friend2LimitSearch_Request {
		name = V_name
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2Recommend_Request
decode(?U2GS_Friend2Recommend_Request,Bin0) ->
	{ V_sex, Bin1 } = read_uint8( Bin0 ),
	{ V_isNear, Bin2 } = read_bool( Bin1 ),
	{ V_isPush, Bin3 } = read_bool( Bin2 ),
	{ #pk_U2GS_Friend2Recommend_Request {
		sex = V_sex,
		isNear = V_isNear,
		isPush = V_isPush
		},
	Bin3 };

%GENERATED from file:friend.h => U2GS_Friend2Search_Request
decode(?U2GS_Friend2Search_Request,Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_Friend2Search_Request {
		name = V_name
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2SimpleList_Requets
decode(?U2GS_Friend2SimpleList_Requets,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Friend2SimpleList_Requets {
		type = V_type
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2Temp_Request
decode(?U2GS_Friend2Temp_Request,Bin0) ->
	{ V_page, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Friend2Temp_Request {
		page = V_page
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2Unban_Request
decode(?U2GS_Friend2Unban_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2Unban_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:friend.h => U2GS_Friend2WantChat_Request
decode(?U2GS_Friend2WantChat_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Friend2WantChat_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:godweapon.h => GS2U_InitGodWeapon
decode(?GS2U_InitGodWeapon,Bin0) ->
	{ V_infos, Bin1 } = read_array(Bin0, fun(X) -> decode_GodWeaponInfo( X ) end),
	{ #pk_GS2U_InitGodWeapon {
		infos = V_infos
		},
	Bin1 };

%GENERATED from file:godweapon.h => GS2U_LevelUpGodWeaponResult
decode(?GS2U_LevelUpGodWeaponResult,Bin0) ->
	{ V_weaponID, Bin1 } = read_uint8( Bin0 ),
	{ V_weaponLevel, Bin2 } = read_uint16( Bin1 ),
	{ V_exp, Bin3 } = read_uint32( Bin2 ),
	{ V_wakeSkillLv, Bin4 } = read_uint16( Bin3 ),
	{ #pk_GS2U_LevelUpGodWeaponResult {
		weaponID = V_weaponID,
		weaponLevel = V_weaponLevel,
		exp = V_exp,
		wakeSkillLv = V_wakeSkillLv
		},
	Bin4 };

%GENERATED from file:godweapon.h => GS2U_LevelUpGodWeaponSkillResult
decode(?GS2U_LevelUpGodWeaponSkillResult,Bin0) ->
	{ V_weaponID, Bin1 } = read_uint8( Bin0 ),
	{ V_skillLevel, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_LevelUpGodWeaponSkillResult {
		weaponID = V_weaponID,
		skillLevel = V_skillLevel
		},
	Bin2 };

%GENERATED from file:godweapon.h => U2GS_LevelUpGodWeapon
decode(?U2GS_LevelUpGodWeapon,Bin0) ->
	{ V_weaponID, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_LevelUpGodWeapon {
		weaponID = V_weaponID
		},
	Bin1 };

%GENERATED from file:godweapon.h => U2GS_LevelUpGodWeaponSkill
decode(?U2GS_LevelUpGodWeaponSkill,Bin0) ->
	{ V_weaponID, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_LevelUpGodWeaponSkill {
		weaponID = V_weaponID
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_BiddingGuildMsg
decode(?GS2U_BiddingGuildMsg,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_BiddingGuild( X ) end),
	{ V_resorce, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_BiddingGuildMsg {
		list = V_list,
		resorce = V_resorce
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_ChangeDenoter
decode(?GS2U_ChangeDenoter,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_denoter, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_ChangeDenoter {
		guildID = V_guildID,
		denoter = V_denoter
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_ChangeGuildName
decode(?GS2U_ChangeGuildName,Bin0) ->
	{ V_newGuildName, Bin1 } = read_string( Bin0 ),
	{ #pk_GS2U_ChangeGuildName {
		newGuildName = V_newGuildName
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_ChangeNotice
decode(?GS2U_ChangeNotice,Bin0) ->
	{ V_guildNotice, Bin1 } = read_string( Bin0 ),
	{ #pk_GS2U_ChangeNotice {
		guildNotice = V_guildNotice
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_DonateSuccess
decode(?GS2U_DonateSuccess,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildLevel, Bin2 } = read_uint8( Bin1 ),
	{ V_nowExp, Bin3 } = read_uint32( Bin2 ),
	{ V_roleID, Bin4 } = read_uint64( Bin3 ),
	{ V_contribute, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_DonateSuccess {
		guildID = V_guildID,
		guildLevel = V_guildLevel,
		nowExp = V_nowExp,
		roleID = V_roleID,
		contribute = V_contribute
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_ExpeditionBroadcastPos
decode(?GS2U_ExpeditionBroadcastPos,Bin0) ->
	{ V_type, Bin1 } = read_uint16( Bin0 ),
	{ V_broadcasterName, Bin2 } = read_string( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ #pk_GS2U_ExpeditionBroadcastPos {
		type = V_type,
		broadcasterName = V_broadcasterName,
		x = V_x,
		y = V_y
		},
	Bin4 };

%GENERATED from file:guild.h => GS2U_ExpeditionFinalInfo
decode(?GS2U_ExpeditionFinalInfo,Bin0) ->
	{ V_selfTotalScore, Bin1 } = read_uint64( Bin0 ),
	{ V_finalInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_ExpeditionFinalInfo( X ) end),
	{ #pk_GS2U_ExpeditionFinalInfo {
		selfTotalScore = V_selfTotalScore,
		finalInfoList = V_finalInfoList
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_ExpeditionGlobalMapInfoList
decode(?GS2U_ExpeditionGlobalMapInfoList,Bin0) ->
	{ V_leftSeconds, Bin1 } = read_uint32( Bin0 ),
	{ V_mapInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_ExpeditionGlobalMapInfo( X ) end),
	{ #pk_GS2U_ExpeditionGlobalMapInfoList {
		leftSeconds = V_leftSeconds,
		mapInfoList = V_mapInfoList
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_ExpeditionMapBattleInfoList
decode(?GS2U_ExpeditionMapBattleInfoList,Bin0) ->
	{ V_mapid, Bin1 } = read_uint32( Bin0 ),
	{ V_selfScore, Bin2 } = read_uint64( Bin1 ),
	{ V_selfGuildBattleInfo, Bin3 } = decode_ExpeditionGuildBattleInfo( Bin2 ),
	{ V_pointInfoList, Bin4 } = read_array(Bin3, fun(X) -> decode_ExpeditionPointInfo( X ) end),
	{ V_topGuildInfoList, Bin5 } = read_array(Bin4, fun(X) -> decode_ExpeditionGuildBattleInfo( X ) end),
	{ #pk_GS2U_ExpeditionMapBattleInfoList {
		mapid = V_mapid,
		selfScore = V_selfScore,
		selfGuildBattleInfo = V_selfGuildBattleInfo,
		pointInfoList = V_pointInfoList,
		topGuildInfoList = V_topGuildInfoList
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_ExpeditionMapInfoList
decode(?GS2U_ExpeditionMapInfoList,Bin0) ->
	{ V_mapInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_ExpeditionMapInfo( X ) end),
	{ #pk_GS2U_ExpeditionMapInfoList {
		mapInfoList = V_mapInfoList
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_ExpeditionQuenenState
decode(?GS2U_ExpeditionQuenenState,Bin0) ->
	{ V_mapid, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_ExpeditionQuenenState {
		mapid = V_mapid
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GivePower
decode(?GS2U_GivePower,Bin0) ->
	{ V_targetRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_guileLevel, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_GivePower {
		targetRoleID = V_targetRoleID,
		guileLevel = V_guileLevel
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_GuildBattleApply
decode(?GS2U_GuildBattleApply,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildBattleInfo( X ) end),
	{ V_selfGuildID, Bin2 } = read_uint64( Bin1 ),
	{ V_targetGuildID, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_GuildBattleApply {
		list = V_list,
		selfGuildID = V_selfGuildID,
		targetGuildID = V_targetGuildID
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_GuildBattleResult
decode(?GS2U_GuildBattleResult,Bin0) ->
	{ V_isEnd, Bin1 } = read_uint8( Bin0 ),
	{ V_win, Bin2 } = decode_GuildBattleResultInfo( Bin1 ),
	{ V_lose, Bin3 } = decode_GuildBattleResultInfo( Bin2 ),
	{ #pk_GS2U_GuildBattleResult {
		isEnd = V_isEnd,
		win = V_win,
		lose = V_lose
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_GuildBossRank
decode(?GS2U_GuildBossRank,Bin0) ->
	{ V_buffLevel, Bin1 } = read_uint8( Bin0 ),
	{ V_listHurtList, Bin2 } = read_array(Bin1, fun(X) -> decode_GuildHurtList( X ) end),
	{ #pk_GS2U_GuildBossRank {
		buffLevel = V_buffLevel,
		listHurtList = V_listHurtList
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_GuildBossResoult
decode(?GS2U_GuildBossResoult,Bin0) ->
	{ V_isChallengeSucceeds, Bin1 } = read_bool( Bin0 ),
	{ V_guildBosslevel, Bin2 } = read_uint8( Bin1 ),
	{ V_isMyFirstKill, Bin3 } = read_bool( Bin2 ),
	{ V_isMyKill, Bin4 } = read_bool( Bin3 ),
	{ #pk_GS2U_GuildBossResoult {
		isChallengeSucceeds = V_isChallengeSucceeds,
		guildBosslevel = V_guildBosslevel,
		isMyFirstKill = V_isMyFirstKill,
		isMyKill = V_isMyKill
		},
	Bin4 };

%GENERATED from file:guild.h => GS2U_GuildBuff
decode(?GS2U_GuildBuff,Bin0) ->
	{ V_buff, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildBuff( X ) end),
	{ #pk_GS2U_GuildBuff {
		buff = V_buff
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GuildBuffRole
decode(?GS2U_GuildBuffRole,Bin0) ->
	{ V_bgrs, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildBuffRole( X ) end),
	{ #pk_GS2U_GuildBuffRole {
		bgrs = V_bgrs
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GuildIDList
decode(?GS2U_GuildIDList,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildIDList( X ) end),
	{ #pk_GS2U_GuildIDList {
		list = V_list
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GuildList
decode(?GS2U_GuildList,Bin0) ->
	{ V_nowPage, Bin1 } = read_uint32( Bin0 ),
	{ V_maxPage, Bin2 } = read_uint32( Bin1 ),
	{ V_guildInfoList, Bin3 } = read_array(Bin2, fun(X) -> decode_GuildInfo( X ) end),
	{ #pk_GS2U_GuildList {
		nowPage = V_nowPage,
		maxPage = V_maxPage,
		guildInfoList = V_guildInfoList
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_GuildLoopTask_Give_Ack
decode(?GS2U_GuildLoopTask_Give_Ack,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_taskID, Bin3 } = read_uint16( Bin2 ),
	{ V_listData, Bin4 } = read_array(Bin3, fun(X) -> decode_GuildLoopTask_Get( X ) end),
	{ V_count, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_GuildLoopTask_Give_Ack {
		type = V_type,
		roleID = V_roleID,
		taskID = V_taskID,
		listData = V_listData,
		count = V_count
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_GuildLoopTask_History_Ack
decode(?GS2U_GuildLoopTask_History_Ack,Bin0) ->
	{ V_listHistory, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildLoopTaskGiveHistory2( X ) end),
	{ V_nameTables, Bin2 } = read_array(Bin1, fun(X) -> decode_NameTable2( X ) end),
	{ #pk_GS2U_GuildLoopTask_History_Ack {
		listHistory = V_listHistory,
		nameTables = V_nameTables
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_GuildLoopTask_MyGet_Sync
decode(?GS2U_GuildLoopTask_MyGet_Sync,Bin0) ->
	{ V_state, Bin1 } = read_uint8( Bin0 ),
	{ V_myGet, Bin2 } = read_array(Bin1, fun(X) -> decode_GuildLoopTask_Get( X ) end),
	{ #pk_GS2U_GuildLoopTask_MyGet_Sync {
		state = V_state,
		myGet = V_myGet
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_GuildLoopTask_OpenUI_Ack
decode(?GS2U_GuildLoopTask_OpenUI_Ack,Bin0) ->
	{ V_listData, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildLoopTask_Get( X ) end),
	{ #pk_GS2U_GuildLoopTask_OpenUI_Ack {
		listData = V_listData
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GuildLoopTask_WantGive_Ack
decode(?GS2U_GuildLoopTask_WantGive_Ack,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_listData, Bin3 } = read_array(Bin2, fun(X) -> decode_GuildLoopTask_Get( X ) end),
	{ #pk_GS2U_GuildLoopTask_WantGive_Ack {
		type = V_type,
		roleID = V_roleID,
		listData = V_listData
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_GuildOpResult
decode(?GS2U_GuildOpResult,Bin0) ->
	{ V_roleCode, Bin1 } = read_uint64( Bin0 ),
	{ V_opType, Bin2 } = read_uint8( Bin1 ),
	{ V_opResult, Bin3 } = read_bool( Bin2 ),
	{ #pk_GS2U_GuildOpResult {
		roleCode = V_roleCode,
		opType = V_opType,
		opResult = V_opResult
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_GuildSkill
decode(?GS2U_GuildSkill,Bin0) ->
	{ V_skill, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildSkill( X ) end),
	{ V_selfskill, Bin2 } = read_array(Bin1, fun(X) -> decode_GuildSkill( X ) end),
	{ #pk_GS2U_GuildSkill {
		skill = V_skill,
		selfskill = V_selfskill
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_GuildTask
decode(?GS2U_GuildTask,Bin0) ->
	{ V_tasks, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildTask( X ) end),
	{ #pk_GS2U_GuildTask {
		tasks = V_tasks
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GuildWar
decode(?GS2U_GuildWar,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildWar( X ) end),
	{ #pk_GS2U_GuildWar {
		list = V_list
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GuildWarCannonHit
decode(?GS2U_GuildWarCannonHit,Bin0) ->
	{ V_hits, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_GuildWarCannonHit {
		hits = V_hits
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_GuildWarData
decode(?GS2U_GuildWarData,Bin0) ->
	{ V_ranks, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildWarRank( X ) end),
	{ V_pebbles, Bin2 } = read_array(Bin1, fun(X) -> decode_PebbleState( X ) end),
	{ V_cannons, Bin3 } = read_array(Bin2, fun(X) -> decode_CannonState( X ) end),
	{ V_infos, Bin4 } = read_array(Bin3, fun(X) -> decode_GuildWarInfo( X ) end),
	{ V_syTime, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_GuildWarData {
		ranks = V_ranks,
		pebbles = V_pebbles,
		cannons = V_cannons,
		infos = V_infos,
		syTime = V_syTime
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_GuildWarEnd
decode(?GS2U_GuildWarEnd,Bin0) ->
	{ V_isGradeToJS, Bin1 } = read_bool( Bin0 ),
	{ V_infos, Bin2 } = read_array(Bin1, fun(X) -> decode_GuildWarInfo( X ) end),
	{ V_items, Bin3 } = read_array(Bin2, fun(X) -> decode_GuildWarReward_item( X ) end),
	{ V_coins, Bin4 } = read_array(Bin3, fun(X) -> decode_GuildWarReward_coin( X ) end),
	{ #pk_GS2U_GuildWarEnd {
		isGradeToJS = V_isGradeToJS,
		infos = V_infos,
		items = V_items,
		coins = V_coins
		},
	Bin4 };

%GENERATED from file:guild.h => GS2U_GuildWarRankForHud
decode(?GS2U_GuildWarRankForHud,Bin0) ->
	{ V_ranks, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildWarRankInfo( X ) end),
	{ #pk_GS2U_GuildWarRankForHud {
		ranks = V_ranks
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_Guild_ExchangeAll_Sync
decode(?GS2U_Guild_ExchangeAll_Sync,Bin0) ->
	{ V_listID, Bin1 } = read_array(Bin0, fun(X) -> read_uint32( X ) end),
	{ V_listLevel, Bin2 } = read_array(Bin1, fun(X) -> read_uint32( X ) end),
	{ V_listLevelCur, Bin3 } = read_array(Bin2, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_Guild_ExchangeAll_Sync {
		listID = V_listID,
		listLevel = V_listLevel,
		listLevelCur = V_listLevelCur
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_Guild_Exchange_Ack
decode(?GS2U_Guild_Exchange_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ V_errorCode, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_Guild_Exchange_Ack {
		id = V_id,
		level = V_level,
		errorCode = V_errorCode
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_Guild_FairgroundEnter_Ack
decode(?GS2U_Guild_FairgroundEnter_Ack,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_listRide, Bin2 } = read_array(Bin1, fun(X) -> decode_Ride( X ) end),
	{ V_listRole, Bin3 } = read_array(Bin2, fun(X) -> decode_RideRole( X ) end),
	{ #pk_GS2U_Guild_FairgroundEnter_Ack {
		guildID = V_guildID,
		listRide = V_listRide,
		listRole = V_listRole
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_Guild_FairgroundRide_Sync
decode(?GS2U_Guild_FairgroundRide_Sync,Bin0) ->
	{ V_ride, Bin1 } = decode_Ride( Bin0 ),
	{ V_role, Bin2 } = decode_RideRole( Bin1 ),
	{ V_type, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GS2U_Guild_FairgroundRide_Sync {
		ride = V_ride,
		role = V_role,
		type = V_type
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_Guild_FastJoin_Ack
decode(?GS2U_Guild_FastJoin_Ack,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_Guild_FastJoin_Ack {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_Guild_FastJoin_Get_Ack
decode(?GS2U_Guild_FastJoin_Get_Ack,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_force, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_Guild_FastJoin_Get_Ack {
		guildID = V_guildID,
		force = V_force
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_FastJoin_Set_Ack
decode(?GS2U_Guild_FastJoin_Set_Ack,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_force, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_Guild_FastJoin_Set_Ack {
		guildID = V_guildID,
		force = V_force
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_GodBless_Ack
decode(?GS2U_Guild_GodBless_Ack,Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_count, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_Guild_GodBless_Ack {
		time = V_time,
		count = V_count
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_GodBless_Schedule_Reward_Ack
decode(?GS2U_Guild_GodBless_Schedule_Reward_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_Guild_GodBless_Schedule_Reward_Ack {
		id = V_id
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_Guild_GodBless_Schedule_Sync
decode(?GS2U_Guild_GodBless_Schedule_Sync,Bin0) ->
	{ V_schedule, Bin1 } = read_uint32( Bin0 ),
	{ V_listID, Bin2 } = read_array(Bin1, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_Guild_GodBless_Schedule_Sync {
		schedule = V_schedule,
		listID = V_listID
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_OpenSupplication_Ack
decode(?GS2U_Guild_OpenSupplication_Ack,Bin0) ->
	{ V_listInfo, Bin1 } = read_array(Bin0, fun(X) -> decode_Supplication( X ) end),
	{ #pk_GS2U_Guild_OpenSupplication_Ack {
		listInfo = V_listInfo
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_Guild_ShopBuy_Ack
decode(?GS2U_Guild_ShopBuy_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_count, Bin2 } = read_uint32( Bin1 ),
	{ V_errorCode, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_Guild_ShopBuy_Ack {
		id = V_id,
		count = V_count,
		errorCode = V_errorCode
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_Guild_SnowmanAll_Sync
decode(?GS2U_Guild_SnowmanAll_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint32( Bin0 ),
	{ V_countMax, Bin2 } = read_uint32( Bin1 ),
	{ V_subState, Bin3 } = read_uint32( Bin2 ),
	{ V_listResSnowman, Bin4 } = read_array(Bin3, fun(X) -> read_uint32( X ) end),
	{ V_listResPlayer, Bin5 } = read_array(Bin4, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_Guild_SnowmanAll_Sync {
		count = V_count,
		countMax = V_countMax,
		subState = V_subState,
		listResSnowman = V_listResSnowman,
		listResPlayer = V_listResPlayer
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_Guild_SnowmanBegin_Sync
decode(?GS2U_Guild_SnowmanBegin_Sync,Bin0) ->
	{ #pk_GS2U_Guild_SnowmanBegin_Sync {

		},
	Bin0 };

%GENERATED from file:guild.h => GS2U_Guild_SnowmanCompleteCount_Sync
decode(?GS2U_Guild_SnowmanCompleteCount_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint32( Bin0 ),
	{ V_listMark, Bin2 } = read_array(Bin1, fun(X) -> read_bool( X ) end),
	{ #pk_GS2U_Guild_SnowmanCompleteCount_Sync {
		count = V_count,
		listMark = V_listMark
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_SnowmanExtraRes_Sync
decode(?GS2U_Guild_SnowmanExtraRes_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_Guild_SnowmanExtraRes_Sync {
		count = V_count
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_Guild_SnowmanPlayer_Sync
decode(?GS2U_Guild_SnowmanPlayer_Sync,Bin0) ->
	{ V_listResPlayer, Bin1 } = read_array(Bin0, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_Guild_SnowmanPlayer_Sync {
		listResPlayer = V_listResPlayer
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_Guild_SnowmanSettle_Sync
decode(?GS2U_Guild_SnowmanSettle_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ V_guildName, Bin3 } = read_string( Bin2 ),
	{ #pk_GS2U_Guild_SnowmanSettle_Sync {
		count = V_count,
		level = V_level,
		guildName = V_guildName
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_Guild_SnowmanSnowman_Sync
decode(?GS2U_Guild_SnowmanSnowman_Sync,Bin0) ->
	{ V_count, Bin1 } = read_uint32( Bin0 ),
	{ V_countMax, Bin2 } = read_uint32( Bin1 ),
	{ V_subState, Bin3 } = read_uint32( Bin2 ),
	{ V_listResSnowman, Bin4 } = read_array(Bin3, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_Guild_SnowmanSnowman_Sync {
		count = V_count,
		countMax = V_countMax,
		subState = V_subState,
		listResSnowman = V_listResSnowman
		},
	Bin4 };

%GENERATED from file:guild.h => GS2U_Guild_SupplicateGiveF_Ack
decode(?GS2U_Guild_SupplicateGiveF_Ack,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_tarRoleID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_Guild_SupplicateGiveF_Ack {
		type = V_type,
		tarRoleID = V_tarRoleID
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_SupplicateGive_Ack
decode(?GS2U_Guild_SupplicateGive_Ack,Bin0) ->
	{ V_history, Bin1 } = decode_SuppHistory2( Bin0 ),
	{ V_nameTables, Bin2 } = read_array(Bin1, fun(X) -> decode_NameTable2( X ) end),
	{ #pk_GS2U_Guild_SupplicateGive_Ack {
		history = V_history,
		nameTables = V_nameTables
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_SupplicateGive_Sync
decode(?GS2U_Guild_SupplicateGive_Sync,Bin0) ->
	{ V_listHistory, Bin1 } = read_array(Bin0, fun(X) -> decode_SuppHistory2( X ) end),
	{ V_nameTables, Bin2 } = read_array(Bin1, fun(X) -> decode_NameTable2( X ) end),
	{ #pk_GS2U_Guild_SupplicateGive_Sync {
		listHistory = V_listHistory,
		nameTables = V_nameTables
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Guild_Supplicate_Ack
decode(?GS2U_Guild_Supplicate_Ack,Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_Guild_Supplicate_Ack {
		itemID = V_itemID
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_ISInApplyInfo
decode(?GS2U_ISInApplyInfo,Bin0) ->
	{ V_isInApply, Bin1 } = read_bool( Bin0 ),
	{ V_isInBattleList, Bin2 } = read_bool( Bin1 ),
	{ V_leftTime, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_ISInApplyInfo {
		isInApply = V_isInApply,
		isInBattleList = V_isInBattleList,
		leftTime = V_leftTime
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_ImpeachInfo
decode(?GS2U_ImpeachInfo,Bin0) ->
	{ V_canImpeach, Bin1 } = read_uint8( Bin0 ),
	{ V_supportNumber, Bin2 } = read_uint8( Bin1 ),
	{ V_impeacherID, Bin3 } = read_uint64( Bin2 ),
	{ V_impeacherName, Bin4 } = read_string( Bin3 ),
	{ V_impeacheLeftTime, Bin5 } = read_uint64( Bin4 ),
	{ #pk_GS2U_ImpeachInfo {
		canImpeach = V_canImpeach,
		supportNumber = V_supportNumber,
		impeacherID = V_impeacherID,
		impeacherName = V_impeacherName,
		impeacheLeftTime = V_impeacheLeftTime
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_JoinGuild_Sync
decode(?GS2U_JoinGuild_Sync,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_JoinGuild_Sync {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_MyGuildBossRank
decode(?GS2U_MyGuildBossRank,Bin0) ->
	{ V_rank, Bin1 } = read_uint16( Bin0 ),
	{ V_myhurt, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_MyGuildBossRank {
		rank = V_rank,
		myhurt = V_myhurt
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_MyGuildKillBossRank
decode(?GS2U_MyGuildKillBossRank,Bin0) ->
	{ V_rank, Bin1 } = read_uint16( Bin0 ),
	{ V_ustime, Bin2 } = read_uint16( Bin1 ),
	{ V_listTopTenGuildList, Bin3 } = read_array(Bin2, fun(X) -> decode_GuildFastrecord( X ) end),
	{ #pk_GS2U_MyGuildKillBossRank {
		rank = V_rank,
		ustime = V_ustime,
		listTopTenGuildList = V_listTopTenGuildList
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_OccupyOwnerChange
decode(?GS2U_OccupyOwnerChange,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_remainSec, Bin2 } = read_uint32( Bin1 ),
	{ V_owner, Bin3 } = decode_OccupyGuildInfo( Bin2 ),
	{ V_target, Bin4 } = decode_OccupyGuildInfo( Bin3 ),
	{ V_playerInfos, Bin5 } = read_array(Bin4, fun(X) -> decode_GuildBattlePlayerInfo( X ) end),
	{ #pk_GS2U_OccupyOwnerChange {
		type = V_type,
		remainSec = V_remainSec,
		owner = V_owner,
		target = V_target,
		playerInfos = V_playerInfos
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_OneKeyRecruit_Ack
decode(?GS2U_OneKeyRecruit_Ack,Bin0) ->
	{ V_cd, Bin1 } = read_uint32( Bin0 ),
	{ V_ret, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_OneKeyRecruit_Ack {
		cd = V_cd,
		ret = V_ret
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_OpenGuildForm
decode(?GS2U_OpenGuildForm,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_guildLevel, Bin3 } = read_uint8( Bin2 ),
	{ V_fightForce, Bin4 } = read_uint32( Bin3 ),
	{ V_memberNumber, Bin5 } = read_uint32( Bin4 ),
	{ V_maxMemberNumber, Bin6 } = read_uint32( Bin5 ),
	{ V_resource, Bin7 } = read_uint32( Bin6 ),
	{ V_liveness, Bin8 } = read_uint32( Bin7 ),
	{ V_notice, Bin9 } = read_string( Bin8 ),
	{ V_denoter, Bin10 } = read_uint8( Bin9 ),
	{ V_shopLevel, Bin11 } = read_uint8( Bin10 ),
	{ V_requestJoinNum, Bin12 } = read_uint32( Bin11 ),
	{ V_selfContribute, Bin13 } = read_uint32( Bin12 ),
	{ V_selfGuildLevel, Bin14 } = read_uint8( Bin13 ),
	{ V_cd, Bin15 } = read_uint32( Bin14 ),
	{ V_canRename, Bin16 } = read_bool( Bin15 ),
	{ V_isInit, Bin17 } = read_bool( Bin16 ),
	{ #pk_GS2U_OpenGuildForm {
		guildID = V_guildID,
		guildName = V_guildName,
		guildLevel = V_guildLevel,
		fightForce = V_fightForce,
		memberNumber = V_memberNumber,
		maxMemberNumber = V_maxMemberNumber,
		resource = V_resource,
		liveness = V_liveness,
		notice = V_notice,
		denoter = V_denoter,
		shopLevel = V_shopLevel,
		requestJoinNum = V_requestJoinNum,
		selfContribute = V_selfContribute,
		selfGuildLevel = V_selfGuildLevel,
		cd = V_cd,
		canRename = V_canRename,
		isInit = V_isInit
		},
	Bin17 };

%GENERATED from file:guild.h => GS2U_QueryGuildInfoByRoleID_Ack
decode(?GS2U_QueryGuildInfoByRoleID_Ack,Bin0) ->
	{ V_guildInfo, Bin1 } = decode_GuildInfo( Bin0 ),
	{ #pk_GS2U_QueryGuildInfoByRoleID_Ack {
		guildInfo = V_guildInfo
		},
	Bin1 };

%GENERATED from file:guild.h => GS2U_QueryImpeachInfo
decode(?GS2U_QueryImpeachInfo,Bin0) ->
	{ #pk_GS2U_QueryImpeachInfo {

		},
	Bin0 };

%GENERATED from file:guild.h => GS2U_Recruit
decode(?GS2U_Recruit,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_guildInfo, Bin3 } = decode_GuildInfo( Bin2 ),
	{ #pk_GS2U_Recruit {
		roleID = V_roleID,
		roleName = V_roleName,
		guildInfo = V_guildInfo
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_RefreshGuildProp
decode(?GS2U_RefreshGuildProp,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_resource, Bin2 } = read_uint32( Bin1 ),
	{ V_liveness, Bin3 } = read_uint32( Bin2 ),
	{ V_selfContribute, Bin4 } = read_uint64( Bin3 ),
	{ V_selfLiveness, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_RefreshGuildProp {
		guildID = V_guildID,
		resource = V_resource,
		liveness = V_liveness,
		selfContribute = V_selfContribute,
		selfLiveness = V_selfLiveness
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_RequestGuildBossInfo_Sync
decode(?GS2U_RequestGuildBossInfo_Sync,Bin0) ->
	{ V_guildBosslevel, Bin1 } = read_uint8( Bin0 ),
	{ V_hurtBosslevel, Bin2 } = read_uint8( Bin1 ),
	{ V_curGuilBosslevel, Bin3 } = read_uint8( Bin2 ),
	{ V_listHurtList, Bin4 } = read_array(Bin3, fun(X) -> decode_GuildHurtList( X ) end),
	{ V_listFastrecord, Bin5 } = read_array(Bin4, fun(X) -> decode_GuildFastrecord( X ) end),
	{ #pk_GS2U_RequestGuildBossInfo_Sync {
		guildBosslevel = V_guildBosslevel,
		hurtBosslevel = V_hurtBosslevel,
		curGuilBosslevel = V_curGuilBosslevel,
		listHurtList = V_listHurtList,
		listFastrecord = V_listFastrecord
		},
	Bin5 };

%GENERATED from file:guild.h => GS2U_RequestJoinGuildList
decode(?GS2U_RequestJoinGuildList,Bin0) ->
	{ V_requestList, Bin1 } = read_array(Bin0, fun(X) -> decode_GuildApplyMemberInfo( X ) end),
	{ V_force, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_RequestJoinGuildList {
		requestList = V_requestList,
		force = V_force
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_RequestJoinGuild_Ack
decode(?GS2U_RequestJoinGuild_Ack,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_cancelID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_RequestJoinGuild_Ack {
		guildID = V_guildID,
		cancelID = V_cancelID
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_RequestLookMemberList
decode(?GS2U_RequestLookMemberList,Bin0) ->
	{ V_nowPage, Bin1 } = read_uint32( Bin0 ),
	{ V_maxPage, Bin2 } = read_uint32( Bin1 ),
	{ V_memberList, Bin3 } = read_array(Bin2, fun(X) -> decode_GuildMemberInfo( X ) end),
	{ #pk_GS2U_RequestLookMemberList {
		nowPage = V_nowPage,
		maxPage = V_maxPage,
		memberList = V_memberList
		},
	Bin3 };

%GENERATED from file:guild.h => GS2U_ReturnDonateTimes
decode(?GS2U_ReturnDonateTimes,Bin0) ->
	{ V_moneyType, Bin1 } = read_uint8( Bin0 ),
	{ V_times, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_ReturnDonateTimes {
		moneyType = V_moneyType,
		times = V_times
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_ShopUpgrade
decode(?GS2U_ShopUpgrade,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_shopLevel, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_ShopUpgrade {
		guildID = V_guildID,
		shopLevel = V_shopLevel
		},
	Bin2 };

%GENERATED from file:guild.h => GS2U_Upgrade_Ack
decode(?GS2U_Upgrade_Ack,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_Upgrade_Ack {
		guildID = V_guildID,
		level = V_level
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_AcceptGuildTask
decode(?U2GS_AcceptGuildTask,Bin0) ->
	{ V_taskType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_AcceptGuildTask {
		taskType = V_taskType
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_AgreeRecruit
decode(?U2GS_AgreeRecruit,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_agree, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_AgreeRecruit {
		guildID = V_guildID,
		roleID = V_roleID,
		agree = V_agree
		},
	Bin3 };

%GENERATED from file:guild.h => U2GS_Bidding
decode(?U2GS_Bidding,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Bidding {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_BuyGuildBuff
decode(?U2GS_BuyGuildBuff,Bin0) ->
	{ V_confId, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_BuyGuildBuff {
		confId = V_confId
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_ChangeDenoter
decode(?U2GS_ChangeDenoter,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_denoter, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_ChangeDenoter {
		guildID = V_guildID,
		denoter = V_denoter
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_ChangeGuildName
decode(?U2GS_ChangeGuildName,Bin0) ->
	{ V_newGuildName, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_ChangeGuildName {
		newGuildName = V_newGuildName
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_ChangeLeader
decode(?U2GS_ChangeLeader,Bin0) ->
	{ V_targetRoleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_ChangeLeader {
		targetRoleID = V_targetRoleID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_ChangeNotice
decode(?U2GS_ChangeNotice,Bin0) ->
	{ V_guildNotice, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_ChangeNotice {
		guildNotice = V_guildNotice
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_CreateGuild
decode(?U2GS_CreateGuild,Bin0) ->
	{ V_guildName, Bin1 } = read_string( Bin0 ),
	{ V_denoter, Bin2 } = read_uint8( Bin1 ),
	{ V_guildNotice, Bin3 } = read_string( Bin2 ),
	{ #pk_U2GS_CreateGuild {
		guildName = V_guildName,
		denoter = V_denoter,
		guildNotice = V_guildNotice
		},
	Bin3 };

%GENERATED from file:guild.h => U2GS_DealRequestJoin
decode(?U2GS_DealRequestJoin,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleIDs, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ V_agree, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_DealRequestJoin {
		guildID = V_guildID,
		roleIDs = V_roleIDs,
		agree = V_agree
		},
	Bin3 };

%GENERATED from file:guild.h => U2GS_DeleteGuild
decode(?U2GS_DeleteGuild,Bin0) ->
	{ #pk_U2GS_DeleteGuild {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_DonateMoney
decode(?U2GS_DonateMoney,Bin0) ->
	{ V_moneyType, Bin1 } = read_uint8( Bin0 ),
	{ V_moneyNumber, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_DonateMoney {
		moneyType = V_moneyType,
		moneyNumber = V_moneyNumber
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_EnterGuildBattle
decode(?U2GS_EnterGuildBattle,Bin0) ->
	{ #pk_U2GS_EnterGuildBattle {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_EnterGuildHome
decode(?U2GS_EnterGuildHome,Bin0) ->
	{ V_targetGuildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_EnterGuildHome {
		targetGuildID = V_targetGuildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_ExitGuild
decode(?U2GS_ExitGuild,Bin0) ->
	{ #pk_U2GS_ExitGuild {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_ExpeditionBroadcastPos
decode(?U2GS_ExpeditionBroadcastPos,Bin0) ->
	{ V_type, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ExpeditionBroadcastPos {
		type = V_type
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_GetGuildHomeReward
decode(?U2GS_GetGuildHomeReward,Bin0) ->
	{ V_taskType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_GetGuildHomeReward {
		taskType = V_taskType
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_GetGuildPrize
decode(?U2GS_GetGuildPrize,Bin0) ->
	{ #pk_U2GS_GetGuildPrize {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_GiveMeExpeditionRewardEverDay
decode(?U2GS_GiveMeExpeditionRewardEverDay,Bin0) ->
	{ V_mapid, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_GiveMeExpeditionRewardEverDay {
		mapid = V_mapid
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_GivePower
decode(?U2GS_GivePower,Bin0) ->
	{ V_targetRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_guileLevel, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_GivePower {
		targetRoleID = V_targetRoleID,
		guileLevel = V_guileLevel
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_GiveUpGuildTask
decode(?U2GS_GiveUpGuildTask,Bin0) ->
	{ V_taskType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_GiveUpGuildTask {
		taskType = V_taskType
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_GuildBattleApply
decode(?U2GS_GuildBattleApply,Bin0) ->
	{ #pk_U2GS_GuildBattleApply {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_GuildBossBuyBuff
decode(?U2GS_GuildBossBuyBuff,Bin0) ->
	{ V_buffID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_GuildBossBuyBuff {
		buffID = V_buffID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_GuildList
decode(?U2GS_GuildList,Bin0) ->
	{ V_requestPageNumber, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_GuildList {
		requestPageNumber = V_requestPageNumber
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_GuildLoopTask_Give_Request
decode(?U2GS_GuildLoopTask_Give_Request,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemID, Bin2 } = read_uint16( Bin1 ),
	{ V_count, Bin3 } = read_uint32( Bin2 ),
	{ #pk_U2GS_GuildLoopTask_Give_Request {
		roleID = V_roleID,
		itemID = V_itemID,
		count = V_count
		},
	Bin3 };

%GENERATED from file:guild.h => U2GS_GuildLoopTask_History_Request
decode(?U2GS_GuildLoopTask_History_Request,Bin0) ->
	{ #pk_U2GS_GuildLoopTask_History_Request {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_GuildLoopTask_OpenUI_Request
decode(?U2GS_GuildLoopTask_OpenUI_Request,Bin0) ->
	{ #pk_U2GS_GuildLoopTask_OpenUI_Request {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_GuildLoopTask_WantGet_Request
decode(?U2GS_GuildLoopTask_WantGet_Request,Bin0) ->
	{ V_taskID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_GuildLoopTask_WantGet_Request {
		taskID = V_taskID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_GuildLoopTask_WantGive_Request
decode(?U2GS_GuildLoopTask_WantGive_Request,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_time, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_GuildLoopTask_WantGive_Request {
		roleID = V_roleID,
		time = V_time
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_GuildReward
decode(?U2GS_GuildReward,Bin0) ->
	{ #pk_U2GS_GuildReward {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_Guild_Exchange_Request
decode(?U2GS_Guild_Exchange_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_Guild_Exchange_Request {
		id = V_id,
		level = V_level
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_Guild_FairgroundEnter_Request
decode(?U2GS_Guild_FairgroundEnter_Request,Bin0) ->
	{ V_targetGuildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Guild_FairgroundEnter_Request {
		targetGuildID = V_targetGuildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_Guild_FairgroundRide_Request
decode(?U2GS_Guild_FairgroundRide_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_Guild_FairgroundRide_Request {
		id = V_id,
		type = V_type
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_Guild_FastJoin_Get_Request
decode(?U2GS_Guild_FastJoin_Get_Request,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Guild_FastJoin_Get_Request {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_Guild_FastJoin_Request
decode(?U2GS_Guild_FastJoin_Request,Bin0) ->
	{ #pk_U2GS_Guild_FastJoin_Request {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_Guild_FastJoin_Set_Request
decode(?U2GS_Guild_FastJoin_Set_Request,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_force, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_Guild_FastJoin_Set_Request {
		guildID = V_guildID,
		force = V_force
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_Guild_GodBless_Request
decode(?U2GS_Guild_GodBless_Request,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_Guild_GodBless_Request {
		type = V_type
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_Guild_GodBless_Schedule_Request
decode(?U2GS_Guild_GodBless_Schedule_Request,Bin0) ->
	{ #pk_U2GS_Guild_GodBless_Schedule_Request {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_Guild_GodBless_Schedule_Reward_Request
decode(?U2GS_Guild_GodBless_Schedule_Reward_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_Guild_GodBless_Schedule_Reward_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_Guild_OpenSupplication_Request
decode(?U2GS_Guild_OpenSupplication_Request,Bin0) ->
	{ #pk_U2GS_Guild_OpenSupplication_Request {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_Guild_ShopBuy_Request
decode(?U2GS_Guild_ShopBuy_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_count, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_Guild_ShopBuy_Request {
		id = V_id,
		count = V_count
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_Guild_SnowmanCheck_Request
decode(?U2GS_Guild_SnowmanCheck_Request,Bin0) ->
	{ #pk_U2GS_Guild_SnowmanCheck_Request {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_Guild_SnowmanDonate_Request
decode(?U2GS_Guild_SnowmanDonate_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_snowmanID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_Guild_SnowmanDonate_Request {
		id = V_id,
		snowmanID = V_snowmanID
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_Guild_SnowmanReward_Request
decode(?U2GS_Guild_SnowmanReward_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_Guild_SnowmanReward_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_Guild_SupplicateGive_Request
decode(?U2GS_Guild_SupplicateGive_Request,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemID, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_Guild_SupplicateGive_Request {
		roleID = V_roleID,
		itemID = V_itemID
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_Guild_Supplicate_Request
decode(?U2GS_Guild_Supplicate_Request,Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_Guild_Supplicate_Request {
		itemID = V_itemID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_ImpeachCreater
decode(?U2GS_ImpeachCreater,Bin0) ->
	{ #pk_U2GS_ImpeachCreater {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_KickGuild
decode(?U2GS_KickGuild,Bin0) ->
	{ V_targetRoleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_KickGuild {
		targetRoleID = V_targetRoleID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_MyGuildKllBossRank
decode(?U2GS_MyGuildKllBossRank,Bin0) ->
	{ V_guildLevel, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_MyGuildKllBossRank {
		guildLevel = V_guildLevel
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_OneKeyRecruit_Request
decode(?U2GS_OneKeyRecruit_Request,Bin0) ->
	{ #pk_U2GS_OneKeyRecruit_Request {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_OpenGuildForm
decode(?U2GS_OpenGuildForm,Bin0) ->
	{ #pk_U2GS_OpenGuildForm {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_OpenGuildShop
decode(?U2GS_OpenGuildShop,Bin0) ->
	{ #pk_U2GS_OpenGuildShop {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_QueryExpeditionFinalInfo
decode(?U2GS_QueryExpeditionFinalInfo,Bin0) ->
	{ #pk_U2GS_QueryExpeditionFinalInfo {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_QueryExpeditionGlobalMapInfo
decode(?U2GS_QueryExpeditionGlobalMapInfo,Bin0) ->
	{ #pk_U2GS_QueryExpeditionGlobalMapInfo {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_QueryExpeditionMapBattleInfo
decode(?U2GS_QueryExpeditionMapBattleInfo,Bin0) ->
	{ V_mapid, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_QueryExpeditionMapBattleInfo {
		mapid = V_mapid
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_QueryExpeditionMapInfo
decode(?U2GS_QueryExpeditionMapInfo,Bin0) ->
	{ #pk_U2GS_QueryExpeditionMapInfo {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_QueryGuildInfoByRoleID_Request
decode(?U2GS_QueryGuildInfoByRoleID_Request,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_QueryGuildInfoByRoleID_Request {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_Recruit
decode(?U2GS_Recruit,Bin0) ->
	{ V_targetCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Recruit {
		targetCode = V_targetCode
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_RequestDonateTimes
decode(?U2GS_RequestDonateTimes,Bin0) ->
	{ V_moneyType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestDonateTimes {
		moneyType = V_moneyType
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_RequestEnterGuildBoss
decode(?U2GS_RequestEnterGuildBoss,Bin0) ->
	{ V_rquestBosslevel, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestEnterGuildBoss {
		rquestBosslevel = V_rquestBosslevel
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_RequestGuildBattleResult
decode(?U2GS_RequestGuildBattleResult,Bin0) ->
	{ #pk_U2GS_RequestGuildBattleResult {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestGuildBossInfo
decode(?U2GS_RequestGuildBossInfo,Bin0) ->
	{ #pk_U2GS_RequestGuildBossInfo {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestGuildBuff
decode(?U2GS_RequestGuildBuff,Bin0) ->
	{ #pk_U2GS_RequestGuildBuff {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestGuildInfo_Request
decode(?U2GS_RequestGuildInfo_Request,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RequestGuildInfo_Request {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_RequestGuildRank
decode(?U2GS_RequestGuildRank,Bin0) ->
	{ #pk_U2GS_RequestGuildRank {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestGuildSkill
decode(?U2GS_RequestGuildSkill,Bin0) ->
	{ #pk_U2GS_RequestGuildSkill {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestGuildTask
decode(?U2GS_RequestGuildTask,Bin0) ->
	{ #pk_U2GS_RequestGuildTask {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestGuildWar
decode(?U2GS_RequestGuildWar,Bin0) ->
	{ #pk_U2GS_RequestGuildWar {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestJoinGuild
decode(?U2GS_RequestJoinGuild,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RequestJoinGuild {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_RequestJoinGuildList
decode(?U2GS_RequestJoinGuildList,Bin0) ->
	{ #pk_U2GS_RequestJoinGuildList {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_RequestLookMemberList
decode(?U2GS_RequestLookMemberList,Bin0) ->
	{ V_requestPageNumber, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestLookMemberList {
		requestPageNumber = V_requestPageNumber
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_ResearchGuildSkill
decode(?U2GS_ResearchGuildSkill,Bin0) ->
	{ V_confId, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_ResearchGuildSkill {
		confId = V_confId
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_ShopUpgrade
decode(?U2GS_ShopUpgrade,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_ShopUpgrade {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_StudyGuildSkill
decode(?U2GS_StudyGuildSkill,Bin0) ->
	{ V_confId, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_StudyGuildSkill {
		confId = V_confId
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_SummonHX
decode(?U2GS_SummonHX,Bin0) ->
	{ #pk_U2GS_SummonHX {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_SummonMonster
decode(?U2GS_SummonMonster,Bin0) ->
	{ #pk_U2GS_SummonMonster {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_SupportImpeachCreater
decode(?U2GS_SupportImpeachCreater,Bin0) ->
	{ #pk_U2GS_SupportImpeachCreater {

		},
	Bin0 };

%GENERATED from file:guild.h => U2GS_Upgrade
decode(?U2GS_Upgrade,Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Upgrade {
		guildID = V_guildID
		},
	Bin1 };

%GENERATED from file:guild.h => U2GS_UseCannon
decode(?U2GS_UseCannon,Bin0) ->
	{ V_targetGuildID, Bin1 } = read_uint64( Bin0 ),
	{ V_selectCode, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_UseCannon {
		targetGuildID = V_targetGuildID,
		selectCode = V_selectCode
		},
	Bin2 };

%GENERATED from file:guild.h => U2GS_getGuildBuff
decode(?U2GS_getGuildBuff,Bin0) ->
	{ V_confId, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_getGuildBuff {
		confId = V_confId
		},
	Bin1 };

%GENERATED from file:home.h => GS2U_ChangedecorateModelResult
decode(?GS2U_ChangedecorateModelResult,Bin0) ->
	{ V_isSucc, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_ChangedecorateModelResult {
		isSucc = V_isSucc
		},
	Bin1 };

%GENERATED from file:home.h => GS2U_DelSenceTheFurniTrueResult
decode(?GS2U_DelSenceTheFurniTrueResult,Bin0) ->
	{ V_isSucc, Bin1 } = read_bool( Bin0 ),
	{ V_uid, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_DelSenceTheFurniTrueResult {
		isSucc = V_isSucc,
		uid = V_uid
		},
	Bin2 };

%GENERATED from file:home.h => GS2U_EnterHome
decode(?GS2U_EnterHome,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_ownerID, Bin2 } = read_uint64( Bin1 ),
	{ V_mapID, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_EnterHome {
		homeID = V_homeID,
		ownerID = V_ownerID,
		mapID = V_mapID
		},
	Bin3 };

%GENERATED from file:home.h => GS2U_ExtendAreaResult_Sync
decode(?GS2U_ExtendAreaResult_Sync,Bin0) ->
	{ V_isSuccuss, Bin1 } = read_bool( Bin0 ),
	{ V_extendLevel, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_ExtendAreaResult_Sync {
		isSuccuss = V_isSuccuss,
		extendLevel = V_extendLevel
		},
	Bin2 };

%GENERATED from file:home.h => GS2U_FreshHomeAreaInfo
decode(?GS2U_FreshHomeAreaInfo,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areas, Bin2 } = read_array(Bin1, fun(X) -> decode_HomeArea( X ) end),
	{ #pk_GS2U_FreshHomeAreaInfo {
		homeID = V_homeID,
		areas = V_areas
		},
	Bin2 };

%GENERATED from file:home.h => GS2U_FreshHomeInfo
decode(?GS2U_FreshHomeInfo,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_homeName, Bin2 } = read_string( Bin1 ),
	{ V_stylish, Bin3 } = read_uint32( Bin2 ),
	{ V_comfort, Bin4 } = read_uint32( Bin3 ),
	{ V_homeLvl, Bin5 } = read_uint32( Bin4 ),
	{ V_popularity, Bin6 } = read_uint32( Bin5 ),
	{ V_upgredeHomeCd, Bin7 } = read_uint64( Bin6 ),
	{ #pk_GS2U_FreshHomeInfo {
		homeID = V_homeID,
		homeName = V_homeName,
		stylish = V_stylish,
		comfort = V_comfort,
		homeLvl = V_homeLvl,
		popularity = V_popularity,
		upgredeHomeCd = V_upgredeHomeCd
		},
	Bin7 };

%GENERATED from file:home.h => GS2U_GetPetFoodResults_Sync
decode(?GS2U_GetPetFoodResults_Sync,Bin0) ->
	{ V_itemUid, Bin1 } = read_uint64( Bin0 ),
	{ V_result, Bin2 } = read_uint8( Bin1 ),
	{ V_petID, Bin3 } = read_uint16( Bin2 ),
	{ V_addTime, Bin4 } = read_uint16( Bin3 ),
	{ #pk_GS2U_GetPetFoodResults_Sync {
		itemUid = V_itemUid,
		result = V_result,
		petID = V_petID,
		addTime = V_addTime
		},
	Bin4 };

%GENERATED from file:home.h => GS2U_GivingFurniTrueForPartnerResult
decode(?GS2U_GivingFurniTrueForPartnerResult,Bin0) ->
	{ V_isSucc, Bin1 } = read_bool( Bin0 ),
	{ V_itemID, Bin2 } = read_uint16( Bin1 ),
	{ V_num, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_GivingFurniTrueForPartnerResult {
		isSucc = V_isSucc,
		itemID = V_itemID,
		num = V_num
		},
	Bin3 };

%GENERATED from file:home.h => GS2U_HomeBitResult
decode(?GS2U_HomeBitResult,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ V_phase, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GS2U_HomeBitResult {
		homeID = V_homeID,
		level = V_level,
		phase = V_phase
		},
	Bin3 };

%GENERATED from file:home.h => GS2U_HomeFarming_Sync
decode(?GS2U_HomeFarming_Sync,Bin0) ->
	{ V_petList, Bin1 } = read_array(Bin0, fun(X) -> decode_FarmingPet( X ) end),
	{ #pk_GS2U_HomeFarming_Sync {
		petList = V_petList
		},
	Bin1 };

%GENERATED from file:home.h => GS2U_HomeInfo
decode(?GS2U_HomeInfo,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_homeName, Bin2 } = read_string( Bin1 ),
	{ V_serverName, Bin3 } = read_string( Bin2 ),
	{ V_ownerID, Bin4 } = read_uint64( Bin3 ),
	{ V_ownerName, Bin5 } = read_string( Bin4 ),
	{ V_mateID, Bin6 } = read_uint64( Bin5 ),
	{ V_mateName, Bin7 } = read_string( Bin6 ),
	{ V_stylish, Bin8 } = read_uint32( Bin7 ),
	{ V_comfort, Bin9 } = read_uint32( Bin8 ),
	{ V_homeLvl, Bin10 } = read_uint32( Bin9 ),
	{ V_popularity, Bin11 } = read_uint32( Bin10 ),
	{ V_leftID, Bin12 } = read_uint64( Bin11 ),
	{ V_leftName, Bin13 } = read_string( Bin12 ),
	{ V_rightID, Bin14 } = read_uint64( Bin13 ),
	{ V_rightName, Bin15 } = read_string( Bin14 ),
	{ V_areas, Bin16 } = read_array(Bin15, fun(X) -> decode_HomeArea( X ) end),
	{ V_homeUpCd, Bin17 } = read_uint64( Bin16 ),
	{ #pk_GS2U_HomeInfo {
		homeID = V_homeID,
		homeName = V_homeName,
		serverName = V_serverName,
		ownerID = V_ownerID,
		ownerName = V_ownerName,
		mateID = V_mateID,
		mateName = V_mateName,
		stylish = V_stylish,
		comfort = V_comfort,
		homeLvl = V_homeLvl,
		popularity = V_popularity,
		leftID = V_leftID,
		leftName = V_leftName,
		rightID = V_rightID,
		rightName = V_rightName,
		areas = V_areas,
		homeUpCd = V_homeUpCd
		},
	Bin17 };

%GENERATED from file:home.h => GS2U_HomePlantOperate_Ack
decode(?GS2U_HomePlantOperate_Ack,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_operateType, Bin2 } = read_uint8( Bin1 ),
	{ V_reason, Bin3 } = read_uint32( Bin2 ),
	{ V_plant, Bin4 } = decode_Plant( Bin3 ),
	{ #pk_GS2U_HomePlantOperate_Ack {
		roleID = V_roleID,
		operateType = V_operateType,
		reason = V_reason,
		plant = V_plant
		},
	Bin4 };

%GENERATED from file:home.h => GS2U_HomePlant_Sync
decode(?GS2U_HomePlant_Sync,Bin0) ->
	{ V_listPlant, Bin1 } = read_array(Bin0, fun(X) -> decode_Plant( X ) end),
	{ #pk_GS2U_HomePlant_Sync {
		listPlant = V_listPlant
		},
	Bin1 };

%GENERATED from file:home.h => GS2U_HomeVisitList
decode(?GS2U_HomeVisitList,Bin0) ->
	{ V_allnumber, Bin1 } = read_uint16( Bin0 ),
	{ V_paga, Bin2 } = read_uint8( Bin1 ),
	{ V_visits, Bin3 } = read_array(Bin2, fun(X) -> decode_HomeVisit( X ) end),
	{ #pk_GS2U_HomeVisitList {
		allnumber = V_allnumber,
		paga = V_paga,
		visits = V_visits
		},
	Bin3 };

%GENERATED from file:home.h => GS2U_Invitefriendstobed
decode(?GS2U_Invitefriendstobed,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_homeID, Bin2 } = read_uint64( Bin1 ),
	{ V_areaType, Bin3 } = read_uint8( Bin2 ),
	{ V_itemUID, Bin4 } = read_uint64( Bin3 ),
	{ #pk_GS2U_Invitefriendstobed {
		roleID = V_roleID,
		homeID = V_homeID,
		areaType = V_areaType,
		itemUID = V_itemUID
		},
	Bin4 };

%GENERATED from file:home.h => GS2U_LoadFurniTrueResult_Sync
decode(?GS2U_LoadFurniTrueResult_Sync,Bin0) ->
	{ V_isSucc, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_LoadFurniTrueResult_Sync {
		isSucc = V_isSucc
		},
	Bin1 };

%GENERATED from file:home.h => GS2U_PutOutPetFarmingResults_Sync
decode(?GS2U_PutOutPetFarmingResults_Sync,Bin0) ->
	{ V_itemUid, Bin1 } = read_uint64( Bin0 ),
	{ V_result, Bin2 } = read_uint8( Bin1 ),
	{ V_petID, Bin3 } = read_uint16( Bin2 ),
	{ V_exp, Bin4 } = read_uint16( Bin3 ),
	{ V_minutes, Bin5 } = read_uint16( Bin4 ),
	{ #pk_GS2U_PutOutPetFarmingResults_Sync {
		itemUid = V_itemUid,
		result = V_result,
		petID = V_petID,
		exp = V_exp,
		minutes = V_minutes
		},
	Bin5 };

%GENERATED from file:home.h => GS2U_PutPetInFarmingResults_Sync
decode(?GS2U_PutPetInFarmingResults_Sync,Bin0) ->
	{ V_result, Bin1 } = read_uint8( Bin0 ),
	{ V_petFarming, Bin2 } = decode_FarmingPet( Bin1 ),
	{ #pk_GS2U_PutPetInFarmingResults_Sync {
		result = V_result,
		petFarming = V_petFarming
		},
	Bin2 };

%GENERATED from file:home.h => GS2U_SaveFurniTrueResult_Sync
decode(?GS2U_SaveFurniTrueResult_Sync,Bin0) ->
	{ V_isSucc, Bin1 } = read_bool( Bin0 ),
	{ V_change_wallID, Bin2 } = read_uint16( Bin1 ),
	{ V_chang_floorID, Bin3 } = read_uint16( Bin2 ),
	{ V_add_furnitrueData, Bin4 } = read_array(Bin3, fun(X) -> decode_HomeLayoutInfo( X ) end),
	{ V_change_furnitrueData, Bin5 } = read_array(Bin4, fun(X) -> decode_HomeLayoutInfo( X ) end),
	{ #pk_GS2U_SaveFurniTrueResult_Sync {
		isSucc = V_isSucc,
		change_wallID = V_change_wallID,
		chang_floorID = V_chang_floorID,
		add_furnitrueData = V_add_furnitrueData,
		change_furnitrueData = V_change_furnitrueData
		},
	Bin5 };

%GENERATED from file:home.h => GS2U_SendAllFurniInfo_Sync
decode(?GS2U_SendAllFurniInfo_Sync,Bin0) ->
	{ V_greetings, Bin1 } = read_string( Bin0 ),
	{ V_furniTrueLevel, Bin2 } = read_uint8( Bin1 ),
	{ V_extendLevel, Bin3 } = read_uint8( Bin2 ),
	{ V_wallID, Bin4 } = read_uint16( Bin3 ),
	{ V_floorID, Bin5 } = read_uint16( Bin4 ),
	{ V_isdecorate, Bin6 } = read_bool( Bin5 ),
	{ V_betweenExampleData, Bin7 } = read_array(Bin6, fun(X) -> decode_HomeLayoutInfo( X ) end),
	{ V_interactList, Bin8 } = read_array(Bin7, fun(X) -> decode_FurniInteractTrueData( X ) end),
	{ #pk_GS2U_SendAllFurniInfo_Sync {
		greetings = V_greetings,
		furniTrueLevel = V_furniTrueLevel,
		extendLevel = V_extendLevel,
		wallID = V_wallID,
		floorID = V_floorID,
		isdecorate = V_isdecorate,
		betweenExampleData = V_betweenExampleData,
		interactList = V_interactList
		},
	Bin8 };

%GENERATED from file:home.h => GS2U_SendHomeLetter
decode(?GS2U_SendHomeLetter,Bin0) ->
	{ V_letter, Bin1 } = decode_HomeLetter( Bin0 ),
	{ #pk_GS2U_SendHomeLetter {
		letter = V_letter
		},
	Bin1 };

%GENERATED from file:home.h => GS2U_SetGreetingsResult_Sync
decode(?GS2U_SetGreetingsResult_Sync,Bin0) ->
	{ V_isSuccuss, Bin1 } = read_bool( Bin0 ),
	{ V_greetings, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_SetGreetingsResult_Sync {
		isSuccuss = V_isSuccuss,
		greetings = V_greetings
		},
	Bin2 };

%GENERATED from file:home.h => GS2U_UseFurnitrueResult
decode(?GS2U_UseFurnitrueResult,Bin0) ->
	{ V_isUp, Bin1 } = read_bool( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_itemUID, Bin3 } = read_uint64( Bin2 ),
	{ V_seatID, Bin4 } = read_uint8( Bin3 ),
	{ V_isdoubleSleep, Bin5 } = read_bool( Bin4 ),
	{ #pk_GS2U_UseFurnitrueResult {
		isUp = V_isUp,
		roleID = V_roleID,
		itemUID = V_itemUID,
		seatID = V_seatID,
		isdoubleSleep = V_isdoubleSleep
		},
	Bin5 };

%GENERATED from file:home.h => GS2U_VisitRecord
decode(?GS2U_VisitRecord,Bin0) ->
	{ V_lists, Bin1 } = read_array(Bin0, fun(X) -> decode_VisitRecord( X ) end),
	{ #pk_GS2U_VisitRecord {
		lists = V_lists
		},
	Bin1 };

%GENERATED from file:home.h => U2GS_ChangeHomeName
decode(?U2GS_ChangeHomeName,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_homeName, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_ChangeHomeName {
		homeID = V_homeID,
		homeName = V_homeName
		},
	Bin2 };

%GENERATED from file:home.h => U2GS_ChangedecorateModel
decode(?U2GS_ChangedecorateModel,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ V_isDecorate, Bin3 } = read_bool( Bin2 ),
	{ #pk_U2GS_ChangedecorateModel {
		homeID = V_homeID,
		areaType = V_areaType,
		isDecorate = V_isDecorate
		},
	Bin3 };

%GENERATED from file:home.h => U2GS_CreateHome
decode(?U2GS_CreateHome,Bin0) ->
	{ V_adminAreaID, Bin1 } = read_uint32( Bin0 ),
	{ V_homeName, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_CreateHome {
		adminAreaID = V_adminAreaID,
		homeName = V_homeName
		},
	Bin2 };

%GENERATED from file:home.h => U2GS_DelSenceTheFurniTrue
decode(?U2GS_DelSenceTheFurniTrue,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ V_uid, Bin3 } = read_uint64( Bin2 ),
	{ #pk_U2GS_DelSenceTheFurniTrue {
		homeID = V_homeID,
		areaType = V_areaType,
		uid = V_uid
		},
	Bin3 };

%GENERATED from file:home.h => U2GS_EnterBitHome
decode(?U2GS_EnterBitHome,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_EnterBitHome {
		itemUID = V_itemUID
		},
	Bin1 };

%GENERATED from file:home.h => U2GS_EnterHome
decode(?U2GS_EnterHome,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_flag, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_EnterHome {
		roleID = V_roleID,
		flag = V_flag
		},
	Bin2 };

%GENERATED from file:home.h => U2GS_ExtendArea
decode(?U2GS_ExtendArea,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_ExtendArea {
		homeID = V_homeID,
		areaType = V_areaType
		},
	Bin2 };

%GENERATED from file:home.h => U2GS_GetPetFood
decode(?U2GS_GetPetFood,Bin0) ->
	{ V_itemUid, Bin1 } = read_uint64( Bin0 ),
	{ V_homeID, Bin2 } = read_uint64( Bin1 ),
	{ V_petID, Bin3 } = read_uint16( Bin2 ),
	{ V_itemID, Bin4 } = read_uint16( Bin3 ),
	{ V_areaType, Bin5 } = read_uint8( Bin4 ),
	{ #pk_U2GS_GetPetFood {
		itemUid = V_itemUid,
		homeID = V_homeID,
		petID = V_petID,
		itemID = V_itemID,
		areaType = V_areaType
		},
	Bin5 };

%GENERATED from file:home.h => U2GS_GivingFurniTrueForPartner
decode(?U2GS_GivingFurniTrueForPartner,Bin0) ->
	{ V_partherRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_homeID, Bin2 } = read_uint64( Bin1 ),
	{ V_areaType, Bin3 } = read_uint8( Bin2 ),
	{ V_itemID, Bin4 } = read_uint16( Bin3 ),
	{ V_num, Bin5 } = read_uint16( Bin4 ),
	{ #pk_U2GS_GivingFurniTrueForPartner {
		partherRoleID = V_partherRoleID,
		homeID = V_homeID,
		areaType = V_areaType,
		itemID = V_itemID,
		num = V_num
		},
	Bin5 };

%GENERATED from file:home.h => U2GS_HomePlantOperate_Request
decode(?U2GS_HomePlantOperate_Request,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ V_itemUid, Bin3 } = read_uint64( Bin2 ),
	{ V_operateType, Bin4 } = read_uint8( Bin3 ),
	{ V_itemID, Bin5 } = read_uint16( Bin4 ),
	{ #pk_U2GS_HomePlantOperate_Request {
		homeID = V_homeID,
		areaType = V_areaType,
		itemUid = V_itemUid,
		operateType = V_operateType,
		itemID = V_itemID
		},
	Bin5 };

%GENERATED from file:home.h => U2GS_HomeVisit
decode(?U2GS_HomeVisit,Bin0) ->
	{ V_paga, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_HomeVisit {
		paga = V_paga
		},
	Bin1 };

%GENERATED from file:home.h => U2GS_Invitefriendstobed
decode(?U2GS_Invitefriendstobed,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_homeID, Bin2 } = read_uint64( Bin1 ),
	{ V_areaType, Bin3 } = read_uint8( Bin2 ),
	{ V_itemUID, Bin4 } = read_uint64( Bin3 ),
	{ #pk_U2GS_Invitefriendstobed {
		roleID = V_roleID,
		homeID = V_homeID,
		areaType = V_areaType,
		itemUID = V_itemUID
		},
	Bin4 };

%GENERATED from file:home.h => U2GS_LoadFurniTrueScheme
decode(?U2GS_LoadFurniTrueScheme,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_LoadFurniTrueScheme {
		homeID = V_homeID,
		areaType = V_areaType
		},
	Bin2 };

%GENERATED from file:home.h => U2GS_PutOutPetFarming
decode(?U2GS_PutOutPetFarming,Bin0) ->
	{ V_itemUid, Bin1 } = read_uint64( Bin0 ),
	{ V_homeID, Bin2 } = read_uint64( Bin1 ),
	{ V_petID, Bin3 } = read_uint16( Bin2 ),
	{ V_areaType, Bin4 } = read_uint8( Bin3 ),
	{ #pk_U2GS_PutOutPetFarming {
		itemUid = V_itemUid,
		homeID = V_homeID,
		petID = V_petID,
		areaType = V_areaType
		},
	Bin4 };

%GENERATED from file:home.h => U2GS_PutPetInFarming
decode(?U2GS_PutPetInFarming,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_petID, Bin2 } = read_uint16( Bin1 ),
	{ V_areaType, Bin3 } = read_uint8( Bin2 ),
	{ V_itemUid, Bin4 } = read_uint64( Bin3 ),
	{ #pk_U2GS_PutPetInFarming {
		homeID = V_homeID,
		petID = V_petID,
		areaType = V_areaType,
		itemUid = V_itemUid
		},
	Bin4 };

%GENERATED from file:home.h => U2GS_RequestHomeInfo
decode(?U2GS_RequestHomeInfo,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_isShowErrCode, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_RequestHomeInfo {
		roleID = V_roleID,
		isShowErrCode = V_isShowErrCode
		},
	Bin2 };

%GENERATED from file:home.h => U2GS_RequestVisitRecord
decode(?U2GS_RequestVisitRecord,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RequestVisitRecord {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:home.h => U2GS_SaveFurniTrueScheme
decode(?U2GS_SaveFurniTrueScheme,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ V_change_wallID, Bin3 } = read_uint16( Bin2 ),
	{ V_chang_floorID, Bin4 } = read_uint16( Bin3 ),
	{ V_add_furnitrueData, Bin5 } = read_array(Bin4, fun(X) -> decode_HomeLayoutInfo( X ) end),
	{ V_change_furnitrueData, Bin6 } = read_array(Bin5, fun(X) -> decode_HomeLayoutInfo( X ) end),
	{ #pk_U2GS_SaveFurniTrueScheme {
		homeID = V_homeID,
		areaType = V_areaType,
		change_wallID = V_change_wallID,
		chang_floorID = V_chang_floorID,
		add_furnitrueData = V_add_furnitrueData,
		change_furnitrueData = V_change_furnitrueData
		},
	Bin6 };

%GENERATED from file:home.h => U2GS_SetGreetings
decode(?U2GS_SetGreetings,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ V_greetings, Bin3 } = read_string( Bin2 ),
	{ #pk_U2GS_SetGreetings {
		homeID = V_homeID,
		areaType = V_areaType,
		greetings = V_greetings
		},
	Bin3 };

%GENERATED from file:home.h => U2GS_UpgradeHome
decode(?U2GS_UpgradeHome,Bin0) ->
	{ V_upgredeDataList, Bin1 } = read_array(Bin0, fun(X) -> decode_UpgradeHomeData( X ) end),
	{ #pk_U2GS_UpgradeHome {
		upgredeDataList = V_upgredeDataList
		},
	Bin1 };

%GENERATED from file:home.h => U2GS_UpgradeHomeArea
decode(?U2GS_UpgradeHomeArea,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaID, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_UpgradeHomeArea {
		homeID = V_homeID,
		areaID = V_areaID
		},
	Bin2 };

%GENERATED from file:home.h => U2GS_UseFurnitrue
decode(?U2GS_UseFurnitrue,Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ V_itemUID, Bin3 } = read_uint64( Bin2 ),
	{ V_isUp, Bin4 } = read_bool( Bin3 ),
	{ #pk_U2GS_UseFurnitrue {
		homeID = V_homeID,
		areaType = V_areaType,
		itemUID = V_itemUID,
		isUp = V_isUp
		},
	Bin4 };

%GENERATED from file:identity.h => GS2U_GiftHistory_Sync
decode(?GS2U_GiftHistory_Sync,Bin0) ->
	{ V_listHistory, Bin1 } = read_array(Bin0, fun(X) -> decode_GiftHistory( X ) end),
	{ V_nameTables, Bin2 } = read_array(Bin1, fun(X) -> decode_NameTable( X ) end),
	{ V_listItemID, Bin3 } = read_array(Bin2, fun(X) -> read_uint16( X ) end),
	{ V_listItemCount, Bin4 } = read_array(Bin3, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_GiftHistory_Sync {
		listHistory = V_listHistory,
		nameTables = V_nameTables,
		listItemID = V_listItemID,
		listItemCount = V_listItemCount
		},
	Bin4 };

%GENERATED from file:identity.h => GS2U_Gift_Ack
decode(?GS2U_Gift_Ack,Bin0) ->
	{ V_history, Bin1 } = decode_GiftHistory( Bin0 ),
	{ V_nameTables, Bin2 } = read_array(Bin1, fun(X) -> decode_NameTable( X ) end),
	{ #pk_GS2U_Gift_Ack {
		history = V_history,
		nameTables = V_nameTables
		},
	Bin2 };

%GENERATED from file:identity.h => GS2U_IdentityCharm_Sync
decode(?GS2U_IdentityCharm_Sync,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_tarRoleID, Bin2 } = read_uint64( Bin1 ),
	{ V_valueUpdate, Bin3 } = read_uint32( Bin2 ),
	{ V_valueNew, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_IdentityCharm_Sync {
		roleID = V_roleID,
		tarRoleID = V_tarRoleID,
		valueUpdate = V_valueUpdate,
		valueNew = V_valueNew
		},
	Bin4 };

%GENERATED from file:identity.h => GS2U_IdentityEditPic_Ack
decode(?GS2U_IdentityEditPic_Ack,Bin0) ->
	{ V_idi_listPic, Bin1 } = read_array(Bin0, fun(X) -> decode_MD5( X ) end),
	{ #pk_GS2U_IdentityEditPic_Ack {
		idi_listPic = V_idi_listPic
		},
	Bin1 };

%GENERATED from file:identity.h => GS2U_IdentityEditTag_Ack
decode(?GS2U_IdentityEditTag_Ack,Bin0) ->
	{ V_idi_listTag, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_IdentityEditTag_Ack {
		idi_listTag = V_idi_listTag
		},
	Bin1 };

%GENERATED from file:identity.h => GS2U_IdentityLike_Sync
decode(?GS2U_IdentityLike_Sync,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_tarRoleID, Bin2 } = read_uint64( Bin1 ),
	{ V_valueUpdate, Bin3 } = read_uint32( Bin2 ),
	{ V_valueNew, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_IdentityLike_Sync {
		roleID = V_roleID,
		tarRoleID = V_tarRoleID,
		valueUpdate = V_valueUpdate,
		valueNew = V_valueNew
		},
	Bin4 };

%GENERATED from file:identity.h => GS2U_IdentityPicDownloadData_Ack
decode(?GS2U_IdentityPicDownloadData_Ack,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_size, Bin2 } = read_uint32( Bin1 ),
	{ V_count, Bin3 } = read_uint16( Bin2 ),
	{ V_index, Bin4 } = read_uint16( Bin3 ),
	{ V_data, Bin5 } = read_array(Bin4, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_IdentityPicDownloadData_Ack {
		md5 = V_md5,
		size = V_size,
		count = V_count,
		index = V_index,
		data = V_data
		},
	Bin5 };

%GENERATED from file:identity.h => GS2U_IdentityPicDownloadData_Sync
decode(?GS2U_IdentityPicDownloadData_Sync,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_size, Bin2 } = read_uint32( Bin1 ),
	{ V_count, Bin3 } = read_uint16( Bin2 ),
	{ V_index, Bin4 } = read_uint16( Bin3 ),
	{ V_data, Bin5 } = read_array(Bin4, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_IdentityPicDownloadData_Sync {
		md5 = V_md5,
		size = V_size,
		count = V_count,
		index = V_index,
		data = V_data
		},
	Bin5 };

%GENERATED from file:identity.h => GS2U_IdentityPicDownloadError_Ack
decode(?GS2U_IdentityPicDownloadError_Ack,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_error, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_IdentityPicDownloadError_Ack {
		md5 = V_md5,
		error = V_error
		},
	Bin2 };

%GENERATED from file:identity.h => GS2U_IdentityPicUpload_Ack
decode(?GS2U_IdentityPicUpload_Ack,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_isComplete, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_IdentityPicUpload_Ack {
		md5 = V_md5,
		isComplete = V_isComplete
		},
	Bin2 };

%GENERATED from file:identity.h => GS2U_Identity_Ack
decode(?GS2U_Identity_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_level, Bin4 } = read_uint16( Bin3 ),
	{ V_career, Bin5 } = read_uint32( Bin4 ),
	{ V_race, Bin6 } = read_uint8( Bin5 ),
	{ V_sex, Bin7 } = read_uint8( Bin6 ),
	{ V_vipLv, Bin8 } = read_uint8( Bin7 ),
	{ V_like, Bin9 } = read_uint32( Bin8 ),
	{ V_charm, Bin10 } = read_uint32( Bin9 ),
	{ V_isGiveLike, Bin11 } = read_bool( Bin10 ),
	{ V_familyName, Bin12 } = read_string( Bin11 ),
	{ V_idi_age, Bin13 } = read_uint8( Bin12 ),
	{ V_idi_birthmonth, Bin14 } = read_uint8( Bin13 ),
	{ V_idi_birthday, Bin15 } = read_uint8( Bin14 ),
	{ V_idi_zodiac, Bin16 } = read_uint8( Bin15 ),
	{ V_idi_bloodType, Bin17 } = read_uint8( Bin16 ),
	{ V_idi_hometown1, Bin18 } = read_uint8( Bin17 ),
	{ V_idi_hometown2, Bin19 } = read_uint8( Bin18 ),
	{ V_idi_location1, Bin20 } = read_uint8( Bin19 ),
	{ V_idi_location2, Bin21 } = read_uint8( Bin20 ),
	{ V_idi_sign, Bin22 } = read_string( Bin21 ),
	{ V_idi_face, Bin23 } = read_array(Bin22, fun(X) -> read_uint8( X ) end),
	{ V_idi_listTag, Bin24 } = read_array(Bin23, fun(X) -> read_uint8( X ) end),
	{ V_idi_listPic, Bin25 } = read_array(Bin24, fun(X) -> decode_MD5( X ) end),
	{ #pk_GS2U_Identity_Ack {
		id = V_id,
		code = V_code,
		name = V_name,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		vipLv = V_vipLv,
		like = V_like,
		charm = V_charm,
		isGiveLike = V_isGiveLike,
		familyName = V_familyName,
		idi_age = V_idi_age,
		idi_birthmonth = V_idi_birthmonth,
		idi_birthday = V_idi_birthday,
		idi_zodiac = V_idi_zodiac,
		idi_bloodType = V_idi_bloodType,
		idi_hometown1 = V_idi_hometown1,
		idi_hometown2 = V_idi_hometown2,
		idi_location1 = V_idi_location1,
		idi_location2 = V_idi_location2,
		idi_sign = V_idi_sign,
		idi_face = V_idi_face,
		idi_listTag = V_idi_listTag,
		idi_listPic = V_idi_listPic
		},
	Bin25 };

%GENERATED from file:identity.h => GS2U_Report_Ack
decode(?GS2U_Report_Ack,Bin0) ->
	{ V_tarRoleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_Report_Ack {
		tarRoleID = V_tarRoleID
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditAge
decode(?U2GS2U_IdentityEditAge,Bin0) ->
	{ V_idi_age, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS2U_IdentityEditAge {
		idi_age = V_idi_age
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditBirth
decode(?U2GS2U_IdentityEditBirth,Bin0) ->
	{ V_idi_birthmonth, Bin1 } = read_uint8( Bin0 ),
	{ V_idi_birthday, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS2U_IdentityEditBirth {
		idi_birthmonth = V_idi_birthmonth,
		idi_birthday = V_idi_birthday
		},
	Bin2 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditBloodType
decode(?U2GS2U_IdentityEditBloodType,Bin0) ->
	{ V_idi_bloodType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS2U_IdentityEditBloodType {
		idi_bloodType = V_idi_bloodType
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditFace
decode(?U2GS2U_IdentityEditFace,Bin0) ->
	{ V_idi_face, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_U2GS2U_IdentityEditFace {
		idi_face = V_idi_face
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditHometown
decode(?U2GS2U_IdentityEditHometown,Bin0) ->
	{ V_idi_hometown1, Bin1 } = read_uint8( Bin0 ),
	{ V_idi_hometown2, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS2U_IdentityEditHometown {
		idi_hometown1 = V_idi_hometown1,
		idi_hometown2 = V_idi_hometown2
		},
	Bin2 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditLocation
decode(?U2GS2U_IdentityEditLocation,Bin0) ->
	{ V_idi_location1, Bin1 } = read_uint8( Bin0 ),
	{ V_idi_location2, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS2U_IdentityEditLocation {
		idi_location1 = V_idi_location1,
		idi_location2 = V_idi_location2
		},
	Bin2 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditSign
decode(?U2GS2U_IdentityEditSign,Bin0) ->
	{ V_idi_sign, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS2U_IdentityEditSign {
		idi_sign = V_idi_sign
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS2U_IdentityEditZodiac
decode(?U2GS2U_IdentityEditZodiac,Bin0) ->
	{ V_idi_zodiac, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS2U_IdentityEditZodiac {
		idi_zodiac = V_idi_zodiac
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS2U_RequestRoleHeadPic
decode(?U2GS2U_RequestRoleHeadPic,Bin0) ->
	{ V_heads, Bin1 } = read_array(Bin0, fun(X) -> decode_RoleHeadPic( X ) end),
	{ #pk_U2GS2U_RequestRoleHeadPic {
		heads = V_heads
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS_Gift_Request
decode(?U2GS_Gift_Request,Bin0) ->
	{ V_tarRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemID, Bin2 } = read_uint16( Bin1 ),
	{ V_itemCount, Bin3 } = read_uint16( Bin2 ),
	{ V_content, Bin4 } = read_string( Bin3 ),
	{ #pk_U2GS_Gift_Request {
		tarRoleID = V_tarRoleID,
		itemID = V_itemID,
		itemCount = V_itemCount,
		content = V_content
		},
	Bin4 };

%GENERATED from file:identity.h => U2GS_IdentityEditTagAdd_Request
decode(?U2GS_IdentityEditTagAdd_Request,Bin0) ->
	{ V_idi_listTag, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_U2GS_IdentityEditTagAdd_Request {
		idi_listTag = V_idi_listTag
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS_IdentityEditTagDel_Request
decode(?U2GS_IdentityEditTagDel_Request,Bin0) ->
	{ V_idi_tag, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_IdentityEditTagDel_Request {
		idi_tag = V_idi_tag
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS_IdentityPicDownloadBegin_Request
decode(?U2GS_IdentityPicDownloadBegin_Request,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_id, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_IdentityPicDownloadBegin_Request {
		md5 = V_md5,
		id = V_id
		},
	Bin2 };

%GENERATED from file:identity.h => U2GS_IdentityPicDownloadContinue_Request
decode(?U2GS_IdentityPicDownloadContinue_Request,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_U2GS_IdentityPicDownloadContinue_Request {
		md5 = V_md5
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS_IdentityPicUploadBegin_Request
decode(?U2GS_IdentityPicUploadBegin_Request,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_size, Bin2 } = read_uint32( Bin1 ),
	{ V_opType, Bin3 } = read_bool( Bin2 ),
	{ V_pos, Bin4 } = read_uint8( Bin3 ),
	{ #pk_U2GS_IdentityPicUploadBegin_Request {
		md5 = V_md5,
		size = V_size,
		opType = V_opType,
		pos = V_pos
		},
	Bin4 };

%GENERATED from file:identity.h => U2GS_IdentityPicUploadData_Request
decode(?U2GS_IdentityPicUploadData_Request,Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_count, Bin2 } = read_uint16( Bin1 ),
	{ V_index, Bin3 } = read_uint16( Bin2 ),
	{ V_data, Bin4 } = read_array(Bin3, fun(X) -> read_uint8( X ) end),
	{ #pk_U2GS_IdentityPicUploadData_Request {
		md5 = V_md5,
		count = V_count,
		index = V_index,
		data = V_data
		},
	Bin4 };

%GENERATED from file:identity.h => U2GS_Identity_Request
decode(?U2GS_Identity_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Identity_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:identity.h => U2GS_Report_Request
decode(?U2GS_Report_Request,Bin0) ->
	{ V_tarRoleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_Report_Request {
		tarRoleID = V_tarRoleID
		},
	Bin1 };

%GENERATED from file:item.h => GS2U_BuyItemQuotaNumber
decode(?GS2U_BuyItemQuotaNumber,Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_quotaNumber, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_BuyItemQuotaNumber {
		itemid = V_itemid,
		quotaNumber = V_quotaNumber
		},
	Bin2 };

%GENERATED from file:item.h => GS2U_LookInfoItemListAtMall
decode(?GS2U_LookInfoItemListAtMall,Bin0) ->
	{ V_item_list, Bin1 } = read_array(Bin0, fun(X) -> decode_LookInfoItemAtMall( X ) end),
	{ #pk_GS2U_LookInfoItemListAtMall {
		item_list = V_item_list
		},
	Bin1 };

%GENERATED from file:item.h => GS2U_LookInfoItemListAtNpcStore
decode(?GS2U_LookInfoItemListAtNpcStore,Bin0) ->
	{ V_storeType, Bin1 } = read_uint16( Bin0 ),
	{ V_item_list, Bin2 } = read_array(Bin1, fun(X) -> decode_LookInfoItem( X ) end),
	{ #pk_GS2U_LookInfoItemListAtNpcStore {
		storeType = V_storeType,
		item_list = V_item_list
		},
	Bin2 };

%GENERATED from file:item.h => GS2U_MysteriousShop
decode(?GS2U_MysteriousShop,Bin0) ->
	{ V_lvlPhase, Bin1 } = read_uint32( Bin0 ),
	{ V_residueTime, Bin2 } = read_uint32( Bin1 ),
	{ V_items, Bin3 } = read_array(Bin2, fun(X) -> decode_MysteriousShopItem( X ) end),
	{ V_freshMSShopDaimond, Bin4 } = read_int32( Bin3 ),
	{ #pk_GS2U_MysteriousShop {
		lvlPhase = V_lvlPhase,
		residueTime = V_residueTime,
		items = V_items,
		freshMSShopDaimond = V_freshMSShopDaimond
		},
	Bin4 };

%GENERATED from file:item.h => GS2U_ShowGainGoodsOrCoinsInfo
decode(?GS2U_ShowGainGoodsOrCoinsInfo,Bin0) ->
	{ V_gainReason, Bin1 } = read_string( Bin0 ),
	{ V_listGoods, Bin2 } = read_array(Bin1, fun(X) -> decode_OneGoodsInfo( X ) end),
	{ V_listcoins, Bin3 } = read_array(Bin2, fun(X) -> decode_OneCoinInfo( X ) end),
	{ #pk_GS2U_ShowGainGoodsOrCoinsInfo {
		gainReason = V_gainReason,
		listGoods = V_listGoods,
		listcoins = V_listcoins
		},
	Bin3 };

%GENERATED from file:item.h => GS2U_SingleUseItem
decode(?GS2U_SingleUseItem,Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_SingleUseItem {
		itemID = V_itemID
		},
	Bin1 };

%GENERATED from file:item.h => GS2U_UseItem
decode(?GS2U_UseItem,Bin0) ->
	{ V_vctUseItem, Bin1 } = read_array(Bin0, fun(X) -> decode_UseItemCD( X ) end),
	{ #pk_GS2U_UseItem {
		vctUseItem = V_vctUseItem
		},
	Bin1 };

%GENERATED from file:item.h => GS2U_UseItemExpInDanResult
decode(?GS2U_UseItemExpInDanResult,Bin0) ->
	{ V_expInDanType, Bin1 } = read_uint32( Bin0 ),
	{ V_remainTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_UseItemExpInDanResult {
		expInDanType = V_expInDanType,
		remainTime = V_remainTime
		},
	Bin2 };

%GENERATED from file:item.h => GS2U_UseItemGainGoodsTips
decode(?GS2U_UseItemGainGoodsTips,Bin0) ->
	{ V_listTips, Bin1 } = read_array(Bin0, fun(X) -> decode_UseItemGainGoodsTips( X ) end),
	{ V_coinTips, Bin2 } = read_array(Bin1, fun(X) -> decode_UseItemGainCoinTips( X ) end),
	{ #pk_GS2U_UseItemGainGoodsTips {
		listTips = V_listTips,
		coinTips = V_coinTips
		},
	Bin2 };

%GENERATED from file:item.h => GS2U_UseItemResult
decode(?GS2U_UseItemResult,Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint16( Bin1 ),
	{ V_result, Bin3 } = read_int32( Bin2 ),
	{ #pk_GS2U_UseItemResult {
		itemID = V_itemID,
		itemNum = V_itemNum,
		result = V_result
		},
	Bin3 };

%GENERATED from file:item.h => RefindResList
decode(?RefindResList,Bin0) ->
	{ V_resList, Bin1 } = read_array(Bin0, fun(X) -> decode_RefindResInfo( X ) end),
	{ #pk_RefindResList {
		resList = V_resList
		},
	Bin1 };

%GENERATED from file:item.h => U2GS_BuyItemAtGuildShopRequest
decode(?U2GS_BuyItemAtGuildShopRequest,Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_BuyItemAtGuildShopRequest {
		itemid = V_itemid,
		number = V_number
		},
	Bin2 };

%GENERATED from file:item.h => U2GS_BuyItemAtMallRequest
decode(?U2GS_BuyItemAtMallRequest,Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_BuyItemAtMallRequest {
		itemid = V_itemid,
		number = V_number
		},
	Bin2 };

%GENERATED from file:item.h => U2GS_BuyItemAtNpcStoreRequest
decode(?U2GS_BuyItemAtNpcStoreRequest,Bin0) ->
	{ V_npccode, Bin1 } = read_uint64( Bin0 ),
	{ V_itemid, Bin2 } = read_uint16( Bin1 ),
	{ V_number, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_BuyItemAtNpcStoreRequest {
		npccode = V_npccode,
		itemid = V_itemid,
		number = V_number
		},
	Bin3 };

%GENERATED from file:item.h => U2GS_BuyItemAtShopIDRequest
decode(?U2GS_BuyItemAtShopIDRequest,Bin0) ->
	{ V_shopID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemid, Bin2 } = read_uint16( Bin1 ),
	{ V_number, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_BuyItemAtShopIDRequest {
		shopID = V_shopID,
		itemid = V_itemid,
		number = V_number
		},
	Bin3 };

%GENERATED from file:item.h => U2GS_BuyMysteriousShopItem
decode(?U2GS_BuyMysteriousShopItem,Bin0) ->
	{ V_lvlPhase, Bin1 } = read_uint32( Bin0 ),
	{ V_buynumber, Bin2 } = read_uint32( Bin1 ),
	{ V_only_id, Bin3 } = read_uint32( Bin2 ),
	{ V_itemid, Bin4 } = read_uint16( Bin3 ),
	{ #pk_U2GS_BuyMysteriousShopItem {
		lvlPhase = V_lvlPhase,
		buynumber = V_buynumber,
		only_id = V_only_id,
		itemid = V_itemid
		},
	Bin4 };

%GENERATED from file:item.h => U2GS_ConvenientBuyItem
decode(?U2GS_ConvenientBuyItem,Bin0) ->
	{ V_itemid, Bin1 } = read_uint32( Bin0 ),
	{ V_buynumber, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_ConvenientBuyItem {
		itemid = V_itemid,
		buynumber = V_buynumber
		},
	Bin2 };

%GENERATED from file:item.h => U2GS_FreshMSShop
decode(?U2GS_FreshMSShop,Bin0) ->
	{ #pk_U2GS_FreshMSShop {

		},
	Bin0 };

%GENERATED from file:item.h => U2GS_LookInfoItemListAtMall
decode(?U2GS_LookInfoItemListAtMall,Bin0) ->
	{ #pk_U2GS_LookInfoItemListAtMall {

		},
	Bin0 };

%GENERATED from file:item.h => U2GS_LookInfoItemListAtNpcStore
decode(?U2GS_LookInfoItemListAtNpcStore,Bin0) ->
	{ V_npccode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_LookInfoItemListAtNpcStore {
		npccode = V_npccode
		},
	Bin1 };

%GENERATED from file:item.h => U2GS_LookInfoItemListAtShopID
decode(?U2GS_LookInfoItemListAtShopID,Bin0) ->
	{ V_shopID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_LookInfoItemListAtShopID {
		shopID = V_shopID
		},
	Bin1 };

%GENERATED from file:item.h => U2GS_RefindResAll
decode(?U2GS_RefindResAll,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RefindResAll {
		type = V_type
		},
	Bin1 };

%GENERATED from file:item.h => U2GS_RefindResOne
decode(?U2GS_RefindResOne,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_RefindResOne {
		id = V_id,
		type = V_type
		},
	Bin2 };

%GENERATED from file:item.h => U2GS_RequestMysteriousShop
decode(?U2GS_RequestMysteriousShop,Bin0) ->
	{ #pk_U2GS_RequestMysteriousShop {

		},
	Bin0 };

%GENERATED from file:item.h => U2GS_UseStarMoonBox
decode(?U2GS_UseStarMoonBox,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_useNum, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_UseStarMoonBox {
		itemUID = V_itemUID,
		useNum = V_useNum
		},
	Bin2 };

%GENERATED from file:luckycoin.h => GS2U_GainLuckyCoin
decode(?GS2U_GainLuckyCoin,Bin0) ->
	{ V_gainLuckyCoinInfo, Bin1 } = decode_GainLuckyCoinInfo( Bin0 ),
	{ V_count, Bin2 } = read_int32( Bin1 ),
	{ V_time, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_GainLuckyCoin {
		gainLuckyCoinInfo = V_gainLuckyCoinInfo,
		count = V_count,
		time = V_time
		},
	Bin3 };

%GENERATED from file:luckycoin.h => GS2U_GiveLuckyCoinResult
decode(?GS2U_GiveLuckyCoinResult,Bin0) ->
	{ V_friendID, Bin1 } = read_uint64( Bin0 ),
	{ V_result, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_GiveLuckyCoinResult {
		friendID = V_friendID,
		result = V_result
		},
	Bin2 };

%GENERATED from file:luckycoin.h => GS2U_InitGainLuckyCoinInfo
decode(?GS2U_InitGainLuckyCoinInfo,Bin0) ->
	{ V_gainLuckyCoinInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_GainLuckyCoinInfo( X ) end),
	{ V_count, Bin2 } = read_int32( Bin1 ),
	{ V_time, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_InitGainLuckyCoinInfo {
		gainLuckyCoinInfoList = V_gainLuckyCoinInfoList,
		count = V_count,
		time = V_time
		},
	Bin3 };

%GENERATED from file:luckycoin.h => GS2U_LuckyDrawResult
decode(?GS2U_LuckyDrawResult,Bin0) ->
	{ V_itemID, Bin1 } = read_int32( Bin0 ),
	{ V_count, Bin2 } = read_int32( Bin1 ),
	{ V_time, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_LuckyDrawResult {
		itemID = V_itemID,
		count = V_count,
		time = V_time
		},
	Bin3 };

%GENERATED from file:luckycoin.h => U2GS_GiveLuckyCoin
decode(?U2GS_GiveLuckyCoin,Bin0) ->
	{ V_friendID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_GiveLuckyCoin {
		friendID = V_friendID
		},
	Bin1 };

%GENERATED from file:luckycoin.h => U2GS_LuckyDraw
decode(?U2GS_LuckyDraw,Bin0) ->
	{ #pk_U2GS_LuckyDraw {

		},
	Bin0 };

%GENERATED from file:luckycoin.h => U2GS_LuckyDrawEnd
decode(?U2GS_LuckyDrawEnd,Bin0) ->
	{ #pk_U2GS_LuckyDrawEnd {

		},
	Bin0 };

%GENERATED from file:luckycoin.h => U2GS_OneKeyGiveLucky
decode(?U2GS_OneKeyGiveLucky,Bin0) ->
	{ #pk_U2GS_OneKeyGiveLucky {

		},
	Bin0 };

%GENERATED from file:mail.h => GS2U_DelMailCoin
decode(?GS2U_DelMailCoin,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_DelMailCoin {
		mailID = V_mailID
		},
	Bin1 };

%GENERATED from file:mail.h => GS2U_DelMailItem
decode(?GS2U_DelMailItem,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemUID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_DelMailItem {
		mailID = V_mailID,
		itemUID = V_itemUID
		},
	Bin2 };

%GENERATED from file:mail.h => GS2U_DeleteMail
decode(?GS2U_DeleteMail,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_DeleteMail {
		mailID = V_mailID
		},
	Bin1 };

%GENERATED from file:mail.h => GS2U_GetMailItemAll
decode(?GS2U_GetMailItemAll,Bin0) ->
	{ V_mailIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ V_items, Bin3 } = read_array(Bin2, fun(X) -> decode_MailItemAll( X ) end),
	{ V_coins, Bin4 } = read_array(Bin3, fun(X) -> decode_MailCoin( X ) end),
	{ #pk_GS2U_GetMailItemAll {
		mailIDs = V_mailIDs,
		number = V_number,
		items = V_items,
		coins = V_coins
		},
	Bin4 };

%GENERATED from file:mail.h => GS2U_LockMail
decode(?GS2U_LockMail,Bin0) ->
	{ V_ret, Bin1 } = decode_retMailOpt( Bin0 ),
	{ #pk_GS2U_LockMail {
		ret = V_ret
		},
	Bin1 };

%GENERATED from file:mail.h => GS2U_Mail
decode(?GS2U_Mail,Bin0) ->
	{ V_detail, Bin1 } = decode_MailDetail( Bin0 ),
	{ #pk_GS2U_Mail {
		detail = V_detail
		},
	Bin1 };

%GENERATED from file:mail.h => GS2U_MailInfo
decode(?GS2U_MailInfo,Bin0) ->
	{ V_mailInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_MailInfo( X ) end),
	{ #pk_GS2U_MailInfo {
		mailInfoList = V_mailInfoList
		},
	Bin1 };

%GENERATED from file:mail.h => GS2U_SendMailAck
decode(?GS2U_SendMailAck,Bin0) ->
	{ V_toRoleName, Bin1 } = read_string( Bin0 ),
	{ V_isOK, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_SendMailAck {
		toRoleName = V_toRoleName,
		isOK = V_isOK
		},
	Bin2 };

%GENERATED from file:mail.h => GS2U_UnlockMail
decode(?GS2U_UnlockMail,Bin0) ->
	{ V_ret, Bin1 } = decode_retMailOpt( Bin0 ),
	{ #pk_GS2U_UnlockMail {
		ret = V_ret
		},
	Bin1 };

%GENERATED from file:mail.h => U2GS_DeleteAllReadMail
decode(?U2GS_DeleteAllReadMail,Bin0) ->
	{ #pk_U2GS_DeleteAllReadMail {

		},
	Bin0 };

%GENERATED from file:mail.h => U2GS_DeleteMail
decode(?U2GS_DeleteMail,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_DeleteMail {
		mailID = V_mailID
		},
	Bin1 };

%GENERATED from file:mail.h => U2GS_GetDeleteMails
decode(?U2GS_GetDeleteMails,Bin0) ->
	{ V_mailIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_GetDeleteMails {
		mailIDs = V_mailIDs
		},
	Bin1 };

%GENERATED from file:mail.h => U2GS_GetMailCoin
decode(?U2GS_GetMailCoin,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_GetMailCoin {
		mailID = V_mailID
		},
	Bin1 };

%GENERATED from file:mail.h => U2GS_GetMailItem
decode(?U2GS_GetMailItem,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemUID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_GetMailItem {
		mailID = V_mailID,
		itemUID = V_itemUID
		},
	Bin2 };

%GENERATED from file:mail.h => U2GS_GetMailItemAll
decode(?U2GS_GetMailItemAll,Bin0) ->
	{ #pk_U2GS_GetMailItemAll {

		},
	Bin0 };

%GENERATED from file:mail.h => U2GS_LockMail
decode(?U2GS_LockMail,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_LockMail {
		mailID = V_mailID
		},
	Bin1 };

%GENERATED from file:mail.h => U2GS_ReadMail
decode(?U2GS_ReadMail,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_ReadMail {
		mailID = V_mailID
		},
	Bin1 };

%GENERATED from file:mail.h => U2GS_SendMail
decode(?U2GS_SendMail,Bin0) ->
	{ V_toRoleName, Bin1 } = read_string( Bin0 ),
	{ V_mailTitle, Bin2 } = read_string( Bin1 ),
	{ V_mailContent, Bin3 } = read_string( Bin2 ),
	{ #pk_U2GS_SendMail {
		toRoleName = V_toRoleName,
		mailTitle = V_mailTitle,
		mailContent = V_mailContent
		},
	Bin3 };

%GENERATED from file:mail.h => U2GS_UnlockMail
decode(?U2GS_UnlockMail,Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_UnlockMail {
		mailID = V_mailID
		},
	Bin1 };

%GENERATED from file:mall.h => GS2U_FashionConfigInfo
decode(?GS2U_FashionConfigInfo,Bin0) ->
	{ V_state, Bin1 } = read_int32( Bin0 ),
	{ V_configInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_FashionConfigInfo( X ) end),
	{ #pk_GS2U_FashionConfigInfo {
		state = V_state,
		configInfoList = V_configInfoList
		},
	Bin2 };

%GENERATED from file:mall.h => GS2U_GroupBuyGoodsBuyAck
decode(?GS2U_GroupBuyGoodsBuyAck,Bin0) ->
	{ V_buyCode, Bin1 } = read_int32( Bin0 ),
	{ V_id, Bin2 } = read_int32( Bin1 ),
	{ V_goodsNum, Bin3 } = read_uint16( Bin2 ),
	{ V_scoreAdd, Bin4 } = read_uint64( Bin3 ),
	{ V_scoreNew, Bin5 } = read_uint64( Bin4 ),
	{ V_lockDiamond, Bin6 } = read_uint64( Bin5 ),
	{ V_goodsBuyCountListInfo, Bin7 } = read_array(Bin6, fun(X) -> decode_idAndCount( X ) end),
	{ #pk_GS2U_GroupBuyGoodsBuyAck {
		buyCode = V_buyCode,
		id = V_id,
		goodsNum = V_goodsNum,
		scoreAdd = V_scoreAdd,
		scoreNew = V_scoreNew,
		lockDiamond = V_lockDiamond,
		goodsBuyCountListInfo = V_goodsBuyCountListInfo
		},
	Bin7 };

%GENERATED from file:mall.h => GS2U_GroupBuyRewardBuyAck
decode(?GS2U_GroupBuyRewardBuyAck,Bin0) ->
	{ V_buyCode, Bin1 } = read_int32( Bin0 ),
	{ V_id, Bin2 } = read_int32( Bin1 ),
	{ V_goodsBuyCountListInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_idAndCount( X ) end),
	{ #pk_GS2U_GroupBuyRewardBuyAck {
		buyCode = V_buyCode,
		id = V_id,
		goodsBuyCountListInfo = V_goodsBuyCountListInfo
		},
	Bin3 };

%GENERATED from file:mall.h => GS2U_GroupBuyWhenOpen
decode(?GS2U_GroupBuyWhenOpen,Bin0) ->
	{ V_state, Bin1 } = read_uint8( Bin0 ),
	{ V_open_time, Bin2 } = read_uint32( Bin1 ),
	{ V_limit_time, Bin3 } = read_uint16( Bin2 ),
	{ V_score_add_time, Bin4 } = read_uint16( Bin3 ),
	{ V_image, Bin5 } = read_string( Bin4 ),
	{ V_goodsListInfo, Bin6 } = read_array(Bin5, fun(X) -> decode_GroupBuyGoodsInfo( X ) end),
	{ V_rewardListInfo, Bin7 } = read_array(Bin6, fun(X) -> decode_GroupBuyRewardInfo( X ) end),
	{ V_personalScore, Bin8 } = read_uint64( Bin7 ),
	{ V_rewardPersonalListInfo, Bin9 } = read_array(Bin8, fun(X) -> read_int32( X ) end),
	{ V_goodsPersonalListInfo, Bin10 } = read_array(Bin9, fun(X) -> decode_idAndCount( X ) end),
	{ #pk_GS2U_GroupBuyWhenOpen {
		state = V_state,
		open_time = V_open_time,
		limit_time = V_limit_time,
		score_add_time = V_score_add_time,
		image = V_image,
		goodsListInfo = V_goodsListInfo,
		rewardListInfo = V_rewardListInfo,
		personalScore = V_personalScore,
		rewardPersonalListInfo = V_rewardPersonalListInfo,
		goodsPersonalListInfo = V_goodsPersonalListInfo
		},
	Bin10 };

%GENERATED from file:mall.h => GS2U_KoreaNaverConfigInfo
decode(?GS2U_KoreaNaverConfigInfo,Bin0) ->
	{ V_state, Bin1 } = read_int32( Bin0 ),
	{ V_configInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_KoreaNaverConfigInfo( X ) end),
	{ V_rewardGetList, Bin3 } = read_array(Bin2, fun(X) -> decode_KoreaNaverIdAndVer( X ) end),
	{ #pk_GS2U_KoreaNaverConfigInfo {
		state = V_state,
		configInfoList = V_configInfoList,
		rewardGetList = V_rewardGetList
		},
	Bin3 };

%GENERATED from file:mall.h => GS2U_KoreaNaverRewardGetAck
decode(?GS2U_KoreaNaverRewardGetAck,Bin0) ->
	{ V_getCode, Bin1 } = read_int32( Bin0 ),
	{ V_id, Bin2 } = read_int32( Bin1 ),
	{ V_ver, Bin3 } = read_int32( Bin2 ),
	{ V_rewardGetList, Bin4 } = read_array(Bin3, fun(X) -> decode_KoreaNaverIdAndVer( X ) end),
	{ #pk_GS2U_KoreaNaverRewardGetAck {
		getCode = V_getCode,
		id = V_id,
		ver = V_ver,
		rewardGetList = V_rewardGetList
		},
	Bin4 };

%GENERATED from file:mall.h => GS2U_MallBuyResult
decode(?GS2U_MallBuyResult,Bin0) ->
	{ V_db_id, Bin1 } = read_uint32( Bin0 ),
	{ V_buyCount, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_MallBuyResult {
		db_id = V_db_id,
		buyCount = V_buyCount
		},
	Bin2 };

%GENERATED from file:mall.h => GS2U_MallBuyResult2
decode(?GS2U_MallBuyResult2,Bin0) ->
	{ V_db_id, Bin1 } = read_uint32( Bin0 ),
	{ V_buyCount, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_MallBuyResult2 {
		db_id = V_db_id,
		buyCount = V_buyCount
		},
	Bin2 };

%GENERATED from file:mall.h => GS2U_MallInfoList
decode(?GS2U_MallInfoList,Bin0) ->
	{ V_seed, Bin1 } = read_int32( Bin0 ),
	{ V_mallinfolist, Bin2 } = read_array(Bin1, fun(X) -> decode_MallInfo( X ) end),
	{ #pk_GS2U_MallInfoList {
		seed = V_seed,
		mallinfolist = V_mallinfolist
		},
	Bin2 };

%GENERATED from file:mall.h => GS2U_MallInfoList2
decode(?GS2U_MallInfoList2,Bin0) ->
	{ V_seed, Bin1 } = read_int32( Bin0 ),
	{ V_mallinfolist, Bin2 } = read_array(Bin1, fun(X) -> decode_MallInfo( X ) end),
	{ #pk_GS2U_MallInfoList2 {
		seed = V_seed,
		mallinfolist = V_mallinfolist
		},
	Bin2 };

%GENERATED from file:mall.h => GS2U_MallPriceList
decode(?GS2U_MallPriceList,Bin0) ->
	{ V_mallinfolist, Bin1 } = read_array(Bin0, fun(X) -> decode_MallInfo( X ) end),
	{ #pk_GS2U_MallPriceList {
		mallinfolist = V_mallinfolist
		},
	Bin1 };

%GENERATED from file:mall.h => GS2U_MallPriceList2
decode(?GS2U_MallPriceList2,Bin0) ->
	{ V_mallinfolist, Bin1 } = read_array(Bin0, fun(X) -> decode_MallInfo( X ) end),
	{ #pk_GS2U_MallPriceList2 {
		mallinfolist = V_mallinfolist
		},
	Bin1 };

%GENERATED from file:mall.h => U2GS_GroupBuyGoodsBuyRequest
decode(?U2GS_GroupBuyGoodsBuyRequest,Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_goodsNum, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_GroupBuyGoodsBuyRequest {
		id = V_id,
		goodsNum = V_goodsNum
		},
	Bin2 };

%GENERATED from file:mall.h => U2GS_GroupBuyRewardBuyRequest
decode(?U2GS_GroupBuyRewardBuyRequest,Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_GroupBuyRewardBuyRequest {
		id = V_id
		},
	Bin1 };

%GENERATED from file:mall.h => U2GS_GroupBuyWhenOpen
decode(?U2GS_GroupBuyWhenOpen,Bin0) ->
	{ #pk_U2GS_GroupBuyWhenOpen {

		},
	Bin0 };

%GENERATED from file:mall.h => U2GS_ItemBuyRequest
decode(?U2GS_ItemBuyRequest,Bin0) ->
	{ V_db_id, Bin1 } = read_uint32( Bin0 ),
	{ V_itemid, Bin2 } = read_uint32( Bin1 ),
	{ V_itemnum, Bin3 } = read_int32( Bin2 ),
	{ V_moneytype, Bin4 } = read_int8( Bin3 ),
	{ V_tarRoleID, Bin5 } = read_uint64( Bin4 ),
	{ #pk_U2GS_ItemBuyRequest {
		db_id = V_db_id,
		itemid = V_itemid,
		itemnum = V_itemnum,
		moneytype = V_moneytype,
		tarRoleID = V_tarRoleID
		},
	Bin5 };

%GENERATED from file:mall.h => U2GS_ItemBuyRequest2
decode(?U2GS_ItemBuyRequest2,Bin0) ->
	{ V_db_id, Bin1 } = read_uint32( Bin0 ),
	{ V_itemid, Bin2 } = read_uint32( Bin1 ),
	{ V_itemnum, Bin3 } = read_int32( Bin2 ),
	{ V_moneytype, Bin4 } = read_int8( Bin3 ),
	{ #pk_U2GS_ItemBuyRequest2 {
		db_id = V_db_id,
		itemid = V_itemid,
		itemnum = V_itemnum,
		moneytype = V_moneytype
		},
	Bin4 };

%GENERATED from file:mall.h => U2GS_KoreaNaverRewardGetRequest
decode(?U2GS_KoreaNaverRewardGetRequest,Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_ver, Bin2 } = read_int32( Bin1 ),
	{ V_naverAccountID, Bin3 } = read_string( Bin2 ),
	{ V_menuID, Bin4 } = read_int32( Bin3 ),
	{ V_articleID, Bin5 } = read_int32( Bin4 ),
	{ #pk_U2GS_KoreaNaverRewardGetRequest {
		id = V_id,
		ver = V_ver,
		naverAccountID = V_naverAccountID,
		menuID = V_menuID,
		articleID = V_articleID
		},
	Bin5 };

%GENERATED from file:mall.h => U2GS_MallInfo
decode(?U2GS_MallInfo,Bin0) ->
	{ V_seed, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_MallInfo {
		seed = V_seed
		},
	Bin1 };

%GENERATED from file:mall.h => U2GS_MallInfo2
decode(?U2GS_MallInfo2,Bin0) ->
	{ V_seed, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_MallInfo2 {
		seed = V_seed
		},
	Bin1 };

%GENERATED from file:marriage.h => GS2U_AppointmentWeddingResult
decode(?GS2U_AppointmentWeddingResult,Bin0) ->
	{ V_result, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_AppointmentWeddingResult {
		result = V_result
		},
	Bin1 };

%GENERATED from file:marriage.h => GS2U_BuyLuckyBagResult
decode(?GS2U_BuyLuckyBagResult,Bin0) ->
	{ V_level, Bin1 } = read_uint8( Bin0 ),
	{ V_givegifts, Bin2 } = read_uint32( Bin1 ),
	{ V_bindGivegifts, Bin3 } = read_uint32( Bin2 ),
	{ V_roleName, Bin4 } = read_string( Bin3 ),
	{ V_rewardItemID, Bin5 } = read_uint32( Bin4 ),
	{ V_num, Bin6 } = read_uint16( Bin5 ),
	{ #pk_GS2U_BuyLuckyBagResult {
		level = V_level,
		givegifts = V_givegifts,
		bindGivegifts = V_bindGivegifts,
		roleName = V_roleName,
		rewardItemID = V_rewardItemID,
		num = V_num
		},
	Bin6 };

%GENERATED from file:marriage.h => GS2U_GivegifsResult
decode(?GS2U_GivegifsResult,Bin0) ->
	{ V_sendRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_result, Bin2 } = read_bool( Bin1 ),
	{ V_givegifts, Bin3 } = read_uint32( Bin2 ),
	{ V_bindGivegifts, Bin4 } = read_uint32( Bin3 ),
	{ V_giveGiftsID, Bin5 } = read_uint32( Bin4 ),
	{ V_givegiftsData, Bin6 } = decode_InvitedPlayerData( Bin5 ),
	{ #pk_GS2U_GivegifsResult {
		sendRoleID = V_sendRoleID,
		result = V_result,
		givegifts = V_givegifts,
		bindGivegifts = V_bindGivegifts,
		giveGiftsID = V_giveGiftsID,
		givegiftsData = V_givegiftsData
		},
	Bin6 };

%GENERATED from file:marriage.h => GS2U_InvitedPersonResult
decode(?GS2U_InvitedPersonResult,Bin0) ->
	{ V_result, Bin1 } = read_bool( Bin0 ),
	{ V_data, Bin2 } = decode_InvitedPlayerData( Bin1 ),
	{ #pk_GS2U_InvitedPersonResult {
		result = V_result,
		data = V_data
		},
	Bin2 };

%GENERATED from file:marriage.h => GS2U_LoginInitWeddingKetubba
decode(?GS2U_LoginInitWeddingKetubba,Bin0) ->
	{ V_ketubbaList, Bin1 } = read_array(Bin0, fun(X) -> decode_KetubbaData( X ) end),
	{ #pk_GS2U_LoginInitWeddingKetubba {
		ketubbaList = V_ketubbaList
		},
	Bin1 };

%GENERATED from file:marriage.h => GS2U_MarriageBaseInfo_Sync
decode(?GS2U_MarriageBaseInfo_Sync,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_sex, Bin3 } = read_uint8( Bin2 ),
	{ V_weddingDay, Bin4 } = read_uint32( Bin3 ),
	{ V_closeness, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_MarriageBaseInfo_Sync {
		id = V_id,
		name = V_name,
		sex = V_sex,
		weddingDay = V_weddingDay,
		closeness = V_closeness
		},
	Bin5 };

%GENERATED from file:marriage.h => GS2U_MarriageBreak_Ack
decode(?GS2U_MarriageBreak_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_MarriageBreak_Ack {
		id = V_id,
		name = V_name
		},
	Bin2 };

%GENERATED from file:marriage.h => GS2U_MarriageProposeRefresh_Ack
decode(?GS2U_MarriageProposeRefresh_Ack,Bin0) ->
	{ #pk_GS2U_MarriageProposeRefresh_Ack {

		},
	Bin0 };

%GENERATED from file:marriage.h => GS2U_MarriagePropose_Ack
decode(?GS2U_MarriagePropose_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_item, Bin3 } = read_uint32( Bin2 ),
	{ V_isS, Bin4 } = read_bool( Bin3 ),
	{ #pk_GS2U_MarriagePropose_Ack {
		id = V_id,
		name = V_name,
		item = V_item,
		isS = V_isS
		},
	Bin4 };

%GENERATED from file:marriage.h => GS2U_MarriagePropose_Ask
decode(?GS2U_MarriagePropose_Ask,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_item, Bin3 } = read_uint32( Bin2 ),
	{ V_manifesto, Bin4 } = read_string( Bin3 ),
	{ #pk_GS2U_MarriagePropose_Ask {
		id = V_id,
		name = V_name,
		item = V_item,
		manifesto = V_manifesto
		},
	Bin4 };

%GENERATED from file:marriage.h => GS2U_MarriageRingUpPartner_Sync
decode(?GS2U_MarriageRingUpPartner_Sync,Bin0) ->
	{ V_topOld, Bin1 } = read_uint32( Bin0 ),
	{ V_expOld, Bin2 } = read_uint32( Bin1 ),
	{ V_lvOld, Bin3 } = read_uint32( Bin2 ),
	{ V_topNew, Bin4 } = read_uint32( Bin3 ),
	{ V_expNew, Bin5 } = read_uint32( Bin4 ),
	{ V_lvNew, Bin6 } = read_uint32( Bin5 ),
	{ #pk_GS2U_MarriageRingUpPartner_Sync {
		topOld = V_topOld,
		expOld = V_expOld,
		lvOld = V_lvOld,
		topNew = V_topNew,
		expNew = V_expNew,
		lvNew = V_lvNew
		},
	Bin6 };

%GENERATED from file:marriage.h => GS2U_MarriageRingUp_Sync
decode(?GS2U_MarriageRingUp_Sync,Bin0) ->
	{ V_topOld, Bin1 } = read_uint32( Bin0 ),
	{ V_expOld, Bin2 } = read_uint32( Bin1 ),
	{ V_lvOld, Bin3 } = read_uint32( Bin2 ),
	{ V_topNew, Bin4 } = read_uint32( Bin3 ),
	{ V_expNew, Bin5 } = read_uint32( Bin4 ),
	{ V_lvNew, Bin6 } = read_uint32( Bin5 ),
	{ #pk_GS2U_MarriageRingUp_Sync {
		topOld = V_topOld,
		expOld = V_expOld,
		lvOld = V_lvOld,
		topNew = V_topNew,
		expNew = V_expNew,
		lvNew = V_lvNew
		},
	Bin6 };

%GENERATED from file:marriage.h => GS2U_MarriageSkillUp_Ack
decode(?GS2U_MarriageSkillUp_Ack,Bin0) ->
	{ V_skill, Bin1 } = decode_SkillInfoForMarraige( Bin0 ),
	{ V_lvOld, Bin2 } = read_uint32( Bin1 ),
	{ V_lvNew, Bin3 } = read_uint32( Bin2 ),
	{ V_expOld, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_MarriageSkillUp_Ack {
		skill = V_skill,
		lvOld = V_lvOld,
		lvNew = V_lvNew,
		expOld = V_expOld
		},
	Bin4 };

%GENERATED from file:marriage.h => GS2U_MarriageSkill_Sync
decode(?GS2U_MarriageSkill_Sync,Bin0) ->
	{ V_listSkill, Bin1 } = read_array(Bin0, fun(X) -> decode_SkillInfoForMarraige( X ) end),
	{ #pk_GS2U_MarriageSkill_Sync {
		listSkill = V_listSkill
		},
	Bin1 };

%GENERATED from file:marriage.h => GS2U_MarriageTask_Together_Ask1
decode(?GS2U_MarriageTask_Together_Ask1,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_MarriageTask_Together_Ask1 {
		roleID = V_roleID,
		roleName = V_roleName
		},
	Bin2 };

%GENERATED from file:marriage.h => GS2U_MarriageTask_Together_Ask2
decode(?GS2U_MarriageTask_Together_Ask2,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_MarriageTask_Together_Ask2 {
		roleID = V_roleID,
		roleName = V_roleName
		},
	Bin2 };

%GENERATED from file:marriage.h => GS2U_OpenInvitePanelResult
decode(?GS2U_OpenInvitePanelResult,Bin0) ->
	{ V_invitedPlayerList, Bin1 } = read_array(Bin0, fun(X) -> decode_InvitedPlayerData( X ) end),
	{ #pk_GS2U_OpenInvitePanelResult {
		invitedPlayerList = V_invitedPlayerList
		},
	Bin1 };

%GENERATED from file:marriage.h => GS2U_OpenketubbaResult
decode(?GS2U_OpenketubbaResult,Bin0) ->
	{ V_roleId, Bin1 } = read_uint64( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ V_givegifts, Bin3 } = read_uint32( Bin2 ),
	{ V_bindGivegifts, Bin4 } = read_uint32( Bin3 ),
	{ V_givegiftsList, Bin5 } = read_array(Bin4, fun(X) -> decode_InvitedPlayerData( X ) end),
	{ V_isGivegifs, Bin6 } = read_bool( Bin5 ),
	{ V_level, Bin7 } = read_uint8( Bin6 ),
	{ #pk_GS2U_OpenketubbaResult {
		roleId = V_roleId,
		type = V_type,
		givegifts = V_givegifts,
		bindGivegifts = V_bindGivegifts,
		givegiftsList = V_givegiftsList,
		isGivegifs = V_isGivegifs,
		level = V_level
		},
	Bin7 };

%GENERATED from file:marriage.h => GS2U_PlayerDeletRoleInWedding
decode(?GS2U_PlayerDeletRoleInWedding,Bin0) ->
	{ #pk_GS2U_PlayerDeletRoleInWedding {

		},
	Bin0 };

%GENERATED from file:marriage.h => GS2U_PlayerEnterMapSucc
decode(?GS2U_PlayerEnterMapSucc,Bin0) ->
	{ V_sitNpcDataList, Bin1 } = read_array(Bin0, fun(X) -> decode_SitNpcData( X ) end),
	{ V_weddingRoleID, Bin2 } = read_uint64( Bin1 ),
	{ V_lastTime, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_PlayerEnterMapSucc {
		sitNpcDataList = V_sitNpcDataList,
		weddingRoleID = V_weddingRoleID,
		lastTime = V_lastTime
		},
	Bin3 };

%GENERATED from file:marriage.h => GS2U_RobWeddingRedResult
decode(?GS2U_RobWeddingRedResult,Bin0) ->
	{ V_result, Bin1 } = read_uint32( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_robNum, Bin3 } = read_uint16( Bin2 ),
	{ V_listRobRedData, Bin4 } = read_array(Bin3, fun(X) -> decode_RobRedData( X ) end),
	{ #pk_GS2U_RobWeddingRedResult {
		result = V_result,
		roleID = V_roleID,
		robNum = V_robNum,
		listRobRedData = V_listRobRedData
		},
	Bin4 };

%GENERATED from file:marriage.h => GS2U_UseNpcInteractiveReuslt
decode(?GS2U_UseNpcInteractiveReuslt,Bin0) ->
	{ V_isUp, Bin1 } = read_bool( Bin0 ),
	{ V_npcSitData, Bin2 } = decode_SitNpcData( Bin1 ),
	{ #pk_GS2U_UseNpcInteractiveReuslt {
		isUp = V_isUp,
		npcSitData = V_npcSitData
		},
	Bin2 };

%GENERATED from file:marriage.h => GS2U_WeddingLotteryResult
decode(?GS2U_WeddingLotteryResult,Bin0) ->
	{ V_lotteryIndex, Bin1 } = read_uint8( Bin0 ),
	{ V_costType, Bin2 } = read_uint8( Bin1 ),
	{ V_givegifts, Bin3 } = read_uint32( Bin2 ),
	{ V_bindGivegifts, Bin4 } = read_uint32( Bin3 ),
	{ V_roleName, Bin5 } = read_string( Bin4 ),
	{ V_rewardItemID, Bin6 } = read_uint32( Bin5 ),
	{ V_num, Bin7 } = read_uint16( Bin6 ),
	{ #pk_GS2U_WeddingLotteryResult {
		lotteryIndex = V_lotteryIndex,
		costType = V_costType,
		givegifts = V_givegifts,
		bindGivegifts = V_bindGivegifts,
		roleName = V_roleName,
		rewardItemID = V_rewardItemID,
		num = V_num
		},
	Bin7 };

%GENERATED from file:marriage.h => GS2U_WeddingMapPhase
decode(?GS2U_WeddingMapPhase,Bin0) ->
	{ V_phase, Bin1 } = read_uint8( Bin0 ),
	{ V_phase1Time, Bin2 } = read_uint32( Bin1 ),
	{ V_sex_1, Bin3 } = read_uint8( Bin2 ),
	{ V_sex_2, Bin4 } = read_uint8( Bin3 ),
	{ V_weddingLevel, Bin5 } = read_uint8( Bin4 ),
	{ V_name_1, Bin6 } = read_string( Bin5 ),
	{ V_name_2, Bin7 } = read_string( Bin6 ),
	{ #pk_GS2U_WeddingMapPhase {
		phase = V_phase,
		phase1Time = V_phase1Time,
		sex_1 = V_sex_1,
		sex_2 = V_sex_2,
		weddingLevel = V_weddingLevel,
		name_1 = V_name_1,
		name_2 = V_name_2
		},
	Bin7 };

%GENERATED from file:marriage.h => GS2U_WeddingRedState
decode(?GS2U_WeddingRedState,Bin0) ->
	{ V_isCanRobRed, Bin1 } = read_bool( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_WeddingRedState {
		isCanRobRed = V_isCanRobRed,
		roleID = V_roleID
		},
	Bin2 };

%GENERATED from file:marriage.h => GS2U_WeddingStartInviteAll
decode(?GS2U_WeddingStartInviteAll,Bin0) ->
	{ V_targetRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_partnerName, Bin3 } = read_string( Bin2 ),
	{ #pk_GS2U_WeddingStartInviteAll {
		targetRoleID = V_targetRoleID,
		name = V_name,
		partnerName = V_partnerName
		},
	Bin3 };

%GENERATED from file:marriage.h => GS2U_receivedInvitationCard
decode(?GS2U_receivedInvitationCard,Bin0) ->
	{ V_ketubba, Bin1 } = decode_KetubbaData( Bin0 ),
	{ #pk_GS2U_receivedInvitationCard {
		ketubba = V_ketubba
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_BuyLuckyBag
decode(?U2GS_BuyLuckyBag,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_BuyLuckyBag {
		roleID = V_roleID,
		level = V_level
		},
	Bin2 };

%GENERATED from file:marriage.h => U2GS_EnterWeddingMap
decode(?U2GS_EnterWeddingMap,Bin0) ->
	{ V_targetRoleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_EnterWeddingMap {
		targetRoleID = V_targetRoleID
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_Givegifs
decode(?U2GS_Givegifs,Bin0) ->
	{ V_roleId, Bin1 } = read_uint64( Bin0 ),
	{ V_gifts, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_Givegifs {
		roleId = V_roleId,
		gifts = V_gifts
		},
	Bin2 };

%GENERATED from file:marriage.h => U2GS_InvitedPerson
decode(?U2GS_InvitedPerson,Bin0) ->
	{ V_invitedPerson, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_InvitedPerson {
		invitedPerson = V_invitedPerson
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_MarriageAcceptTask_Request
decode(?U2GS_MarriageAcceptTask_Request,Bin0) ->
	{ #pk_U2GS_MarriageAcceptTask_Request {

		},
	Bin0 };

%GENERATED from file:marriage.h => U2GS_MarriageBreak_Request
decode(?U2GS_MarriageBreak_Request,Bin0) ->
	{ V_isTeam, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_MarriageBreak_Request {
		isTeam = V_isTeam
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_MarriagePropose_Reply
decode(?U2GS_MarriagePropose_Reply,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_isAgreed, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_MarriagePropose_Reply {
		id = V_id,
		isAgreed = V_isAgreed
		},
	Bin2 };

%GENERATED from file:marriage.h => U2GS_MarriagePropose_Request
decode(?U2GS_MarriagePropose_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_item, Bin2 } = read_uint32( Bin1 ),
	{ V_manifesto, Bin3 } = read_string( Bin2 ),
	{ #pk_U2GS_MarriagePropose_Request {
		id = V_id,
		item = V_item,
		manifesto = V_manifesto
		},
	Bin3 };

%GENERATED from file:marriage.h => U2GS_MarriageRingUp_Request
decode(?U2GS_MarriageRingUp_Request,Bin0) ->
	{ V_cost, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_MarriageRingUp_Request {
		cost = V_cost
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_MarriageSkillUp_Request
decode(?U2GS_MarriageSkillUp_Request,Bin0) ->
	{ V_cost, Bin1 } = read_uint32( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_MarriageSkillUp_Request {
		cost = V_cost,
		id = V_id
		},
	Bin2 };

%GENERATED from file:marriage.h => U2GS_MarriageSubmitTask_Request
decode(?U2GS_MarriageSubmitTask_Request,Bin0) ->
	{ #pk_U2GS_MarriageSubmitTask_Request {

		},
	Bin0 };

%GENERATED from file:marriage.h => U2GS_MarriageTask_Together_Reply1
decode(?U2GS_MarriageTask_Together_Reply1,Bin0) ->
	{ V_isAgreed, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_MarriageTask_Together_Reply1 {
		isAgreed = V_isAgreed
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_MarriageTask_Together_Reply2
decode(?U2GS_MarriageTask_Together_Reply2,Bin0) ->
	{ V_isAgreed, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_MarriageTask_Together_Reply2 {
		isAgreed = V_isAgreed
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_OpenInvitePanel
decode(?U2GS_OpenInvitePanel,Bin0) ->
	{ #pk_U2GS_OpenInvitePanel {

		},
	Bin0 };

%GENERATED from file:marriage.h => U2GS_Openketubba
decode(?U2GS_Openketubba,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_Openketubba {
		itemUID = V_itemUID,
		type = V_type
		},
	Bin2 };

%GENERATED from file:marriage.h => U2GS_RobWeddingRed
decode(?U2GS_RobWeddingRed,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RobWeddingRed {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:marriage.h => U2GS_UseNpcInteractive
decode(?U2GS_UseNpcInteractive,Bin0) ->
	{ V_isUp, Bin1 } = read_bool( Bin0 ),
	{ V_npcCode, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_UseNpcInteractive {
		isUp = V_isUp,
		npcCode = V_npcCode
		},
	Bin2 };

%GENERATED from file:marriage.h => U2GS_WeddingLottery
decode(?U2GS_WeddingLottery,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_WeddingLottery {
		roleID = V_roleID,
		level = V_level
		},
	Bin2 };

%GENERATED from file:marriage.h => U2GS_appointmentWedding
decode(?U2GS_appointmentWedding,Bin0) ->
	{ V_startTime, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_appointmentWedding {
		startTime = V_startTime,
		level = V_level
		},
	Bin2 };

%GENERATED from file:mount.h => GS2U_LookMountInfo
decode(?GS2U_LookMountInfo,Bin0) ->
	{ V_mountInfo, Bin1 } = decode_MountInfo( Bin0 ),
	{ #pk_GS2U_LookMountInfo {
		mountInfo = V_mountInfo
		},
	Bin1 };

%GENERATED from file:mount.h => GS2U_MountAck
decode(?GS2U_MountAck,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_shape_id, Bin2 } = read_uint16( Bin1 ),
	{ V_opreate, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_MountAck {
		code = V_code,
		shape_id = V_shape_id,
		opreate = V_opreate
		},
	Bin3 };

%GENERATED from file:mount.h => GS2U_MountShapeList
decode(?GS2U_MountShapeList,Bin0) ->
	{ V_shape_list, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_MountShapeList {
		shape_list = V_shape_list
		},
	Bin1 };

%GENERATED from file:mount.h => GS2U_NewMountShape
decode(?GS2U_NewMountShape,Bin0) ->
	{ V_new_shape_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_NewMountShape {
		new_shape_id = V_new_shape_id
		},
	Bin1 };

%GENERATED from file:mount.h => MountShapeShift
decode(?MountShapeShift,Bin0) ->
	{ V_new_shape_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_MountShapeShift {
		new_shape_id = V_new_shape_id
		},
	Bin1 };

%GENERATED from file:mount.h => U2GS_FeedMount
decode(?U2GS_FeedMount,Bin0) ->
	{ V_feedNum, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_FeedMount {
		feedNum = V_feedNum
		},
	Bin1 };

%GENERATED from file:mount.h => U2GS_OffMount
decode(?U2GS_OffMount,Bin0) ->
	{ #pk_U2GS_OffMount {

		},
	Bin0 };

%GENERATED from file:mount.h => U2GS_OnMount
decode(?U2GS_OnMount,Bin0) ->
	{ #pk_U2GS_OnMount {

		},
	Bin0 };

%GENERATED from file:npc.h => GS2U_NpcMomentMove
decode(?GS2U_NpcMomentMove,Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ V_npcID, Bin2 } = read_uint32( Bin1 ),
	{ V_tX, Bin3 } = read_float( Bin2 ),
	{ V_tY, Bin4 } = read_float( Bin3 ),
	{ #pk_GS2U_NpcMomentMove {
		npcCode = V_npcCode,
		npcID = V_npcID,
		tX = V_tX,
		tY = V_tY
		},
	Bin4 };

%GENERATED from file:npc.h => GS2U_NpcTitleChange
decode(?GS2U_NpcTitleChange,Bin0) ->
	{ V_npclists, Bin1 } = read_array(Bin0, fun(X) -> decode_NpcTitle( X ) end),
	{ #pk_GS2U_NpcTitleChange {
		npclists = V_npclists
		},
	Bin1 };

%GENERATED from file:npc.h => GS2U_RequestRiftNpcInfo
decode(?GS2U_RequestRiftNpcInfo,Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ V_npcID, Bin2 } = read_uint32( Bin1 ),
	{ V_surplusTimes, Bin3 } = read_uint32( Bin2 ),
	{ V_disappearTime, Bin4 } = read_uint32( Bin3 ),
	{ V_groupID, Bin5 } = read_uint64( Bin4 ),
	{ V_bitplaneMapID, Bin6 } = read_uint32( Bin5 ),
	{ #pk_GS2U_RequestRiftNpcInfo {
		npcCode = V_npcCode,
		npcID = V_npcID,
		surplusTimes = V_surplusTimes,
		disappearTime = V_disappearTime,
		groupID = V_groupID,
		bitplaneMapID = V_bitplaneMapID
		},
	Bin6 };

%GENERATED from file:npc.h => U2GS_RequestEnterRift
decode(?U2GS_RequestEnterRift,Bin0) ->
	{ V_groupID, Bin1 } = read_uint64( Bin0 ),
	{ V_bitplaneMapID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_RequestEnterRift {
		groupID = V_groupID,
		bitplaneMapID = V_bitplaneMapID
		},
	Bin2 };

%GENERATED from file:npc.h => U2GS_RequestRiftNpcInfo
decode(?U2GS_RequestRiftNpcInfo,Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RequestRiftNpcInfo {
		npcCode = V_npcCode
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_AckRewardLevel
decode(?GS2U_AckRewardLevel,Bin0) ->
	{ V_rewardLevel, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_AckRewardLevel {
		rewardLevel = V_rewardLevel
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_AckStandSort
decode(?GS2U_AckStandSort,Bin0) ->
	{ V_petList, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_AckStandSort {
		petList = V_petList
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_AddTempPet
decode(?GS2U_AddTempPet,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_AddTempPet {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_BuyPowerInfo
decode(?GS2U_BuyPowerInfo,Bin0) ->
	{ V_money, Bin1 } = read_int32( Bin0 ),
	{ V_allCount, Bin2 } = read_int8( Bin1 ),
	{ V_curCount, Bin3 } = read_int8( Bin2 ),
	{ #pk_GS2U_BuyPowerInfo {
		money = V_money,
		allCount = V_allCount,
		curCount = V_curCount
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_DeletePet
decode(?GS2U_DeletePet,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_DeletePet {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_DoublePetMountInvite
decode(?GS2U_DoublePetMountInvite,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_srcName, Bin2 } = read_string( Bin1 ),
	{ V_srcRoleID, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_DoublePetMountInvite {
		petID = V_petID,
		srcName = V_srcName,
		srcRoleID = V_srcRoleID
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_FindTerritoryFailed_Ack
decode(?GS2U_FindTerritoryFailed_Ack,Bin0) ->
	{ V_errorCode, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_FindTerritoryFailed_Ack {
		errorCode = V_errorCode
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_FindTerritory_Ack
decode(?GS2U_FindTerritory_Ack,Bin0) ->
	{ V_info, Bin1 } = decode_TerritoryInfo( Bin0 ),
	{ V_listInfo, Bin2 } = read_array(Bin1, fun(X) -> decode_PetTerritoryInfo( X ) end),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_roleName, Bin4 } = read_string( Bin3 ),
	{ V_count, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GS2U_FindTerritory_Ack {
		info = V_info,
		listInfo = V_listInfo,
		roleID = V_roleID,
		roleName = V_roleName,
		count = V_count
		},
	Bin5 };

%GENERATED from file:pet.h => GS2U_OffMountPetAck
decode(?GS2U_OffMountPetAck,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_OffMountPetAck {
		code = V_code,
		x = V_x,
		y = V_y
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_OnMountPetAck
decode(?GS2U_OnMountPetAck,Bin0) ->
	{ V_ownerCode, Bin1 } = read_uint64( Bin0 ),
	{ V_petCode, Bin2 } = read_uint64( Bin1 ),
	{ V_petId, Bin3 } = read_uint16( Bin2 ),
	{ V_guestCode, Bin4 } = read_uint64( Bin3 ),
	{ #pk_GS2U_OnMountPetAck {
		ownerCode = V_ownerCode,
		petCode = V_petCode,
		petId = V_petId,
		guestCode = V_guestCode
		},
	Bin4 };

%GENERATED from file:pet.h => GS2U_PVEBattleResult
decode(?GS2U_PVEBattleResult,Bin0) ->
	{ V_res, Bin1 } = read_int8( Bin0 ),
	{ V_coin, Bin2 } = read_int32( Bin1 ),
	{ V_exp, Bin3 } = read_int32( Bin2 ),
	{ V_score, Bin4 } = read_int8( Bin3 ),
	{ V_itemList, Bin5 } = read_array(Bin4, fun(X) -> decode_PveItem( X ) end),
	{ #pk_GS2U_PVEBattleResult {
		res = V_res,
		coin = V_coin,
		exp = V_exp,
		score = V_score,
		itemList = V_itemList
		},
	Bin5 };

%GENERATED from file:pet.h => GS2U_PetAddAttaRes
decode(?GS2U_PetAddAttaRes,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_propList, Bin2 } = read_array(Bin1, fun(X) -> decode_AddProp( X ) end),
	{ #pk_GS2U_PetAddAttaRes {
		petID = V_petID,
		propList = V_propList
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_PetAssistInit
decode(?GS2U_PetAssistInit,Bin0) ->
	{ V_infoList, Bin1 } = read_array(Bin0, fun(X) -> decode_AssistBattleInfo( X ) end),
	{ #pk_GS2U_PetAssistInit {
		infoList = V_infoList
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PetAssistUpdateSlot
decode(?GS2U_PetAssistUpdateSlot,Bin0) ->
	{ V_slot, Bin1 } = read_uint8( Bin0 ),
	{ V_petID, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_PetAssistUpdateSlot {
		slot = V_slot,
		petID = V_petID
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_PetAttaSaveRes
decode(?GS2U_PetAttaSaveRes,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_propList, Bin2 } = read_array(Bin1, fun(X) -> decode_AddProp( X ) end),
	{ #pk_GS2U_PetAttaSaveRes {
		petID = V_petID,
		propList = V_propList
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_PetBaseInfo
decode(?GS2U_PetBaseInfo,Bin0) ->
	{ V_info, Bin1 } = decode_PetBaseInfo( Bin0 ),
	{ #pk_GS2U_PetBaseInfo {
		info = V_info
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PetEquipInfoList
decode(?GS2U_PetEquipInfoList,Bin0) ->
	{ V_petEquipInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_PetEquipInfo( X ) end),
	{ #pk_GS2U_PetEquipInfoList {
		petEquipInfoList = V_petEquipInfoList
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PetFairyInfo
decode(?GS2U_PetFairyInfo,Bin0) ->
	{ V_point, Bin1 } = read_int32( Bin0 ),
	{ V_level, Bin2 } = read_int16( Bin1 ),
	{ #pk_GS2U_PetFairyInfo {
		point = V_point,
		level = V_level
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_PetInfoList
decode(?GS2U_PetInfoList,Bin0) ->
	{ V_petInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_PetBaseInfo( X ) end),
	{ #pk_GS2U_PetInfoList {
		petInfoList = V_petInfoList
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PetLevelUp
decode(?GS2U_PetLevelUp,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_petLevel, Bin2 } = read_uint16( Bin1 ),
	{ V_petExp, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_PetLevelUp {
		petID = V_petID,
		petLevel = V_petLevel,
		petExp = V_petExp
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_PetPveSweepAck
decode(?GS2U_PetPveSweepAck,Bin0) ->
	{ V_sweepList, Bin1 } = read_array(Bin0, fun(X) -> decode_PveSweep( X ) end),
	{ #pk_GS2U_PetPveSweepAck {
		sweepList = V_sweepList
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PetReName
decode(?GS2U_PetReName,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_PetReName {
		code = V_code,
		name = V_name
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_PetSkillCastResult
decode(?GS2U_PetSkillCastResult,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_skillList, Bin2 } = read_array(Bin1, fun(X) -> decode_PetSkillCastResult( X ) end),
	{ #pk_GS2U_PetSkillCastResult {
		petID = V_petID,
		skillList = V_skillList
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_PetSleep
decode(?GS2U_PetSleep,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_PetSleep {
		code = V_code
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PetStrAck
decode(?GS2U_PetStrAck,Bin0) ->
	{ V_petEquipInfo, Bin1 } = decode_PetEquipInfo( Bin0 ),
	{ #pk_GS2U_PetStrAck {
		petEquipInfo = V_petEquipInfo
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PvpBattleInfoRes
decode(?GS2U_PvpBattleInfoRes,Bin0) ->
	{ V_reel, Bin1 } = read_uint8( Bin0 ),
	{ V_pl, Bin2 } = read_array(Bin1, fun(X) -> read_uint16( X ) end),
	{ V_point, Bin3 } = read_uint16( Bin2 ),
	{ V_cl, Bin4 } = read_array(Bin3, fun(X) -> decode_PvPCityInfo( X ) end),
	{ V_bpl, Bin5 } = read_array(Bin4, fun(X) -> decode_PvpBattleReportInfo( X ) end),
	{ #pk_GS2U_PvpBattleInfoRes {
		reel = V_reel,
		pl = V_pl,
		point = V_point,
		cl = V_cl,
		bpl = V_bpl
		},
	Bin5 };

%GENERATED from file:pet.h => GS2U_PvpBattleReportTip
decode(?GS2U_PvpBattleReportTip,Bin0) ->
	{ #pk_GS2U_PvpBattleReportTip {

		},
	Bin0 };

%GENERATED from file:pet.h => GS2U_PvpBattleResult
decode(?GS2U_PvpBattleResult,Bin0) ->
	{ V_res, Bin1 } = read_int8( Bin0 ),
	{ V_coin, Bin2 } = read_int32( Bin1 ),
	{ V_exp, Bin3 } = read_int32( Bin2 ),
	{ V_pi, Bin4 } = decode_PvPCityInfo( Bin3 ),
	{ #pk_GS2U_PvpBattleResult {
		res = V_res,
		coin = V_coin,
		exp = V_exp,
		pi = V_pi
		},
	Bin4 };

%GENERATED from file:pet.h => GS2U_PvpBattleUpdateReport
decode(?GS2U_PvpBattleUpdateReport,Bin0) ->
	{ V_br, Bin1 } = decode_PvpBattleReportInfo( Bin0 ),
	{ #pk_GS2U_PvpBattleUpdateReport {
		br = V_br
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_PvpPosSaveAck
decode(?GS2U_PvpPosSaveAck,Bin0) ->
	{ V_petList, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_PvpPosSaveAck {
		petList = V_petList
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_QueryTerritoryHistory_Ack
decode(?GS2U_QueryTerritoryHistory_Ack,Bin0) ->
	{ V_attackOrDefense, Bin1 } = read_bool( Bin0 ),
	{ V_fightCount, Bin2 } = read_uint32( Bin1 ),
	{ V_listInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_TerritoryHistoryCell( X ) end),
	{ #pk_GS2U_QueryTerritoryHistory_Ack {
		attackOrDefense = V_attackOrDefense,
		fightCount = V_fightCount,
		listInfo = V_listInfo
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_QueryTerritoryInfo_Ack
decode(?GS2U_QueryTerritoryInfo_Ack,Bin0) ->
	{ V_listTerritory, Bin1 } = read_array(Bin0, fun(X) -> decode_TerritoryInfo( X ) end),
	{ V_listPet, Bin2 } = read_array(Bin1, fun(X) -> decode_PetTerritoryInfo( X ) end),
	{ V_isOpenPanel, Bin3 } = read_bool( Bin2 ),
	{ #pk_GS2U_QueryTerritoryInfo_Ack {
		listTerritory = V_listTerritory,
		listPet = V_listPet,
		isOpenPanel = V_isOpenPanel
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_RawPetResult
decode(?GS2U_RawPetResult,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_curRaw, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_RawPetResult {
		petID = V_petID,
		curRaw = V_curRaw
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_ResetPetAck
decode(?GS2U_ResetPetAck,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_ResetPetAck {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_TerritoryBattle_Tick_Sync
decode(?GS2U_TerritoryBattle_Tick_Sync,Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_timeAll, Bin2 } = read_uint32( Bin1 ),
	{ V_state, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GS2U_TerritoryBattle_Tick_Sync {
		time = V_time,
		timeAll = V_timeAll,
		state = V_state
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_TerritoryExploitEnd_Sync
decode(?GS2U_TerritoryExploitEnd_Sync,Bin0) ->
	{ #pk_GS2U_TerritoryExploitEnd_Sync {

		},
	Bin0 };

%GENERATED from file:pet.h => GS2U_TerritoryExploit_Ack
decode(?GS2U_TerritoryExploit_Ack,Bin0) ->
	{ V_info, Bin1 } = decode_TerritoryInfo( Bin0 ),
	{ V_listInfo, Bin2 } = read_array(Bin1, fun(X) -> decode_PetTerritoryInfo( X ) end),
	{ #pk_GS2U_TerritoryExploit_Ack {
		info = V_info,
		listInfo = V_listInfo
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_TerritoryPlunder_Ack
decode(?GS2U_TerritoryPlunder_Ack,Bin0) ->
	{ V_cfgReward, Bin1 } = read_uint32( Bin0 ),
	{ V_count1, Bin2 } = read_uint32( Bin1 ),
	{ V_count2, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_TerritoryPlunder_Ack {
		cfgReward = V_cfgReward,
		count1 = V_count1,
		count2 = V_count2
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_TerritoryVigor_Ack
decode(?GS2U_TerritoryVigor_Ack,Bin0) ->
	{ V_vigor, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_TerritoryVigor_Ack {
		vigor = V_vigor
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_UpStartPetResult
decode(?GS2U_UpStartPetResult,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_curStar, Bin2 } = read_uint8( Bin1 ),
	{ V_petSkillID, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_UpStartPetResult {
		petID = V_petID,
		curStar = V_curStar,
		petSkillID = V_petSkillID
		},
	Bin3 };

%GENERATED from file:pet.h => GS2U_UpdateCatalogList
decode(?GS2U_UpdateCatalogList,Bin0) ->
	{ V_catalogList, Bin1 } = read_array(Bin0, fun(X) -> decode_CatalogNode( X ) end),
	{ #pk_GS2U_UpdateCatalogList {
		catalogList = V_catalogList
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_UpdatePetSkill
decode(?GS2U_UpdatePetSkill,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_skillInfo, Bin2 } = decode_PetSkillBaseInfo( Bin1 ),
	{ #pk_GS2U_UpdatePetSkill {
		petID = V_petID,
		skillInfo = V_skillInfo
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_UpdatePetStatus
decode(?GS2U_UpdatePetStatus,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_status, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_UpdatePetStatus {
		petID = V_petID,
		status = V_status
		},
	Bin2 };

%GENERATED from file:pet.h => GS2U_UpdatePower
decode(?GS2U_UpdatePower,Bin0) ->
	{ V_power, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_UpdatePower {
		power = V_power
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_UpdateReel
decode(?GS2U_UpdateReel,Bin0) ->
	{ V_reel, Bin1 } = read_int8( Bin0 ),
	{ #pk_GS2U_UpdateReel {
		reel = V_reel
		},
	Bin1 };

%GENERATED from file:pet.h => GS2U_UsePetSkillBook
decode(?GS2U_UsePetSkillBook,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_oldSkillId, Bin2 } = read_uint16( Bin1 ),
	{ V_newSkillId, Bin3 } = read_uint16( Bin2 ),
	{ V_newSkillLevel, Bin4 } = read_uint16( Bin3 ),
	{ #pk_GS2U_UsePetSkillBook {
		petID = V_petID,
		oldSkillId = V_oldSkillId,
		newSkillId = V_newSkillId,
		newSkillLevel = V_newSkillLevel
		},
	Bin4 };

%GENERATED from file:pet.h => PetReName
decode(?PetReName,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_PetReName {
		petID = V_petID,
		name = V_name
		},
	Bin2 };

%GENERATED from file:pet.h => PetSkillReplace
decode(?PetSkillReplace,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_PetSkillReplace {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => PetSwitch
decode(?PetSwitch,Bin0) ->
	{ V_petId, Bin1 } = read_uint16( Bin0 ),
	{ #pk_PetSwitch {
		petId = V_petId
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_BuyPower
decode(?U2GS_BuyPower,Bin0) ->
	{ #pk_U2GS_BuyPower {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_BuyReel
decode(?U2GS_BuyReel,Bin0) ->
	{ #pk_U2GS_BuyReel {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_DoublePetMountInvite
decode(?U2GS_DoublePetMountInvite,Bin0) ->
	{ V_tarRoleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_DoublePetMountInvite {
		tarRoleID = V_tarRoleID
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_DoublePetMountInviteAck
decode(?U2GS_DoublePetMountInviteAck,Bin0) ->
	{ V_agree, Bin1 } = read_int8( Bin0 ),
	{ V_srcRoleID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_DoublePetMountInviteAck {
		agree = V_agree,
		srcRoleID = V_srcRoleID
		},
	Bin2 };

%GENERATED from file:pet.h => U2GS_FindTerritory_Request
decode(?U2GS_FindTerritory_Request,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_FindTerritory_Request {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_HideMountPet
decode(?U2GS_HideMountPet,Bin0) ->
	{ #pk_U2GS_HideMountPet {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_OffMountPet
decode(?U2GS_OffMountPet,Bin0) ->
	{ #pk_U2GS_OffMountPet {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_OnMountPet
decode(?U2GS_OnMountPet,Bin0) ->
	{ #pk_U2GS_OnMountPet {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_PetAddAtta
decode(?U2GS_PetAddAtta,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_num, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_PetAddAtta {
		petID = V_petID,
		num = V_num
		},
	Bin2 };

%GENERATED from file:pet.h => U2GS_PetAssistBattle
decode(?U2GS_PetAssistBattle,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_slot, Bin2 } = read_uint8( Bin1 ),
	{ V_status, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_PetAssistBattle {
		petID = V_petID,
		slot = V_slot,
		status = V_status
		},
	Bin3 };

%GENERATED from file:pet.h => U2GS_PetAttaSave
decode(?U2GS_PetAttaSave,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_PetAttaSave {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_PetDisapear
decode(?U2GS_PetDisapear,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_PetDisapear {
		code = V_code
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_PetLevelUp
decode(?U2GS_PetLevelUp,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemUID, Bin2 } = read_uint64( Bin1 ),
	{ V_useNum, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_PetLevelUp {
		petID = V_petID,
		itemUID = V_itemUID,
		useNum = V_useNum
		},
	Bin3 };

%GENERATED from file:pet.h => U2GS_PetPveSweep
decode(?U2GS_PetPveSweep,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_PetPveSweep {
		id = V_id
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_PetSkillCast
decode(?U2GS_PetSkillCast,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_skillIDs, Bin2 } = read_array(Bin1, fun(X) -> read_uint16( X ) end),
	{ #pk_U2GS_PetSkillCast {
		petID = V_petID,
		skillIDs = V_skillIDs
		},
	Bin2 };

%GENERATED from file:pet.h => U2GS_PetSkillOperate
decode(?U2GS_PetSkillOperate,Bin0) ->
	{ V_operationType, Bin1 } = read_uint16( Bin0 ),
	{ V_petID, Bin2 } = read_uint16( Bin1 ),
	{ V_petSkillId, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_PetSkillOperate {
		operationType = V_operationType,
		petID = V_petID,
		petSkillId = V_petSkillId
		},
	Bin3 };

%GENERATED from file:pet.h => U2GS_PetStr
decode(?U2GS_PetStr,Bin0) ->
	{ V_equipID, Bin1 } = read_uint8( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_PetStr {
		equipID = V_equipID,
		type = V_type
		},
	Bin2 };

%GENERATED from file:pet.h => U2GS_PvpBattleInfo
decode(?U2GS_PvpBattleInfo,Bin0) ->
	{ #pk_U2GS_PvpBattleInfo {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_PvpPosSave
decode(?U2GS_PvpPosSave,Bin0) ->
	{ V_petList, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ #pk_U2GS_PvpPosSave {
		petList = V_petList
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_QueryPetFairyInfo
decode(?U2GS_QueryPetFairyInfo,Bin0) ->
	{ #pk_U2GS_QueryPetFairyInfo {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_QueryTerritoryHistory_Request
decode(?U2GS_QueryTerritoryHistory_Request,Bin0) ->
	{ V_attackOrDefense, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_QueryTerritoryHistory_Request {
		attackOrDefense = V_attackOrDefense
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_QueryTerritoryInfo_Request
decode(?U2GS_QueryTerritoryInfo_Request,Bin0) ->
	{ V_isOpenPanel, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_QueryTerritoryInfo_Request {
		isOpenPanel = V_isOpenPanel
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_RawPet
decode(?U2GS_RawPet,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_RawPet {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_RequestBattle
decode(?U2GS_RequestBattle,Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_RequestBattle {
		id = V_id
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_RequestPvpBattle
decode(?U2GS_RequestPvpBattle,Bin0) ->
	{ V_cityID, Bin1 } = read_uint8( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_RequestPvpBattle {
		cityID = V_cityID,
		roleID = V_roleID
		},
	Bin2 };

%GENERATED from file:pet.h => U2GS_RequstReward
decode(?U2GS_RequstReward,Bin0) ->
	{ #pk_U2GS_RequstReward {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_ResetPet
decode(?U2GS_ResetPet,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ResetPet {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_ShowMountPet
decode(?U2GS_ShowMountPet,Bin0) ->
	{ #pk_U2GS_ShowMountPet {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_StandSort
decode(?U2GS_StandSort,Bin0) ->
	{ V_petList, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ #pk_U2GS_StandSort {
		petList = V_petList
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_TerritoryExploit_Request
decode(?U2GS_TerritoryExploit_Request,Bin0) ->
	{ V_territoryID, Bin1 } = read_uint32( Bin0 ),
	{ V_listPetID, Bin2 } = read_array(Bin1, fun(X) -> read_uint32( X ) end),
	{ V_cfgTime, Bin3 } = read_uint32( Bin2 ),
	{ V_cfgLevel, Bin4 } = read_uint32( Bin3 ),
	{ #pk_U2GS_TerritoryExploit_Request {
		territoryID = V_territoryID,
		listPetID = V_listPetID,
		cfgTime = V_cfgTime,
		cfgLevel = V_cfgLevel
		},
	Bin4 };

%GENERATED from file:pet.h => U2GS_TerritoryPlunder_Request
decode(?U2GS_TerritoryPlunder_Request,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_territoryID, Bin2 } = read_uint32( Bin1 ),
	{ V_listPetID, Bin3 } = read_array(Bin2, fun(X) -> read_uint32( X ) end),
	{ #pk_U2GS_TerritoryPlunder_Request {
		roleID = V_roleID,
		territoryID = V_territoryID,
		listPetID = V_listPetID
		},
	Bin3 };

%GENERATED from file:pet.h => U2GS_TerritoryVigor_Request
decode(?U2GS_TerritoryVigor_Request,Bin0) ->
	{ #pk_U2GS_TerritoryVigor_Request {

		},
	Bin0 };

%GENERATED from file:pet.h => U2GS_UpStartPet
decode(?U2GS_UpStartPet,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_UpStartPet {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:pet.h => U2GS_UsePetSkillBook
decode(?U2GS_UsePetSkillBook,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_petSkillId, Bin2 } = read_uint16( Bin1 ),
	{ V_itemid, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_UsePetSkillBook {
		petID = V_petID,
		petSkillId = V_petSkillId,
		itemid = V_itemid
		},
	Bin3 };

%GENERATED from file:player.h => Any_ChangeMap
decode(?Any_ChangeMap,Bin0) ->
	{ V_mapId, Bin1 } = read_uint32( Bin0 ),
	{ V_lineID, Bin2 } = read_uint32( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ #pk_Any_ChangeMap {
		mapId = V_mapId,
		lineID = V_lineID,
		x = V_x,
		y = V_y
		},
	Bin4 };

%GENERATED from file:player.h => Any_PlayerLogout
decode(?Any_PlayerLogout,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_reason, Bin2 } = read_uint8( Bin1 ),
	{ #pk_Any_PlayerLogout {
		code = V_code,
		reason = V_reason
		},
	Bin2 };

%GENERATED from file:player.h => C2S_ChangeMap
decode(?C2S_ChangeMap,Bin0) ->
	{ V_mapId, Bin1 } = read_uint32( Bin0 ),
	{ V_waypointName, Bin2 } = read_string( Bin1 ),
	{ #pk_C2S_ChangeMap {
		mapId = V_mapId,
		waypointName = V_waypointName
		},
	Bin2 };

%GENERATED from file:player.h => GS2S_UseTheAwakeBuffRet
decode(?GS2S_UseTheAwakeBuffRet,Bin0) ->
	{ #pk_GS2S_UseTheAwakeBuffRet {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_AcceptHolidayTaskSucc
decode(?GS2U_AcceptHolidayTaskSucc,Bin0) ->
	{ V_result, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_AcceptHolidayTaskSucc {
		result = V_result
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_AliveApply_Ack
decode(?GS2U_AliveApply_Ack,Bin0) ->
	{ V_applyID, Bin1 } = read_uint64( Bin0 ),
	{ V_leaderID, Bin2 } = read_uint64( Bin1 ),
	{ V_members, Bin3 } = read_array(Bin2, fun(X) -> decode_CrossRoleBase( X ) end),
	{ #pk_GS2U_AliveApply_Ack {
		applyID = V_applyID,
		leaderID = V_leaderID,
		members = V_members
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_AliveCancel_Ack
decode(?GS2U_AliveCancel_Ack,Bin0) ->
	{ V_role, Bin1 } = decode_CrossRoleBase( Bin0 ),
	{ #pk_GS2U_AliveCancel_Ack {
		role = V_role
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_AliveCarrier_Sync
decode(?GS2U_AliveCarrier_Sync,Bin0) ->
	{ V_x, Bin1 } = read_float( Bin0 ),
	{ V_y, Bin2 } = read_float( Bin1 ),
	{ V_time, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_AliveCarrier_Sync {
		x = V_x,
		y = V_y,
		time = V_time
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_AliveEnterSafeArea_Ack
decode(?GS2U_AliveEnterSafeArea_Ack,Bin0) ->
	{ #pk_GS2U_AliveEnterSafeArea_Ack {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_AliveMapState_Sync
decode(?GS2U_AliveMapState_Sync,Bin0) ->
	{ V_state, Bin1 } = read_uint8( Bin0 ),
	{ V_sec, Bin2 } = read_uint16( Bin1 ),
	{ V_listRole, Bin3 } = read_array(Bin2, fun(X) -> decode_AliveRole( X ) end),
	{ V_isInvalid, Bin4 } = read_bool( Bin3 ),
	{ #pk_GS2U_AliveMapState_Sync {
		state = V_state,
		sec = V_sec,
		listRole = V_listRole,
		isInvalid = V_isInvalid
		},
	Bin4 };

%GENERATED from file:player.h => GS2U_AliveRolePos_Sync
decode(?GS2U_AliveRolePos_Sync,Bin0) ->
	{ V_listPos, Bin1 } = read_array(Bin0, fun(X) -> decode_AliveRolePos( X ) end),
	{ #pk_GS2U_AliveRolePos_Sync {
		listPos = V_listPos
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_AliveRole_Sync
decode(?GS2U_AliveRole_Sync,Bin0) ->
	{ V_role, Bin1 } = decode_AliveRole( Bin0 ),
	{ #pk_GS2U_AliveRole_Sync {
		role = V_role
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_AllBattleProp
decode(?GS2U_AllBattleProp,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_battlePropInfo, Bin2 } = read_array(Bin1, fun(X) -> read_float( X ) end),
	{ #pk_GS2U_AllBattleProp {
		code = V_code,
		battlePropInfo = V_battlePropInfo
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_BattlePropList
decode(?GS2U_BattlePropList,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_id, Bin2 } = read_uint16( Bin1 ),
	{ V_battleProp, Bin3 } = read_array(Bin2, fun(X) -> decode_BattleProp( X ) end),
	{ #pk_GS2U_BattlePropList {
		code = V_code,
		id = V_id,
		battleProp = V_battleProp
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_BeReportNum
decode(?GS2U_BeReportNum,Bin0) ->
	{ V_num, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_BeReportNum {
		num = V_num
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_BlockStatusChange
decode(?GS2U_BlockStatusChange,Bin0) ->
	{ V_changes, Bin1 } = read_array(Bin0, fun(X) -> decode_BlockStatusChange( X ) end),
	{ #pk_GS2U_BlockStatusChange {
		changes = V_changes
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_BroadcastDisapear
decode(?GS2U_BroadcastDisapear,Bin0) ->
	{ V_code, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_BroadcastDisapear {
		code = V_code
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_BroadcastDisapearFast
decode(?GS2U_BroadcastDisapearFast,Bin0) ->
	{ V_code, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_BroadcastDisapearFast {
		code = V_code
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_BroadcastPlayerHpPC
decode(?GS2U_BroadcastPlayerHpPC,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_hpPC, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_BroadcastPlayerHpPC {
		code = V_code,
		hpPC = V_hpPC
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_BroadcastPlayerRevive
decode(?GS2U_BroadcastPlayerRevive,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_mapId, Bin2 } = read_uint16( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ V_hpPC, Bin5 } = read_uint8( Bin4 ),
	{ #pk_GS2U_BroadcastPlayerRevive {
		code = V_code,
		mapId = V_mapId,
		x = V_x,
		y = V_y,
		hpPC = V_hpPC
		},
	Bin5 };

%GENERATED from file:player.h => GS2U_BroadcastTeamRevive
decode(?GS2U_BroadcastTeamRevive,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_mapId, Bin2 } = read_uint16( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ V_hpPC, Bin5 } = read_uint8( Bin4 ),
	{ #pk_GS2U_BroadcastTeamRevive {
		roleID = V_roleID,
		mapId = V_mapId,
		x = V_x,
		y = V_y,
		hpPC = V_hpPC
		},
	Bin5 };

%GENERATED from file:player.h => GS2U_BroadcastVisibleEquipOff
decode(?GS2U_BroadcastVisibleEquipOff,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_type, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_BroadcastVisibleEquipOff {
		code = V_code,
		type = V_type
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_BroadcastVisibleEquipOn
decode(?GS2U_BroadcastVisibleEquipOn,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_equip, Bin2 } = decode_visibleEquip( Bin1 ),
	{ #pk_GS2U_BroadcastVisibleEquipOn {
		code = V_code,
		equip = V_equip
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_BusinessCashDailyGift_Ack
decode(?GS2U_BusinessCashDailyGift_Ack,Bin0) ->
	{ #pk_GS2U_BusinessCashDailyGift_Ack {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_BusinessSupperGift_Ack
decode(?GS2U_BusinessSupperGift_Ack,Bin0) ->
	{ #pk_GS2U_BusinessSupperGift_Ack {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_BuyLimitedResult
decode(?GS2U_BuyLimitedResult,Bin0) ->
	{ V_result, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_BuyLimitedResult {
		result = V_result
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_ChangeCamp
decode(?GS2U_ChangeCamp,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_camp, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_ChangeCamp {
		code = V_code,
		camp = V_camp
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_ChangeCarrer
decode(?GS2U_ChangeCarrer,Bin0) ->
	{ V_result, Bin1 } = read_bool( Bin0 ),
	{ V_newCareer, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_ChangeCarrer {
		result = V_result,
		newCareer = V_newCareer
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_ChangeNameResult
decode(?GS2U_ChangeNameResult,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_errorCode, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_ChangeNameResult {
		roleID = V_roleID,
		name = V_name,
		errorCode = V_errorCode
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_ChatErrorResult
decode(?GS2U_ChatErrorResult,Bin0) ->
	{ V_reason, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_ChatErrorResult {
		reason = V_reason
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_Chatinfo
decode(?GS2U_Chatinfo,Bin0) ->
	{ V_channel, Bin1 } = read_int8( Bin0 ),
	{ V_senderID, Bin2 } = read_uint64( Bin1 ),
	{ V_senderCode, Bin3 } = read_uint64( Bin2 ),
	{ V_senderName, Bin4 } = read_string( Bin3 ),
	{ V_senderRace, Bin5 } = read_int8( Bin4 ),
	{ V_senderCareer, Bin6 } = read_uint32( Bin5 ),
	{ V_senderSex, Bin7 } = read_int8( Bin6 ),
	{ V_senderHead, Bin8 } = read_int32( Bin7 ),
	{ V_frameID, Bin9 } = read_uint16( Bin8 ),
	{ V_senderLevel, Bin10 } = read_int16( Bin9 ),
	{ V_senderVip, Bin11 } = read_int8( Bin10 ),
	{ V_content, Bin12 } = read_string( Bin11 ),
	{ #pk_GS2U_Chatinfo {
		channel = V_channel,
		senderID = V_senderID,
		senderCode = V_senderCode,
		senderName = V_senderName,
		senderRace = V_senderRace,
		senderCareer = V_senderCareer,
		senderSex = V_senderSex,
		senderHead = V_senderHead,
		frameID = V_frameID,
		senderLevel = V_senderLevel,
		senderVip = V_senderVip,
		content = V_content
		},
	Bin12 };

%GENERATED from file:player.h => GS2U_ClearFightObject
decode(?GS2U_ClearFightObject,Bin0) ->
	{ V_objs, Bin1 } = read_array(Bin0, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_ClearFightObject {
		objs = V_objs
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_CopyMapProcess
decode(?GS2U_CopyMapProcess,Bin0) ->
	{ V_curSchedule, Bin1 } = read_uint8( Bin0 ),
	{ V_allSchedule, Bin2 } = read_uint8( Bin1 ),
	{ V_scheduleList, Bin3 } = read_array(Bin2, fun(X) -> decode_CopyObj( X ) end),
	{ #pk_GS2U_CopyMapProcess {
		curSchedule = V_curSchedule,
		allSchedule = V_allSchedule,
		scheduleList = V_scheduleList
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_CopyMapProcessCurrentScheduleStatus
decode(?GS2U_CopyMapProcessCurrentScheduleStatus,Bin0) ->
	{ V_curSchedule, Bin1 } = read_uint8( Bin0 ),
	{ V_status, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_CopyMapProcessCurrentScheduleStatus {
		curSchedule = V_curSchedule,
		status = V_status
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_CopyMapProcessCurrentScheduleSurplusSecond
decode(?GS2U_CopyMapProcessCurrentScheduleSurplusSecond,Bin0) ->
	{ V_curSchedule, Bin1 } = read_uint8( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ V_surplusSecond, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_CopyMapProcessCurrentScheduleSurplusSecond {
		curSchedule = V_curSchedule,
		type = V_type,
		surplusSecond = V_surplusSecond
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_CopyMapResult
decode(?GS2U_CopyMapResult,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ V_second, Bin2 } = read_uint16( Bin1 ),
	{ V_goldReward, Bin3 } = read_uint32( Bin2 ),
	{ V_expReward, Bin4 } = read_uint32( Bin3 ),
	{ V_isAssist, Bin5 } = read_bool( Bin4 ),
	{ V_dropItems, Bin6 } = read_array(Bin5, fun(X) -> decode_CopyMapDropItem( X ) end),
	{ V_festivalDrop, Bin7 } = read_array(Bin6, fun(X) -> decode_CopyMapDropItem( X ) end),
	{ #pk_GS2U_CopyMapResult {
		copyMapID = V_copyMapID,
		second = V_second,
		goldReward = V_goldReward,
		expReward = V_expReward,
		isAssist = V_isAssist,
		dropItems = V_dropItems,
		festivalDrop = V_festivalDrop
		},
	Bin7 };

%GENERATED from file:player.h => GS2U_CopyMapStatHurtList
decode(?GS2U_CopyMapStatHurtList,Bin0) ->
	{ V_statList, Bin1 } = read_array(Bin0, fun(X) -> decode_CopyMapStatHurt( X ) end),
	{ #pk_GS2U_CopyMapStatHurtList {
		statList = V_statList
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_CopymapFailed
decode(?GS2U_CopymapFailed,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_CopymapFailed {
		copyMapID = V_copyMapID
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_CreatePlayerResult
decode(?GS2U_CreatePlayerResult,Bin0) ->
	{ V_errorCode, Bin1 } = read_int32( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_CreatePlayerResult {
		errorCode = V_errorCode,
		roleID = V_roleID
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_CrossNewPlayerCode
decode(?GS2U_CrossNewPlayerCode,Bin0) ->
	{ V_uint64, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_CrossNewPlayerCode {
		uint64 = V_uint64
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_CrossStep
decode(?GS2U_CrossStep,Bin0) ->
	{ V_index, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_CrossStep {
		index = V_index
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_DashTo
decode(?GS2U_DashTo,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_posX, Bin2 } = read_float( Bin1 ),
	{ V_posY, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_DashTo {
		code = V_code,
		posX = V_posX,
		posY = V_posY
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_DeletePlayerResult
decode(?GS2U_DeletePlayerResult,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_errorCode, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_DeletePlayerResult {
		roleID = V_roleID,
		errorCode = V_errorCode
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_EnterMapFailed
decode(?GS2U_EnterMapFailed,Bin0) ->
	{ #pk_GS2U_EnterMapFailed {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_Error
decode(?GS2U_Error,Bin0) ->
	{ V_errorCode, Bin1 } = read_uint32( Bin0 ),
	{ V_params, Bin2 } = read_array(Bin1, fun(X) -> read_string( X ) end),
	{ #pk_GS2U_Error {
		errorCode = V_errorCode,
		params = V_params
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_EveryDayGetPower_Sync
decode(?GS2U_EveryDayGetPower_Sync,Bin0) ->
	{ V_isGetSuc, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_EveryDayGetPower_Sync {
		isGetSuc = V_isGetSuc
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_GetRewardUpdateResource
decode(?GS2U_GetRewardUpdateResource,Bin0) ->
	{ V_resultList, Bin1 } = read_array(Bin0, fun(X) -> decode_RewardUpdateResource( X ) end),
	{ #pk_GS2U_GetRewardUpdateResource {
		resultList = V_resultList
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_GiveGiftEfects
decode(?GS2U_GiveGiftEfects,Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemCount, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_GiveGiftEfects {
		itemID = V_itemID,
		itemCount = V_itemCount
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_HateInfo
decode(?GS2U_HateInfo,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_hateCode, Bin2 } = read_uint64( Bin1 ),
	{ V_opreate, Bin3 } = read_int8( Bin2 ),
	{ #pk_GS2U_HateInfo {
		code = V_code,
		hateCode = V_hateCode,
		opreate = V_opreate
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_HaveIconAndActionList
decode(?GS2U_HaveIconAndActionList,Bin0) ->
	{ V_icons, Bin1 } = read_array(Bin0, fun(X) -> read_uint32( X ) end),
	{ V_actions, Bin2 } = read_array(Bin1, fun(X) -> read_uint32( X ) end),
	{ #pk_GS2U_HaveIconAndActionList {
		icons = V_icons,
		actions = V_actions
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_HeartBeatAck
decode(?GS2U_HeartBeatAck,Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_version, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_HeartBeatAck {
		time = V_time,
		version = V_version
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_HisoryForce_Ack
decode(?GS2U_HisoryForce_Ack,Bin0) ->
	{ V_maxAll, Bin1 } = read_uint64( Bin0 ),
	{ V_maxNotPet, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_HisoryForce_Ack {
		maxAll = V_maxAll,
		maxNotPet = V_maxNotPet
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_InvateEnterCopyMap
decode(?GS2U_InvateEnterCopyMap,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_InvateEnterCopyMap {
		copyMapID = V_copyMapID
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_KickOutTip
decode(?GS2U_KickOutTip,Bin0) ->
	{ V_type, Bin1 } = read_int8( Bin0 ),
	{ #pk_GS2U_KickOutTip {
		type = V_type
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_KillPlayerResponse
decode(?GS2U_KillPlayerResponse,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_KillPlayerResponse {
		code = V_code
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_KillValueResponse
decode(?GS2U_KillValueResponse,Bin0) ->
	{ V_killValue, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_KillValueResponse {
		killValue = V_killValue
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_LBS_BesideRole_Ack
decode(?GS2U_LBS_BesideRole_Ack,Bin0) ->
	{ V_lat, Bin1 } = read_float( Bin0 ),
	{ V_lng, Bin2 } = read_float( Bin1 ),
	{ V_dist, Bin3 } = read_float( Bin2 ),
	{ V_listRole, Bin4 } = read_array(Bin3, fun(X) -> decode_LBSRole( X ) end),
	{ #pk_GS2U_LBS_BesideRole_Ack {
		lat = V_lat,
		lng = V_lng,
		dist = V_dist,
		listRole = V_listRole
		},
	Bin4 };

%GENERATED from file:player.h => GS2U_LoginResult
decode(?GS2U_LoginResult,Bin0) ->
	{ V_result, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_LoginResult {
		result = V_result
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_LookInfoPlayer
decode(?GS2U_LookInfoPlayer,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_x, Bin4 } = read_float( Bin3 ),
	{ V_y, Bin5 } = read_float( Bin4 ),
	{ V_race, Bin6 } = read_int8( Bin5 ),
	{ V_career, Bin7 } = read_uint32( Bin6 ),
	{ V_sex, Bin8 } = read_int8( Bin7 ),
	{ V_camp, Bin9 } = read_int8( Bin8 ),
	{ V_head, Bin10 } = read_int32( Bin9 ),
	{ V_move_speed, Bin11 } = read_float( Bin10 ),
	{ V_level, Bin12 } = read_int16( Bin11 ),
	{ V_hp_per, Bin13 } = read_uint8( Bin12 ),
	{ V_petID, Bin14 } = read_uint16( Bin13 ),
	{ V_otherCode, Bin15 } = read_uint64( Bin14 ),
	{ V_servername, Bin16 } = read_string( Bin15 ),
	{ V_myServerName, Bin17 } = read_string( Bin16 ),
	{ V_isInCross, Bin18 } = read_bool( Bin17 ),
	{ V_pkMode, Bin19 } = read_uint8( Bin18 ),
	{ V_pet_list, Bin20 } = read_array(Bin19, fun(X) -> read_uint64( X ) end),
	{ V_move_list, Bin21 } = read_array(Bin20, fun(X) -> decode_PosInfo( X ) end),
	{ V_buffs, Bin22 } = read_array(Bin21, fun(X) -> decode_BuffBaseInfo( X ) end),
	{ V_visible_equips, Bin23 } = read_array(Bin22, fun(X) -> decode_visibleEquip( X ) end),
	{ V_refine_levels, Bin24 } = read_array(Bin23, fun(X) -> decode_refineLevel( X ) end),
	{ #pk_GS2U_LookInfoPlayer {
		code = V_code,
		roleID = V_roleID,
		name = V_name,
		x = V_x,
		y = V_y,
		race = V_race,
		career = V_career,
		sex = V_sex,
		camp = V_camp,
		head = V_head,
		move_speed = V_move_speed,
		level = V_level,
		hp_per = V_hp_per,
		petID = V_petID,
		otherCode = V_otherCode,
		servername = V_servername,
		myServerName = V_myServerName,
		isInCross = V_isInCross,
		pkMode = V_pkMode,
		pet_list = V_pet_list,
		move_list = V_move_list,
		buffs = V_buffs,
		visible_equips = V_visible_equips,
		refine_levels = V_refine_levels
		},
	Bin24 };

%GENERATED from file:player.h => GS2U_LotteryForTowerBeginTimeEndTime
decode(?GS2U_LotteryForTowerBeginTimeEndTime,Bin0) ->
	{ V_beginTime, Bin1 } = read_uint32( Bin0 ),
	{ V_endTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_LotteryForTowerBeginTimeEndTime {
		beginTime = V_beginTime,
		endTime = V_endTime
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_LotteryForTowerInfo
decode(?GS2U_LotteryForTowerInfo,Bin0) ->
	{ V_current_cfg_id, Bin1 } = read_int16( Bin0 ),
	{ V_endTime, Bin2 } = read_uint32( Bin1 ),
	{ V_oneTimeCost, Bin3 } = read_uint32( Bin2 ),
	{ V_tenTimeCost, Bin4 } = read_uint32( Bin3 ),
	{ V_fiftyTimeCost, Bin5 } = read_uint32( Bin4 ),
	{ V_itemList, Bin6 } = read_array(Bin5, fun(X) -> decode_lotteryForToweItem( X ) end),
	{ V_noticeList, Bin7 } = read_array(Bin6, fun(X) -> decode_lotteryForTowerNotice( X ) end),
	{ #pk_GS2U_LotteryForTowerInfo {
		current_cfg_id = V_current_cfg_id,
		endTime = V_endTime,
		oneTimeCost = V_oneTimeCost,
		tenTimeCost = V_tenTimeCost,
		fiftyTimeCost = V_fiftyTimeCost,
		itemList = V_itemList,
		noticeList = V_noticeList
		},
	Bin7 };

%GENERATED from file:player.h => GS2U_LotteryForTowerRandonAward
decode(?GS2U_LotteryForTowerRandonAward,Bin0) ->
	{ V_current_cfg_id, Bin1 } = read_int16( Bin0 ),
	{ V_noticeList, Bin2 } = read_array(Bin1, fun(X) -> decode_lotteryForTowerNotice( X ) end),
	{ V_reward_cfg_id_list, Bin3 } = read_array(Bin2, fun(X) -> read_int16( X ) end),
	{ #pk_GS2U_LotteryForTowerRandonAward {
		current_cfg_id = V_current_cfg_id,
		noticeList = V_noticeList,
		reward_cfg_id_list = V_reward_cfg_id_list
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_MapLevel
decode(?GS2U_MapLevel,Bin0) ->
	{ V_level, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_MapLevel {
		level = V_level
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MapLineList
decode(?GS2U_MapLineList,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_lineList, Bin2 } = read_array(Bin1, fun(X) -> decode_MapLineInfo( X ) end),
	{ #pk_GS2U_MapLineList {
		mapID = V_mapID,
		lineList = V_lineList
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_MaterialCopyMapResult
decode(?GS2U_MaterialCopyMapResult,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ V_score, Bin2 } = read_uint16( Bin1 ),
	{ V_state, Bin3 } = read_uint16( Bin2 ),
	{ V_goldReward, Bin4 } = read_uint32( Bin3 ),
	{ V_expReward, Bin5 } = read_uint32( Bin4 ),
	{ V_maxChapter, Bin6 } = read_uint16( Bin5 ),
	{ V_finishChapter, Bin7 } = read_uint16( Bin6 ),
	{ V_isAssist, Bin8 } = read_bool( Bin7 ),
	{ V_dropItems, Bin9 } = read_array(Bin8, fun(X) -> decode_CopyMapDropItem( X ) end),
	{ V_festivalDrop, Bin10 } = read_array(Bin9, fun(X) -> decode_CopyMapDropItem( X ) end),
	{ #pk_GS2U_MaterialCopyMapResult {
		copyMapID = V_copyMapID,
		score = V_score,
		state = V_state,
		goldReward = V_goldReward,
		expReward = V_expReward,
		maxChapter = V_maxChapter,
		finishChapter = V_finishChapter,
		isAssist = V_isAssist,
		dropItems = V_dropItems,
		festivalDrop = V_festivalDrop
		},
	Bin10 };

%GENERATED from file:player.h => GS2U_MissionObjectList
decode(?GS2U_MissionObjectList,Bin0) ->
	{ V_missionObj_list, Bin1 } = read_array(Bin0, fun(X) -> decode_MissionObjectInfo( X ) end),
	{ #pk_GS2U_MissionObjectList {
		missionObj_list = V_missionObj_list
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MoneyChanges
decode(?GS2U_MoneyChanges,Bin0) ->
	{ V_changes, Bin1 } = read_array(Bin0, fun(X) -> decode_MoneyChanges( X ) end),
	{ #pk_GS2U_MoneyChanges {
		changes = V_changes
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MoneyDungeonCopyMapResult
decode(?GS2U_MoneyDungeonCopyMapResult,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ V_score, Bin2 } = read_uint16( Bin1 ),
	{ V_maxChapter, Bin3 } = read_uint16( Bin2 ),
	{ V_finishChapter, Bin4 } = read_uint16( Bin3 ),
	{ V_listMonsterID, Bin5 } = read_array(Bin4, fun(X) -> read_uint16( X ) end),
	{ V_listMonsterCountKill, Bin6 } = read_array(Bin5, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_MoneyDungeonCopyMapResult {
		copyMapID = V_copyMapID,
		score = V_score,
		maxChapter = V_maxChapter,
		finishChapter = V_finishChapter,
		listMonsterID = V_listMonsterID,
		listMonsterCountKill = V_listMonsterCountKill
		},
	Bin6 };

%GENERATED from file:player.h => GS2U_MoneyTreeAck
decode(?GS2U_MoneyTreeAck,Bin0) ->
	{ V_totalMoney, Bin1 } = read_uint32( Bin0 ),
	{ V_boxMoney, Bin2 } = read_uint32( Bin1 ),
	{ V_rate, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_MoneyTreeAck {
		totalMoney = V_totalMoney,
		boxMoney = V_boxMoney,
		rate = V_rate
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_MoneyTreeBox
decode(?GS2U_MoneyTreeBox,Bin0) ->
	{ V_totalMoney, Bin1 } = read_uint32( Bin0 ),
	{ V_rate, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_MoneyTreeBox {
		totalMoney = V_totalMoney,
		rate = V_rate
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_MonsterBookEnterNewMap_Sync
decode(?GS2U_MonsterBookEnterNewMap_Sync,Bin0) ->
	{ V_mapid, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_MonsterBookEnterNewMap_Sync {
		mapid = V_mapid
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MonsterBookNeed_Sync
decode(?GS2U_MonsterBookNeed_Sync,Bin0) ->
	{ V_listUnlockID, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ V_listRewardID, Bin2 } = read_array(Bin1, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_MonsterBookNeed_Sync {
		listUnlockID = V_listUnlockID,
		listRewardID = V_listRewardID
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_MonsterBookReward_Ack
decode(?GS2U_MonsterBookReward_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_MonsterBookReward_Ack {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MonsterBookSnap_Ack
decode(?GS2U_MonsterBookSnap_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_MonsterBookSnap_Ack {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MonsterBookUnlock_Ack
decode(?GS2U_MonsterBookUnlock_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_MonsterBookUnlock_Ack {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MonsterBook_Ack
decode(?GS2U_MonsterBook_Ack,Bin0) ->
	{ V_listMapID, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ V_listMonster, Bin2 } = read_array(Bin1, fun(X) -> decode_MonsterBook( X ) end),
	{ #pk_GS2U_MonsterBook_Ack {
		listMapID = V_listMapID,
		listMonster = V_listMonster
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_MonsterList
decode(?GS2U_MonsterList,Bin0) ->
	{ V_monster_list, Bin1 } = read_array(Bin0, fun(X) -> decode_LookInfoMonster( X ) end),
	{ #pk_GS2U_MonsterList {
		monster_list = V_monster_list
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MonthCardEndTips
decode(?GS2U_MonthCardEndTips,Bin0) ->
	{ V_remainDays, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_MonthCardEndTips {
		remainDays = V_remainDays
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_MoveInfo
decode(?GS2U_MoveInfo,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_posX, Bin2 } = read_float( Bin1 ),
	{ V_posY, Bin3 } = read_float( Bin2 ),
	{ V_posInfos, Bin4 } = read_array(Bin3, fun(X) -> decode_PosInfo( X ) end),
	{ #pk_GS2U_MoveInfo {
		code = V_code,
		posX = V_posX,
		posY = V_posY,
		posInfos = V_posInfos
		},
	Bin4 };

%GENERATED from file:player.h => GS2U_MsgBoxTips
decode(?GS2U_MsgBoxTips,Bin0) ->
	{ V_code, Bin1 } = read_int32( Bin0 ),
	{ V_msg, Bin2 } = read_string( Bin1 ),
	{ #pk_GS2U_MsgBoxTips {
		code = V_code,
		msg = V_msg
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_NoticeAdd
decode(?GS2U_NoticeAdd,Bin0) ->
	{ V_notice, Bin1 } = read_array(Bin0, fun(X) -> decode_NoticeInfo( X ) end),
	{ #pk_GS2U_NoticeAdd {
		notice = V_notice
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_NoticeDel
decode(?GS2U_NoticeDel,Bin0) ->
	{ V_id, Bin1 } = read_array(Bin0, fun(X) -> read_int64( X ) end),
	{ #pk_GS2U_NoticeDel {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_NoticeResponse
decode(?GS2U_NoticeResponse,Bin0) ->
	{ V_result, Bin1 } = read_int8( Bin0 ),
	{ V_noticeList, Bin2 } = read_array(Bin1, fun(X) -> decode_NoticeInfo( X ) end),
	{ #pk_GS2U_NoticeResponse {
		result = V_result,
		noticeList = V_noticeList
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_NpcList
decode(?GS2U_NpcList,Bin0) ->
	{ V_npc_list, Bin1 } = read_array(Bin0, fun(X) -> decode_LookInfoNpc( X ) end),
	{ #pk_GS2U_NpcList {
		npc_list = V_npc_list
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_NpcStatusChange
decode(?GS2U_NpcStatusChange,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_actionStatus, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_NpcStatusChange {
		code = V_code,
		actionStatus = V_actionStatus
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_ObjBrief
decode(?GS2U_ObjBrief,Bin0) ->
	{ V_obj_type, Bin1 } = read_int8( Bin0 ),
	{ V_objs, Bin2 } = read_array(Bin1, fun(X) -> decode_ObjBrief( X ) end),
	{ #pk_GS2U_ObjBrief {
		obj_type = V_obj_type,
		objs = V_objs
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_PetList
decode(?GS2U_PetList,Bin0) ->
	{ V_pet_list, Bin1 } = read_array(Bin0, fun(X) -> decode_LookInfoPet( X ) end),
	{ #pk_GS2U_PetList {
		pet_list = V_pet_list
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_PetLvlChange
decode(?GS2U_PetLvlChange,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_PetLvlChange {
		code = V_code,
		level = V_level
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_PetRawLvlChange
decode(?GS2U_PetRawLvlChange,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_rawLvl, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_PetRawLvlChange {
		code = V_code,
		rawLvl = V_rawLvl
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_PlayerAddExp
decode(?GS2U_PlayerAddExp,Bin0) ->
	{ V_curExp, Bin1 } = read_uint32( Bin0 ),
	{ V_addExp, Bin2 } = read_int32( Bin1 ),
	{ V_addPercent, Bin3 } = read_int32( Bin2 ),
	{ #pk_GS2U_PlayerAddExp {
		curExp = V_curExp,
		addExp = V_addExp,
		addPercent = V_addPercent
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_PlayerAwakenInfo
decode(?GS2U_PlayerAwakenInfo,Bin0) ->
	{ V_type, Bin1 } = read_int8( Bin0 ),
	{ V_awakenLevel, Bin2 } = read_int8( Bin1 ),
	{ V_itemNum, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_PlayerAwakenInfo {
		type = V_type,
		awakenLevel = V_awakenLevel,
		itemNum = V_itemNum
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_PlayerBaseInfo
decode(?GS2U_PlayerBaseInfo,Bin0) ->
	{ V_baseInfo, Bin1 } = decode_RoleBaseInfo( Bin0 ),
	{ #pk_GS2U_PlayerBaseInfo {
		baseInfo = V_baseInfo
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_PlayerBlood
decode(?GS2U_PlayerBlood,Bin0) ->
	{ V_blood, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_PlayerBlood {
		blood = V_blood
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_PlayerChangedWealth
decode(?GS2U_PlayerChangedWealth,Bin0) ->
	{ V_type, Bin1 } = read_uint32( Bin0 ),
	{ V_wealth, Bin2 } = read_uint32( Bin1 ),
	{ V_reason, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_PlayerChangedWealth {
		type = V_type,
		wealth = V_wealth,
		reason = V_reason
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_PlayerCour
decode(?GS2U_PlayerCour,Bin0) ->
	{ V_cour, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_PlayerCour {
		cour = V_cour
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_PlayerDead
decode(?GS2U_PlayerDead,Bin0) ->
	{ V_deadTime, Bin1 } = read_uint64( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_normalReviveCDTime, Bin3 } = read_uint32( Bin2 ),
	{ V_reviveCost, Bin4 } = decode_MoneyInit( Bin3 ),
	{ V_attackCode, Bin5 } = read_uint64( Bin4 ),
	{ V_attackName, Bin6 } = read_string( Bin5 ),
	{ V_lostMoney, Bin7 } = read_array(Bin6, fun(X) -> decode_MoneyInit( X ) end),
	{ V_reviveType, Bin8 } = read_uint32( Bin7 ),
	{ V_reviveCount, Bin9 } = read_uint32( Bin8 ),
	{ #pk_GS2U_PlayerDead {
		deadTime = V_deadTime,
		code = V_code,
		normalReviveCDTime = V_normalReviveCDTime,
		reviveCost = V_reviveCost,
		attackCode = V_attackCode,
		attackName = V_attackName,
		lostMoney = V_lostMoney,
		reviveType = V_reviveType,
		reviveCount = V_reviveCount
		},
	Bin9 };

%GENERATED from file:player.h => GS2U_PlayerHp
decode(?GS2U_PlayerHp,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_hp, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_PlayerHp {
		code = V_code,
		hp = V_hp
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_PlayerInitEnd
decode(?GS2U_PlayerInitEnd,Bin0) ->
	{ #pk_GS2U_PlayerInitEnd {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_PlayerLevelUp
decode(?GS2U_PlayerLevelUp,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_curExp, Bin2 } = read_uint32( Bin1 ),
	{ V_maxExp, Bin3 } = read_uint32( Bin2 ),
	{ V_addExp, Bin4 } = read_uint32( Bin3 ),
	{ V_addPercent, Bin5 } = read_int32( Bin4 ),
	{ V_level, Bin6 } = read_uint8( Bin5 ),
	{ #pk_GS2U_PlayerLevelUp {
		code = V_code,
		curExp = V_curExp,
		maxExp = V_maxExp,
		addExp = V_addExp,
		addPercent = V_addPercent,
		level = V_level
		},
	Bin6 };

%GENERATED from file:player.h => GS2U_PlayerPhys
decode(?GS2U_PlayerPhys,Bin0) ->
	{ V_phys, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_PlayerPhys {
		phys = V_phys
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_PlayerRevive
decode(?GS2U_PlayerRevive,Bin0) ->
	{ V_mapId, Bin1 } = read_uint16( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ V_curHp, Bin4 } = read_uint32( Bin3 ),
	{ V_maxHp, Bin5 } = read_uint32( Bin4 ),
	{ V_curPower, Bin6 } = read_uint32( Bin5 ),
	{ V_curPhys, Bin7 } = read_uint32( Bin6 ),
	{ #pk_GS2U_PlayerRevive {
		mapId = V_mapId,
		x = V_x,
		y = V_y,
		curHp = V_curHp,
		maxHp = V_maxHp,
		curPower = V_curPower,
		curPhys = V_curPhys
		},
	Bin7 };

%GENERATED from file:player.h => GS2U_PlayerSp
decode(?GS2U_PlayerSp,Bin0) ->
	{ V_sp, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_PlayerSp {
		sp = V_sp
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_PlotDialogue
decode(?GS2U_PlotDialogue,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_PlotDialogue {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_PropSync
decode(?GS2U_PropSync,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_ints, Bin2 } = read_array(Bin1, fun(X) -> decode_PropInt( X ) end),
	{ V_int64s, Bin3 } = read_array(Bin2, fun(X) -> decode_PropInt64( X ) end),
	{ V_floats, Bin4 } = read_array(Bin3, fun(X) -> decode_PropFloat( X ) end),
	{ V_strs, Bin5 } = read_array(Bin4, fun(X) -> decode_PropString( X ) end),
	{ #pk_GS2U_PropSync {
		code = V_code,
		ints = V_ints,
		int64s = V_int64s,
		floats = V_floats,
		strs = V_strs
		},
	Bin5 };

%GENERATED from file:player.h => GS2U_PushInfo
decode(?GS2U_PushInfo,Bin0) ->
	{ V_items, Bin1 } = read_array(Bin0, fun(X) -> decode_pushItem( X ) end),
	{ V_startTime, Bin2 } = read_uint32( Bin1 ),
	{ V_endTime, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_PushInfo {
		items = V_items,
		startTime = V_startTime,
		endTime = V_endTime
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RaceApplyInfo_Sync
decode(?GS2U_RaceApplyInfo_Sync,Bin0) ->
	{ V_info, Bin1 } = decode_RaceTeamBase( Bin0 ),
	{ #pk_GS2U_RaceApplyInfo_Sync {
		info = V_info
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_RaceApplyState
decode(?GS2U_RaceApplyState,Bin0) ->
	{ V_retInfo, Bin1 } = read_int32( Bin0 ),
	{ V_errorInfo, Bin2 } = read_array(Bin1, fun(X) -> decode_Error( X ) end),
	{ V_master, Bin3 } = decode_RaceCanBeInvite( Bin2 ),
	{ V_passenger, Bin4 } = read_array(Bin3, fun(X) -> decode_RaceCanBeInvite( X ) end),
	{ V_petID, Bin5 } = read_uint16( Bin4 ),
	{ V_type, Bin6 } = read_uint8( Bin5 ),
	{ V_isApply, Bin7 } = read_bool( Bin6 ),
	{ V_autoMatch, Bin8 } = read_uint8( Bin7 ),
	{ #pk_GS2U_RaceApplyState {
		retInfo = V_retInfo,
		errorInfo = V_errorInfo,
		master = V_master,
		passenger = V_passenger,
		petID = V_petID,
		type = V_type,
		isApply = V_isApply,
		autoMatch = V_autoMatch
		},
	Bin8 };

%GENERATED from file:player.h => GS2U_RaceApply_Ack
decode(?GS2U_RaceApply_Ack,Bin0) ->
	{ V_info, Bin1 } = decode_RaceTeamBase( Bin0 ),
	{ #pk_GS2U_RaceApply_Ack {
		info = V_info
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_RaceCancel_Ack
decode(?GS2U_RaceCancel_Ack,Bin0) ->
	{ V_role, Bin1 } = decode_CrossRoleBase( Bin0 ),
	{ #pk_GS2U_RaceCancel_Ack {
		role = V_role
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_RaceInit
decode(?GS2U_RaceInit,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_petID, Bin2 } = read_uint16( Bin1 ),
	{ V_autoMatch, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GS2U_RaceInit {
		type = V_type,
		petID = V_petID,
		autoMatch = V_autoMatch
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RaceInviteList
decode(?GS2U_RaceInviteList,Bin0) ->
	{ V_retInfo, Bin1 } = read_int32( Bin0 ),
	{ V_errorInfo, Bin2 } = read_array(Bin1, fun(X) -> decode_Error( X ) end),
	{ V_listInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_RaceCanBeInvite( X ) end),
	{ #pk_GS2U_RaceInviteList {
		retInfo = V_retInfo,
		errorInfo = V_errorInfo,
		listInfo = V_listInfo
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RaceInvite_S2B
decode(?GS2U_RaceInvite_S2B,Bin0) ->
	{ V_master, Bin1 } = decode_RaceCanBeInvite( Bin0 ),
	{ V_petID, Bin2 } = read_uint16( Bin1 ),
	{ V_timeout, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_RaceInvite_S2B {
		master = V_master,
		petID = V_petID,
		timeout = V_timeout
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RaceMapGiveUp_Sync
decode(?GS2U_RaceMapGiveUp_Sync,Bin0) ->
	{ V_isComplete, Bin1 } = read_bool( Bin0 ),
	{ V_reason, Bin2 } = read_uint8( Bin1 ),
	{ V_role, Bin3 } = decode_CrossRoleBase( Bin2 ),
	{ #pk_GS2U_RaceMapGiveUp_Sync {
		isComplete = V_isComplete,
		reason = V_reason,
		role = V_role
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RaceMapItem_Sync
decode(?GS2U_RaceMapItem_Sync,Bin0) ->
	{ V_applyID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_getOrUse, Bin3 } = read_bool( Bin2 ),
	{ V_itemID, Bin4 } = read_uint8( Bin3 ),
	{ V_item, Bin5 } = decode_RaceTeamItem( Bin4 ),
	{ #pk_GS2U_RaceMapItem_Sync {
		applyID = V_applyID,
		roleID = V_roleID,
		getOrUse = V_getOrUse,
		itemID = V_itemID,
		item = V_item
		},
	Bin5 };

%GENERATED from file:player.h => GS2U_RaceMapMilestone_Sync
decode(?GS2U_RaceMapMilestone_Sync,Bin0) ->
	{ V_applyID, Bin1 } = read_uint64( Bin0 ),
	{ V_sort, Bin2 } = decode_RaceTeamSort( Bin1 ),
	{ #pk_GS2U_RaceMapMilestone_Sync {
		applyID = V_applyID,
		sort = V_sort
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_RaceMapState_Sync
decode(?GS2U_RaceMapState_Sync,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_state, Bin2 } = read_uint8( Bin1 ),
	{ V_sec, Bin3 } = read_uint16( Bin2 ),
	{ V_timeBegin, Bin4 } = read_uint32( Bin3 ),
	{ V_info, Bin5 } = read_array(Bin4, fun(X) -> decode_RaceTeamEx( X ) end),
	{ #pk_GS2U_RaceMapState_Sync {
		type = V_type,
		state = V_state,
		sec = V_sec,
		timeBegin = V_timeBegin,
		info = V_info
		},
	Bin5 };

%GENERATED from file:player.h => GS2U_RaceSeletPet
decode(?GS2U_RaceSeletPet,Bin0) ->
	{ V_retInfo, Bin1 } = read_int32( Bin0 ),
	{ V_errorInfo, Bin2 } = read_array(Bin1, fun(X) -> decode_Error( X ) end),
	{ V_petID, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_RaceSeletPet {
		retInfo = V_retInfo,
		errorInfo = V_errorInfo,
		petID = V_petID
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RaceType_Sync
decode(?GS2U_RaceType_Sync,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_RaceType_Sync {
		type = V_type
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_ReceivePlayerLevelRewardResult
decode(?GS2U_ReceivePlayerLevelRewardResult,Bin0) ->
	{ V_level, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_ReceivePlayerLevelRewardResult {
		level = V_level
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_ReconnectLoginRequestFail
decode(?GS2U_ReconnectLoginRequestFail,Bin0) ->
	{ #pk_GS2U_ReconnectLoginRequestFail {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_RequestAutoDealAck
decode(?GS2U_RequestAutoDealAck,Bin0) ->
	{ V_isSuccess, Bin1 } = read_bool( Bin0 ),
	{ V_copyMapID, Bin2 } = read_uint16( Bin1 ),
	{ V_coinReward, Bin3 } = read_array(Bin2, fun(X) -> decode_CoinData( X ) end),
	{ V_expReward, Bin4 } = read_uint64( Bin3 ),
	{ V_dropItems, Bin5 } = read_array(Bin4, fun(X) -> decode_CopyMapDropItem( X ) end),
	{ #pk_GS2U_RequestAutoDealAck {
		isSuccess = V_isSuccess,
		copyMapID = V_copyMapID,
		coinReward = V_coinReward,
		expReward = V_expReward,
		dropItems = V_dropItems
		},
	Bin5 };

%GENERATED from file:player.h => GS2U_RequestGoddessCodeAck
decode(?GS2U_RequestGoddessCodeAck,Bin0) ->
	{ V_goddessCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_RequestGoddessCodeAck {
		goddessCode = V_goddessCode
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_RequestOneKeyDealAck
decode(?GS2U_RequestOneKeyDealAck,Bin0) ->
	{ V_listResult, Bin1 } = read_array(Bin0, fun(X) -> decode_RequestAutoDeal( X ) end),
	{ #pk_GS2U_RequestOneKeyDealAck {
		listResult = V_listResult
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_RequestRechargeAck
decode(?GS2U_RequestRechargeAck,Bin0) ->
	{ V_funcellOrderID, Bin1 } = read_string( Bin0 ),
	{ V_moneyNun, Bin2 } = read_float( Bin1 ),
	{ #pk_GS2U_RequestRechargeAck {
		funcellOrderID = V_funcellOrderID,
		moneyNun = V_moneyNun
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_RequestRechargeHasGiftIDListAck
decode(?GS2U_RequestRechargeHasGiftIDListAck,Bin0) ->
	{ V_takenIDList, Bin1 } = read_array(Bin0, fun(X) -> read_uint32( X ) end),
	{ V_confIDList, Bin2 } = read_array(Bin1, fun(X) -> decode_RechargeDoubleConf( X ) end),
	{ #pk_GS2U_RequestRechargeHasGiftIDListAck {
		takenIDList = V_takenIDList,
		confIDList = V_confIDList
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_RequestTargetCopyMapScore
decode(?GS2U_RequestTargetCopyMapScore,Bin0) ->
	{ V_targetCopyMapID, Bin1 } = read_uint32( Bin0 ),
	{ V_highestScore, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_RequestTargetCopyMapScore {
		targetCopyMapID = V_targetCopyMapID,
		highestScore = V_highestScore
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_ResetCopyMap
decode(?GS2U_ResetCopyMap,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_ResetCopyMap {
		copyMapID = V_copyMapID
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_RespChatVoice
decode(?GS2U_RespChatVoice,Bin0) ->
	{ V_count, Bin1 } = read_uint8( Bin0 ),
	{ V_index, Bin2 } = read_uint8( Bin1 ),
	{ V_playerID, Bin3 } = read_uint64( Bin2 ),
	{ V_key, Bin4 } = read_uint32( Bin3 ),
	{ V_data, Bin5 } = read_array(Bin4, fun(X) -> read_uint8( X ) end),
	{ #pk_GS2U_RespChatVoice {
		count = V_count,
		index = V_index,
		playerID = V_playerID,
		key = V_key,
		data = V_data
		},
	Bin5 };

%GENERATED from file:player.h => GS2U_RespChatVoiceError
decode(?GS2U_RespChatVoiceError,Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_key, Bin2 } = read_uint32( Bin1 ),
	{ V_errorCode, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GS2U_RespChatVoiceError {
		playerID = V_playerID,
		key = V_key,
		errorCode = V_errorCode
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RoleAwakeInof
decode(?GS2U_RoleAwakeInof,Bin0) ->
	{ V_curStage, Bin1 } = read_uint8( Bin0 ),
	{ V_curStone, Bin2 } = read_uint8( Bin1 ),
	{ V_allAwakeInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_OneAwakeinfo( X ) end),
	{ #pk_GS2U_RoleAwakeInof {
		curStage = V_curStage,
		curStone = V_curStone,
		allAwakeInfo = V_allAwakeInfo
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_RoleAwakeingRet
decode(?GS2U_RoleAwakeingRet,Bin0) ->
	{ V_stage, Bin1 } = read_uint8( Bin0 ),
	{ V_stone, Bin2 } = read_uint8( Bin1 ),
	{ V_param, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_RoleAwakeingRet {
		stage = V_stage,
		stone = V_stone,
		param = V_param
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_SelPlayerResult
decode(?GS2U_SelPlayerResult,Bin0) ->
	{ V_result, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_SelPlayerResult {
		result = V_result
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_SendGiftNotice
decode(?GS2U_SendGiftNotice,Bin0) ->
	{ V_ids, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_SendGiftNotice {
		ids = V_ids
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_SendPlayerDailyCountList
decode(?GS2U_SendPlayerDailyCountList,Bin0) ->
	{ V_playerDailyCountList, Bin1 } = read_array(Bin0, fun(X) -> decode_PlayerDailyCount( X ) end),
	{ #pk_GS2U_SendPlayerDailyCountList {
		playerDailyCountList = V_playerDailyCountList
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_SendServerType
decode(?GS2U_SendServerType,Bin0) ->
	{ V_serverType, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_SendServerType {
		serverType = V_serverType
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_SessionKey
decode(?GS2U_SessionKey,Bin0) ->
	{ V_key, Bin1 } = read_string( Bin0 ),
	{ #pk_GS2U_SessionKey {
		key = V_key
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_SetUpAnchor
decode(?GS2U_SetUpAnchor,Bin0) ->
	{ V_args, Bin1 } = read_array(Bin0, fun(X) -> read_int64( X ) end),
	{ #pk_GS2U_SetUpAnchor {
		args = V_args
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_SevenDayAimReward_Ack
decode(?GS2U_SevenDayAimReward_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_SevenDayAimReward_Ack {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_SevenDayAimState_Sync
decode(?GS2U_SevenDayAimState_Sync,Bin0) ->
	{ V_timeBegin, Bin1 } = read_uint32( Bin0 ),
	{ V_conditions, Bin2 } = read_array(Bin1, fun(X) -> decode_SevenDayAimUpdate( X ) end),
	{ V_alreadyReward, Bin3 } = read_array(Bin2, fun(X) -> read_uint16( X ) end),
	{ #pk_GS2U_SevenDayAimState_Sync {
		timeBegin = V_timeBegin,
		conditions = V_conditions,
		alreadyReward = V_alreadyReward
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_SevenDayAimUpdate_Sync
decode(?GS2U_SevenDayAimUpdate_Sync,Bin0) ->
	{ V_type, Bin1 } = read_int32( Bin0 ),
	{ V_args, Bin2 } = read_array(Bin1, fun(X) -> read_int64( X ) end),
	{ #pk_GS2U_SevenDayAimUpdate_Sync {
		type = V_type,
		args = V_args
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_ShiftTo
decode(?GS2U_ShiftTo,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_posX, Bin2 } = read_float( Bin1 ),
	{ V_posY, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_ShiftTo {
		code = V_code,
		posX = V_posX,
		posY = V_posY
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_ShowAction
decode(?GS2U_ShowAction,Bin0) ->
	{ V_playerCode, Bin1 } = read_uint64( Bin0 ),
	{ V_actionIndex, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_ShowAction {
		playerCode = V_playerCode,
		actionIndex = V_actionIndex
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_SpecificEvent_Sync
decode(?GS2U_SpecificEvent_Sync,Bin0) ->
	{ V_eventID, Bin1 } = read_uint32( Bin0 ),
	{ V_initOrSettle, Bin2 } = read_bool( Bin1 ),
	{ V_scheduleID, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_SpecificEvent_Sync {
		eventID = V_eventID,
		initOrSettle = V_initOrSettle,
		scheduleID = V_scheduleID
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_StopMove
decode(?GS2U_StopMove,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_posX, Bin2 } = read_float( Bin1 ),
	{ V_posY, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_StopMove {
		code = V_code,
		posX = V_posX,
		posY = V_posY
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_StopTheAwakeBuffRet
decode(?GS2U_StopTheAwakeBuffRet,Bin0) ->
	{ #pk_GS2U_StopTheAwakeBuffRet {

		},
	Bin0 };

%GENERATED from file:player.h => GS2U_SyncServerTime
decode(?GS2U_SyncServerTime,Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_SyncServerTime {
		time = V_time
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_TaskUseItemList
decode(?GS2U_TaskUseItemList,Bin0) ->
	{ V_useItemlist, Bin1 } = read_array(Bin0, fun(X) -> decode_TaskUseItem( X ) end),
	{ #pk_GS2U_TaskUseItemList {
		useItemlist = V_useItemlist
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_TheAwakeBuffInfo
decode(?GS2U_TheAwakeBuffInfo,Bin0) ->
	{ V_buffID, Bin1 } = read_uint32( Bin0 ),
	{ V_curstatus, Bin2 } = read_uint8( Bin1 ),
	{ V_lefttime, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_TheAwakeBuffInfo {
		buffID = V_buffID,
		curstatus = V_curstatus,
		lefttime = V_lefttime
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_ThirtyDayLoginGiftState_Sync
decode(?GS2U_ThirtyDayLoginGiftState_Sync,Bin0) ->
	{ V_timeBegin, Bin1 } = read_uint32( Bin0 ),
	{ V_alreadyReward, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_ThirtyDayLoginGiftState_Sync {
		timeBegin = V_timeBegin,
		alreadyReward = V_alreadyReward
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_ThirtyDayLoginGift_Ack
decode(?GS2U_ThirtyDayLoginGift_Ack,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_ThirtyDayLoginGift_Ack {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_TipsError
decode(?GS2U_TipsError,Bin0) ->
	{ V_errorCode, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_TipsError {
		errorCode = V_errorCode
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_TipsString
decode(?GS2U_TipsString,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_tips, Bin2 } = read_string( Bin1 ),
	{ V_params, Bin3 } = read_array(Bin2, fun(X) -> read_string( X ) end),
	{ #pk_GS2U_TipsString {
		type = V_type,
		tips = V_tips,
		params = V_params
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_TransferNewPos
decode(?GS2U_TransferNewPos,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_pos, Bin2 } = decode_PosInfo( Bin1 ),
	{ #pk_GS2U_TransferNewPos {
		code = V_code,
		pos = V_pos
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_UserPlayerList
decode(?GS2U_UserPlayerList,Bin0) ->
	{ V_unlockNewRace, Bin1 } = read_int32( Bin0 ),
	{ V_info, Bin2 } = read_array(Bin1, fun(X) -> decode_UserPlayerData( X ) end),
	{ #pk_GS2U_UserPlayerList {
		unlockNewRace = V_unlockNewRace,
		info = V_info
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_WingRise
decode(?GS2U_WingRise,Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_expChange, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_WingRise {
		itemID = V_itemID,
		expChange = V_expChange
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_WorldBossBuyBuff
decode(?GS2U_WorldBossBuyBuff,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_WorldBossBuyBuff {
		type = V_type
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_XmlNoticeResponse
decode(?GS2U_XmlNoticeResponse,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_ret, Bin2 } = read_uint8( Bin1 ),
	{ V_content, Bin3 } = read_string( Bin2 ),
	{ V_sign, Bin4 } = read_string( Bin3 ),
	{ #pk_GS2U_XmlNoticeResponse {
		type = V_type,
		ret = V_ret,
		content = V_content,
		sign = V_sign
		},
	Bin4 };

%GENERATED from file:player.h => GS2U_action_point_info
decode(?GS2U_action_point_info,Bin0) ->
	{ V_value, Bin1 } = read_uint32( Bin0 ),
	{ V_lastUpdateUtcTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_action_point_info {
		value = V_value,
		lastUpdateUtcTime = V_lastUpdateUtcTime
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_copy_map_destory_time
decode(?GS2U_copy_map_destory_time,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint32( Bin0 ),
	{ V_destoryTime, Bin2 } = read_uint64( Bin1 ),
	{ V_waitTime, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_copy_map_destory_time {
		copyMapID = V_copyMapID,
		destoryTime = V_destoryTime,
		waitTime = V_waitTime
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_lottery_award_items
decode(?GS2U_lottery_award_items,Bin0) ->
	{ V_award_item_list, Bin1 } = read_array(Bin0, fun(X) -> decode_lottery_award_item_info( X ) end),
	{ V_award_item_list_sp, Bin2 } = read_array(Bin1, fun(X) -> decode_lottery_award_item_info( X ) end),
	{ #pk_GS2U_lottery_award_items {
		award_item_list = V_award_item_list,
		award_item_list_sp = V_award_item_list_sp
		},
	Bin2 };

%GENERATED from file:player.h => GS2U_lottery_sys_info
decode(?GS2U_lottery_sys_info,Bin0) ->
	{ V_goblin_lottery_last_free_times, Bin1 } = read_int16( Bin0 ),
	{ V_goblin_lottery_free_cd, Bin2 } = read_uint32( Bin1 ),
	{ V_treasure_lottery_last_free_times, Bin3 } = read_uint32( Bin2 ),
	{ V_treasure_lottery_free_cd, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_lottery_sys_info {
		goblin_lottery_last_free_times = V_goblin_lottery_last_free_times,
		goblin_lottery_free_cd = V_goblin_lottery_free_cd,
		treasure_lottery_last_free_times = V_treasure_lottery_last_free_times,
		treasure_lottery_free_cd = V_treasure_lottery_free_cd
		},
	Bin4 };

%GENERATED from file:player.h => GS2U_lsbattlefield_award_list
decode(?GS2U_lsbattlefield_award_list,Bin0) ->
	{ V_index, Bin1 } = read_uint32( Bin0 ),
	{ V_award_list, Bin2 } = read_array(Bin1, fun(X) -> decode_lsbattlefield_award( X ) end),
	{ V_coinType, Bin3 } = read_uint32( Bin2 ),
	{ V_coinValue, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GS2U_lsbattlefield_award_list {
		index = V_index,
		award_list = V_award_list,
		coinType = V_coinType,
		coinValue = V_coinValue
		},
	Bin4 };

%GENERATED from file:player.h => GS2U_lsbattlefield_rank_list
decode(?GS2U_lsbattlefield_rank_list,Bin0) ->
	{ V_rank_list, Bin1 } = read_array(Bin0, fun(X) -> decode_lsbattlefield_rank( X ) end),
	{ #pk_GS2U_lsbattlefield_rank_list {
		rank_list = V_rank_list
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_monsterChange
decode(?GS2U_monsterChange,Bin0) ->
	{ V_number, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_monsterChange {
		number = V_number
		},
	Bin1 };

%GENERATED from file:player.h => GS2U_returnFriendPos
decode(?GS2U_returnFriendPos,Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_returnFriendPos {
		mapID = V_mapID,
		x = V_x,
		y = V_y
		},
	Bin3 };

%GENERATED from file:player.h => GS2U_synch_lsbattlefield_state
decode(?GS2U_synch_lsbattlefield_state,Bin0) ->
	{ V_state, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_synch_lsbattlefield_state {
		state = V_state
		},
	Bin1 };

%GENERATED from file:player.h => GetPlayerOnlineReward
decode(?GetPlayerOnlineReward,Bin0) ->
	{ V_timeID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GetPlayerOnlineReward {
		timeID = V_timeID
		},
	Bin1 };

%GENERATED from file:player.h => PlayerLevelReward
decode(?PlayerLevelReward,Bin0) ->
	{ V_receiveRewardLevel, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_PlayerLevelReward {
		receiveRewardLevel = V_receiveRewardLevel
		},
	Bin1 };

%GENERATED from file:player.h => U2GS2U_RaceAutoMatch
decode(?U2GS2U_RaceAutoMatch,Bin0) ->
	{ V_autoMatch, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS2U_RaceAutoMatch {
		autoMatch = V_autoMatch
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_AcceptHolidayTask
decode(?U2GS_AcceptHolidayTask,Bin0) ->
	{ #pk_U2GS_AcceptHolidayTask {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_ActiveCodeRequest
decode(?U2GS_ActiveCodeRequest,Bin0) ->
	{ V_code, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_ActiveCodeRequest {
		code = V_code
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_AliveApply_Request
decode(?U2GS_AliveApply_Request,Bin0) ->
	{ #pk_U2GS_AliveApply_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_AliveCancel_Request
decode(?U2GS_AliveCancel_Request,Bin0) ->
	{ #pk_U2GS_AliveCancel_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_AliveEnterSafeArea_Request
decode(?U2GS_AliveEnterSafeArea_Request,Bin0) ->
	{ #pk_U2GS_AliveEnterSafeArea_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_BusinessCashDailyGift_Request
decode(?U2GS_BusinessCashDailyGift_Request,Bin0) ->
	{ #pk_U2GS_BusinessCashDailyGift_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_BusinessSupperGift_Request
decode(?U2GS_BusinessSupperGift_Request,Bin0) ->
	{ #pk_U2GS_BusinessSupperGift_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_Buy4System
decode(?U2GS_Buy4System,Bin0) ->
	{ V_costID, Bin1 } = read_uint32( Bin0 ),
	{ V_number, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_Buy4System {
		costID = V_costID,
		number = V_number
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_BuyLimitSales
decode(?U2GS_BuyLimitSales,Bin0) ->
	{ V_sku, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_BuyLimitSales {
		sku = V_sku
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ChangeCarrer
decode(?U2GS_ChangeCarrer,Bin0) ->
	{ V_newCareer, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_ChangeCarrer {
		newCareer = V_newCareer
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ChangeLineLoginRequest
decode(?U2GS_ChangeLineLoginRequest,Bin0) ->
	{ V_accountID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_key, Bin3 } = read_string( Bin2 ),
	{ V_protocolVer, Bin4 } = read_int32( Bin3 ),
	{ #pk_U2GS_ChangeLineLoginRequest {
		accountID = V_accountID,
		roleID = V_roleID,
		key = V_key,
		protocolVer = V_protocolVer
		},
	Bin4 };

%GENERATED from file:player.h => U2GS_ChangeLineRequest
decode(?U2GS_ChangeLineRequest,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_ChangeLineRequest {
		type = V_type
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ChangeLineRequestAck
decode(?U2GS_ChangeLineRequestAck,Bin0) ->
	{ V_yes, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_ChangeLineRequestAck {
		yes = V_yes
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ChangeName
decode(?U2GS_ChangeName,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_ChangeName {
		roleID = V_roleID,
		name = V_name
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_ChangeWingLevel
decode(?U2GS_ChangeWingLevel,Bin0) ->
	{ V_level, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_ChangeWingLevel {
		level = V_level
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ChatInfo
decode(?U2GS_ChatInfo,Bin0) ->
	{ V_channel, Bin1 } = read_int8( Bin0 ),
	{ V_receiverID, Bin2 } = read_uint64( Bin1 ),
	{ V_receiverName, Bin3 } = read_string( Bin2 ),
	{ V_content, Bin4 } = read_string( Bin3 ),
	{ #pk_U2GS_ChatInfo {
		channel = V_channel,
		receiverID = V_receiverID,
		receiverName = V_receiverName,
		content = V_content
		},
	Bin4 };

%GENERATED from file:player.h => U2GS_ChatVoice
decode(?U2GS_ChatVoice,Bin0) ->
	{ V_count, Bin1 } = read_uint8( Bin0 ),
	{ V_index, Bin2 } = read_uint8( Bin1 ),
	{ V_playerID, Bin3 } = read_uint64( Bin2 ),
	{ V_key, Bin4 } = read_uint32( Bin3 ),
	{ V_channel, Bin5 } = read_int8( Bin4 ),
	{ V_data, Bin6 } = read_array(Bin5, fun(X) -> read_uint8( X ) end),
	{ #pk_U2GS_ChatVoice {
		count = V_count,
		index = V_index,
		playerID = V_playerID,
		key = V_key,
		channel = V_channel,
		data = V_data
		},
	Bin6 };

%GENERATED from file:player.h => U2GS_CommonditiesPush
decode(?U2GS_CommonditiesPush,Bin0) ->
	{ #pk_U2GS_CommonditiesPush {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_CopyChat
decode(?U2GS_CopyChat,Bin0) ->
	{ #pk_U2GS_CopyChat {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_DashTo
decode(?U2GS_DashTo,Bin0) ->
	{ V_posX, Bin1 } = read_float( Bin0 ),
	{ V_posY, Bin2 } = read_float( Bin1 ),
	{ #pk_U2GS_DashTo {
		posX = V_posX,
		posY = V_posY
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_DigTransferMap
decode(?U2GS_DigTransferMap,Bin0) ->
	{ V_mapId, Bin1 } = read_uint32( Bin0 ),
	{ V_waypointName, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_DigTransferMap {
		mapId = V_mapId,
		waypointName = V_waypointName
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_EnterActiveMap
decode(?U2GS_EnterActiveMap,Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ V_activeID, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_EnterActiveMap {
		npcCode = V_npcCode,
		activeID = V_activeID
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_EnterCopyMap
decode(?U2GS_EnterCopyMap,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_EnterCopyMap {
		copyMapID = V_copyMapID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_EnteredMap
decode(?U2GS_EnteredMap,Bin0) ->
	{ #pk_U2GS_EnteredMap {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_EqupmentCombin
decode(?U2GS_EqupmentCombin,Bin0) ->
	{ V_combinID, Bin1 } = read_uint32( Bin0 ),
	{ V_combinNum, Bin2 } = read_uint32( Bin1 ),
	{ V_equpmentUIDList, Bin3 } = read_array(Bin2, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_EqupmentCombin {
		combinID = V_combinID,
		combinNum = V_combinNum,
		equpmentUIDList = V_equpmentUIDList
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_EveryDayGetPower
decode(?U2GS_EveryDayGetPower,Bin0) ->
	{ V_getPowerNoonOrNight, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_EveryDayGetPower {
		getPowerNoonOrNight = V_getPowerNoonOrNight
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ExpToVigour
decode(?U2GS_ExpToVigour,Bin0) ->
	{ V_useExpValue, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_ExpToVigour {
		useExpValue = V_useExpValue
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_GetLeavedExp
decode(?U2GS_GetLeavedExp,Bin0) ->
	{ V_getType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_GetLeavedExp {
		getType = V_getType
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_GetMapLevel
decode(?U2GS_GetMapLevel,Bin0) ->
	{ #pk_U2GS_GetMapLevel {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_GetQuestionnaireSurveyAward
decode(?U2GS_GetQuestionnaireSurveyAward,Bin0) ->
	{ #pk_U2GS_GetQuestionnaireSurveyAward {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_GetUpdateReward
decode(?U2GS_GetUpdateReward,Bin0) ->
	{ V_count, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_GetUpdateReward {
		count = V_count
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_GetVipReward
decode(?U2GS_GetVipReward,Bin0) ->
	{ V_vipLevel, Bin1 } = read_int16( Bin0 ),
	{ #pk_U2GS_GetVipReward {
		vipLevel = V_vipLevel
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_GoToExpMap
decode(?U2GS_GoToExpMap,Bin0) ->
	{ #pk_U2GS_GoToExpMap {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_HeartBeat
decode(?U2GS_HeartBeat,Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_version, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_HeartBeat {
		time = V_time,
		version = V_version
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_HeartBeatReal
decode(?U2GS_HeartBeatReal,Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_HeartBeatReal {
		time = V_time
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_HisoryForce_Request
decode(?U2GS_HisoryForce_Request,Bin0) ->
	{ #pk_U2GS_HisoryForce_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_Join_lsbattlefield
decode(?U2GS_Join_lsbattlefield,Bin0) ->
	{ #pk_U2GS_Join_lsbattlefield {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_KillValueRequest
decode(?U2GS_KillValueRequest,Bin0) ->
	{ #pk_U2GS_KillValueRequest {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_LBS_BesideRole_Request
decode(?U2GS_LBS_BesideRole_Request,Bin0) ->
	{ V_lat, Bin1 } = read_float( Bin0 ),
	{ V_lng, Bin2 } = read_float( Bin1 ),
	{ V_dist, Bin3 } = read_float( Bin2 ),
	{ #pk_U2GS_LBS_BesideRole_Request {
		lat = V_lat,
		lng = V_lng,
		dist = V_dist
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_LBS_Request
decode(?U2GS_LBS_Request,Bin0) ->
	{ V_lat, Bin1 } = read_float( Bin0 ),
	{ V_lng, Bin2 } = read_float( Bin1 ),
	{ #pk_U2GS_LBS_Request {
		lat = V_lat,
		lng = V_lng
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_LeaveCopyMap
decode(?U2GS_LeaveCopyMap,Bin0) ->
	{ V_type, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_LeaveCopyMap {
		type = V_type
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_LoadedMap
decode(?U2GS_LoadedMap,Bin0) ->
	{ #pk_U2GS_LoadedMap {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_LotteryForTowerInfo
decode(?U2GS_LotteryForTowerInfo,Bin0) ->
	{ #pk_U2GS_LotteryForTowerInfo {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_LotteryForTowerRandonAward
decode(?U2GS_LotteryForTowerRandonAward,Bin0) ->
	{ V_randomNumber, Bin1 } = read_uint32( Bin0 ),
	{ V_isShowPanel, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_LotteryForTowerRandonAward {
		randomNumber = V_randomNumber,
		isShowPanel = V_isShowPanel
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_MoneyTree
decode(?U2GS_MoneyTree,Bin0) ->
	{ #pk_U2GS_MoneyTree {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_MonsterBookReward_Request
decode(?U2GS_MonsterBookReward_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_MonsterBookReward_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_MonsterBookSnap_Request
decode(?U2GS_MonsterBookSnap_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_MonsterBookSnap_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_MonsterBookUnlock_Request
decode(?U2GS_MonsterBookUnlock_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_MonsterBookUnlock_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_MonsterBook_Request
decode(?U2GS_MonsterBook_Request,Bin0) ->
	{ #pk_U2GS_MonsterBook_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_MonthCardGettingEvent
decode(?U2GS_MonthCardGettingEvent,Bin0) ->
	{ V_type, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_MonthCardGettingEvent {
		type = V_type
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_MoveTo
decode(?U2GS_MoveTo,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_posX, Bin2 } = read_float( Bin1 ),
	{ V_posY, Bin3 } = read_float( Bin2 ),
	{ V_posInfos, Bin4 } = read_array(Bin3, fun(X) -> decode_PosInfo( X ) end),
	{ #pk_U2GS_MoveTo {
		code = V_code,
		posX = V_posX,
		posY = V_posY,
		posInfos = V_posInfos
		},
	Bin4 };

%GENERATED from file:player.h => U2GS_NoticeRequest
decode(?U2GS_NoticeRequest,Bin0) ->
	{ V_md5, Bin1 } = read_string( Bin0 ),
	{ #pk_U2GS_NoticeRequest {
		md5 = V_md5
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_PlayerAwakenUseItem
decode(?U2GS_PlayerAwakenUseItem,Bin0) ->
	{ V_num, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_PlayerAwakenUseItem {
		num = V_num
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_PlayerCoupleBack
decode(?U2GS_PlayerCoupleBack,Bin0) ->
	{ V_cbType, Bin1 } = read_uint32( Bin0 ),
	{ V_cbContent, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_PlayerCoupleBack {
		cbType = V_cbType,
		cbContent = V_cbContent
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_PlotDialogueEnd
decode(?U2GS_PlotDialogueEnd,Bin0) ->
	{ #pk_U2GS_PlotDialogueEnd {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_QueryTargetObject
decode(?U2GS_QueryTargetObject,Bin0) ->
	{ V_targetCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_QueryTargetObject {
		targetCode = V_targetCode
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RaceApply
decode(?U2GS_RaceApply,Bin0) ->
	{ #pk_U2GS_RaceApply {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RaceApply_Request
decode(?U2GS_RaceApply_Request,Bin0) ->
	{ #pk_U2GS_RaceApply_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RaceCancel
decode(?U2GS_RaceCancel,Bin0) ->
	{ #pk_U2GS_RaceCancel {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RaceCancel_Request
decode(?U2GS_RaceCancel_Request,Bin0) ->
	{ #pk_U2GS_RaceCancel_Request {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RaceInviteList
decode(?U2GS_RaceInviteList,Bin0) ->
	{ #pk_U2GS_RaceInviteList {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RaceInvite_A2S
decode(?U2GS_RaceInvite_A2S,Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RaceInvite_A2S {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RaceInvite_B2S
decode(?U2GS_RaceInvite_B2S,Bin0) ->
	{ V_isAgree, Bin1 } = read_bool( Bin0 ),
	{ V_id, Bin2 } = read_uint64( Bin1 ),
	{ V_petID, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_RaceInvite_B2S {
		isAgree = V_isAgree,
		id = V_id,
		petID = V_petID
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_RaceMapItem_Request
decode(?U2GS_RaceMapItem_Request,Bin0) ->
	{ V_itemID, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RaceMapItem_Request {
		itemID = V_itemID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RaceSelectPet
decode(?U2GS_RaceSelectPet,Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_RaceSelectPet {
		petID = V_petID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RecClientEvent
decode(?U2GS_RecClientEvent,Bin0) ->
	{ V_eventID, Bin1 } = read_uint32( Bin0 ),
	{ V_eventTime, Bin2 } = read_uint32( Bin1 ),
	{ V_eventArgs, Bin3 } = read_string( Bin2 ),
	{ #pk_U2GS_RecClientEvent {
		eventID = V_eventID,
		eventTime = V_eventTime,
		eventArgs = V_eventArgs
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_ReceivePlayerLevelReward
decode(?U2GS_ReceivePlayerLevelReward,Bin0) ->
	{ V_level, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_ReceivePlayerLevelReward {
		level = V_level
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RechargeGettingEvent
decode(?U2GS_RechargeGettingEvent,Bin0) ->
	{ V_type, Bin1 } = read_uint32( Bin0 ),
	{ V_grade, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_RechargeGettingEvent {
		type = V_type,
		grade = V_grade
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_ReconnectLoginRequest
decode(?U2GS_ReconnectLoginRequest,Bin0) ->
	{ V_accountID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_key, Bin3 } = read_string( Bin2 ),
	{ V_protocolVer, Bin4 } = read_int32( Bin3 ),
	{ #pk_U2GS_ReconnectLoginRequest {
		accountID = V_accountID,
		roleID = V_roleID,
		key = V_key,
		protocolVer = V_protocolVer
		},
	Bin4 };

%GENERATED from file:player.h => U2GS_RenewChangeCarrer
decode(?U2GS_RenewChangeCarrer,Bin0) ->
	{ V_newCareer, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RenewChangeCarrer {
		newCareer = V_newCareer
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ReqChatVoice
decode(?U2GS_ReqChatVoice,Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_key, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_ReqChatVoice {
		playerID = V_playerID,
		key = V_key
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_RequestCreatePlayer
decode(?U2GS_RequestCreatePlayer,Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ V_camp, Bin2 } = read_int8( Bin1 ),
	{ V_career, Bin3 } = read_uint32( Bin2 ),
	{ V_race, Bin4 } = read_int8( Bin3 ),
	{ V_sex, Bin5 } = read_int8( Bin4 ),
	{ V_head, Bin6 } = read_int32( Bin5 ),
	{ #pk_U2GS_RequestCreatePlayer {
		name = V_name,
		camp = V_camp,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head
		},
	Bin6 };

%GENERATED from file:player.h => U2GS_RequestDeletePlayer
decode(?U2GS_RequestDeletePlayer,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RequestDeletePlayer {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RequestEnterMapLine
decode(?U2GS_RequestEnterMapLine,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_lineID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_RequestEnterMapLine {
		mapID = V_mapID,
		lineID = V_lineID
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_RequestGoddessCode
decode(?U2GS_RequestGoddessCode,Bin0) ->
	{ #pk_U2GS_RequestGoddessCode {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RequestLogin
decode(?U2GS_RequestLogin,Bin0) ->
	{ V_accountID, Bin1 } = read_uint64( Bin0 ),
	{ V_key, Bin2 } = read_string( Bin1 ),
	{ V_protocolVer, Bin3 } = read_int32( Bin2 ),
	{ #pk_U2GS_RequestLogin {
		accountID = V_accountID,
		key = V_key,
		protocolVer = V_protocolVer
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_RequestMapLineList
decode(?U2GS_RequestMapLineList,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_RequestMapLineList {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RequestObjInfo
decode(?U2GS_RequestObjInfo,Bin0) ->
	{ V_obj_type, Bin1 } = read_int8( Bin0 ),
	{ V_codes, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_RequestObjInfo {
		obj_type = V_obj_type,
		codes = V_codes
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_RequestRecharge
decode(?U2GS_RequestRecharge,Bin0) ->
	{ V_funcellAccessToken, Bin1 } = read_string( Bin0 ),
	{ V_funcellCilentID, Bin2 } = read_string( Bin1 ),
	{ V_funcellOrderID, Bin3 } = read_string( Bin2 ),
	{ V_extArgs, Bin4 } = read_string( Bin3 ),
	{ #pk_U2GS_RequestRecharge {
		funcellAccessToken = V_funcellAccessToken,
		funcellCilentID = V_funcellCilentID,
		funcellOrderID = V_funcellOrderID,
		extArgs = V_extArgs
		},
	Bin4 };

%GENERATED from file:player.h => U2GS_RequestRechargeHasGiftIDList
decode(?U2GS_RequestRechargeHasGiftIDList,Bin0) ->
	{ #pk_U2GS_RequestRechargeHasGiftIDList {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RequestRevive
decode(?U2GS_RequestRevive,Bin0) ->
	{ V_reviveType, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestRevive {
		reviveType = V_reviveType
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_RequestTargetCopyMapScore
decode(?U2GS_RequestTargetCopyMapScore,Bin0) ->
	{ V_targetCopyMapID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestTargetCopyMapScore {
		targetCopyMapID = V_targetCopyMapID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ResetCopyMap
decode(?U2GS_ResetCopyMap,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ResetCopyMap {
		copyMapID = V_copyMapID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ResetPosToRevivePt
decode(?U2GS_ResetPosToRevivePt,Bin0) ->
	{ #pk_U2GS_ResetPosToRevivePt {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_ResetRoleAwake
decode(?U2GS_ResetRoleAwake,Bin0) ->
	{ #pk_U2GS_ResetRoleAwake {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_RoleAwakeing
decode(?U2GS_RoleAwakeing,Bin0) ->
	{ V_stage, Bin1 } = read_uint8( Bin0 ),
	{ V_stone, Bin2 } = read_uint8( Bin1 ),
	{ V_awakeParam, Bin3 } = read_uint32( Bin2 ),
	{ #pk_U2GS_RoleAwakeing {
		stage = V_stage,
		stone = V_stone,
		awakeParam = V_awakeParam
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_SelPlayerEnterGame
decode(?U2GS_SelPlayerEnterGame,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_SelPlayerEnterGame {
		roleID = V_roleID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_SelectTarget
decode(?U2GS_SelectTarget,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_SelectTarget {
		code = V_code
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_SessionKeyAck
decode(?U2GS_SessionKeyAck,Bin0) ->
	{ V_oldKey, Bin1 } = read_string( Bin0 ),
	{ V_newKey, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_SessionKeyAck {
		oldKey = V_oldKey,
		newKey = V_newKey
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_SevenDayAimReward_Request
decode(?U2GS_SevenDayAimReward_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_SevenDayAimReward_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ShowAction
decode(?U2GS_ShowAction,Bin0) ->
	{ V_actionIndex, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_ShowAction {
		actionIndex = V_actionIndex
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_ShowHeadEmoticonIcon
decode(?U2GS_ShowHeadEmoticonIcon,Bin0) ->
	{ V_iconIndex, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_ShowHeadEmoticonIcon {
		iconIndex = V_iconIndex
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_StartMeditation
decode(?U2GS_StartMeditation,Bin0) ->
	{ V_istart, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_StartMeditation {
		istart = V_istart
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_StopMove
decode(?U2GS_StopMove,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_posX, Bin2 } = read_float( Bin1 ),
	{ V_posY, Bin3 } = read_float( Bin2 ),
	{ #pk_U2GS_StopMove {
		code = V_code,
		posX = V_posX,
		posY = V_posY
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_StopTheAwakeBuff
decode(?U2GS_StopTheAwakeBuff,Bin0) ->
	{ #pk_U2GS_StopTheAwakeBuff {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_Telesport
decode(?U2GS_Telesport,Bin0) ->
	{ V_x, Bin1 } = read_float( Bin0 ),
	{ V_y, Bin2 } = read_float( Bin1 ),
	{ #pk_U2GS_Telesport {
		x = V_x,
		y = V_y
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_ThirtyDayLoginGift_Request
decode(?U2GS_ThirtyDayLoginGift_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_ThirtyDayLoginGift_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_Transfer2NewPos
decode(?U2GS_Transfer2NewPos,Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ #pk_U2GS_Transfer2NewPos {
		mapID = V_mapID,
		x = V_x,
		y = V_y
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_TransferMap
decode(?U2GS_TransferMap,Bin0) ->
	{ V_mapId, Bin1 } = read_uint32( Bin0 ),
	{ V_waypointName, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_TransferMap {
		mapId = V_mapId,
		waypointName = V_waypointName
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_UseTheAwakeBuff
decode(?U2GS_UseTheAwakeBuff,Bin0) ->
	{ #pk_U2GS_UseTheAwakeBuff {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_WingRise
decode(?U2GS_WingRise,Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint32( Bin1 ),
	{ V_firstBind, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_WingRise {
		itemID = V_itemID,
		itemNum = V_itemNum,
		firstBind = V_firstBind
		},
	Bin3 };

%GENERATED from file:player.h => U2GS_WingRiseOneTouch
decode(?U2GS_WingRiseOneTouch,Bin0) ->
	{ #pk_U2GS_WingRiseOneTouch {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_XmlNoticeRequest
decode(?U2GS_XmlNoticeRequest,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_sign, Bin2 } = read_string( Bin1 ),
	{ #pk_U2GS_XmlNoticeRequest {
		type = V_type,
		sign = V_sign
		},
	Bin2 };

%GENERATED from file:player.h => U2GS_buy_action_count
decode(?U2GS_buy_action_count,Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_buy_action_count {
		copyMapID = V_copyMapID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_buy_action_point
decode(?U2GS_buy_action_point,Bin0) ->
	{ #pk_U2GS_buy_action_point {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_getFriendPos
decode(?U2GS_getFriendPos,Bin0) ->
	{ V_friendID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_getFriendPos {
		friendID = V_friendID
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_get_action_point_info
decode(?U2GS_get_action_point_info,Bin0) ->
	{ #pk_U2GS_get_action_point_info {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_get_copy_map_destory_time
decode(?U2GS_get_copy_map_destory_time,Bin0) ->
	{ #pk_U2GS_get_copy_map_destory_time {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_get_lottery_sys_info
decode(?U2GS_get_lottery_sys_info,Bin0) ->
	{ #pk_U2GS_get_lottery_sys_info {

		},
	Bin0 };

%GENERATED from file:player.h => U2GS_lottery_start
decode(?U2GS_lottery_start,Bin0) ->
	{ V_type, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_lottery_start {
		type = V_type
		},
	Bin1 };

%GENERATED from file:player.h => U2GS_save_current_guide_id
decode(?U2GS_save_current_guide_id,Bin0) ->
	{ V_guideID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_save_current_guide_id {
		guideID = V_guideID
		},
	Bin1 };

%GENERATED from file:player2.h => GS2U_GetPlayerInitDataEnd
decode(?GS2U_GetPlayerInitDataEnd,Bin0) ->
	{ #pk_GS2U_GetPlayerInitDataEnd {

		},
	Bin0 };

%GENERATED from file:player2.h => GS2U_GotoNewMap
decode(?GS2U_GotoNewMap,Bin0) ->
	{ V_map_id, Bin1 } = read_uint16( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_GotoNewMap {
		map_id = V_map_id,
		x = V_x,
		y = V_y
		},
	Bin3 };

%GENERATED from file:player2.h => GS2U_HearBeat
decode(?GS2U_HearBeat,Bin0) ->
	{ V_now, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_HearBeat {
		now = V_now
		},
	Bin1 };

%GENERATED from file:player2.h => GS2U_KickByServer
decode(?GS2U_KickByServer,Bin0) ->
	{ V_reason, Bin1 } = read_string( Bin0 ),
	{ #pk_GS2U_KickByServer {
		reason = V_reason
		},
	Bin1 };

%GENERATED from file:player2.h => GS2U_PlayerInitBase
decode(?GS2U_PlayerInitBase,Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_int32( Bin2 ),
	{ V_camp, Bin4 } = read_int32( Bin3 ),
	{ V_race, Bin5 } = read_int32( Bin4 ),
	{ V_career, Bin6 } = read_uint32( Bin5 ),
	{ V_sex, Bin7 } = read_int32( Bin6 ),
	{ V_head, Bin8 } = read_int32( Bin7 ),
	{ V_mapID, Bin9 } = read_uint32( Bin8 ),
	{ V_combat_props, Bin10 } = read_array(Bin9, fun(X) -> read_int32( X ) end),
	{ V_skill_list, Bin11 } = read_array(Bin10, fun(X) -> decode_SkillInfo( X ) end),
	{ #pk_GS2U_PlayerInitBase {
		uid = V_uid,
		name = V_name,
		level = V_level,
		camp = V_camp,
		race = V_race,
		career = V_career,
		sex = V_sex,
		head = V_head,
		mapID = V_mapID,
		combat_props = V_combat_props,
		skill_list = V_skill_list
		},
	Bin11 };

%GENERATED from file:player2.h => GS2U_RemoteMonster
decode(?GS2U_RemoteMonster,Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_did, Bin2 } = read_uint32( Bin1 ),
	{ V_level, Bin3 } = read_int32( Bin2 ),
	{ V_hp_percent, Bin4 } = read_int32( Bin3 ),
	{ V_cur_x, Bin5 } = read_float( Bin4 ),
	{ V_cur_y, Bin6 } = read_float( Bin5 ),
	{ #pk_GS2U_RemoteMonster {
		uid = V_uid,
		did = V_did,
		level = V_level,
		hp_percent = V_hp_percent,
		cur_x = V_cur_x,
		cur_y = V_cur_y
		},
	Bin6 };

%GENERATED from file:player2.h => GS2U_RemoteNpc
decode(?GS2U_RemoteNpc,Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_did, Bin2 } = read_uint32( Bin1 ),
	{ V_level, Bin3 } = read_int32( Bin2 ),
	{ V_cur_x, Bin4 } = read_float( Bin3 ),
	{ V_cur_y, Bin5 } = read_float( Bin4 ),
	{ #pk_GS2U_RemoteNpc {
		uid = V_uid,
		did = V_did,
		level = V_level,
		cur_x = V_cur_x,
		cur_y = V_cur_y
		},
	Bin5 };

%GENERATED from file:player2.h => GS2U_RemotePet
decode(?GS2U_RemotePet,Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_owner, Bin2 } = read_uint64( Bin1 ),
	{ V_did, Bin3 } = read_uint32( Bin2 ),
	{ V_level, Bin4 } = read_int32( Bin3 ),
	{ V_cur_x, Bin5 } = read_float( Bin4 ),
	{ V_cur_y, Bin6 } = read_float( Bin5 ),
	{ #pk_GS2U_RemotePet {
		uid = V_uid,
		owner = V_owner,
		did = V_did,
		level = V_level,
		cur_x = V_cur_x,
		cur_y = V_cur_y
		},
	Bin6 };

%GENERATED from file:player2.h => GS2U_RemotePlayer
decode(?GS2U_RemotePlayer,Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_int32( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_career, Bin4 } = read_int32( Bin3 ),
	{ V_race, Bin5 } = read_int32( Bin4 ),
	{ V_hp_percent, Bin6 } = read_int32( Bin5 ),
	{ V_cur_x, Bin7 } = read_float( Bin6 ),
	{ V_cur_y, Bin8 } = read_float( Bin7 ),
	{ #pk_GS2U_RemotePlayer {
		uid = V_uid,
		level = V_level,
		name = V_name,
		career = V_career,
		race = V_race,
		hp_percent = V_hp_percent,
		cur_x = V_cur_x,
		cur_y = V_cur_y
		},
	Bin8 };

%GENERATED from file:player2.h => GS2U_RemoveRemote
decode(?GS2U_RemoveRemote,Bin0) ->
	{ V_uid_list, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_RemoveRemote {
		uid_list = V_uid_list
		},
	Bin1 };

%GENERATED from file:player2.h => GS2U_SyncStand
decode(?GS2U_SyncStand,Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_cur_x, Bin2 } = read_float( Bin1 ),
	{ V_cur_y, Bin3 } = read_float( Bin2 ),
	{ #pk_GS2U_SyncStand {
		uid = V_uid,
		cur_x = V_cur_x,
		cur_y = V_cur_y
		},
	Bin3 };

%GENERATED from file:player2.h => GS2U_SyncWalk
decode(?GS2U_SyncWalk,Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_src_x, Bin2 } = read_float( Bin1 ),
	{ V_src_y, Bin3 } = read_float( Bin2 ),
	{ V_dst_x, Bin4 } = read_float( Bin3 ),
	{ V_dst_y, Bin5 } = read_float( Bin4 ),
	{ V_move_time, Bin6 } = read_int32( Bin5 ),
	{ V_speed, Bin7 } = read_float( Bin6 ),
	{ #pk_GS2U_SyncWalk {
		uid = V_uid,
		src_x = V_src_x,
		src_y = V_src_y,
		dst_x = V_dst_x,
		dst_y = V_dst_y,
		move_time = V_move_time,
		speed = V_speed
		},
	Bin7 };

%GENERATED from file:player2.h => U2GS_ChangeMap
decode(?U2GS_ChangeMap,Bin0) ->
	{ V_map_id, Bin1 } = read_uint32( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ #pk_U2GS_ChangeMap {
		map_id = V_map_id,
		x = V_x,
		y = V_y
		},
	Bin3 };

%GENERATED from file:player2.h => U2GS_ExitGame
decode(?U2GS_ExitGame,Bin0) ->
	{ #pk_U2GS_ExitGame {

		},
	Bin0 };

%GENERATED from file:player2.h => U2GS_GetPlayerInitData
decode(?U2GS_GetPlayerInitData,Bin0) ->
	{ #pk_U2GS_GetPlayerInitData {

		},
	Bin0 };

%GENERATED from file:player2.h => U2GS_GetRemoteObjInfo
decode(?U2GS_GetRemoteObjInfo,Bin0) ->
	{ V_uids, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_GetRemoteObjInfo {
		uids = V_uids
		},
	Bin1 };

%GENERATED from file:player2.h => U2GS_HearBeat
decode(?U2GS_HearBeat,Bin0) ->
	{ #pk_U2GS_HearBeat {

		},
	Bin0 };

%GENERATED from file:player2.h => U2GS_PlayerStopWalk
decode(?U2GS_PlayerStopWalk,Bin0) ->
	{ V_cur_x, Bin1 } = read_float( Bin0 ),
	{ V_cur_y, Bin2 } = read_float( Bin1 ),
	{ #pk_U2GS_PlayerStopWalk {
		cur_x = V_cur_x,
		cur_y = V_cur_y
		},
	Bin2 };

%GENERATED from file:player2.h => U2GS_PlayerWalk
decode(?U2GS_PlayerWalk,Bin0) ->
	{ V_dst_x, Bin1 } = read_float( Bin0 ),
	{ V_dst_y, Bin2 } = read_float( Bin1 ),
	{ V_speed, Bin3 } = read_float( Bin2 ),
	{ #pk_U2GS_PlayerWalk {
		dst_x = V_dst_x,
		dst_y = V_dst_y,
		speed = V_speed
		},
	Bin3 };

%GENERATED from file:rank.h => GS2U_ActivityMapRankData
decode(?GS2U_ActivityMapRankData,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_data, Bin2 } = read_array(Bin1, fun(X) -> decode_ActivityMapRankData( X ) end),
	{ #pk_GS2U_ActivityMapRankData {
		type = V_type,
		data = V_data
		},
	Bin2 };

%GENERATED from file:rank.h => GS2U_MyKillNumber
decode(?GS2U_MyKillNumber,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_killNumber, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_MyKillNumber {
		type = V_type,
		killNumber = V_killNumber
		},
	Bin2 };

%GENERATED from file:rank.h => GS2U_MyRankingAndDamage
decode(?GS2U_MyRankingAndDamage,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_ranking, Bin2 } = read_uint16( Bin1 ),
	{ V_damage, Bin3 } = read_uint64( Bin2 ),
	{ #pk_GS2U_MyRankingAndDamage {
		type = V_type,
		ranking = V_ranking,
		damage = V_damage
		},
	Bin3 };

%GENERATED from file:rank.h => GS2U_RefreshRank
decode(?GS2U_RefreshRank,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_RefreshRank {
		type = V_type
		},
	Bin1 };

%GENERATED from file:rank.h => GS2U_SendCharmRankFirstData
decode(?GS2U_SendCharmRankFirstData,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_sb_type, Bin2 } = read_int8( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_playerForce, Bin4 } = read_uint64( Bin3 ),
	{ V_level, Bin5 } = read_int32( Bin4 ),
	{ V_charm, Bin6 } = read_uint32( Bin5 ),
	{ V_sign, Bin7 } = read_string( Bin6 ),
	{ V_guildName, Bin8 } = read_string( Bin7 ),
	{ #pk_GS2U_SendCharmRankFirstData {
		roleID = V_roleID,
		sb_type = V_sb_type,
		name = V_name,
		playerForce = V_playerForce,
		level = V_level,
		charm = V_charm,
		sign = V_sign,
		guildName = V_guildName
		},
	Bin8 };

%GENERATED from file:rank.h => GS2U_SendPropList
decode(?GS2U_SendPropList,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_playerCode, Bin2 } = read_uint64( Bin1 ),
	{ V_career, Bin3 } = read_uint32( Bin2 ),
	{ V_race, Bin4 } = read_int8( Bin3 ),
	{ V_sex, Bin5 } = read_int8( Bin4 ),
	{ V_head, Bin6 } = read_int32( Bin5 ),
	{ V_wingLevel, Bin7 } = read_int32( Bin6 ),
	{ V_fashionIDs, Bin8 } = read_array(Bin7, fun(X) -> read_int32( X ) end),
	{ V_equipIDList, Bin9 } = read_array(Bin8, fun(X) -> decode_PlayerEquip( X ) end),
	{ V_equipLevelList, Bin10 } = read_array(Bin9, fun(X) -> decode_PlayerEquipLevel( X ) end),
	{ #pk_GS2U_SendPropList {
		roleID = V_roleID,
		playerCode = V_playerCode,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		wingLevel = V_wingLevel,
		fashionIDs = V_fashionIDs,
		equipIDList = V_equipIDList,
		equipLevelList = V_equipLevelList
		},
	Bin10 };

%GENERATED from file:rank.h => GS2U_SendRank
decode(?GS2U_SendRank,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_datas, Bin2 } = read_array(Bin1, fun(X) -> decode_RankInfo( X ) end),
	{ #pk_GS2U_SendRank {
		type = V_type,
		datas = V_datas
		},
	Bin2 };

%GENERATED from file:rank.h => GS2U_SendRankModelData
decode(?GS2U_SendRankModelData,Bin0) ->
	{ V_playerRankMoldelList, Bin1 } = read_array(Bin0, fun(X) -> decode_RankModelData( X ) end),
	{ #pk_GS2U_SendRankModelData {
		playerRankMoldelList = V_playerRankMoldelList
		},
	Bin1 };

%GENERATED from file:rank.h => U2GS_RequestActivityMapRank
decode(?U2GS_RequestActivityMapRank,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestActivityMapRank {
		type = V_type
		},
	Bin1 };

%GENERATED from file:rank.h => U2GS_RequestPropList
decode(?U2GS_RequestPropList,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_RequestPropList {
		type = V_type,
		roleID = V_roleID
		},
	Bin2 };

%GENERATED from file:rank.h => U2GS_RequestRank
decode(?U2GS_RequestRank,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestRank {
		type = V_type
		},
	Bin1 };

%GENERATED from file:rank.h => U2GS_RequestRankAward
decode(?U2GS_RequestRankAward,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestRankAward {
		type = V_type
		},
	Bin1 };

%GENERATED from file:redenvelope.h => GS2U_RedEnvelopeHistoryAck
decode(?GS2U_RedEnvelopeHistoryAck,Bin0) ->
	{ V_historyList, Bin1 } = read_array(Bin0, fun(X) -> decode_redEnvelopeHistory( X ) end),
	{ #pk_GS2U_RedEnvelopeHistoryAck {
		historyList = V_historyList
		},
	Bin1 };

%GENERATED from file:redenvelope.h => GS2U_RedEnvelopeInfoAck
decode(?GS2U_RedEnvelopeInfoAck,Bin0) ->
	{ V_red, Bin1 } = decode_redEnvelopeInfo( Bin0 ),
	{ #pk_GS2U_RedEnvelopeInfoAck {
		red = V_red
		},
	Bin1 };

%GENERATED from file:redenvelope.h => GS2U_RedEnvelopeQuery
decode(?GS2U_RedEnvelopeQuery,Bin0) ->
	{ V_redEnvelopeList, Bin1 } = read_array(Bin0, fun(X) -> decode_redEnvelopeBaseInfo( X ) end),
	{ #pk_GS2U_RedEnvelopeQuery {
		redEnvelopeList = V_redEnvelopeList
		},
	Bin1 };

%GENERATED from file:redenvelope.h => GS2U_RobRedEnvelopeAck
decode(?GS2U_RobRedEnvelopeAck,Bin0) ->
	{ V_robAmount, Bin1 } = read_uint32( Bin0 ),
	{ V_red, Bin2 } = decode_redEnvelopeInfo( Bin1 ),
	{ #pk_GS2U_RobRedEnvelopeAck {
		robAmount = V_robAmount,
		red = V_red
		},
	Bin2 };

%GENERATED from file:redenvelope.h => U2GS_GiveUpRedEnvelope
decode(?U2GS_GiveUpRedEnvelope,Bin0) ->
	{ #pk_U2GS_GiveUpRedEnvelope {

		},
	Bin0 };

%GENERATED from file:redenvelope.h => U2GS_RedEnvelopeHistory
decode(?U2GS_RedEnvelopeHistory,Bin0) ->
	{ #pk_U2GS_RedEnvelopeHistory {

		},
	Bin0 };

%GENERATED from file:redenvelope.h => U2GS_RedEnvelopeInfo
decode(?U2GS_RedEnvelopeInfo,Bin0) ->
	{ V_redUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RedEnvelopeInfo {
		redUID = V_redUID
		},
	Bin1 };

%GENERATED from file:redenvelope.h => U2GS_RedEnvelopeQuery
decode(?U2GS_RedEnvelopeQuery,Bin0) ->
	{ V_targetType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RedEnvelopeQuery {
		targetType = V_targetType
		},
	Bin1 };

%GENERATED from file:redenvelope.h => U2GS_RobRedEnvelope
decode(?U2GS_RobRedEnvelope,Bin0) ->
	{ V_redUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RobRedEnvelope {
		redUID = V_redUID
		},
	Bin1 };

%GENERATED from file:redenvelope.h => U2GS_SendRedEnvelope
decode(?U2GS_SendRedEnvelope,Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_targetType, Bin2 } = read_uint8( Bin1 ),
	{ V_targetUID, Bin3 } = read_uint64( Bin2 ),
	{ V_allNumber, Bin4 } = read_uint32( Bin3 ),
	{ V_allMoney, Bin5 } = read_uint32( Bin4 ),
	{ V_luckContent, Bin6 } = read_string( Bin5 ),
	{ #pk_U2GS_SendRedEnvelope {
		type = V_type,
		targetType = V_targetType,
		targetUID = V_targetUID,
		allNumber = V_allNumber,
		allMoney = V_allMoney,
		luckContent = V_luckContent
		},
	Bin6 };

%GENERATED from file:ride.h => DeleteRide
decode(?DeleteRide,Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_DeleteRide {
		npcCode = V_npcCode
		},
	Bin1 };

%GENERATED from file:ride.h => RequestDownRide
decode(?RequestDownRide,Bin0) ->
	{ #pk_RequestDownRide {

		},
	Bin0 };

%GENERATED from file:ride.h => RequestRecycle
decode(?RequestRecycle,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_RequestRecycle {
		itemUID = V_itemUID
		},
	Bin1 };

%GENERATED from file:ride.h => RequestUpRide
decode(?RequestUpRide,Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ #pk_RequestUpRide {
		npcCode = V_npcCode
		},
	Bin1 };

%GENERATED from file:ride.h => RequestUse
decode(?RequestUse,Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_useLimit, Bin2 } = read_uint8( Bin1 ),
	{ #pk_RequestUse {
		itemUID = V_itemUID,
		useLimit = V_useLimit
		},
	Bin2 };

%GENERATED from file:ride.h => SyncPlayerInfo
decode(?SyncPlayerInfo,Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ V_info, Bin2 } = decode_RidePlayerInfo( Bin1 ),
	{ V_state, Bin3 } = read_uint8( Bin2 ),
	{ #pk_SyncPlayerInfo {
		npcCode = V_npcCode,
		info = V_info,
		state = V_state
		},
	Bin3 };

%GENERATED from file:ride.h => SyncRideInfo
decode(?SyncRideInfo,Bin0) ->
	{ V_infos, Bin1 } = read_array(Bin0, fun(X) -> decode_RideInfo( X ) end),
	{ #pk_SyncRideInfo {
		infos = V_infos
		},
	Bin1 };

%GENERATED from file:ride.h => SyncRideItem
decode(?SyncRideItem,Bin0) ->
	{ V_items, Bin1 } = read_array(Bin0, fun(X) -> decode_RideItem( X ) end),
	{ #pk_SyncRideItem {
		items = V_items
		},
	Bin1 };

%GENERATED from file:rune.h => DeleteRunes
decode(?DeleteRunes,Bin0) ->
	{ V_runeUIDS, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_DeleteRunes {
		runeUIDS = V_runeUIDS
		},
	Bin1 };

%GENERATED from file:rune.h => GS2U_QueryRuneTipsAck
decode(?GS2U_QueryRuneTipsAck,Bin0) ->
	{ V_info, Bin1 } = decode_RuneInfo( Bin0 ),
	{ #pk_GS2U_QueryRuneTipsAck {
		info = V_info
		},
	Bin1 };

%GENERATED from file:rune.h => GS2U_RPRuneInfoList
decode(?GS2U_RPRuneInfoList,Bin0) ->
	{ V_targetRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_runeList, Bin2 } = read_array(Bin1, fun(X) -> decode_RuneInfo( X ) end),
	{ #pk_GS2U_RPRuneInfoList {
		targetRoleID = V_targetRoleID,
		runeList = V_runeList
		},
	Bin2 };

%GENERATED from file:rune.h => GS2U_RuneCastAck
decode(?GS2U_RuneCastAck,Bin0) ->
	{ V_runeInfo, Bin1 } = decode_RuneInfo( Bin0 ),
	{ V_runeUIDS, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_RuneCastAck {
		runeInfo = V_runeInfo,
		runeUIDS = V_runeUIDS
		},
	Bin2 };

%GENERATED from file:rune.h => GS2U_RuneCastProp
decode(?GS2U_RuneCastProp,Bin0) ->
	{ V_flagID, Bin1 } = read_uint64( Bin0 ),
	{ V_oldprop, Bin2 } = decode_RuneBaseProp( Bin1 ),
	{ V_newprop, Bin3 } = decode_RuneBaseProp( Bin2 ),
	{ #pk_GS2U_RuneCastProp {
		flagID = V_flagID,
		oldprop = V_oldprop,
		newprop = V_newprop
		},
	Bin3 };

%GENERATED from file:rune.h => GS2U_RuneCompoundAck
decode(?GS2U_RuneCompoundAck,Bin0) ->
	{ V_runeList, Bin1 } = read_array(Bin0, fun(X) -> decode_RuneInfo( X ) end),
	{ V_isOneKeyCompound, Bin2 } = read_bool( Bin1 ),
	{ #pk_GS2U_RuneCompoundAck {
		runeList = V_runeList,
		isOneKeyCompound = V_isOneKeyCompound
		},
	Bin2 };

%GENERATED from file:rune.h => GS2U_RuneEmbedOffAck
decode(?GS2U_RuneEmbedOffAck,Bin0) ->
	{ V_runeList, Bin1 } = read_array(Bin0, fun(X) -> decode_RuneInfo( X ) end),
	{ #pk_GS2U_RuneEmbedOffAck {
		runeList = V_runeList
		},
	Bin1 };

%GENERATED from file:rune.h => GS2U_RuneEmbedOnAck
decode(?GS2U_RuneEmbedOnAck,Bin0) ->
	{ V_targetID, Bin1 } = read_uint32( Bin0 ),
	{ V_runeList, Bin2 } = read_array(Bin1, fun(X) -> decode_RuneInfo( X ) end),
	{ #pk_GS2U_RuneEmbedOnAck {
		targetID = V_targetID,
		runeList = V_runeList
		},
	Bin2 };

%GENERATED from file:rune.h => GS2U_RuneFuseAck
decode(?GS2U_RuneFuseAck,Bin0) ->
	{ V_runeInfo, Bin1 } = decode_RuneInfo( Bin0 ),
	{ V_runeUIDS, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_RuneFuseAck {
		runeInfo = V_runeInfo,
		runeUIDS = V_runeUIDS
		},
	Bin2 };

%GENERATED from file:rune.h => GS2U_RuneGrid
decode(?GS2U_RuneGrid,Bin0) ->
	{ V_ownerID, Bin1 } = read_uint8( Bin0 ),
	{ V_cur, Bin2 } = read_uint16( Bin1 ),
	{ V_max, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_RuneGrid {
		ownerID = V_ownerID,
		cur = V_cur,
		max = V_max
		},
	Bin3 };

%GENERATED from file:rune.h => GS2U_RuneInfoList
decode(?GS2U_RuneInfoList,Bin0) ->
	{ V_runeList, Bin1 } = read_array(Bin0, fun(X) -> decode_RuneInfo( X ) end),
	{ #pk_GS2U_RuneInfoList {
		runeList = V_runeList
		},
	Bin1 };

%GENERATED from file:rune.h => GS2U_RuneMeltAck
decode(?GS2U_RuneMeltAck,Bin0) ->
	{ V_runeInfo, Bin1 } = decode_RuneInfo( Bin0 ),
	{ #pk_GS2U_RuneMeltAck {
		runeInfo = V_runeInfo
		},
	Bin1 };

%GENERATED from file:rune.h => GS2U_RuneOpenBorad
decode(?GS2U_RuneOpenBorad,Bin0) ->
	{ V_code, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_RuneOpenBorad {
		code = V_code
		},
	Bin1 };

%GENERATED from file:rune.h => GS2U_RuneSuitPropList
decode(?GS2U_RuneSuitPropList,Bin0) ->
	{ V_suitProps, Bin1 } = read_array(Bin0, fun(X) -> decode_RuneSuitProp( X ) end),
	{ #pk_GS2U_RuneSuitPropList {
		suitProps = V_suitProps
		},
	Bin1 };

%GENERATED from file:rune.h => GS2U_RuneTurnPosAck
decode(?GS2U_RuneTurnPosAck,Bin0) ->
	{ V_runeInfo, Bin1 } = decode_RuneInfo( Bin0 ),
	{ #pk_GS2U_RuneTurnPosAck {
		runeInfo = V_runeInfo
		},
	Bin1 };

%GENERATED from file:rune.h => RuneEmbedOn
decode(?RuneEmbedOn,Bin0) ->
	{ V_runeUIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ V_targetID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_RuneEmbedOn {
		runeUIDs = V_runeUIDs,
		targetID = V_targetID
		},
	Bin2 };

%GENERATED from file:rune.h => U2GS_OpenRuneGrid
decode(?U2GS_OpenRuneGrid,Bin0) ->
	{ V_ownerID, Bin1 } = read_uint8( Bin0 ),
	{ V_openNumber, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_OpenRuneGrid {
		ownerID = V_ownerID,
		openNumber = V_openNumber
		},
	Bin2 };

%GENERATED from file:rune.h => U2GS_QueryRuneTips
decode(?U2GS_QueryRuneTips,Bin0) ->
	{ V_runeUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_QueryRuneTips {
		runeUID = V_runeUID
		},
	Bin1 };

%GENERATED from file:rune.h => U2GS_RequestSuitProp
decode(?U2GS_RequestSuitProp,Bin0) ->
	{ V_ownerID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestSuitProp {
		ownerID = V_ownerID
		},
	Bin1 };

%GENERATED from file:rune.h => U2GS_RuneCast
decode(?U2GS_RuneCast,Bin0) ->
	{ V_targetUID, Bin1 } = read_uint64( Bin0 ),
	{ V_indexNumber, Bin2 } = read_uint32( Bin1 ),
	{ V_materialUID, Bin3 } = read_uint64( Bin2 ),
	{ #pk_U2GS_RuneCast {
		targetUID = V_targetUID,
		indexNumber = V_indexNumber,
		materialUID = V_materialUID
		},
	Bin3 };

%GENERATED from file:rune.h => U2GS_RuneCastAffirm
decode(?U2GS_RuneCastAffirm,Bin0) ->
	{ V_flagID, Bin1 } = read_uint64( Bin0 ),
	{ V_isAffirm, Bin2 } = read_bool( Bin1 ),
	{ #pk_U2GS_RuneCastAffirm {
		flagID = V_flagID,
		isAffirm = V_isAffirm
		},
	Bin2 };

%GENERATED from file:rune.h => U2GS_RuneCompound
decode(?U2GS_RuneCompound,Bin0) ->
	{ V_quality, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ V_materialUIDS, Bin3 } = read_array(Bin2, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_RuneCompound {
		quality = V_quality,
		level = V_level,
		materialUIDS = V_materialUIDS
		},
	Bin3 };

%GENERATED from file:rune.h => U2GS_RuneEmbedOff
decode(?U2GS_RuneEmbedOff,Bin0) ->
	{ V_runeUIDs, Bin1 } = read_array(Bin0, fun(X) -> read_uint64( X ) end),
	{ #pk_U2GS_RuneEmbedOff {
		runeUIDs = V_runeUIDs
		},
	Bin1 };

%GENERATED from file:rune.h => U2GS_RuneFuse
decode(?U2GS_RuneFuse,Bin0) ->
	{ V_targetRuneUID, Bin1 } = read_uint64( Bin0 ),
	{ V_materialUID, Bin2 } = read_uint64( Bin1 ),
	{ V_fuseType, Bin3 } = read_uint8( Bin2 ),
	{ V_targetPropKey, Bin4 } = read_uint64( Bin3 ),
	{ V_materialPropKey, Bin5 } = read_uint64( Bin4 ),
	{ V_isUseFuseStone, Bin6 } = read_bool( Bin5 ),
	{ #pk_U2GS_RuneFuse {
		targetRuneUID = V_targetRuneUID,
		materialUID = V_materialUID,
		fuseType = V_fuseType,
		targetPropKey = V_targetPropKey,
		materialPropKey = V_materialPropKey,
		isUseFuseStone = V_isUseFuseStone
		},
	Bin6 };

%GENERATED from file:rune.h => U2GS_RuneMelt
decode(?U2GS_RuneMelt,Bin0) ->
	{ V_targetRuneUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RuneMelt {
		targetRuneUID = V_targetRuneUID
		},
	Bin1 };

%GENERATED from file:rune.h => U2GS_RuneReserve
decode(?U2GS_RuneReserve,Bin0) ->
	{ V_isReserve, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_RuneReserve {
		isReserve = V_isReserve
		},
	Bin1 };

%GENERATED from file:rune.h => U2GS_RuneTurnPos
decode(?U2GS_RuneTurnPos,Bin0) ->
	{ V_targetRuneUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_RuneTurnPos {
		targetRuneUID = V_targetRuneUID
		},
	Bin1 };

%GENERATED from file:rune.h => U2GS_SellRune
decode(?U2GS_SellRune,Bin0) ->
	{ V_targetRuneUID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_SellRune {
		targetRuneUID = V_targetRuneUID
		},
	Bin1 };

%GENERATED from file:serverTest.h => GS2U_GridPlayerRotw
decode(?GS2U_GridPlayerRotw,Bin0) ->
	{ V_rotw, Bin1 } = read_int32( Bin0 ),
	{ V_codes, Bin2 } = read_array(Bin1, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_GridPlayerRotw {
		rotw = V_rotw,
		codes = V_codes
		},
	Bin2 };

%GENERATED from file:setting.h => Any_UpdateBitVariant
decode(?Any_UpdateBitVariant,Bin0) ->
	{ V_updateVariantList, Bin1 } = read_array(Bin0, fun(X) -> decode_SwitchVariantInfo( X ) end),
	{ #pk_Any_UpdateBitVariant {
		updateVariantList = V_updateVariantList
		},
	Bin1 };

%GENERATED from file:setting.h => Any_UpdateVariant
decode(?Any_UpdateVariant,Bin0) ->
	{ V_updateVariantList, Bin1 } = read_array(Bin0, fun(X) -> decode_VariantInfo( X ) end),
	{ #pk_Any_UpdateVariant {
		updateVariantList = V_updateVariantList
		},
	Bin1 };

%GENERATED from file:setting.h => GS2U_VariantInfo
decode(?GS2U_VariantInfo,Bin0) ->
	{ V_variantList, Bin1 } = read_array(Bin0, fun(X) -> decode_VariantInfo( X ) end),
	{ #pk_GS2U_VariantInfo {
		variantList = V_variantList
		},
	Bin1 };

%GENERATED from file:setting.h => U2GS_AllTeamInvitationSetting
decode(?U2GS_AllTeamInvitationSetting,Bin0) ->
	{ V_onOrOff, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_AllTeamInvitationSetting {
		onOrOff = V_onOrOff
		},
	Bin1 };

%GENERATED from file:signin.h => BindPhoneAwardGet
decode(?BindPhoneAwardGet,Bin0) ->
	{ #pk_BindPhoneAwardGet {

		},
	Bin0 };

%GENERATED from file:signin.h => EveryDaySignIn
decode(?EveryDaySignIn,Bin0) ->
	{ #pk_EveryDaySignIn {

		},
	Bin0 };

%GENERATED from file:signin.h => GS2U_BindPhoneResult
decode(?GS2U_BindPhoneResult,Bin0) ->
	{ V_isSuccess, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_BindPhoneResult {
		isSuccess = V_isSuccess
		},
	Bin1 };

%GENERATED from file:signin.h => GS2U_SignIn
decode(?GS2U_SignIn,Bin0) ->
	{ V_info_list, Bin1 } = read_array(Bin0, fun(X) -> decode_SignInInfo( X ) end),
	{ V_time, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_SignIn {
		info_list = V_info_list,
		time = V_time
		},
	Bin2 };

%GENERATED from file:signin.h => SevenDaySignIn
decode(?SevenDaySignIn,Bin0) ->
	{ V_dayCount, Bin1 } = read_uint8( Bin0 ),
	{ #pk_SevenDaySignIn {
		dayCount = V_dayCount
		},
	Bin1 };

%GENERATED from file:signin.h => U2GS_AccuReward
decode(?U2GS_AccuReward,Bin0) ->
	{ V_id, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_AccuReward {
		id = V_id
		},
	Bin1 };

%GENERATED from file:signin.h => U2GS_BindPhone
decode(?U2GS_BindPhone,Bin0) ->
	{ V_funcellCilentID, Bin1 } = read_string( Bin0 ),
	{ V_accessToken, Bin2 } = read_string( Bin1 ),
	{ V_phoneNum, Bin3 } = read_uint64( Bin2 ),
	{ V_verifyid, Bin4 } = read_string( Bin3 ),
	{ V_content, Bin5 } = read_string( Bin4 ),
	{ #pk_U2GS_BindPhone {
		funcellCilentID = V_funcellCilentID,
		accessToken = V_accessToken,
		phoneNum = V_phoneNum,
		verifyid = V_verifyid,
		content = V_content
		},
	Bin5 };

%GENERATED from file:signin.h => U2GS_SignIn
decode(?U2GS_SignIn,Bin0) ->
	{ #pk_U2GS_SignIn {

		},
	Bin0 };

%GENERATED from file:skill.h => GS2U_BreakLifeSkill
decode(?GS2U_BreakLifeSkill,Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ #pk_GS2U_BreakLifeSkill {
		type = V_type
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_ChangeSkillSlotResult
decode(?GS2U_ChangeSkillSlotResult,Bin0) ->
	{ V_changeType, Bin1 } = read_uint32( Bin0 ),
	{ V_skillType, Bin2 } = read_int8( Bin1 ),
	{ V_oldIndex, Bin3 } = read_uint32( Bin2 ),
	{ V_newSkillInfo, Bin4 } = decode_SkillSlotInfo( Bin3 ),
	{ #pk_GS2U_ChangeSkillSlotResult {
		changeType = V_changeType,
		skillType = V_skillType,
		oldIndex = V_oldIndex,
		newSkillInfo = V_newSkillInfo
		},
	Bin4 };

%GENERATED from file:skill.h => GS2U_GiveRewardAck
decode(?GS2U_GiveRewardAck,Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ V_infos, Bin2 } = read_array(Bin1, fun(X) -> decode_itemInfo( X ) end),
	{ #pk_GS2U_GiveRewardAck {
		type = V_type,
		infos = V_infos
		},
	Bin2 };

%GENERATED from file:skill.h => GS2U_InitLifeSkillList
decode(?GS2U_InitLifeSkillList,Bin0) ->
	{ V_infos, Bin1 } = read_array(Bin0, fun(X) -> decode_LifeSkillInfo( X ) end),
	{ #pk_GS2U_InitLifeSkillList {
		infos = V_infos
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_InitiativeSkillSlotInfoList
decode(?GS2U_InitiativeSkillSlotInfoList,Bin0) ->
	{ V_skillSlotList, Bin1 } = read_array(Bin0, fun(X) -> decode_SkillSlotInfo( X ) end),
	{ #pk_GS2U_InitiativeSkillSlotInfoList {
		skillSlotList = V_skillSlotList
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_LifeSkillCanUseCount
decode(?GS2U_LifeSkillCanUseCount,Bin0) ->
	{ V_listNew, Bin1 } = read_array(Bin0, fun(X) -> decode_lifeSkillCanUseCount( X ) end),
	{ #pk_GS2U_LifeSkillCanUseCount {
		listNew = V_listNew
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_OpenSkill
decode(?GS2U_OpenSkill,Bin0) ->
	{ V_skillId, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_OpenSkill {
		skillId = V_skillId,
		level = V_level
		},
	Bin2 };

%GENERATED from file:skill.h => GS2U_OpenSlot
decode(?GS2U_OpenSlot,Bin0) ->
	{ V_openSlot, Bin1 } = decode_OpenSlot( Bin0 ),
	{ #pk_GS2U_OpenSlot {
		openSlot = V_openSlot
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_OpenSlotList
decode(?GS2U_OpenSlotList,Bin0) ->
	{ V_slotList, Bin1 } = read_array(Bin0, fun(X) -> decode_OpenSlot( X ) end),
	{ #pk_GS2U_OpenSlotList {
		slotList = V_slotList
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_PassiveSkillInfo
decode(?GS2U_PassiveSkillInfo,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_PassiveSkillInfo {
		id = V_id,
		level = V_level
		},
	Bin2 };

%GENERATED from file:skill.h => GS2U_PassiveSkillInfoList
decode(?GS2U_PassiveSkillInfoList,Bin0) ->
	{ V_skillList, Bin1 } = read_array(Bin0, fun(X) -> decode_PassiveSkillInfo( X ) end),
	{ #pk_GS2U_PassiveSkillInfoList {
		skillList = V_skillList
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_PassiveSkillSlotInfoList
decode(?GS2U_PassiveSkillSlotInfoList,Bin0) ->
	{ V_skillSlotList, Bin1 } = read_array(Bin0, fun(X) -> decode_SkillSlotInfo( X ) end),
	{ #pk_GS2U_PassiveSkillSlotInfoList {
		skillSlotList = V_skillSlotList
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_ReduceCD
decode(?GS2U_ReduceCD,Bin0) ->
	{ V_skillId, Bin1 } = read_uint32( Bin0 ),
	{ V_cd, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_ReduceCD {
		skillId = V_skillId,
		cd = V_cd
		},
	Bin2 };

%GENERATED from file:skill.h => GS2U_SkillInfo
decode(?GS2U_SkillInfo,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GS2U_SkillInfo {
		id = V_id,
		level = V_level
		},
	Bin2 };

%GENERATED from file:skill.h => GS2U_SkillInfoList
decode(?GS2U_SkillInfoList,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_skillInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_SkillInfo( X ) end),
	{ #pk_GS2U_SkillInfoList {
		code = V_code,
		skillInfoList = V_skillInfoList
		},
	Bin2 };

%GENERATED from file:skill.h => GS2U_TransformSkillSlotInfoList
decode(?GS2U_TransformSkillSlotInfoList,Bin0) ->
	{ V_skillSlotList, Bin1 } = read_array(Bin0, fun(X) -> decode_SkillSlotInfo( X ) end),
	{ #pk_GS2U_TransformSkillSlotInfoList {
		skillSlotList = V_skillSlotList
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_TriggerPassiveSkill
decode(?GS2U_TriggerPassiveSkill,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ V_codelist, Bin3 } = read_array(Bin2, fun(X) -> read_uint64( X ) end),
	{ #pk_GS2U_TriggerPassiveSkill {
		id = V_id,
		level = V_level,
		codelist = V_codelist
		},
	Bin3 };

%GENERATED from file:skill.h => GS2U_UpdateLifeSkill
decode(?GS2U_UpdateLifeSkill,Bin0) ->
	{ V_info, Bin1 } = decode_LifeSkillInfo( Bin0 ),
	{ #pk_GS2U_UpdateLifeSkill {
		info = V_info
		},
	Bin1 };

%GENERATED from file:skill.h => GS2U_UpgradeSkill_Result
decode(?GS2U_UpgradeSkill_Result,Bin0) ->
	{ V_resultCode, Bin1 } = read_uint32( Bin0 ),
	{ V_skillinfo, Bin2 } = decode_SkillInfo( Bin1 ),
	{ #pk_GS2U_UpgradeSkill_Result {
		resultCode = V_resultCode,
		skillinfo = V_skillinfo
		},
	Bin2 };

%GENERATED from file:skill.h => U2GS_BuySpirit
decode(?U2GS_BuySpirit,Bin0) ->
	{ #pk_U2GS_BuySpirit {

		},
	Bin0 };

%GENERATED from file:skill.h => U2GS_ChangeSkillSlotRequest
decode(?U2GS_ChangeSkillSlotRequest,Bin0) ->
	{ V_changeType, Bin1 } = read_uint32( Bin0 ),
	{ V_skillType, Bin2 } = read_int8( Bin1 ),
	{ V_changeSkillInfo, Bin3 } = decode_SkillSlotInfo( Bin2 ),
	{ #pk_U2GS_ChangeSkillSlotRequest {
		changeType = V_changeType,
		skillType = V_skillType,
		changeSkillInfo = V_changeSkillInfo
		},
	Bin3 };

%GENERATED from file:skill.h => U2GS_FinishLifeSkill
decode(?U2GS_FinishLifeSkill,Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ #pk_U2GS_FinishLifeSkill {
		type = V_type
		},
	Bin1 };

%GENERATED from file:skill.h => U2GS_GiveReward
decode(?U2GS_GiveReward,Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ V_npcCode, Bin2 } = read_int64( Bin1 ),
	{ V_param, Bin3 } = read_int64( Bin2 ),
	{ #pk_U2GS_GiveReward {
		type = V_type,
		npcCode = V_npcCode,
		param = V_param
		},
	Bin3 };

%GENERATED from file:skill.h => U2GS_LifeSkillBuyCount
decode(?U2GS_LifeSkillBuyCount,Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ V_count, Bin2 } = read_int16( Bin1 ),
	{ #pk_U2GS_LifeSkillBuyCount {
		type = V_type,
		count = V_count
		},
	Bin2 };

%GENERATED from file:skill.h => U2GS_PassiveUpSkill
decode(?U2GS_PassiveUpSkill,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_PassiveUpSkill {
		id = V_id
		},
	Bin1 };

%GENERATED from file:skill.h => U2GS_ResetSkill
decode(?U2GS_ResetSkill,Bin0) ->
	{ #pk_U2GS_ResetSkill {

		},
	Bin0 };

%GENERATED from file:skill.h => U2GS_UpSkill
decode(?U2GS_UpSkill,Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_type, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_UpSkill {
		id = V_id,
		type = V_type
		},
	Bin2 };

%GENERATED from file:skill.h => U2GS_UpgradeSkill_Request
decode(?U2GS_UpgradeSkill_Request,Bin0) ->
	{ V_skillId, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_UpgradeSkill_Request {
		skillId = V_skillId
		},
	Bin1 };

%GENERATED from file:skill.h => U2GS_UseLifeSkill
decode(?U2GS_UseLifeSkill,Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ V_npcCode, Bin2 } = read_int64( Bin1 ),
	{ V_param, Bin3 } = read_int64( Bin2 ),
	{ V_times, Bin4 } = read_int16( Bin3 ),
	{ #pk_U2GS_UseLifeSkill {
		type = V_type,
		npcCode = V_npcCode,
		param = V_param,
		times = V_times
		},
	Bin4 };

%GENERATED from file:talent.h => GS2U_TalentInitAck
decode(?GS2U_TalentInitAck,Bin0) ->
	{ V_talentInfos, Bin1 } = read_array(Bin0, fun(X) -> decode_TalentInfo( X ) end),
	{ #pk_GS2U_TalentInitAck {
		talentInfos = V_talentInfos
		},
	Bin1 };

%GENERATED from file:talent.h => GS2U_TalentLevelUpSuccess
decode(?GS2U_TalentLevelUpSuccess,Bin0) ->
	{ V_talentInfo, Bin1 } = decode_TalentInfo( Bin0 ),
	{ #pk_GS2U_TalentLevelUpSuccess {
		talentInfo = V_talentInfo
		},
	Bin1 };

%GENERATED from file:talent.h => U2GS_TalentInit
decode(?U2GS_TalentInit,Bin0) ->
	{ #pk_U2GS_TalentInit {

		},
	Bin0 };

%GENERATED from file:talent.h => U2GS_TalentLevelUp
decode(?U2GS_TalentLevelUp,Bin0) ->
	{ V_id, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_TalentLevelUp {
		id = V_id
		},
	Bin1 };

%GENERATED from file:task.h => GS2U_AcceptTask
decode(?GS2U_AcceptTask,Bin0) ->
	{ V_info, Bin1 } = decode_taskInfo( Bin0 ),
	{ #pk_GS2U_AcceptTask {
		info = V_info
		},
	Bin1 };

%GENERATED from file:task.h => GS2U_AcceptTaskList
decode(?GS2U_AcceptTaskList,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_acceptedBaseTask( X ) end),
	{ #pk_GS2U_AcceptTaskList {
		list = V_list
		},
	Bin1 };

%GENERATED from file:task.h => GS2U_AddNewAcceptTask
decode(?GS2U_AddNewAcceptTask,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ V_result, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_AddNewAcceptTask {
		taskID = V_taskID,
		result = V_result
		},
	Bin2 };

%GENERATED from file:task.h => GS2U_AddNewCompleteTask
decode(?GS2U_AddNewCompleteTask,Bin0) ->
	{ V_result, Bin1 } = read_int32( Bin0 ),
	{ V_taskID, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_AddNewCompleteTask {
		result = V_result,
		taskID = V_taskID
		},
	Bin2 };

%GENERATED from file:task.h => GS2U_CollectObj_Failed
decode(?GS2U_CollectObj_Failed,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_CollectObj_Failed {
		code = V_code
		},
	Bin1 };

%GENERATED from file:task.h => GS2U_CompleteTaskList
decode(?GS2U_CompleteTaskList,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_SubmittedTaskInfo( X ) end),
	{ #pk_GS2U_CompleteTaskList {
		list = V_list
		},
	Bin1 };

%GENERATED from file:task.h => GS2U_DeleteAcceptTask
decode(?GS2U_DeleteAcceptTask,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ V_result, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_DeleteAcceptTask {
		taskID = V_taskID,
		result = V_result
		},
	Bin2 };

%GENERATED from file:task.h => GS2U_SyncStateLoopTask
decode(?GS2U_SyncStateLoopTask,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_LoopTaskState( X ) end),
	{ V_state, Bin2 } = read_uint8( Bin1 ),
	{ V_allFive, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GS2U_SyncStateLoopTask {
		list = V_list,
		state = V_state,
		allFive = V_allFive
		},
	Bin3 };

%GENERATED from file:task.h => GS2U_TalkToNpcResult
decode(?GS2U_TalkToNpcResult,Bin0) ->
	{ V_result, Bin1 } = read_int32( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_TalkToNpcResult {
		result = V_result,
		code = V_code
		},
	Bin2 };

%GENERATED from file:task.h => GS2U_TaskList
decode(?GS2U_TaskList,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_taskInfo( X ) end),
	{ #pk_GS2U_TaskList {
		list = V_list
		},
	Bin1 };

%GENERATED from file:task.h => GS2U_UpdateAcceptTask
decode(?GS2U_UpdateAcceptTask,Bin0) ->
	{ V_result, Bin1 } = read_int32( Bin0 ),
	{ V_acceptTaskInfo, Bin2 } = decode_acceptedBaseTask( Bin1 ),
	{ #pk_GS2U_UpdateAcceptTask {
		result = V_result,
		acceptTaskInfo = V_acceptTaskInfo
		},
	Bin2 };

%GENERATED from file:task.h => GS2U_UpdateTask
decode(?GS2U_UpdateTask,Bin0) ->
	{ V_info, Bin1 } = decode_taskInfo( Bin0 ),
	{ #pk_GS2U_UpdateTask {
		info = V_info
		},
	Bin1 };

%GENERATED from file:task.h => U2GS_AcceptTask
decode(?U2GS_AcceptTask,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ V_npcCode, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_AcceptTask {
		taskID = V_taskID,
		npcCode = V_npcCode
		},
	Bin2 };

%GENERATED from file:task.h => U2GS_CollectObj
decode(?U2GS_CollectObj,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_CollectObj {
		code = V_code
		},
	Bin1 };

%GENERATED from file:task.h => U2GS_DropTask
decode(?U2GS_DropTask,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_DropTask {
		taskID = V_taskID
		},
	Bin1 };

%GENERATED from file:task.h => U2GS_RequestAcceptLoopTask
decode(?U2GS_RequestAcceptLoopTask,Bin0) ->
	{ #pk_U2GS_RequestAcceptLoopTask {

		},
	Bin0 };

%GENERATED from file:task.h => U2GS_RequestAcceptTask
decode(?U2GS_RequestAcceptTask,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_RequestAcceptTask {
		taskID = V_taskID,
		code = V_code
		},
	Bin2 };

%GENERATED from file:task.h => U2GS_RequestHandIn
decode(?U2GS_RequestHandIn,Bin0) ->
	{ V_taskID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemID, Bin2 } = read_uint16( Bin1 ),
	{ V_itemCount, Bin3 } = read_uint32( Bin2 ),
	{ V_npcCode, Bin4 } = read_uint64( Bin3 ),
	{ #pk_U2GS_RequestHandIn {
		taskID = V_taskID,
		itemID = V_itemID,
		itemCount = V_itemCount,
		npcCode = V_npcCode
		},
	Bin4 };

%GENERATED from file:task.h => U2GS_RequestOneKeyLoopTask
decode(?U2GS_RequestOneKeyLoopTask,Bin0) ->
	{ V_count, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_RequestOneKeyLoopTask {
		count = V_count
		},
	Bin1 };

%GENERATED from file:task.h => U2GS_RequestOperateLoopTask
decode(?U2GS_RequestOperateLoopTask,Bin0) ->
	{ V_taskID, Bin1 } = read_uint16( Bin0 ),
	{ V_opType, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_RequestOperateLoopTask {
		taskID = V_taskID,
		opType = V_opType
		},
	Bin2 };

%GENERATED from file:task.h => U2GS_ResetTask
decode(?U2GS_ResetTask,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_ResetTask {
		taskID = V_taskID
		},
	Bin1 };

%GENERATED from file:task.h => U2GS_SumbitTask
decode(?U2GS_SumbitTask,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_SumbitTask {
		taskID = V_taskID,
		code = V_code
		},
	Bin2 };

%GENERATED from file:task.h => U2GS_TalkToNpc
decode(?U2GS_TalkToNpc,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_TalkToNpc {
		code = V_code
		},
	Bin1 };

%GENERATED from file:task.h => U2GS_TriggerTaskBuff
decode(?U2GS_TriggerTaskBuff,Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_TriggerTaskBuff {
		taskID = V_taskID
		},
	Bin1 };

%GENERATED from file:task.h => U2GS_UseItemObj
decode(?U2GS_UseItemObj,Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ #pk_U2GS_UseItemObj {
		code = V_code
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_AddTeamMemberInfo
decode(?GS2U_AddTeamMemberInfo,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_memberInfo, Bin2 } = decode_TeamMemberInfo( Bin1 ),
	{ #pk_GS2U_AddTeamMemberInfo {
		teamType = V_teamType,
		memberInfo = V_memberInfo
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_BeenInviteTeam
decode(?GS2U_BeenInviteTeam,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_inviteType, Bin2 } = read_uint8( Bin1 ),
	{ V_inviterPlayerID, Bin3 } = read_uint64( Bin2 ),
	{ V_inviterPlayerName, Bin4 } = read_string( Bin3 ),
	{ #pk_GS2U_BeenInviteTeam {
		teamType = V_teamType,
		inviteType = V_inviteType,
		inviterPlayerID = V_inviterPlayerID,
		inviterPlayerName = V_inviterPlayerName
		},
	Bin4 };

%GENERATED from file:team.h => GS2U_DelTeammateInfo
decode(?GS2U_DelTeammateInfo,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_teammateID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_DelTeammateInfo {
		teamType = V_teamType,
		teammateID = V_teammateID
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_FastTeamAck
decode(?GS2U_FastTeamAck,Bin0) ->
	{ #pk_GS2U_FastTeamAck {

		},
	Bin0 };

%GENERATED from file:team.h => GS2U_FastTeamSucc
decode(?GS2U_FastTeamSucc,Bin0) ->
	{ V_time, Bin1 } = read_uint16( Bin0 ),
	{ #pk_GS2U_FastTeamSucc {
		time = V_time
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_InviteUJoinTeam
decode(?GS2U_InviteUJoinTeam,Bin0) ->
	{ V_copyMapID, Bin1 } = read_int32( Bin0 ),
	{ V_inviterPlayerID, Bin2 } = read_uint64( Bin1 ),
	{ V_inviterPlayerName, Bin3 } = read_string( Bin2 ),
	{ V_guildID, Bin4 } = read_uint64( Bin3 ),
	{ V_guildName, Bin5 } = read_string( Bin4 ),
	{ V_friendState, Bin6 } = read_uint8( Bin5 ),
	{ #pk_GS2U_InviteUJoinTeam {
		copyMapID = V_copyMapID,
		inviterPlayerID = V_inviterPlayerID,
		inviterPlayerName = V_inviterPlayerName,
		guildID = V_guildID,
		guildName = V_guildName,
		friendState = V_friendState
		},
	Bin6 };

%GENERATED from file:team.h => GS2U_KickOutByLeader
decode(?GS2U_KickOutByLeader,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_KickOutByLeader {
		teamType = V_teamType
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_MyTeamInfo
decode(?GS2U_MyTeamInfo,Bin0) ->
	{ V_base, Bin1 } = decode_TeamBaseInfo( Bin0 ),
	{ V_infos, Bin2 } = read_array(Bin1, fun(X) -> decode_TeamMemberInfo( X ) end),
	{ #pk_GS2U_MyTeamInfo {
		base = V_base,
		infos = V_infos
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_NearTeamInfo
decode(?GS2U_NearTeamInfo,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_teamInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_NearTeamInfo( X ) end),
	{ #pk_GS2U_NearTeamInfo {
		teamType = V_teamType,
		teamInfoList = V_teamInfoList
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_NearbyPlayer_Ack
decode(?GS2U_NearbyPlayer_Ack,Bin0) ->
	{ V_list, Bin1 } = read_array(Bin0, fun(X) -> decode_NotTeamMemberInfo( X ) end),
	{ #pk_GS2U_NearbyPlayer_Ack {
		list = V_list
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_NewMemberJoin
decode(?GS2U_NewMemberJoin,Bin0) ->
	{ V_info, Bin1 } = decode_TeamMemberInfo( Bin0 ),
	{ #pk_GS2U_NewMemberJoin {
		info = V_info
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_QueryRoleListAck
decode(?GS2U_QueryRoleListAck,Bin0) ->
	{ V_queryType, Bin1 } = read_int32( Bin0 ),
	{ V_playerList, Bin2 } = read_array(Bin1, fun(X) -> decode_OnlineMemberSnapshot( X ) end),
	{ #pk_GS2U_QueryRoleListAck {
		queryType = V_queryType,
		playerList = V_playerList
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_QueryTeamListAck
decode(?GS2U_QueryTeamListAck,Bin0) ->
	{ V_teamSnapshot, Bin1 } = read_array(Bin0, fun(X) -> decode_TeamSnapshot( X ) end),
	{ #pk_GS2U_QueryTeamListAck {
		teamSnapshot = V_teamSnapshot
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_QueryTeamListThisLineAck
decode(?GS2U_QueryTeamListThisLineAck,Bin0) ->
	{ V_teamSnapshot, Bin1 } = read_array(Bin0, fun(X) -> decode_TeamSnapshot( X ) end),
	{ #pk_GS2U_QueryTeamListThisLineAck {
		teamSnapshot = V_teamSnapshot
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_QuickTeamMatchAck
decode(?GS2U_QuickTeamMatchAck,Bin0) ->
	{ V_result, Bin1 } = read_int32( Bin0 ),
	{ V_startTime, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_QuickTeamMatchAck {
		result = V_result,
		startTime = V_startTime
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_ReceiveNotice
decode(?GS2U_ReceiveNotice,Bin0) ->
	{ V_sendRoleName, Bin1 } = read_string( Bin0 ),
	{ V_mapID, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_ReceiveNotice {
		sendRoleName = V_sendRoleName,
		mapID = V_mapID
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_RequestFightingCapacity
decode(?GS2U_RequestFightingCapacity,Bin0) ->
	{ V_fightingCapacityInfos, Bin1 } = read_array(Bin0, fun(X) -> decode_FightingCapacityInfo( X ) end),
	{ #pk_GS2U_RequestFightingCapacity {
		fightingCapacityInfos = V_fightingCapacityInfos
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_TeamChangeLeader
decode(?GS2U_TeamChangeLeader,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_newLeaderID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_TeamChangeLeader {
		teamType = V_teamType,
		newLeaderID = V_newLeaderID
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_TeamDisbanded
decode(?GS2U_TeamDisbanded,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_GS2U_TeamDisbanded {
		teamType = V_teamType
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_TeamInfo
decode(?GS2U_TeamInfo,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_teamID, Bin2 } = read_int64( Bin1 ),
	{ V_leaderID, Bin3 } = read_uint64( Bin2 ),
	{ V_info_list, Bin4 } = read_array(Bin3, fun(X) -> decode_TeamMemberInfo( X ) end),
	{ V_customProp, Bin5 } = read_string( Bin4 ),
	{ #pk_GS2U_TeamInfo {
		teamType = V_teamType,
		teamID = V_teamID,
		leaderID = V_leaderID,
		info_list = V_info_list,
		customProp = V_customProp
		},
	Bin5 };

%GENERATED from file:team.h => GS2U_TeamLeaderStartCopymap
decode(?GS2U_TeamLeaderStartCopymap,Bin0) ->
	{ V_copyMapID, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_TeamLeaderStartCopymap {
		copyMapID = V_copyMapID
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_TeamMemberExtInfo
decode(?GS2U_TeamMemberExtInfo,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint16( Bin1 ),
	{ V_hpPC, Bin3 } = read_uint8( Bin2 ),
	{ V_mapID, Bin4 } = read_uint16( Bin3 ),
	{ #pk_GS2U_TeamMemberExtInfo {
		roleID = V_roleID,
		level = V_level,
		hpPC = V_hpPC,
		mapID = V_mapID
		},
	Bin4 };

%GENERATED from file:team.h => GS2U_TeamMemberOffline
decode(?GS2U_TeamMemberOffline,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_playerID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_TeamMemberOffline {
		teamType = V_teamType,
		playerID = V_playerID
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_TeamMemberOnline
decode(?GS2U_TeamMemberOnline,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_playerID, Bin2 } = read_uint64( Bin1 ),
	{ V_code, Bin3 } = read_uint64( Bin2 ),
	{ V_level, Bin4 } = read_uint16( Bin3 ),
	{ #pk_GS2U_TeamMemberOnline {
		teamType = V_teamType,
		playerID = V_playerID,
		code = V_code,
		level = V_level
		},
	Bin4 };

%GENERATED from file:team.h => GS2U_TeamMemberOnlineState
decode(?GS2U_TeamMemberOnlineState,Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_state, Bin2 } = read_int32( Bin1 ),
	{ #pk_GS2U_TeamMemberOnlineState {
		playerID = V_playerID,
		state = V_state
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_TeamReset
decode(?GS2U_TeamReset,Bin0) ->
	{ V_reason, Bin1 } = read_int32( Bin0 ),
	{ #pk_GS2U_TeamReset {
		reason = V_reason
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_TeammateLeave
decode(?GS2U_TeammateLeave,Bin0) ->
	{ V_teammateID, Bin1 } = read_uint64( Bin0 ),
	{ #pk_GS2U_TeammateLeave {
		teammateID = V_teammateID
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_TeammateLeaveAwayTeam
decode(?GS2U_TeammateLeaveAwayTeam,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_teammateID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GS2U_TeammateLeaveAwayTeam {
		teamType = V_teamType,
		teammateID = V_teammateID
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_TeammateLocation
decode(?GS2U_TeammateLocation,Bin0) ->
	{ V_teammateLocations, Bin1 } = read_array(Bin0, fun(X) -> decode_TeamMemberLocation( X ) end),
	{ #pk_GS2U_TeammateLocation {
		teammateLocations = V_teammateLocations
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_TeammateStartCopymapAck
decode(?GS2U_TeammateStartCopymapAck,Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_isAgree, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GS2U_TeammateStartCopymapAck {
		playerID = V_playerID,
		isAgree = V_isAgree
		},
	Bin2 };

%GENERATED from file:team.h => GS2U_UpdateMemberExInfo
decode(?GS2U_UpdateMemberExInfo,Bin0) ->
	{ V_infoEx, Bin1 } = decode_TeamMemberInfoEx( Bin0 ),
	{ #pk_GS2U_UpdateMemberExInfo {
		infoEx = V_infoEx
		},
	Bin1 };

%GENERATED from file:team.h => GS2U_UpdateTeamInfo
decode(?GS2U_UpdateTeamInfo,Bin0) ->
	{ V_base, Bin1 } = decode_TeamBaseInfo( Bin0 ),
	{ #pk_GS2U_UpdateTeamInfo {
		base = V_base
		},
	Bin1 };

%GENERATED from file:team.h => U2GS_AckInviteJoinTeam
decode(?U2GS_AckInviteJoinTeam,Bin0) ->
	{ V_isAgree, Bin1 } = read_uint8( Bin0 ),
	{ V_inviterPlayerID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_U2GS_AckInviteJoinTeam {
		isAgree = V_isAgree,
		inviterPlayerID = V_inviterPlayerID
		},
	Bin2 };

%GENERATED from file:team.h => U2GS_AckInviteTeam
decode(?U2GS_AckInviteTeam,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_isAgree, Bin2 } = read_uint8( Bin1 ),
	{ V_inviteType, Bin3 } = read_uint8( Bin2 ),
	{ V_inviterPlayerID, Bin4 } = read_uint64( Bin3 ),
	{ #pk_U2GS_AckInviteTeam {
		teamType = V_teamType,
		isAgree = V_isAgree,
		inviteType = V_inviteType,
		inviterPlayerID = V_inviterPlayerID
		},
	Bin4 };

%GENERATED from file:team.h => U2GS_CancelFastTeam
decode(?U2GS_CancelFastTeam,Bin0) ->
	{ #pk_U2GS_CancelFastTeam {

		},
	Bin0 };

%GENERATED from file:team.h => U2GS_IsOpenMapPanel
decode(?U2GS_IsOpenMapPanel,Bin0) ->
	{ V_isOpen, Bin1 } = read_bool( Bin0 ),
	{ #pk_U2GS_IsOpenMapPanel {
		isOpen = V_isOpen
		},
	Bin1 };

%GENERATED from file:team.h => U2GS_LeaveAwayTeam
decode(?U2GS_LeaveAwayTeam,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_id, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_LeaveAwayTeam {
		teamType = V_teamType,
		id = V_id
		},
	Bin2 };

%GENERATED from file:team.h => U2GS_NearbyPlayer_Request
decode(?U2GS_NearbyPlayer_Request,Bin0) ->
	{ #pk_U2GS_NearbyPlayer_Request {

		},
	Bin0 };

%GENERATED from file:team.h => U2GS_NoticeLeader
decode(?U2GS_NoticeLeader,Bin0) ->
	{ #pk_U2GS_NoticeLeader {

		},
	Bin0 };

%GENERATED from file:team.h => U2GS_OperateTeam
decode(?U2GS_OperateTeam,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ V_operateType, Bin2 } = read_uint8( Bin1 ),
	{ V_operatedID, Bin3 } = read_uint64( Bin2 ),
	{ #pk_U2GS_OperateTeam {
		teamType = V_teamType,
		operateType = V_operateType,
		operatedID = V_operatedID
		},
	Bin3 };

%GENERATED from file:team.h => U2GS_QueryRoleList
decode(?U2GS_QueryRoleList,Bin0) ->
	{ V_queryType, Bin1 } = read_int32( Bin0 ),
	{ #pk_U2GS_QueryRoleList {
		queryType = V_queryType
		},
	Bin1 };

%GENERATED from file:team.h => U2GS_QueryTeamList
decode(?U2GS_QueryTeamList,Bin0) ->
	{ V_mapIDList, Bin1 } = read_array(Bin0, fun(X) -> read_int32( X ) end),
	{ #pk_U2GS_QueryTeamList {
		mapIDList = V_mapIDList
		},
	Bin1 };

%GENERATED from file:team.h => U2GS_QueryTeamListThisLine
decode(?U2GS_QueryTeamListThisLine,Bin0) ->
	{ #pk_U2GS_QueryTeamListThisLine {

		},
	Bin0 };

%GENERATED from file:team.h => U2GS_QuickJoinTeam
decode(?U2GS_QuickJoinTeam,Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_mapID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_U2GS_QuickJoinTeam {
		roleID = V_roleID,
		mapID = V_mapID
		},
	Bin2 };

%GENERATED from file:team.h => U2GS_QuickTeamMatch
decode(?U2GS_QuickTeamMatch,Bin0) ->
	{ V_mapList, Bin1 } = read_array(Bin0, fun(X) -> read_uint16( X ) end),
	{ #pk_U2GS_QuickTeamMatch {
		mapList = V_mapList
		},
	Bin1 };

%GENERATED from file:team.h => U2GS_QuickTeamStart
decode(?U2GS_QuickTeamStart,Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_U2GS_QuickTeamStart {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:team.h => U2GS_RequestFightingCapacity
decode(?U2GS_RequestFightingCapacity,Bin0) ->
	{ #pk_U2GS_RequestFightingCapacity {

		},
	Bin0 };

%GENERATED from file:team.h => U2GS_RequestNearByTeamInfo
decode(?U2GS_RequestNearByTeamInfo,Bin0) ->
	{ V_teamType, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_RequestNearByTeamInfo {
		teamType = V_teamType
		},
	Bin1 };

%GENERATED from file:team.h => U2GS_TeamOp
decode(?U2GS_TeamOp,Bin0) ->
	{ V_operateType, Bin1 } = read_uint8( Bin0 ),
	{ V_operatedID, Bin2 } = read_uint64( Bin1 ),
	{ V_param1, Bin3 } = read_uint64( Bin2 ),
	{ #pk_U2GS_TeamOp {
		operateType = V_operateType,
		operatedID = V_operatedID,
		param1 = V_param1
		},
	Bin3 };

%GENERATED from file:trade.h => GS2U_BuyTradeFaild
decode(?GS2U_BuyTradeFaild,Bin0) ->
	{ #pk_GS2U_BuyTradeFaild {

		},
	Bin0 };

%GENERATED from file:trade.h => GS2U_BuyTradeSuccess
decode(?GS2U_BuyTradeSuccess,Bin0) ->
	{ #pk_GS2U_BuyTradeSuccess {

		},
	Bin0 };

%GENERATED from file:trade.h => GS2U_DealRecord
decode(?GS2U_DealRecord,Bin0) ->
	{ V_opCode, Bin1 } = read_uint8( Bin0 ),
	{ V_number, Bin2 } = read_uint32( Bin1 ),
	{ V_dealRecord, Bin3 } = read_array(Bin2, fun(X) -> decode_DealRecord( X ) end),
	{ #pk_GS2U_DealRecord {
		opCode = V_opCode,
		number = V_number,
		dealRecord = V_dealRecord
		},
	Bin3 };

%GENERATED from file:trade.h => GS2U_OpTradeResult
decode(?GS2U_OpTradeResult,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_orderID, Bin2 } = read_uint64( Bin1 ),
	{ V_result, Bin3 } = read_uint8( Bin2 ),
	{ V_opCode, Bin4 } = read_uint8( Bin3 ),
	{ #pk_GS2U_OpTradeResult {
		tradeClass = V_tradeClass,
		orderID = V_orderID,
		result = V_result,
		opCode = V_opCode
		},
	Bin4 };

%GENERATED from file:trade.h => GS2U_QueryTrade
decode(?GS2U_QueryTrade,Bin0) ->
	{ V_opCode, Bin1 } = read_uint8( Bin0 ),
	{ V_sortType, Bin2 } = read_uint8( Bin1 ),
	{ V_sortIndex, Bin3 } = read_uint8( Bin2 ),
	{ V_pageNumber, Bin4 } = read_uint32( Bin3 ),
	{ V_nowTime, Bin5 } = read_uint64( Bin4 ),
	{ V_queryTradeList, Bin6 } = read_array(Bin5, fun(X) -> decode_QueryTradeList( X ) end),
	{ #pk_GS2U_QueryTrade {
		opCode = V_opCode,
		sortType = V_sortType,
		sortIndex = V_sortIndex,
		pageNumber = V_pageNumber,
		nowTime = V_nowTime,
		queryTradeList = V_queryTradeList
		},
	Bin6 };

%GENERATED from file:trade.h => GS2U_QueryTradeInfo
decode(?GS2U_QueryTradeInfo,Bin0) ->
	{ V_opCode, Bin1 } = read_uint8( Bin0 ),
	{ V_tradeClass, Bin2 } = read_uint8( Bin1 ),
	{ V_itemClass, Bin3 } = read_uint8( Bin2 ),
	{ V_itemTypeList, Bin4 } = read_array(Bin3, fun(X) -> read_int8( X ) end),
	{ V_itemSubType, Bin5 } = read_int8( Bin4 ),
	{ V_allNumber, Bin6 } = read_int32( Bin5 ),
	{ #pk_GS2U_QueryTradeInfo {
		opCode = V_opCode,
		tradeClass = V_tradeClass,
		itemClass = V_itemClass,
		itemTypeList = V_itemTypeList,
		itemSubType = V_itemSubType,
		allNumber = V_allNumber
		},
	Bin6 };

%GENERATED from file:trade.h => GS2U_ReferenceItem
decode(?GS2U_ReferenceItem,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_referenceItems, Bin2 } = read_array(Bin1, fun(X) -> decode_ReferenceItem( X ) end),
	{ V_referenceItem, Bin3 } = decode_ReferenceItem( Bin2 ),
	{ #pk_GS2U_ReferenceItem {
		tradeClass = V_tradeClass,
		referenceItems = V_referenceItems,
		referenceItem = V_referenceItem
		},
	Bin3 };

%GENERATED from file:trade.h => U2GS_DownTrade
decode(?U2GS_DownTrade,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_orderID, Bin2 } = read_uint64( Bin1 ),
	{ V_opCode, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_DownTrade {
		tradeClass = V_tradeClass,
		orderID = V_orderID,
		opCode = V_opCode
		},
	Bin3 };

%GENERATED from file:trade.h => U2GS_NextResult
decode(?U2GS_NextResult,Bin0) ->
	{ V_pageNumber, Bin1 } = read_uint32( Bin0 ),
	{ V_opCode, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_NextResult {
		pageNumber = V_pageNumber,
		opCode = V_opCode
		},
	Bin2 };

%GENERATED from file:trade.h => U2GS_PutTrade
decode(?U2GS_PutTrade,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_itemUID, Bin2 } = read_uint64( Bin1 ),
	{ V_itemID, Bin3 } = read_uint32( Bin2 ),
	{ V_sellNumber, Bin4 } = read_uint16( Bin3 ),
	{ V_sellTime, Bin5 } = read_uint8( Bin4 ),
	{ V_gold, Bin6 } = read_uint32( Bin5 ),
	{ V_diamond, Bin7 } = read_uint32( Bin6 ),
	{ V_destRoleName, Bin8 } = read_string( Bin7 ),
	{ V_opCode, Bin9 } = read_uint8( Bin8 ),
	{ #pk_U2GS_PutTrade {
		tradeClass = V_tradeClass,
		itemUID = V_itemUID,
		itemID = V_itemID,
		sellNumber = V_sellNumber,
		sellTime = V_sellTime,
		gold = V_gold,
		diamond = V_diamond,
		destRoleName = V_destRoleName,
		opCode = V_opCode
		},
	Bin9 };

%GENERATED from file:trade.h => U2GS_QueryNewestTrade
decode(?U2GS_QueryNewestTrade,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_getNumber, Bin2 } = read_uint8( Bin1 ),
	{ V_oneNumber, Bin3 } = read_int8( Bin2 ),
	{ V_opCode, Bin4 } = read_uint8( Bin3 ),
	{ #pk_U2GS_QueryNewestTrade {
		tradeClass = V_tradeClass,
		getNumber = V_getNumber,
		oneNumber = V_oneNumber,
		opCode = V_opCode
		},
	Bin4 };

%GENERATED from file:trade.h => U2GS_QuerySelfTrade
decode(?U2GS_QuerySelfTrade,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_opCode, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_QuerySelfTrade {
		tradeClass = V_tradeClass,
		opCode = V_opCode
		},
	Bin2 };

%GENERATED from file:trade.h => U2GS_QueryTrade
decode(?U2GS_QueryTrade,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_itemClass, Bin2 } = read_uint8( Bin1 ),
	{ V_itemTypeList, Bin3 } = read_array(Bin2, fun(X) -> read_int8( X ) end),
	{ V_itemSubType, Bin4 } = read_int8( Bin3 ),
	{ V_itemList, Bin5 } = read_array(Bin4, fun(X) -> read_uint32( X ) end),
	{ V_career, Bin6 } = read_int16( Bin5 ),
	{ V_itemLvlMin, Bin7 } = read_int8( Bin6 ),
	{ V_itemLvlMax, Bin8 } = read_int8( Bin7 ),
	{ V_itemQuality, Bin9 } = read_int8( Bin8 ),
	{ V_oneNumber, Bin10 } = read_int8( Bin9 ),
	{ V_opCode, Bin11 } = read_uint8( Bin10 ),
	{ #pk_U2GS_QueryTrade {
		tradeClass = V_tradeClass,
		itemClass = V_itemClass,
		itemTypeList = V_itemTypeList,
		itemSubType = V_itemSubType,
		itemList = V_itemList,
		career = V_career,
		itemLvlMin = V_itemLvlMin,
		itemLvlMax = V_itemLvlMax,
		itemQuality = V_itemQuality,
		oneNumber = V_oneNumber,
		opCode = V_opCode
		},
	Bin11 };

%GENERATED from file:trade.h => U2GS_ReferenceItem
decode(?U2GS_ReferenceItem,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_requestNumber, Bin3 } = read_uint16( Bin2 ),
	{ #pk_U2GS_ReferenceItem {
		tradeClass = V_tradeClass,
		itemID = V_itemID,
		requestNumber = V_requestNumber
		},
	Bin3 };

%GENERATED from file:trade.h => U2GS_RequestDealRecord
decode(?U2GS_RequestDealRecord,Bin0) ->
	{ V_oneNumber, Bin1 } = read_int8( Bin0 ),
	{ V_pageNumber, Bin2 } = read_uint8( Bin1 ),
	{ V_opCode, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_RequestDealRecord {
		oneNumber = V_oneNumber,
		pageNumber = V_pageNumber,
		opCode = V_opCode
		},
	Bin3 };

%GENERATED from file:trade.h => U2GS_ResultSort
decode(?U2GS_ResultSort,Bin0) ->
	{ V_sortIndex, Bin1 } = read_uint8( Bin0 ),
	{ V_pageNumber, Bin2 } = read_uint32( Bin1 ),
	{ V_sortType, Bin3 } = read_uint8( Bin2 ),
	{ V_opCode, Bin4 } = read_uint8( Bin3 ),
	{ #pk_U2GS_ResultSort {
		sortIndex = V_sortIndex,
		pageNumber = V_pageNumber,
		sortType = V_sortType,
		opCode = V_opCode
		},
	Bin4 };

%GENERATED from file:trade.h => U2GS_TradeBuy
decode(?U2GS_TradeBuy,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_orderID, Bin2 } = read_uint64( Bin1 ),
	{ V_opCode, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_TradeBuy {
		tradeClass = V_tradeClass,
		orderID = V_orderID,
		opCode = V_opCode
		},
	Bin3 };

%GENERATED from file:trade.h => U2GS_TradeRefuse
decode(?U2GS_TradeRefuse,Bin0) ->
	{ V_tradeClass, Bin1 } = read_uint8( Bin0 ),
	{ V_orderID, Bin2 } = read_uint64( Bin1 ),
	{ V_opCode, Bin3 } = read_uint8( Bin2 ),
	{ #pk_U2GS_TradeRefuse {
		tradeClass = V_tradeClass,
		orderID = V_orderID,
		opCode = V_opCode
		},
	Bin3 };

%GENERATED from file:wake.h => GS2U_GoddessActiveSkill
decode(?GS2U_GoddessActiveSkill,Bin0) ->
	{ V_skillID, Bin1 } = read_uint32( Bin0 ),
	{ #pk_GS2U_GoddessActiveSkill {
		skillID = V_skillID
		},
	Bin1 };

%GENERATED from file:wake.h => GS2U_WakeInfo
decode(?GS2U_WakeInfo,Bin0) ->
	{ V_wakeInfo, Bin1 } = decode_WakeInfo( Bin0 ),
	{ #pk_GS2U_WakeInfo {
		wakeInfo = V_wakeInfo
		},
	Bin1 };

%GENERATED from file:wake.h => GS2U_WakeInfoList
decode(?GS2U_WakeInfoList,Bin0) ->
	{ V_wakeInfoList, Bin1 } = read_array(Bin0, fun(X) -> decode_WakeInfo( X ) end),
	{ #pk_GS2U_WakeInfoList {
		wakeInfoList = V_wakeInfoList
		},
	Bin1 };

%GENERATED from file:wake.h => U2GS_CallGoddess
decode(?U2GS_CallGoddess,Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_CallGoddess {
		cardID = V_cardID
		},
	Bin1 };

%GENERATED from file:wake.h => U2GS_ChangeState
decode(?U2GS_ChangeState,Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ V_state, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_ChangeState {
		cardID = V_cardID,
		state = V_state
		},
	Bin2 };

%GENERATED from file:wake.h => U2GS_OnKeyUpWakeInfo
decode(?U2GS_OnKeyUpWakeInfo,Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_OnKeyUpWakeInfo {
		cardID = V_cardID
		},
	Bin1 };

%GENERATED from file:wake.h => U2GS_UnlockCard
decode(?U2GS_UnlockCard,Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_UnlockCard {
		cardID = V_cardID
		},
	Bin1 };

%GENERATED from file:wake.h => U2GS_UnlockState
decode(?U2GS_UnlockState,Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ V_state, Bin2 } = read_uint8( Bin1 ),
	{ #pk_U2GS_UnlockState {
		cardID = V_cardID,
		state = V_state
		},
	Bin2 };

%GENERATED from file:wake.h => U2GS_UpGradeWakeInfo
decode(?U2GS_UpGradeWakeInfo,Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ #pk_U2GS_UpGradeWakeInfo {
		cardID = V_cardID
		},
	Bin1 };

%GENERATED from file:wake.h => U2GS_UpWakeInfo
decode(?U2GS_UpWakeInfo,Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ V_num, Bin2 } = read_uint16( Bin1 ),
	{ #pk_U2GS_UpWakeInfo {
		cardID = V_cardID,
		num = V_num
		},
	Bin2 };

%GENERATED from file:warriortrial.h => GS2U_InitWarriorTrialAck
decode(?GS2U_InitWarriorTrialAck,Bin0) ->
	{ V_record, Bin1 } = read_uint16( Bin0 ),
	{ V_cur, Bin2 } = read_uint16( Bin1 ),
	{ V_max, Bin3 } = read_uint16( Bin2 ),
	{ V_coin, Bin4 } = read_uint32( Bin3 ),
	{ V_maxReward, Bin5 } = read_uint16( Bin4 ),
	{ V_curCount, Bin6 } = read_uint32( Bin5 ),
	{ #pk_GS2U_InitWarriorTrialAck {
		record = V_record,
		cur = V_cur,
		max = V_max,
		coin = V_coin,
		maxReward = V_maxReward,
		curCount = V_curCount
		},
	Bin6 };

%GENERATED from file:warriortrial.h => GS2U_InitWarriorTrialMissionInfo
decode(?GS2U_InitWarriorTrialMissionInfo,Bin0) ->
	{ V_missionID, Bin1 } = read_uint16( Bin0 ),
	{ V_time, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GS2U_InitWarriorTrialMissionInfo {
		missionID = V_missionID,
		time = V_time
		},
	Bin2 };

%GENERATED from file:warriortrial.h => GS2U_SweepWarriorTrialSuccess
decode(?GS2U_SweepWarriorTrialSuccess,Bin0) ->
	{ V_record, Bin1 } = read_uint16( Bin0 ),
	{ V_cur, Bin2 } = read_uint16( Bin1 ),
	{ V_coin, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GS2U_SweepWarriorTrialSuccess {
		record = V_record,
		cur = V_cur,
		coin = V_coin
		},
	Bin3 };

%GENERATED from file:warriortrial.h => GS2U_WarriorFirstKillReward_Ack
decode(?GS2U_WarriorFirstKillReward_Ack,Bin0) ->
	{ V_isOK, Bin1 } = read_bool( Bin0 ),
	{ V_maxReward, Bin2 } = read_uint16( Bin1 ),
	{ V_start, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GS2U_WarriorFirstKillReward_Ack {
		isOK = V_isOK,
		maxReward = V_maxReward,
		start = V_start
		},
	Bin3 };

%GENERATED from file:warriortrial.h => GS2U_WarriorTrialSuccess
decode(?GS2U_WarriorTrialSuccess,Bin0) ->
	{ V_result, Bin1 } = read_bool( Bin0 ),
	{ #pk_GS2U_WarriorTrialSuccess {
		result = V_result
		},
	Bin1 };

%GENERATED from file:warriortrial.h => U2GS_BeginWarriorTrial
decode(?U2GS_BeginWarriorTrial,Bin0) ->
	{ #pk_U2GS_BeginWarriorTrial {

		},
	Bin0 };

%GENERATED from file:warriortrial.h => U2GS_CompleteWarriorTrail
decode(?U2GS_CompleteWarriorTrail,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_CompleteWarriorTrail {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:warriortrial.h => U2GS_SweepWarriorTrial
decode(?U2GS_SweepWarriorTrial,Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_SweepWarriorTrial {
		mapID = V_mapID
		},
	Bin1 };

%GENERATED from file:warriortrial.h => U2GS_SweepWarriorTrial_OneKey_Request
decode(?U2GS_SweepWarriorTrial_OneKey_Request,Bin0) ->
	{ #pk_U2GS_SweepWarriorTrial_OneKey_Request {

		},
	Bin0 };

%GENERATED from file:warriortrial.h => U2GS_WarriorFirstKillReward_Request
decode(?U2GS_WarriorFirstKillReward_Request,Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ #pk_U2GS_WarriorFirstKillReward_Request {
		id = V_id
		},
	Bin1 };

%GENERATED from file:warriortrial.h => U2GS_WarriorTrialInit
decode(?U2GS_WarriorTrialInit,Bin0) ->
	{ #pk_U2GS_WarriorTrialInit {

		},
	Bin0 }.

%GENERATED from file:Date.h => DateMonsterPos
-spec decode_DateMonsterPos(Bin0) -> { #pk_DateMonsterPos{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DateMonsterPos(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_z, Bin3 } = read_float( Bin2 ),
	{ #pk_DateMonsterPos {
		code = V_code,
		x = V_x,
		z = V_z
		},
	Bin3 }.

%GENERATED from file:LS2User.h => GameServerInfo
-spec decode_GameServerInfo(Bin0) -> { #pk_GameServerInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GameServerInfo(Bin0) ->
	{ V_lineid, Bin1 } = read_int16( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_ip, Bin3 } = read_string( Bin2 ),
	{ V_port, Bin4 } = read_int16( Bin3 ),
	{ V_state, Bin5 } = read_int8( Bin4 ),
	{ #pk_GameServerInfo {
		lineid = V_lineid,
		name = V_name,
		ip = V_ip,
		port = V_port,
		state = V_state
		},
	Bin5 }.

%GENERATED from file:achieve.h => AchieveSchedule
-spec decode_AchieveSchedule(Bin0) -> { #pk_AchieveSchedule{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_AchieveSchedule(Bin0) ->
	{ V_achieveID, Bin1 } = read_uint16( Bin0 ),
	{ V_scheduleRewardID, Bin2 } = read_uint8( Bin1 ),
	{ V_scheduleCompleteNum, Bin3 } = read_uint32( Bin2 ),
	{ V_scheduleCompleteID, Bin4 } = read_uint8( Bin3 ),
	{ #pk_AchieveSchedule {
		achieveID = V_achieveID,
		scheduleRewardID = V_scheduleRewardID,
		scheduleCompleteNum = V_scheduleCompleteNum,
		scheduleCompleteID = V_scheduleCompleteID
		},
	Bin4 }.

%GENERATED from file:achieve.h => BadgeInfo
-spec decode_BadgeInfo(Bin0) -> { #pk_BadgeInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BadgeInfo(Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemList, Bin2 } = read_array(Bin1, fun(X) -> read_uint32( X ) end),
	{ #pk_BadgeInfo {
		mapID = V_mapID,
		itemList = V_itemList
		},
	Bin2 }.

%GENERATED from file:achieve.h => DailyActiveInfo
-spec decode_DailyActiveInfo(Bin0) -> { #pk_DailyActiveInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DailyActiveInfo(Bin0) ->
	{ V_dailyID, Bin1 } = read_uint8( Bin0 ),
	{ V_curTimes, Bin2 } = read_uint8( Bin1 ),
	{ #pk_DailyActiveInfo {
		dailyID = V_dailyID,
		curTimes = V_curTimes
		},
	Bin2 }.

%GENERATED from file:achieve.h => TitleInfo
-spec decode_TitleInfo(Bin0) -> { #pk_TitleInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TitleInfo(Bin0) ->
	{ V_titleID, Bin1 } = read_uint16( Bin0 ),
	{ V_endTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_TitleInfo {
		titleID = V_titleID,
		endTime = V_endTime
		},
	Bin2 }.

%GENERATED from file:activity.h => ActivityAnswerRankData
-spec decode_ActivityAnswerRankData(Bin0) -> { #pk_ActivityAnswerRankData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ActivityAnswerRankData(Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_ActivityAnswerRankData {
		name = V_name,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:activity.h => ActivityState
-spec decode_ActivityState(Bin0) -> { #pk_ActivityState{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ActivityState(Bin0) ->
	{ V_activityID, Bin1 } = read_uint16( Bin0 ),
	{ V_state, Bin2 } = read_int16( Bin1 ),
	{ #pk_ActivityState {
		activityID = V_activityID,
		state = V_state
		},
	Bin2 }.

%GENERATED from file:activity.h => AngelInvestmentData
-spec decode_AngelInvestmentData(Bin0) -> { #pk_AngelInvestmentData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_AngelInvestmentData(Bin0) ->
	{ V_isCanGet, Bin1 } = read_bool( Bin0 ),
	{ V_leftNumber, Bin2 } = read_uint8( Bin1 ),
	{ V_id, Bin3 } = read_uint16( Bin2 ),
	{ #pk_AngelInvestmentData {
		isCanGet = V_isCanGet,
		leftNumber = V_leftNumber,
		id = V_id
		},
	Bin3 }.

%GENERATED from file:activity.h => ArenaBattle
-spec decode_ArenaBattle(Bin0) -> { #pk_ArenaBattle{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ArenaBattle(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_camp, Bin2 } = read_uint8( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_servername, Bin4 } = read_string( Bin3 ),
	{ V_killnum, Bin5 } = read_uint8( Bin4 ),
	{ V_force, Bin6 } = read_uint64( Bin5 ),
	{ V_hurt, Bin7 } = read_uint64( Bin6 ),
	{ V_arenaVal, Bin8 } = read_uint32( Bin7 ),
	{ #pk_ArenaBattle {
		id = V_id,
		camp = V_camp,
		name = V_name,
		servername = V_servername,
		killnum = V_killnum,
		force = V_force,
		hurt = V_hurt,
		arenaVal = V_arenaVal
		},
	Bin8 }.

%GENERATED from file:activity.h => ArenaRole
-spec decode_ArenaRole(Bin0) -> { #pk_ArenaRole{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ArenaRole(Bin0) ->
	{ V_servername, Bin1 } = read_string( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_id, Bin3 } = read_uint64( Bin2 ),
	{ V_camp, Bin4 } = read_uint8( Bin3 ),
	{ #pk_ArenaRole {
		servername = V_servername,
		name = V_name,
		id = V_id,
		camp = V_camp
		},
	Bin4 }.

%GENERATED from file:activity.h => ArenaTeamMemberInfo
-spec decode_ArenaTeamMemberInfo(Bin0) -> { #pk_ArenaTeamMemberInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ArenaTeamMemberInfo(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_isLeader, Bin4 } = read_bool( Bin3 ),
	{ V_isPrepare, Bin5 } = read_bool( Bin4 ),
	{ V_level, Bin6 } = read_uint8( Bin5 ),
	{ V_career, Bin7 } = read_uint32( Bin6 ),
	{ V_force, Bin8 } = read_uint64( Bin7 ),
	{ V_arenaVal, Bin9 } = read_uint32( Bin8 ),
	{ #pk_ArenaTeamMemberInfo {
		id = V_id,
		code = V_code,
		name = V_name,
		isLeader = V_isLeader,
		isPrepare = V_isPrepare,
		level = V_level,
		career = V_career,
		force = V_force,
		arenaVal = V_arenaVal
		},
	Bin9 }.

%GENERATED from file:activity.h => ChargeOrUseRuleInfo
-spec decode_ChargeOrUseRuleInfo(Bin0) -> { #pk_ChargeOrUseRuleInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ChargeOrUseRuleInfo(Bin0) ->
	{ V_ruleID, Bin1 } = read_uint8( Bin0 ),
	{ V_diamon, Bin2 } = read_uint32( Bin1 ),
	{ V_itemJson, Bin3 } = read_string( Bin2 ),
	{ V_hasTake, Bin4 } = read_bool( Bin3 ),
	{ #pk_ChargeOrUseRuleInfo {
		ruleID = V_ruleID,
		diamon = V_diamon,
		itemJson = V_itemJson,
		hasTake = V_hasTake
		},
	Bin4 }.

%GENERATED from file:activity.h => CrosArenaBattleHighRank
-spec decode_CrosArenaBattleHighRank(Bin0) -> { #pk_CrosArenaBattleHighRank{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CrosArenaBattleHighRank(Bin0) ->
	{ V_career, Bin1 } = read_uint32( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_servername, Bin4 } = read_string( Bin3 ),
	{ V_force, Bin5 } = read_uint32( Bin4 ),
	{ V_arenaVal, Bin6 } = read_uint32( Bin5 ),
	{ V_win, Bin7 } = read_uint32( Bin6 ),
	{ V_fail, Bin8 } = read_uint32( Bin7 ),
	{ V_time, Bin9 } = read_uint64( Bin8 ),
	{ #pk_CrosArenaBattleHighRank {
		career = V_career,
		roleID = V_roleID,
		name = V_name,
		servername = V_servername,
		force = V_force,
		arenaVal = V_arenaVal,
		win = V_win,
		fail = V_fail,
		time = V_time
		},
	Bin9 }.

%GENERATED from file:activity.h => CrosArenaBattleRank
-spec decode_CrosArenaBattleRank(Bin0) -> { #pk_CrosArenaBattleRank{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CrosArenaBattleRank(Bin0) ->
	{ V_rankID, Bin1 } = read_uint8( Bin0 ),
	{ V_career, Bin2 } = read_uint32( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_name, Bin4 } = read_string( Bin3 ),
	{ V_servername, Bin5 } = read_string( Bin4 ),
	{ V_force, Bin6 } = read_uint32( Bin5 ),
	{ V_arenaVal, Bin7 } = read_uint32( Bin6 ),
	{ V_win, Bin8 } = read_uint32( Bin7 ),
	{ V_fail, Bin9 } = read_uint32( Bin8 ),
	{ #pk_CrosArenaBattleRank {
		rankID = V_rankID,
		career = V_career,
		roleID = V_roleID,
		name = V_name,
		servername = V_servername,
		force = V_force,
		arenaVal = V_arenaVal,
		win = V_win,
		fail = V_fail
		},
	Bin9 }.

%GENERATED from file:activity.h => CrosBattleExploit
-spec decode_CrosBattleExploit(Bin0) -> { #pk_CrosBattleExploit{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CrosBattleExploit(Bin0) ->
	{ V_rankID, Bin1 } = read_uint8( Bin0 ),
	{ V_career, Bin2 } = read_uint32( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_name, Bin4 } = read_string( Bin3 ),
	{ V_servername, Bin5 } = read_string( Bin4 ),
	{ V_force, Bin6 } = read_uint32( Bin5 ),
	{ V_exploit, Bin7 } = read_uint32( Bin6 ),
	{ #pk_CrosBattleExploit {
		rankID = V_rankID,
		career = V_career,
		roleID = V_roleID,
		name = V_name,
		servername = V_servername,
		force = V_force,
		exploit = V_exploit
		},
	Bin7 }.

%GENERATED from file:activity.h => DarknessPlayerRank
-spec decode_DarknessPlayerRank(Bin0) -> { #pk_DarknessPlayerRank{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DarknessPlayerRank(Bin0) ->
	{ V_rank, Bin1 } = read_uint32( Bin0 ),
	{ V_camp, Bin2 } = read_uint8( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_roleName, Bin4 } = read_string( Bin3 ),
	{ V_roleLevel, Bin5 } = read_uint32( Bin4 ),
	{ V_integral, Bin6 } = read_uint32( Bin5 ),
	{ V_mapPos, Bin7 } = read_uint8( Bin6 ),
	{ #pk_DarknessPlayerRank {
		rank = V_rank,
		camp = V_camp,
		roleID = V_roleID,
		roleName = V_roleName,
		roleLevel = V_roleLevel,
		integral = V_integral,
		mapPos = V_mapPos
		},
	Bin7 }.

%GENERATED from file:activity.h => DarknessState
-spec decode_DarknessState(Bin0) -> { #pk_DarknessState{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DarknessState(Bin0) ->
	{ V_remainTime, Bin1 } = read_uint32( Bin0 ),
	{ #pk_DarknessState {
		remainTime = V_remainTime
		},
	Bin1 }.

%GENERATED from file:activity.h => DeadlineGift
-spec decode_DeadlineGift(Bin0) -> { #pk_DeadlineGift{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DeadlineGift(Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ V_startTime, Bin2 } = read_uint32( Bin1 ),
	{ V_remainTime, Bin3 } = read_uint32( Bin2 ),
	{ V_tabString, Bin4 } = read_string( Bin3 ),
	{ V_itemID1, Bin5 } = read_uint16( Bin4 ),
	{ V_itemID2, Bin6 } = read_uint16( Bin5 ),
	{ V_itemID3, Bin7 } = read_uint16( Bin6 ),
	{ V_itemNum1, Bin8 } = read_uint16( Bin7 ),
	{ V_itemNum2, Bin9 } = read_uint16( Bin8 ),
	{ V_itemNum3, Bin10 } = read_uint16( Bin9 ),
	{ V_itemBuyNum1, Bin11 } = read_uint16( Bin10 ),
	{ V_itemBuyNum2, Bin12 } = read_uint16( Bin11 ),
	{ V_itemBuyNum3, Bin13 } = read_uint16( Bin12 ),
	{ V_itemDiscount1, Bin14 } = read_string( Bin13 ),
	{ V_itemDiscount2, Bin15 } = read_string( Bin14 ),
	{ V_itemDiscount3, Bin16 } = read_string( Bin15 ),
	{ V_itemCoinType1, Bin17 } = read_uint16( Bin16 ),
	{ V_itemCoinType2, Bin18 } = read_uint16( Bin17 ),
	{ V_itemCoinType3, Bin19 } = read_uint16( Bin18 ),
	{ V_itemCoinNum1, Bin20 } = read_uint16( Bin19 ),
	{ V_itemCoinNum2, Bin21 } = read_uint16( Bin20 ),
	{ V_itemCoinNum3, Bin22 } = read_uint16( Bin21 ),
	{ V_itemRealCoinNum1, Bin23 } = read_uint16( Bin22 ),
	{ V_itemRealCoinNum2, Bin24 } = read_uint16( Bin23 ),
	{ V_itemRealCoinNum3, Bin25 } = read_uint16( Bin24 ),
	{ V_image, Bin26 } = read_string( Bin25 ),
	{ V_itemName1, Bin27 } = read_string( Bin26 ),
	{ V_itemName2, Bin28 } = read_string( Bin27 ),
	{ V_itemName3, Bin29 } = read_string( Bin28 ),
	{ V_itemCounts1, Bin30 } = read_uint16( Bin29 ),
	{ V_itemCounts2, Bin31 } = read_uint16( Bin30 ),
	{ V_itemCounts3, Bin32 } = read_uint16( Bin31 ),
	{ V_gift1, Bin33 } = read_uint16( Bin32 ),
	{ V_gift2, Bin34 } = read_uint16( Bin33 ),
	{ V_gift3, Bin35 } = read_uint16( Bin34 ),
	{ #pk_DeadlineGift {
		id = V_id,
		startTime = V_startTime,
		remainTime = V_remainTime,
		tabString = V_tabString,
		itemID1 = V_itemID1,
		itemID2 = V_itemID2,
		itemID3 = V_itemID3,
		itemNum1 = V_itemNum1,
		itemNum2 = V_itemNum2,
		itemNum3 = V_itemNum3,
		itemBuyNum1 = V_itemBuyNum1,
		itemBuyNum2 = V_itemBuyNum2,
		itemBuyNum3 = V_itemBuyNum3,
		itemDiscount1 = V_itemDiscount1,
		itemDiscount2 = V_itemDiscount2,
		itemDiscount3 = V_itemDiscount3,
		itemCoinType1 = V_itemCoinType1,
		itemCoinType2 = V_itemCoinType2,
		itemCoinType3 = V_itemCoinType3,
		itemCoinNum1 = V_itemCoinNum1,
		itemCoinNum2 = V_itemCoinNum2,
		itemCoinNum3 = V_itemCoinNum3,
		itemRealCoinNum1 = V_itemRealCoinNum1,
		itemRealCoinNum2 = V_itemRealCoinNum2,
		itemRealCoinNum3 = V_itemRealCoinNum3,
		image = V_image,
		itemName1 = V_itemName1,
		itemName2 = V_itemName2,
		itemName3 = V_itemName3,
		itemCounts1 = V_itemCounts1,
		itemCounts2 = V_itemCounts2,
		itemCounts3 = V_itemCounts3,
		gift1 = V_gift1,
		gift2 = V_gift2,
		gift3 = V_gift3
		},
	Bin35 }.

%GENERATED from file:activity.h => EscortPlunderMoney
-spec decode_EscortPlunderMoney(Bin0) -> { #pk_EscortPlunderMoney{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EscortPlunderMoney(Bin0) ->
	{ V_roleName, Bin1 } = read_string( Bin0 ),
	{ V_plunderMoney, Bin2 } = read_int64( Bin1 ),
	{ #pk_EscortPlunderMoney {
		roleName = V_roleName,
		plunderMoney = V_plunderMoney
		},
	Bin2 }.

%GENERATED from file:activity.h => EscortResultReward
-spec decode_EscortResultReward(Bin0) -> { #pk_EscortResultReward{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EscortResultReward(Bin0) ->
	{ V_moneyType, Bin1 } = read_uint8( Bin0 ),
	{ V_money, Bin2 } = read_uint32( Bin1 ),
	{ V_perValue, Bin3 } = read_uint32( Bin2 ),
	{ #pk_EscortResultReward {
		moneyType = V_moneyType,
		money = V_money,
		perValue = V_perValue
		},
	Bin3 }.

%GENERATED from file:activity.h => EscortTeam
-spec decode_EscortTeam(Bin0) -> { #pk_EscortTeam{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EscortTeam(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_sequenceNumber, Bin3 } = read_uint16( Bin2 ),
	{ V_cur_RobNumber, Bin4 } = read_uint16( Bin3 ),
	{ V_max_RobNumber, Bin5 } = read_uint16( Bin4 ),
	{ #pk_EscortTeam {
		roleID = V_roleID,
		roleName = V_roleName,
		sequenceNumber = V_sequenceNumber,
		cur_RobNumber = V_cur_RobNumber,
		max_RobNumber = V_max_RobNumber
		},
	Bin5 }.

%GENERATED from file:activity.h => GBMapLineInfo
-spec decode_GBMapLineInfo(Bin0) -> { #pk_GBMapLineInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GBMapLineInfo(Bin0) ->
	{ V_lineID, Bin1 } = read_uint32( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GBMapLineInfo {
		lineID = V_lineID,
		number = V_number
		},
	Bin2 }.

%GENERATED from file:activity.h => HDBattleExploit
-spec decode_HDBattleExploit(Bin0) -> { #pk_HDBattleExploit{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_HDBattleExploit(Bin0) ->
	{ V_rankID, Bin1 } = read_uint8( Bin0 ),
	{ V_camp, Bin2 } = read_uint8( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_name, Bin4 } = read_string( Bin3 ),
	{ V_servername, Bin5 } = read_string( Bin4 ),
	{ V_killNum, Bin6 } = read_uint16( Bin5 ),
	{ V_asKillNum, Bin7 } = read_uint16( Bin6 ),
	{ V_exploit, Bin8 } = read_uint32( Bin7 ),
	{ #pk_HDBattleExploit {
		rankID = V_rankID,
		camp = V_camp,
		roleID = V_roleID,
		name = V_name,
		servername = V_servername,
		killNum = V_killNum,
		asKillNum = V_asKillNum,
		exploit = V_exploit
		},
	Bin8 }.

%GENERATED from file:activity.h => KillRank
-spec decode_KillRank(Bin0) -> { #pk_KillRank{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_KillRank(Bin0) ->
	{ V_sortNumber, Bin1 } = read_uint32( Bin0 ),
	{ V_killNumber, Bin2 } = read_uint32( Bin1 ),
	{ V_playerName, Bin3 } = read_string( Bin2 ),
	{ #pk_KillRank {
		sortNumber = V_sortNumber,
		killNumber = V_killNumber,
		playerName = V_playerName
		},
	Bin3 }.

%GENERATED from file:activity.h => LotteryItem
-spec decode_LotteryItem(Bin0) -> { #pk_LotteryItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LotteryItem(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_pondID, Bin3 } = read_uint32( Bin2 ),
	{ V_onlyID, Bin4 } = read_uint32( Bin3 ),
	{ V_itemId, Bin5 } = read_uint32( Bin4 ),
	{ V_itemNumber, Bin6 } = read_uint32( Bin5 ),
	{ V_isBind, Bin7 } = read_uint8( Bin6 ),
	{ #pk_LotteryItem {
		roleID = V_roleID,
		roleName = V_roleName,
		pondID = V_pondID,
		onlyID = V_onlyID,
		itemId = V_itemId,
		itemNumber = V_itemNumber,
		isBind = V_isBind
		},
	Bin7 }.

%GENERATED from file:activity.h => LotteryNote
-spec decode_LotteryNote(Bin0) -> { #pk_LotteryNote{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LotteryNote(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_itemID, Bin3 } = read_uint32( Bin2 ),
	{ V_itemNumber, Bin4 } = read_uint32( Bin3 ),
	{ V_isBind, Bin5 } = read_uint8( Bin4 ),
	{ V_isServerNote, Bin6 } = read_uint8( Bin5 ),
	{ V_zbTime, Bin7 } = read_uint64( Bin6 ),
	{ #pk_LotteryNote {
		roleID = V_roleID,
		roleName = V_roleName,
		itemID = V_itemID,
		itemNumber = V_itemNumber,
		isBind = V_isBind,
		isServerNote = V_isServerNote,
		zbTime = V_zbTime
		},
	Bin7 }.

%GENERATED from file:activity.h => OperateActExchangeRequire
-spec decode_OperateActExchangeRequire(Bin0) -> { #pk_OperateActExchangeRequire{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OperateActExchangeRequire(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint16( Bin1 ),
	{ #pk_OperateActExchangeRequire {
		itemID = V_itemID,
		itemNum = V_itemNum
		},
	Bin2 }.

%GENERATED from file:activity.h => Picture_notice
-spec decode_Picture_notice(Bin0) -> { #pk_Picture_notice{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Picture_notice(Bin0) ->
	{ V_site, Bin1 } = read_int8( Bin0 ),
	{ V_ver, Bin2 } = read_int32( Bin1 ),
	{ V_source, Bin3 } = read_string( Bin2 ),
	{ V_target, Bin4 } = read_string( Bin3 ),
	{ #pk_Picture_notice {
		site = V_site,
		ver = V_ver,
		source = V_source,
		target = V_target
		},
	Bin4 }.

%GENERATED from file:activity.h => PlayerGBInfo
-spec decode_PlayerGBInfo(Bin0) -> { #pk_PlayerGBInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PlayerGBInfo(Bin0) ->
	{ V_remainSecond, Bin1 } = read_uint32( Bin0 ),
	{ V_gatherPoint, Bin2 } = read_uint32( Bin1 ),
	{ V_status, Bin3 } = read_uint8( Bin2 ),
	{ #pk_PlayerGBInfo {
		remainSecond = V_remainSecond,
		gatherPoint = V_gatherPoint,
		status = V_status
		},
	Bin3 }.

%GENERATED from file:activity.h => PlayerKingBattleEquip
-spec decode_PlayerKingBattleEquip(Bin0) -> { #pk_PlayerKingBattleEquip{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PlayerKingBattleEquip(Bin0) ->
	{ V_equipID, Bin1 } = read_uint32( Bin0 ),
	{ V_quality, Bin2 } = read_uint8( Bin1 ),
	{ #pk_PlayerKingBattleEquip {
		equipID = V_equipID,
		quality = V_quality
		},
	Bin2 }.

%GENERATED from file:activity.h => PlayerKingBattleEquipLevel
-spec decode_PlayerKingBattleEquipLevel(Bin0) -> { #pk_PlayerKingBattleEquipLevel{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PlayerKingBattleEquipLevel(Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_PlayerKingBattleEquipLevel {
		type = V_type,
		level = V_level
		},
	Bin2 }.

%GENERATED from file:activity.h => Question
-spec decode_Question(Bin0) -> { #pk_Question{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Question(Bin0) ->
	{ V_questionID, Bin1 } = read_uint32( Bin0 ),
	{ V_answers, Bin2 } = read_array(Bin1, fun(X) -> read_uint8( X ) end),
	{ #pk_Question {
		questionID = V_questionID,
		answers = V_answers
		},
	Bin2 }.

%GENERATED from file:activity.h => RewardItem
-spec decode_RewardItem(Bin0) -> { #pk_RewardItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RewardItem(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_number, Bin2 } = read_uint32( Bin1 ),
	{ #pk_RewardItem {
		itemID = V_itemID,
		number = V_number
		},
	Bin2 }.

%GENERATED from file:activity.h => RobitAnswer
-spec decode_RobitAnswer(Bin0) -> { #pk_RobitAnswer{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RobitAnswer(Bin0) ->
	{ V_startTime, Bin1 } = read_uint64( Bin0 ),
	{ V_intervalTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_RobitAnswer {
		startTime = V_startTime,
		intervalTime = V_intervalTime
		},
	Bin2 }.

%GENERATED from file:activity.h => SevenDayMissionData
-spec decode_SevenDayMissionData(Bin0) -> { #pk_SevenDayMissionData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SevenDayMissionData(Bin0) ->
	{ V_isFinish, Bin1 } = read_bool( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ V_max, Bin3 } = read_uint16( Bin2 ),
	{ V_missionid, Bin4 } = read_uint16( Bin3 ),
	{ #pk_SevenDayMissionData {
		isFinish = V_isFinish,
		number = V_number,
		max = V_max,
		missionid = V_missionid
		},
	Bin4 }.

%GENERATED from file:activity.h => WildBossInfo
-spec decode_WildBossInfo(Bin0) -> { #pk_WildBossInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_WildBossInfo(Bin0) ->
	{ V_mapID, Bin1 } = read_uint32( Bin0 ),
	{ V_bossID, Bin2 } = read_uint32( Bin1 ),
	{ V_refreshTime, Bin3 } = read_uint64( Bin2 ),
	{ #pk_WildBossInfo {
		mapID = V_mapID,
		bossID = V_bossID,
		refreshTime = V_refreshTime
		},
	Bin3 }.

%GENERATED from file:activity.h => collectionWords_RewardCfg
-spec decode_collectionWords_RewardCfg(Bin0) -> { #pk_collectionWords_RewardCfg{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_collectionWords_RewardCfg(Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ V_group, Bin2 } = read_uint16( Bin1 ),
	{ V_collect_num, Bin3 } = read_uint32( Bin2 ),
	{ V_listNeed, Bin4 } = read_array(Bin3, fun(X) -> decode_itemIdAndCount( X ) end),
	{ V_listReward, Bin5 } = read_array(Bin4, fun(X) -> decode_itemIdAndCount( X ) end),
	{ #pk_collectionWords_RewardCfg {
		id = V_id,
		group = V_group,
		collect_num = V_collect_num,
		listNeed = V_listNeed,
		listReward = V_listReward
		},
	Bin5 }.

%GENERATED from file:activity.h => collectionWords_State
-spec decode_collectionWords_State(Bin0) -> { #pk_collectionWords_State{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_collectionWords_State(Bin0) ->
	{ V_group, Bin1 } = read_uint16( Bin0 ),
	{ V_ver, Bin2 } = read_uint32( Bin1 ),
	{ V_image, Bin3 } = read_string( Bin2 ),
	{ V_info_1, Bin4 } = read_string( Bin3 ),
	{ V_info_2, Bin5 } = read_string( Bin4 ),
	{ V_open_y_m_d, Bin6 } = read_array(Bin5, fun(X) -> read_uint32( X ) end),
	{ V_limit_time, Bin7 } = read_uint32( Bin6 ),
	{ V_word_limit, Bin8 } = read_uint32( Bin7 ),
	{ #pk_collectionWords_State {
		group = V_group,
		ver = V_ver,
		image = V_image,
		info_1 = V_info_1,
		info_2 = V_info_2,
		open_y_m_d = V_open_y_m_d,
		limit_time = V_limit_time,
		word_limit = V_word_limit
		},
	Bin8 }.

%GENERATED from file:activity.h => itemIdAndCount
-spec decode_itemIdAndCount(Bin0) -> { #pk_itemIdAndCount{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_itemIdAndCount(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_count, Bin2 } = read_uint32( Bin1 ),
	{ #pk_itemIdAndCount {
		itemID = V_itemID,
		count = V_count
		},
	Bin2 }.

%GENERATED from file:arena.h => KingRole
-spec decode_KingRole(Bin0) -> { #pk_KingRole{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_KingRole(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_ranksort, Bin2 } = read_uint32( Bin1 ),
	{ V_career, Bin3 } = read_uint32( Bin2 ),
	{ V_roleName, Bin4 } = read_string( Bin3 ),
	{ V_worshipTimes, Bin5 } = read_uint32( Bin4 ),
	{ #pk_KingRole {
		roleID = V_roleID,
		ranksort = V_ranksort,
		career = V_career,
		roleName = V_roleName,
		worshipTimes = V_worshipTimes
		},
	Bin5 }.

%GENERATED from file:arena.h => LadderLS
-spec decode_LadderLS(Bin0) -> { #pk_LadderLS{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LadderLS(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_isTerminator, Bin3 } = read_bool( Bin2 ),
	{ V_ls_times, Bin4 } = read_uint16( Bin3 ),
	{ V_targetID, Bin5 } = read_uint64( Bin4 ),
	{ V_targetName, Bin6 } = read_string( Bin5 ),
	{ #pk_LadderLS {
		roleID = V_roleID,
		roleName = V_roleName,
		isTerminator = V_isTerminator,
		ls_times = V_ls_times,
		targetID = V_targetID,
		targetName = V_targetName
		},
	Bin6 }.

%GENERATED from file:arena.h => LadderMatchInfo
-spec decode_LadderMatchInfo(Bin0) -> { #pk_LadderMatchInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LadderMatchInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_isChallenge, Bin3 } = read_bool( Bin2 ),
	{ V_isWin, Bin4 } = read_bool( Bin3 ),
	{ V_targetID, Bin5 } = read_uint64( Bin4 ),
	{ V_targetName, Bin6 } = read_string( Bin5 ),
	{ V_rank1, Bin7 } = read_uint32( Bin6 ),
	{ V_rank2, Bin8 } = read_uint32( Bin7 ),
	{ #pk_LadderMatchInfo {
		roleID = V_roleID,
		roleName = V_roleName,
		isChallenge = V_isChallenge,
		isWin = V_isWin,
		targetID = V_targetID,
		targetName = V_targetName,
		rank1 = V_rank1,
		rank2 = V_rank2
		},
	Bin8 }.

%GENERATED from file:arena.h => LadderTargetInfo
-spec decode_LadderTargetInfo(Bin0) -> { #pk_LadderTargetInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LadderTargetInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_ranksort, Bin5 } = read_uint32( Bin4 ),
	{ V_fightingCapacity, Bin6 } = read_uint32( Bin5 ),
	{ V_sex, Bin7 } = read_int8( Bin6 ),
	{ V_race, Bin8 } = read_int8( Bin7 ),
	{ #pk_LadderTargetInfo {
		roleID = V_roleID,
		name = V_name,
		level = V_level,
		career = V_career,
		ranksort = V_ranksort,
		fightingCapacity = V_fightingCapacity,
		sex = V_sex,
		race = V_race
		},
	Bin8 }.

%GENERATED from file:arena.h => SelfBattleInfo
-spec decode_SelfBattleInfo(Bin0) -> { #pk_SelfBattleInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SelfBattleInfo(Bin0) ->
	{ V_ranksort, Bin1 } = read_uint32( Bin0 ),
	{ V_fightingCapacity, Bin2 } = read_uint32( Bin1 ),
	{ V_exploit, Bin3 } = read_uint32( Bin2 ),
	{ V_cur_ChallengeTimes, Bin4 } = read_uint16( Bin3 ),
	{ V_max_ChallengeTimes, Bin5 } = read_uint16( Bin4 ),
	{ V_moneyType, Bin6 } = read_uint8( Bin5 ),
	{ V_money, Bin7 } = read_uint32( Bin6 ),
	{ V_cur_win, Bin8 } = read_uint16( Bin7 ),
	{ V_max_win, Bin9 } = read_uint16( Bin8 ),
	{ V_win_times, Bin10 } = read_uint32( Bin9 ),
	{ V_surplusSec, Bin11 } = read_uint32( Bin10 ),
	{ V_exploitValue, Bin12 } = read_uint32( Bin11 ),
	{ #pk_SelfBattleInfo {
		ranksort = V_ranksort,
		fightingCapacity = V_fightingCapacity,
		exploit = V_exploit,
		cur_ChallengeTimes = V_cur_ChallengeTimes,
		max_ChallengeTimes = V_max_ChallengeTimes,
		moneyType = V_moneyType,
		money = V_money,
		cur_win = V_cur_win,
		max_win = V_max_win,
		win_times = V_win_times,
		surplusSec = V_surplusSec,
		exploitValue = V_exploitValue
		},
	Bin12 }.

%GENERATED from file:aruna.h => WWFormData
-spec decode_WWFormData(Bin0) -> { #pk_WWFormData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_WWFormData(Bin0) ->
	{ V_selfRank, Bin1 } = decode_WWRank( Bin0 ),
	{ V_selfLastRank, Bin2 } = decode_WWRank( Bin1 ),
	{ V_isGetLastReward, Bin3 } = read_bool( Bin2 ),
	{ V_phase, Bin4 } = read_uint16( Bin3 ),
	{ V_schedule, Bin5 } = read_uint32( Bin4 ),
	{ V_selfPhase, Bin6 } = read_uint16( Bin5 ),
	{ V_upper, Bin7 } = read_uint32( Bin6 ),
	{ #pk_WWFormData {
		selfRank = V_selfRank,
		selfLastRank = V_selfLastRank,
		isGetLastReward = V_isGetLastReward,
		phase = V_phase,
		schedule = V_schedule,
		selfPhase = V_selfPhase,
		upper = V_upper
		},
	Bin7 }.

%GENERATED from file:aruna.h => WWMapLineInfo
-spec decode_WWMapLineInfo(Bin0) -> { #pk_WWMapLineInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_WWMapLineInfo(Bin0) ->
	{ V_mapID, Bin1 } = read_uint16( Bin0 ),
	{ V_lineID, Bin2 } = read_uint32( Bin1 ),
	{ V_number, Bin3 } = read_uint16( Bin2 ),
	{ #pk_WWMapLineInfo {
		mapID = V_mapID,
		lineID = V_lineID,
		number = V_number
		},
	Bin3 }.

%GENERATED from file:aruna.h => WWRank
-spec decode_WWRank(Bin0) -> { #pk_WWRank{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_WWRank(Bin0) ->
	{ V_rankIndex, Bin1 } = read_uint16( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_roleName, Bin3 } = read_string( Bin2 ),
	{ V_guildName, Bin4 } = read_string( Bin3 ),
	{ V_contribution, Bin5 } = read_uint32( Bin4 ),
	{ #pk_WWRank {
		rankIndex = V_rankIndex,
		roleID = V_roleID,
		roleName = V_roleName,
		guildName = V_guildName,
		contribution = V_contribution
		},
	Bin5 }.

%GENERATED from file:aruna.h => WWSyncMapPhaseTwo
-spec decode_WWSyncMapPhaseTwo(Bin0) -> { #pk_WWSyncMapPhaseTwo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_WWSyncMapPhaseTwo(Bin0) ->
	{ V_monsterID, Bin1 } = read_uint32( Bin0 ),
	{ V_curNumber, Bin2 } = read_uint32( Bin1 ),
	{ V_maxNumber, Bin3 } = read_uint32( Bin2 ),
	{ #pk_WWSyncMapPhaseTwo {
		monsterID = V_monsterID,
		curNumber = V_curNumber,
		maxNumber = V_maxNumber
		},
	Bin3 }.

%GENERATED from file:bag.h => BagSlot
-spec decode_BagSlot(Bin0) -> { #pk_BagSlot{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BagSlot(Bin0) ->
	{ V_max, Bin1 } = read_uint8( Bin0 ),
	{ V_used, Bin2 } = read_uint8( Bin1 ),
	{ #pk_BagSlot {
		max = V_max,
		used = V_used
		},
	Bin2 }.

%GENERATED from file:bag.h => EquipEnhancedProp
-spec decode_EquipEnhancedProp(Bin0) -> { #pk_EquipEnhancedProp{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EquipEnhancedProp(Bin0) ->
	{ V_propKey, Bin1 } = read_uint8( Bin0 ),
	{ V_propValue, Bin2 } = read_float( Bin1 ),
	{ #pk_EquipEnhancedProp {
		propKey = V_propKey,
		propValue = V_propValue
		},
	Bin2 }.

%GENERATED from file:bag.h => EquipGemInfo
-spec decode_EquipGemInfo(Bin0) -> { #pk_EquipGemInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EquipGemInfo(Bin0) ->
	{ V_equipPos, Bin1 } = read_uint16( Bin0 ),
	{ V_gemList, Bin2 } = read_array(Bin1, fun(X) -> decode_GemEmbedInfo( X ) end),
	{ #pk_EquipGemInfo {
		equipPos = V_equipPos,
		gemList = V_gemList
		},
	Bin2 }.

%GENERATED from file:bag.h => EquipItemInfo
-spec decode_EquipItemInfo(Bin0) -> { #pk_EquipItemInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EquipItemInfo(Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemUID, Bin2 } = read_uint64( Bin1 ),
	{ V_recastNum, Bin3 } = read_uint16( Bin2 ),
	{ V_quality, Bin4 } = read_uint8( Bin3 ),
	{ V_isBind, Bin5 } = read_bool( Bin4 ),
	{ V_isLocked, Bin6 } = read_bool( Bin5 ),
	{ V_expiredTime, Bin7 } = read_uint32( Bin6 ),
	{ V_equipProps, Bin8 } = read_array(Bin7, fun(X) -> decode_EquipPropInfo( X ) end),
	{ #pk_EquipItemInfo {
		itemID = V_itemID,
		itemUID = V_itemUID,
		recastNum = V_recastNum,
		quality = V_quality,
		isBind = V_isBind,
		isLocked = V_isLocked,
		expiredTime = V_expiredTime,
		equipProps = V_equipProps
		},
	Bin8 }.

%GENERATED from file:bag.h => EquipPropInfo
-spec decode_EquipPropInfo(Bin0) -> { #pk_EquipPropInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EquipPropInfo(Bin0) ->
	{ V_propType, Bin1 } = read_uint8( Bin0 ),
	{ V_propKey, Bin2 } = read_uint8( Bin1 ),
	{ V_propAffix, Bin3 } = read_uint16( Bin2 ),
	{ V_calcType, Bin4 } = read_bool( Bin3 ),
	{ V_propValue, Bin5 } = read_float( Bin4 ),
	{ #pk_EquipPropInfo {
		propType = V_propType,
		propKey = V_propKey,
		propAffix = V_propAffix,
		calcType = V_calcType,
		propValue = V_propValue
		},
	Bin5 }.

%GENERATED from file:bag.h => EquipRefineLevel
-spec decode_EquipRefineLevel(Bin0) -> { #pk_EquipRefineLevel{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EquipRefineLevel(Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_bless, Bin2 } = read_uint16( Bin1 ),
	{ V_level, Bin3 } = read_uint8( Bin2 ),
	{ #pk_EquipRefineLevel {
		type = V_type,
		bless = V_bless,
		level = V_level
		},
	Bin3 }.

%GENERATED from file:bag.h => EquipStarLevel
-spec decode_EquipStarLevel(Bin0) -> { #pk_EquipStarLevel{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EquipStarLevel(Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_EquipStarLevel {
		type = V_type,
		level = V_level
		},
	Bin2 }.

%GENERATED from file:bag.h => EquipUpStarInfo
-spec decode_EquipUpStarInfo(Bin0) -> { #pk_EquipUpStarInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_EquipUpStarInfo(Bin0) ->
	{ V_pos, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ V_prog, Bin3 } = read_uint8( Bin2 ),
	{ V_bless, Bin4 } = read_uint16( Bin3 ),
	{ #pk_EquipUpStarInfo {
		pos = V_pos,
		level = V_level,
		prog = V_prog,
		bless = V_bless
		},
	Bin4 }.

%GENERATED from file:bag.h => ExchangeResource
-spec decode_ExchangeResource(Bin0) -> { #pk_ExchangeResource{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ExchangeResource(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_groupID, Bin2 } = read_uint8( Bin1 ),
	{ V_itemID, Bin3 } = read_uint32( Bin2 ),
	{ V_payItem, Bin4 } = read_array(Bin3, fun(X) -> decode_PayItemOfExchange( X ) end),
	{ V_playerLevel, Bin5 } = read_uint8( Bin4 ),
	{ V_limit, Bin6 } = read_uint16( Bin5 ),
	{ #pk_ExchangeResource {
		id = V_id,
		groupID = V_groupID,
		itemID = V_itemID,
		payItem = V_payItem,
		playerLevel = V_playerLevel,
		limit = V_limit
		},
	Bin6 }.

%GENERATED from file:bag.h => GemEmbedInfo
-spec decode_GemEmbedInfo(Bin0) -> { #pk_GemEmbedInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GemEmbedInfo(Bin0) ->
	{ V_gemID, Bin1 } = read_uint64( Bin0 ),
	{ V_slot, Bin2 } = read_uint8( Bin1 ),
	{ #pk_GemEmbedInfo {
		gemID = V_gemID,
		slot = V_slot
		},
	Bin2 }.

%GENERATED from file:bag.h => LookGemInfo
-spec decode_LookGemInfo(Bin0) -> { #pk_LookGemInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookGemInfo(Bin0) ->
	{ V_gemID, Bin1 } = read_uint16( Bin0 ),
	{ V_slot, Bin2 } = read_uint8( Bin1 ),
	{ #pk_LookGemInfo {
		gemID = V_gemID,
		slot = V_slot
		},
	Bin2 }.

%GENERATED from file:bag.h => LookGodWeaponInfo
-spec decode_LookGodWeaponInfo(Bin0) -> { #pk_LookGodWeaponInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookGodWeaponInfo(Bin0) ->
	{ V_weaponID, Bin1 } = read_uint8( Bin0 ),
	{ V_weaponLevel, Bin2 } = read_uint16( Bin1 ),
	{ V_skillLevel, Bin3 } = read_uint16( Bin2 ),
	{ #pk_LookGodWeaponInfo {
		weaponID = V_weaponID,
		weaponLevel = V_weaponLevel,
		skillLevel = V_skillLevel
		},
	Bin3 }.

%GENERATED from file:bag.h => LookPetEquipInfo
-spec decode_LookPetEquipInfo(Bin0) -> { #pk_LookPetEquipInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookPetEquipInfo(Bin0) ->
	{ V_equipID, Bin1 } = read_uint8( Bin0 ),
	{ V_equipLv, Bin2 } = read_uint8( Bin1 ),
	{ #pk_LookPetEquipInfo {
		equipID = V_equipID,
		equipLv = V_equipLv
		},
	Bin2 }.

%GENERATED from file:bag.h => LookPetInfo
-spec decode_LookPetInfo(Bin0) -> { #pk_LookPetInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookPetInfo(Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_petStar, Bin2 } = read_uint8( Bin1 ),
	{ V_petname, Bin3 } = read_string( Bin2 ),
	{ V_petForce, Bin4 } = read_uint32( Bin3 ),
	{ V_petColNum, Bin5 } = read_uint16( Bin4 ),
	{ V_petRaw, Bin6 } = read_uint8( Bin5 ),
	{ V_petSkill, Bin7 } = read_array(Bin6, fun(X) -> decode_LookPetSkill( X ) end),
	{ V_equalInfo, Bin8 } = read_array(Bin7, fun(X) -> decode_LookPetEquipInfo( X ) end),
	{ V_petPropValues, Bin9 } = read_array(Bin8, fun(X) -> read_float( X ) end),
	{ #pk_LookPetInfo {
		petID = V_petID,
		petStar = V_petStar,
		petname = V_petname,
		petForce = V_petForce,
		petColNum = V_petColNum,
		petRaw = V_petRaw,
		petSkill = V_petSkill,
		equalInfo = V_equalInfo,
		petPropValues = V_petPropValues
		},
	Bin9 }.

%GENERATED from file:bag.h => LookPetSkill
-spec decode_LookPetSkill(Bin0) -> { #pk_LookPetSkill{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookPetSkill(Bin0) ->
	{ V_petSkillId, Bin1 } = read_uint16( Bin0 ),
	{ V_petSkillLv, Bin2 } = read_uint8( Bin1 ),
	{ V_petSkillType, Bin3 } = read_uint8( Bin2 ),
	{ #pk_LookPetSkill {
		petSkillId = V_petSkillId,
		petSkillLv = V_petSkillLv,
		petSkillType = V_petSkillType
		},
	Bin3 }.

%GENERATED from file:bag.h => LookWakeInfo
-spec decode_LookWakeInfo(Bin0) -> { #pk_LookWakeInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookWakeInfo(Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_LookWakeInfo {
		cardID = V_cardID,
		level = V_level
		},
	Bin2 }.

%GENERATED from file:bag.h => NormalItemInfo
-spec decode_NormalItemInfo(Bin0) -> { #pk_NormalItemInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_NormalItemInfo(Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemUID, Bin2 } = read_uint64( Bin1 ),
	{ V_itemSum, Bin3 } = read_uint16( Bin2 ),
	{ V_isBind, Bin4 } = read_bool( Bin3 ),
	{ V_isLocked, Bin5 } = read_bool( Bin4 ),
	{ V_expiredTime, Bin6 } = read_uint32( Bin5 ),
	{ #pk_NormalItemInfo {
		itemID = V_itemID,
		itemUID = V_itemUID,
		itemSum = V_itemSum,
		isBind = V_isBind,
		isLocked = V_isLocked,
		expiredTime = V_expiredTime
		},
	Bin6 }.

%GENERATED from file:bag.h => PayItemOfExchange
-spec decode_PayItemOfExchange(Bin0) -> { #pk_PayItemOfExchange{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PayItemOfExchange(Bin0) ->
	{ V_item, Bin1 } = read_int32( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ #pk_PayItemOfExchange {
		item = V_item,
		number = V_number
		},
	Bin2 }.

%GENERATED from file:bag.h => PortraitFrame
-spec decode_PortraitFrame(Bin0) -> { #pk_PortraitFrame{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PortraitFrame(Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ V_endTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_PortraitFrame {
		id = V_id,
		endTime = V_endTime
		},
	Bin2 }.

%GENERATED from file:bag.h => RPView_AddProp
-spec decode_RPView_AddProp(Bin0) -> { #pk_RPView_AddProp{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RPView_AddProp(Bin0) ->
	{ V_prop, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_float( Bin1 ),
	{ #pk_RPView_AddProp {
		prop = V_prop,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:bag.h => RPView_AssistBattleInfo
-spec decode_RPView_AssistBattleInfo(Bin0) -> { #pk_RPView_AssistBattleInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RPView_AssistBattleInfo(Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_slot, Bin2 } = read_uint8( Bin1 ),
	{ #pk_RPView_AssistBattleInfo {
		petID = V_petID,
		slot = V_slot
		},
	Bin2 }.

%GENERATED from file:bag.h => RPView_FashionInfo
-spec decode_RPView_FashionInfo(Bin0) -> { #pk_RPView_FashionInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RPView_FashionInfo(Bin0) ->
	{ V_fashionID, Bin1 } = read_uint32( Bin0 ),
	{ V_time, Bin2 } = read_uint32( Bin1 ),
	{ #pk_RPView_FashionInfo {
		fashionID = V_fashionID,
		time = V_time
		},
	Bin2 }.

%GENERATED from file:bag.h => RPView_PetBaseInfo
-spec decode_RPView_PetBaseInfo(Bin0) -> { #pk_RPView_PetBaseInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RPView_PetBaseInfo(Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_petStar, Bin2 } = read_uint8( Bin1 ),
	{ V_status, Bin3 } = read_uint8( Bin2 ),
	{ V_petName, Bin4 } = read_string( Bin3 ),
	{ V_petRaw, Bin5 } = read_uint8( Bin4 ),
	{ V_petProps, Bin6 } = read_array(Bin5, fun(X) -> decode_RPView_AddProp( X ) end),
	{ V_petForce, Bin7 } = read_uint64( Bin6 ),
	{ V_upCount, Bin8 } = read_uint32( Bin7 ),
	{ V_petLevel, Bin9 } = read_uint32( Bin8 ),
	{ V_petExp, Bin10 } = read_uint32( Bin9 ),
	{ #pk_RPView_PetBaseInfo {
		petID = V_petID,
		petStar = V_petStar,
		status = V_status,
		petName = V_petName,
		petRaw = V_petRaw,
		petProps = V_petProps,
		petForce = V_petForce,
		upCount = V_upCount,
		petLevel = V_petLevel,
		petExp = V_petExp
		},
	Bin10 }.

%GENERATED from file:bag.h => RecastPosInfo
-spec decode_RecastPosInfo(Bin0) -> { #pk_RecastPosInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RecastPosInfo(Bin0) ->
	{ V_equipPos, Bin1 } = read_uint16( Bin0 ),
	{ V_recastVal, Bin2 } = read_uint32( Bin1 ),
	{ V_recastInfo, Bin3 } = read_array(Bin2, fun(X) -> decode_RecastPropInfo( X ) end),
	{ V_recastInfo_ext, Bin4 } = read_array(Bin3, fun(X) -> decode_RecastPropInfo( X ) end),
	{ #pk_RecastPosInfo {
		equipPos = V_equipPos,
		recastVal = V_recastVal,
		recastInfo = V_recastInfo,
		recastInfo_ext = V_recastInfo_ext
		},
	Bin4 }.

%GENERATED from file:bag.h => RecastPropInfo
-spec decode_RecastPropInfo(Bin0) -> { #pk_RecastPropInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RecastPropInfo(Bin0) ->
	{ V_pos, Bin1 } = read_uint16( Bin0 ),
	{ V_propIndex, Bin2 } = read_uint32( Bin1 ),
	{ V_propValue, Bin3 } = read_float( Bin2 ),
	{ V_propValMax, Bin4 } = read_float( Bin3 ),
	{ #pk_RecastPropInfo {
		pos = V_pos,
		propIndex = V_propIndex,
		propValue = V_propValue,
		propValMax = V_propValMax
		},
	Bin4 }.

%GENERATED from file:bag.h => RecycleEquip
-spec decode_RecycleEquip(Bin0) -> { #pk_RecycleEquip{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RecycleEquip(Bin0) ->
	{ V_slot, Bin1 } = read_uint8( Bin0 ),
	{ V_equip, Bin2 } = decode_EquipItemInfo( Bin1 ),
	{ #pk_RecycleEquip {
		slot = V_slot,
		equip = V_equip
		},
	Bin2 }.

%GENERATED from file:bag.h => RecycleItem
-spec decode_RecycleItem(Bin0) -> { #pk_RecycleItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RecycleItem(Bin0) ->
	{ V_slot, Bin1 } = read_uint8( Bin0 ),
	{ V_item, Bin2 } = decode_NormalItemInfo( Bin1 ),
	{ #pk_RecycleItem {
		slot = V_slot,
		item = V_item
		},
	Bin2 }.

%GENERATED from file:bag.h => starCostItem
-spec decode_starCostItem(Bin0) -> { #pk_starCostItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_starCostItem(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint16( Bin1 ),
	{ #pk_starCostItem {
		itemID = V_itemID,
		itemNum = V_itemNum
		},
	Bin2 }.

%GENERATED from file:bag.h => washReturnItemInfo
-spec decode_washReturnItemInfo(Bin0) -> { #pk_washReturnItemInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_washReturnItemInfo(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint16( Bin1 ),
	{ #pk_washReturnItemInfo {
		itemID = V_itemID,
		itemNum = V_itemNum
		},
	Bin2 }.

%GENERATED from file:battle.h => AttackResultList
-spec decode_AttackResultList(Bin0) -> { #pk_AttackResultList{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_AttackResultList(Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_AttackResultList {
		type = V_type,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:battle.h => BeAttack
-spec decode_BeAttack(Bin0) -> { #pk_BeAttack{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BeAttack(Bin0) ->
	{ V_camp, Bin1 } = read_uint8( Bin0 ),
	{ V_pos, Bin2 } = read_uint8( Bin1 ),
	{ V_hp, Bin3 } = read_int32( Bin2 ),
	{ #pk_BeAttack {
		camp = V_camp,
		pos = V_pos,
		hp = V_hp
		},
	Bin3 }.

%GENERATED from file:battle.h => TrunBattleResult
-spec decode_TrunBattleResult(Bin0) -> { #pk_TrunBattleResult{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TrunBattleResult(Bin0) ->
	{ V_camp, Bin1 } = read_uint8( Bin0 ),
	{ V_pos, Bin2 } = read_uint8( Bin1 ),
	{ V_id, Bin3 } = read_uint16( Bin2 ),
	{ V_turn, Bin4 } = read_uint8( Bin3 ),
	{ V_bl, Bin5 } = read_array(Bin4, fun(X) -> decode_BeAttack( X ) end),
	{ #pk_TrunBattleResult {
		camp = V_camp,
		pos = V_pos,
		id = V_id,
		turn = V_turn,
		bl = V_bl
		},
	Bin5 }.

%GENERATED from file:battle.h => TurnBattleInit
-spec decode_TurnBattleInit(Bin0) -> { #pk_TurnBattleInit{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TurnBattleInit(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ V_camp, Bin3 } = read_uint8( Bin2 ),
	{ V_pos, Bin4 } = read_uint8( Bin3 ),
	{ V_hp, Bin5 } = read_uint32( Bin4 ),
	{ #pk_TurnBattleInit {
		id = V_id,
		type = V_type,
		camp = V_camp,
		pos = V_pos,
		hp = V_hp
		},
	Bin5 }.

%GENERATED from file:business.h => ActivityNum
-spec decode_ActivityNum(Bin0) -> { #pk_ActivityNum{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ActivityNum(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_claimNum, Bin2 } = read_uint32( Bin1 ),
	{ #pk_ActivityNum {
		id = V_id,
		claimNum = V_claimNum
		},
	Bin2 }.

%GENERATED from file:business.h => ActivitySuccessItem
-spec decode_ActivitySuccessItem(Bin0) -> { #pk_ActivitySuccessItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ActivitySuccessItem(Bin0) ->
	{ V_index, Bin1 } = read_uint8( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_num, Bin3 } = read_uint32( Bin2 ),
	{ #pk_ActivitySuccessItem {
		index = V_index,
		itemID = V_itemID,
		num = V_num
		},
	Bin3 }.

%GENERATED from file:business.h => Business
-spec decode_Business(Bin0) -> { #pk_Business{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Business(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_platformItemID, Bin2 } = read_string( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_des, Bin4 } = read_string( Bin3 ),
	{ V_pic, Bin5 } = read_string( Bin4 ),
	{ V_picType, Bin6 } = read_uint8( Bin5 ),
	{ V_activityType, Bin7 } = read_uint8( Bin6 ),
	{ V_isAlonePay, Bin8 } = read_uint8( Bin7 ),
	{ V_resetClaimNumType, Bin9 } = read_uint8( Bin8 ),
	{ V_label, Bin10 } = read_uint8( Bin9 ),
	{ V_claimMoney, Bin11 } = read_float( Bin10 ),
	{ V_claimGold, Bin12 } = read_uint32( Bin11 ),
	{ V_claimConsumeType, Bin13 } = read_uint8( Bin12 ),
	{ V_claimConsume, Bin14 } = read_uint32( Bin13 ),
	{ V_claimNum, Bin15 } = read_uint32( Bin14 ),
	{ V_claimIsBuy, Bin16 } = read_uint8( Bin15 ),
	{ V_claimVip, Bin17 } = read_uint8( Bin16 ),
	{ V_claimLevel, Bin18 } = read_uint16( Bin17 ),
	{ V_rewardCoinType, Bin19 } = read_uint8( Bin18 ),
	{ V_rewardCoinNum, Bin20 } = read_uint32( Bin19 ),
	{ V_rewardPackageID, Bin21 } = read_uint32( Bin20 ),
	{ V_item1, Bin22 } = read_uint32( Bin21 ),
	{ V_num1, Bin23 } = read_uint32( Bin22 ),
	{ V_item2, Bin24 } = read_uint32( Bin23 ),
	{ V_num2, Bin25 } = read_uint32( Bin24 ),
	{ V_item3, Bin26 } = read_uint32( Bin25 ),
	{ V_num3, Bin27 } = read_uint32( Bin26 ),
	{ V_item4, Bin28 } = read_uint32( Bin27 ),
	{ V_num4, Bin29 } = read_uint32( Bin28 ),
	{ V_item5, Bin30 } = read_uint32( Bin29 ),
	{ V_num5, Bin31 } = read_uint32( Bin30 ),
	{ V_item6, Bin32 } = read_uint32( Bin31 ),
	{ V_num6, Bin33 } = read_uint32( Bin32 ),
	{ V_item7, Bin34 } = read_uint32( Bin33 ),
	{ V_num7, Bin35 } = read_uint32( Bin34 ),
	{ V_item8, Bin36 } = read_uint32( Bin35 ),
	{ V_num8, Bin37 } = read_uint32( Bin36 ),
	{ V_item9, Bin38 } = read_uint32( Bin37 ),
	{ V_num9, Bin39 } = read_uint32( Bin38 ),
	{ V_item10, Bin40 } = read_uint32( Bin39 ),
	{ V_num10, Bin41 } = read_uint32( Bin40 ),
	{ V_startTime, Bin42 } = read_uint32( Bin41 ),
	{ V_endTime, Bin43 } = read_uint32( Bin42 ),
	{ V_giveGold, Bin44 } = read_uint32( Bin43 ),
	{ V_isAddClaimGold, Bin45 } = read_uint8( Bin44 ),
	{ #pk_Business {
		id = V_id,
		platformItemID = V_platformItemID,
		name = V_name,
		des = V_des,
		pic = V_pic,
		picType = V_picType,
		activityType = V_activityType,
		isAlonePay = V_isAlonePay,
		resetClaimNumType = V_resetClaimNumType,
		label = V_label,
		claimMoney = V_claimMoney,
		claimGold = V_claimGold,
		claimConsumeType = V_claimConsumeType,
		claimConsume = V_claimConsume,
		claimNum = V_claimNum,
		claimIsBuy = V_claimIsBuy,
		claimVip = V_claimVip,
		claimLevel = V_claimLevel,
		rewardCoinType = V_rewardCoinType,
		rewardCoinNum = V_rewardCoinNum,
		rewardPackageID = V_rewardPackageID,
		item1 = V_item1,
		num1 = V_num1,
		item2 = V_item2,
		num2 = V_num2,
		item3 = V_item3,
		num3 = V_num3,
		item4 = V_item4,
		num4 = V_num4,
		item5 = V_item5,
		num5 = V_num5,
		item6 = V_item6,
		num6 = V_num6,
		item7 = V_item7,
		num7 = V_num7,
		item8 = V_item8,
		num8 = V_num8,
		item9 = V_item9,
		num9 = V_num9,
		item10 = V_item10,
		num10 = V_num10,
		startTime = V_startTime,
		endTime = V_endTime,
		giveGold = V_giveGold,
		isAddClaimGold = V_isAddClaimGold
		},
	Bin45 }.

%GENERATED from file:business.h => BusinessCAInfo
-spec decode_BusinessCAInfo(Bin0) -> { #pk_BusinessCAInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BusinessCAInfo(Bin0) ->
	{ V_businessID, Bin1 } = read_uint32( Bin0 ),
	{ V_isComplete, Bin2 } = read_uint8( Bin1 ),
	{ V_isReward, Bin3 } = read_uint8( Bin2 ),
	{ V_rechargeDiamondCount, Bin4 } = read_uint32( Bin3 ),
	{ #pk_BusinessCAInfo {
		businessID = V_businessID,
		isComplete = V_isComplete,
		isReward = V_isReward,
		rechargeDiamondCount = V_rechargeDiamondCount
		},
	Bin4 }.

%GENERATED from file:business.h => CoinConsume
-spec decode_CoinConsume(Bin0) -> { #pk_CoinConsume{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CoinConsume(Bin0) ->
	{ V_coinType, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_CoinConsume {
		coinType = V_coinType,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:business.h => DialCost
-spec decode_DialCost(Bin0) -> { #pk_DialCost{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DialCost(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_des, Bin2 } = read_string( Bin1 ),
	{ V_boxType, Bin3 } = read_uint8( Bin2 ),
	{ V_coinType, Bin4 } = read_uint8( Bin3 ),
	{ V_coinNum, Bin5 } = read_uint32( Bin4 ),
	{ V_times, Bin6 } = read_uint16( Bin5 ),
	{ V_addLuckValue, Bin7 } = read_uint16( Bin6 ),
	{ V_maxLuck, Bin8 } = read_uint16( Bin7 ),
	{ #pk_DialCost {
		id = V_id,
		des = V_des,
		boxType = V_boxType,
		coinType = V_coinType,
		coinNum = V_coinNum,
		times = V_times,
		addLuckValue = V_addLuckValue,
		maxLuck = V_maxLuck
		},
	Bin8 }.

%GENERATED from file:business.h => DialItem
-spec decode_DialItem(Bin0) -> { #pk_DialItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DialItem(Bin0) ->
	{ V_boxType, Bin1 } = read_uint8( Bin0 ),
	{ V_index, Bin2 } = read_uint8( Bin1 ),
	{ V_itemID, Bin3 } = read_uint32( Bin2 ),
	{ V_num, Bin4 } = read_uint32( Bin3 ),
	{ #pk_DialItem {
		boxType = V_boxType,
		index = V_index,
		itemID = V_itemID,
		num = V_num
		},
	Bin4 }.

%GENERATED from file:business.h => DialReward
-spec decode_DialReward(Bin0) -> { #pk_DialReward{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DialReward(Bin0) ->
	{ V_boxType, Bin1 } = read_uint8( Bin0 ),
	{ V_needTimes, Bin2 } = read_uint16( Bin1 ),
	{ V_itemID1, Bin3 } = read_uint32( Bin2 ),
	{ V_num1, Bin4 } = read_uint32( Bin3 ),
	{ V_itemID2, Bin5 } = read_uint32( Bin4 ),
	{ V_num2, Bin6 } = read_uint32( Bin5 ),
	{ V_itemID3, Bin7 } = read_uint32( Bin6 ),
	{ V_num3, Bin8 } = read_uint32( Bin7 ),
	{ #pk_DialReward {
		boxType = V_boxType,
		needTimes = V_needTimes,
		itemID1 = V_itemID1,
		num1 = V_num1,
		itemID2 = V_itemID2,
		num2 = V_num2,
		itemID3 = V_itemID3,
		num3 = V_num3
		},
	Bin8 }.

%GENERATED from file:business.h => SelfDialInfo
-spec decode_SelfDialInfo(Bin0) -> { #pk_SelfDialInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SelfDialInfo(Bin0) ->
	{ V_boxType, Bin1 } = read_uint8( Bin0 ),
	{ V_haveTimes, Bin2 } = read_uint16( Bin1 ),
	{ V_getTimes, Bin3 } = read_array(Bin2, fun(X) -> read_uint16( X ) end),
	{ V_haveLuck, Bin4 } = read_uint16( Bin3 ),
	{ #pk_SelfDialInfo {
		boxType = V_boxType,
		haveTimes = V_haveTimes,
		getTimes = V_getTimes,
		haveLuck = V_haveLuck
		},
	Bin4 }.

%GENERATED from file:companion.h => CompanionMember
-spec decode_CompanionMember(Bin0) -> { #pk_CompanionMember{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CompanionMember(Bin0) ->
	{ V_roleid, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_lvl, Bin3 } = read_uint16( Bin2 ),
	{ V_relation, Bin4 } = read_uint8( Bin3 ),
	{ V_cur_lively, Bin5 } = read_uint32( Bin4 ),
	{ V_max_lively, Bin6 } = read_uint32( Bin5 ),
	{ V_all_lively, Bin7 } = read_uint32( Bin6 ),
	{ V_offlinetime, Bin8 } = read_uint64( Bin7 ),
	{ V_onlineTimeEnough, Bin9 } = read_bool( Bin8 ),
	{ V_styleID, Bin10 } = read_uint8( Bin9 ),
	{ V_mapID, Bin11 } = read_uint16( Bin10 ),
	{ V_career, Bin12 } = read_uint32( Bin11 ),
	{ V_race, Bin13 } = read_uint8( Bin12 ),
	{ V_sex, Bin14 } = read_uint8( Bin13 ),
	{ V_head, Bin15 } = read_uint32( Bin14 ),
	{ #pk_CompanionMember {
		roleid = V_roleid,
		name = V_name,
		lvl = V_lvl,
		relation = V_relation,
		cur_lively = V_cur_lively,
		max_lively = V_max_lively,
		all_lively = V_all_lively,
		offlinetime = V_offlinetime,
		onlineTimeEnough = V_onlineTimeEnough,
		styleID = V_styleID,
		mapID = V_mapID,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head
		},
	Bin15 }.

%GENERATED from file:copy.h => BossRankInfo
-spec decode_BossRankInfo(Bin0) -> { #pk_BossRankInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BossRankInfo(Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ V_hurt, Bin2 } = read_uint64( Bin1 ),
	{ #pk_BossRankInfo {
		name = V_name,
		hurt = V_hurt
		},
	Bin2 }.

%GENERATED from file:copy.h => CopyMapRankInfo
-spec decode_CopyMapRankInfo(Bin0) -> { #pk_CopyMapRankInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CopyMapRankInfo(Bin0) ->
	{ V_copyMapID, Bin1 } = read_uint32( Bin0 ),
	{ V_star, Bin2 } = read_uint16( Bin1 ),
	{ V_teamList, Bin3 } = read_array(Bin2, fun(X) -> decode_CopyRankTeamInfo( X ) end),
	{ #pk_CopyMapRankInfo {
		copyMapID = V_copyMapID,
		star = V_star,
		teamList = V_teamList
		},
	Bin3 }.

%GENERATED from file:copy.h => CopyRankTeamInfo
-spec decode_CopyRankTeamInfo(Bin0) -> { #pk_CopyRankTeamInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CopyRankTeamInfo(Bin0) ->
	{ V_diffTime, Bin1 } = read_float( Bin0 ),
	{ V_time, Bin2 } = read_uint32( Bin1 ),
	{ V_rankPos, Bin3 } = read_int16( Bin2 ),
	{ V_leader, Bin4 } = decode_CopyRankTeamMemberInfo( Bin3 ),
	{ V_membersList, Bin5 } = read_array(Bin4, fun(X) -> decode_CopyRankTeamMemberInfo( X ) end),
	{ #pk_CopyRankTeamInfo {
		diffTime = V_diffTime,
		time = V_time,
		rankPos = V_rankPos,
		leader = V_leader,
		membersList = V_membersList
		},
	Bin5 }.

%GENERATED from file:copy.h => CopyRankTeamMemberInfo
-spec decode_CopyRankTeamMemberInfo(Bin0) -> { #pk_CopyRankTeamMemberInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CopyRankTeamMemberInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ #pk_CopyRankTeamMemberInfo {
		roleID = V_roleID,
		roleName = V_roleName
		},
	Bin2 }.

%GENERATED from file:copy.h => DevilCopyMapStarInfo
-spec decode_DevilCopyMapStarInfo(Bin0) -> { #pk_DevilCopyMapStarInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DevilCopyMapStarInfo(Bin0) ->
	{ V_instanceGroup, Bin1 } = read_uint32( Bin0 ),
	{ V_star, Bin2 } = read_uint16( Bin1 ),
	{ #pk_DevilCopyMapStarInfo {
		instanceGroup = V_instanceGroup,
		star = V_star
		},
	Bin2 }.

%GENERATED from file:copy.h => OneFestivalTimeInfo
-spec decode_OneFestivalTimeInfo(Bin0) -> { #pk_OneFestivalTimeInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OneFestivalTimeInfo(Bin0) ->
	{ V_festivalID, Bin1 } = read_uint32( Bin0 ),
	{ V_startTime, Bin2 } = read_uint32( Bin1 ),
	{ V_endTime, Bin3 } = read_uint32( Bin2 ),
	{ #pk_OneFestivalTimeInfo {
		festivalID = V_festivalID,
		startTime = V_startTime,
		endTime = V_endTime
		},
	Bin3 }.

%GENERATED from file:copy.h => chapterInfo
-spec decode_chapterInfo(Bin0) -> { #pk_chapterInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_chapterInfo(Bin0) ->
	{ V_nextChapterSeconds, Bin1 } = read_uint32( Bin0 ),
	{ V_headCount, Bin2 } = read_uint16( Bin1 ),
	{ V_maxChapter, Bin3 } = read_uint16( Bin2 ),
	{ V_curChapter, Bin4 } = read_uint16( Bin3 ),
	{ V_curChapterMonsterMax, Bin5 } = read_uint16( Bin4 ),
	{ V_curChapterMonsterKilled, Bin6 } = read_uint16( Bin5 ),
	{ V_mapMonterMax, Bin7 } = read_uint16( Bin6 ),
	{ V_materialVal, Bin8 } = read_uint32( Bin7 ),
	{ #pk_chapterInfo {
		nextChapterSeconds = V_nextChapterSeconds,
		headCount = V_headCount,
		maxChapter = V_maxChapter,
		curChapter = V_curChapter,
		curChapterMonsterMax = V_curChapterMonsterMax,
		curChapterMonsterKilled = V_curChapterMonsterKilled,
		mapMonterMax = V_mapMonterMax,
		materialVal = V_materialVal
		},
	Bin8 }.

%GENERATED from file:copy.h => towerInfo
-spec decode_towerInfo(Bin0) -> { #pk_towerInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_towerInfo(Bin0) ->
	{ V_dataID, Bin1 } = read_uint32( Bin0 ),
	{ V_type, Bin2 } = read_uint32( Bin1 ),
	{ V_level, Bin3 } = read_uint32( Bin2 ),
	{ #pk_towerInfo {
		dataID = V_dataID,
		type = V_type,
		level = V_level
		},
	Bin3 }.

%GENERATED from file:fashion.h => FashionInfo
-spec decode_FashionInfo(Bin0) -> { #pk_FashionInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_FashionInfo(Bin0) ->
	{ V_fashionID, Bin1 } = read_uint32( Bin0 ),
	{ V_time, Bin2 } = read_uint32( Bin1 ),
	{ #pk_FashionInfo {
		fashionID = V_fashionID,
		time = V_time
		},
	Bin2 }.

%GENERATED from file:fashion.h => getFashionGiftAck
-spec decode_getFashionGiftAck(Bin0) -> { #pk_getFashionGiftAck{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_getFashionGiftAck(Bin0) ->
	{ V_fashionID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemid, Bin2 } = read_uint32( Bin1 ),
	{ V_giveRole, Bin3 } = read_uint64( Bin2 ),
	{ V_giveName, Bin4 } = read_string( Bin3 ),
	{ V_give, Bin5 } = read_string( Bin4 ),
	{ #pk_getFashionGiftAck {
		fashionID = V_fashionID,
		itemid = V_itemid,
		giveRole = V_giveRole,
		giveName = V_giveName,
		give = V_give
		},
	Bin5 }.

%GENERATED from file:floating.h => Conditions
-spec decode_Conditions(Bin0) -> { #pk_Conditions{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Conditions(Bin0) ->
	{ V_cluesID, Bin1 } = read_uint32( Bin0 ),
	{ V_condComplete, Bin2 } = read_bool( Bin1 ),
	{ #pk_Conditions {
		cluesID = V_cluesID,
		condComplete = V_condComplete
		},
	Bin2 }.

%GENERATED from file:floating.h => FloatingAward
-spec decode_FloatingAward(Bin0) -> { #pk_FloatingAward{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_FloatingAward(Bin0) ->
	{ V_pieceID, Bin1 } = read_uint32( Bin0 ),
	{ V_isGeted, Bin2 } = read_bool( Bin1 ),
	{ #pk_FloatingAward {
		pieceID = V_pieceID,
		isGeted = V_isGeted
		},
	Bin2 }.

%GENERATED from file:friend.h => Friend2GetBackInfo
-spec decode_Friend2GetBackInfo(Bin0) -> { #pk_Friend2GetBackInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Friend2GetBackInfo(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_uint8( Bin4 ),
	{ V_sex, Bin6 } = read_uint8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_force, Bin8 } = read_uint64( Bin7 ),
	{ V_face, Bin9 } = read_array(Bin8, fun(X) -> read_uint8( X ) end),
	{ #pk_Friend2GetBackInfo {
		id = V_id,
		name = V_name,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		force = V_force,
		face = V_face
		},
	Bin9 }.

%GENERATED from file:friend.h => Friend2InfoBase
-spec decode_Friend2InfoBase(Bin0) -> { #pk_Friend2InfoBase{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Friend2InfoBase(Bin0) ->
	{ V_simple, Bin1 } = decode_Friend2InfoSimple( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_face, Bin3 } = read_array(Bin2, fun(X) -> read_uint8( X ) end),
	{ V_vipLv, Bin4 } = read_uint8( Bin3 ),
	{ V_familyName, Bin5 } = read_string( Bin4 ),
	{ V_force, Bin6 } = read_uint64( Bin5 ),
	{ V_timeRelation, Bin7 } = read_uint32( Bin6 ),
	{ V_timeLastOnline, Bin8 } = read_uint32( Bin7 ),
	{ V_timeLastInteractive, Bin9 } = read_uint32( Bin8 ),
	{ V_like, Bin10 } = read_uint32( Bin9 ),
	{ V_charm, Bin11 } = read_uint32( Bin10 ),
	{ V_isGiveLike, Bin12 } = read_bool( Bin11 ),
	{ V_isBeGiveLike, Bin13 } = read_bool( Bin12 ),
	{ V_isMarried, Bin14 } = read_bool( Bin13 ),
	{ V_distance, Bin15 } = read_float( Bin14 ),
	{ #pk_Friend2InfoBase {
		simple = V_simple,
		code = V_code,
		face = V_face,
		vipLv = V_vipLv,
		familyName = V_familyName,
		force = V_force,
		timeRelation = V_timeRelation,
		timeLastOnline = V_timeLastOnline,
		timeLastInteractive = V_timeLastInteractive,
		like = V_like,
		charm = V_charm,
		isGiveLike = V_isGiveLike,
		isBeGiveLike = V_isBeGiveLike,
		isMarried = V_isMarried,
		distance = V_distance
		},
	Bin15 }.

%GENERATED from file:friend.h => Friend2InfoCross
-spec decode_Friend2InfoCross(Bin0) -> { #pk_Friend2InfoCross{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Friend2InfoCross(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_server, Bin3 } = read_string( Bin2 ),
	{ V_level, Bin4 } = read_uint16( Bin3 ),
	{ V_career, Bin5 } = read_uint32( Bin4 ),
	{ V_race, Bin6 } = read_uint8( Bin5 ),
	{ V_sex, Bin7 } = read_uint8( Bin6 ),
	{ V_head, Bin8 } = read_int32( Bin7 ),
	{ V_frameID, Bin9 } = read_uint16( Bin8 ),
	{ V_face, Bin10 } = read_array(Bin9, fun(X) -> read_uint8( X ) end),
	{ V_timeRelation, Bin11 } = read_uint32( Bin10 ),
	{ V_timeLastOnline, Bin12 } = read_uint32( Bin11 ),
	{ V_timeLastInteractive, Bin13 } = read_uint32( Bin12 ),
	{ V_whereis, Bin14 } = read_uint8( Bin13 ),
	{ #pk_Friend2InfoCross {
		id = V_id,
		name = V_name,
		server = V_server,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		face = V_face,
		timeRelation = V_timeRelation,
		timeLastOnline = V_timeLastOnline,
		timeLastInteractive = V_timeLastInteractive,
		whereis = V_whereis
		},
	Bin14 }.

%GENERATED from file:friend.h => Friend2InfoFormal
-spec decode_Friend2InfoFormal(Bin0) -> { #pk_Friend2InfoFormal{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Friend2InfoFormal(Bin0) ->
	{ V_base, Bin1 } = decode_Friend2InfoBase( Bin0 ),
	{ V_closeness, Bin2 } = read_uint32( Bin1 ),
	{ V_isGiveAP, Bin3 } = read_bool( Bin2 ),
	{ V_isGainAP, Bin4 } = read_bool( Bin3 ),
	{ V_isBeGiveAP, Bin5 } = read_bool( Bin4 ),
	{ V_isBeGainAP, Bin6 } = read_bool( Bin5 ),
	{ #pk_Friend2InfoFormal {
		base = V_base,
		closeness = V_closeness,
		isGiveAP = V_isGiveAP,
		isGainAP = V_isGainAP,
		isBeGiveAP = V_isBeGiveAP,
		isBeGainAP = V_isBeGainAP
		},
	Bin6 }.

%GENERATED from file:friend.h => Friend2InfoSimple
-spec decode_Friend2InfoSimple(Bin0) -> { #pk_Friend2InfoSimple{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Friend2InfoSimple(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_uint8( Bin4 ),
	{ V_sex, Bin6 } = read_uint8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_frameID, Bin8 } = read_uint16( Bin7 ),
	{ #pk_Friend2InfoSimple {
		id = V_id,
		name = V_name,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID
		},
	Bin8 }.

%GENERATED from file:godweapon.h => GodWeaponInfo
-spec decode_GodWeaponInfo(Bin0) -> { #pk_GodWeaponInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GodWeaponInfo(Bin0) ->
	{ V_weaponID, Bin1 } = read_uint8( Bin0 ),
	{ V_weaponLevel, Bin2 } = read_uint16( Bin1 ),
	{ V_skillLevel, Bin3 } = read_uint16( Bin2 ),
	{ #pk_GodWeaponInfo {
		weaponID = V_weaponID,
		weaponLevel = V_weaponLevel,
		skillLevel = V_skillLevel
		},
	Bin3 }.

%GENERATED from file:guild.h => BiddingGuild
-spec decode_BiddingGuild(Bin0) -> { #pk_BiddingGuild{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BiddingGuild(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_biddingMoney, Bin3 } = read_uint32( Bin2 ),
	{ V_denoter, Bin4 } = read_uint8( Bin3 ),
	{ #pk_BiddingGuild {
		guildID = V_guildID,
		guildName = V_guildName,
		biddingMoney = V_biddingMoney,
		denoter = V_denoter
		},
	Bin4 }.

%GENERATED from file:guild.h => CannonState
-spec decode_CannonState(Bin0) -> { #pk_CannonState{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CannonState(Bin0) ->
	{ V_collectID, Bin1 } = read_uint32( Bin0 ),
	{ V_resetTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_CannonState {
		collectID = V_collectID,
		resetTime = V_resetTime
		},
	Bin2 }.

%GENERATED from file:guild.h => ExpeditionFinalInfo
-spec decode_ExpeditionFinalInfo(Bin0) -> { #pk_ExpeditionFinalInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ExpeditionFinalInfo(Bin0) ->
	{ V_mapid, Bin1 } = read_uint32( Bin0 ),
	{ V_topGuildInfoList, Bin2 } = read_array(Bin1, fun(X) -> decode_ExpeditionGuildBattleInfo( X ) end),
	{ #pk_ExpeditionFinalInfo {
		mapid = V_mapid,
		topGuildInfoList = V_topGuildInfoList
		},
	Bin2 }.

%GENERATED from file:guild.h => ExpeditionGlobalMapInfo
-spec decode_ExpeditionGlobalMapInfo(Bin0) -> { #pk_ExpeditionGlobalMapInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ExpeditionGlobalMapInfo(Bin0) ->
	{ V_mapid, Bin1 } = read_uint32( Bin0 ),
	{ V_onlineNumber, Bin2 } = read_uint16( Bin1 ),
	{ V_queueNumber, Bin3 } = read_uint16( Bin2 ),
	{ #pk_ExpeditionGlobalMapInfo {
		mapid = V_mapid,
		onlineNumber = V_onlineNumber,
		queueNumber = V_queueNumber
		},
	Bin3 }.

%GENERATED from file:guild.h => ExpeditionGuildBattleInfo
-spec decode_ExpeditionGuildBattleInfo(Bin0) -> { #pk_ExpeditionGuildBattleInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ExpeditionGuildBattleInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_guildScore, Bin3 } = read_uint64( Bin2 ),
	{ #pk_ExpeditionGuildBattleInfo {
		guildID = V_guildID,
		guildName = V_guildName,
		guildScore = V_guildScore
		},
	Bin3 }.

%GENERATED from file:guild.h => ExpeditionMapInfo
-spec decode_ExpeditionMapInfo(Bin0) -> { #pk_ExpeditionMapInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ExpeditionMapInfo(Bin0) ->
	{ V_mapid, Bin1 } = read_uint32( Bin0 ),
	{ V_guildID, Bin2 } = read_uint64( Bin1 ),
	{ V_guildName, Bin3 } = read_string( Bin2 ),
	{ V_onlineNumber, Bin4 } = read_uint16( Bin3 ),
	{ V_queueNumber, Bin5 } = read_uint16( Bin4 ),
	{ V_isGetReward, Bin6 } = read_uint8( Bin5 ),
	{ #pk_ExpeditionMapInfo {
		mapid = V_mapid,
		guildID = V_guildID,
		guildName = V_guildName,
		onlineNumber = V_onlineNumber,
		queueNumber = V_queueNumber,
		isGetReward = V_isGetReward
		},
	Bin6 }.

%GENERATED from file:guild.h => ExpeditionPointInfo
-spec decode_ExpeditionPointInfo(Bin0) -> { #pk_ExpeditionPointInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ExpeditionPointInfo(Bin0) ->
	{ V_pointIndex, Bin1 } = read_uint16( Bin0 ),
	{ V_guildID, Bin2 } = read_uint64( Bin1 ),
	{ V_guildName, Bin3 } = read_string( Bin2 ),
	{ #pk_ExpeditionPointInfo {
		pointIndex = V_pointIndex,
		guildID = V_guildID,
		guildName = V_guildName
		},
	Bin3 }.

%GENERATED from file:guild.h => GuildApplyMemberInfo
-spec decode_GuildApplyMemberInfo(Bin0) -> { #pk_GuildApplyMemberInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildApplyMemberInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleCode, Bin2 } = read_uint64( Bin1 ),
	{ V_roleName, Bin3 } = read_string( Bin2 ),
	{ V_combatNum, Bin4 } = read_uint32( Bin3 ),
	{ V_vipLevel, Bin5 } = read_uint8( Bin4 ),
	{ V_playerLevel, Bin6 } = read_uint16( Bin5 ),
	{ V_applyTime, Bin7 } = read_uint64( Bin6 ),
	{ V_career, Bin8 } = read_uint32( Bin7 ),
	{ V_race, Bin9 } = read_uint8( Bin8 ),
	{ V_sex, Bin10 } = read_uint8( Bin9 ),
	{ V_head, Bin11 } = read_int32( Bin10 ),
	{ V_frameID, Bin12 } = read_uint16( Bin11 ),
	{ #pk_GuildApplyMemberInfo {
		roleID = V_roleID,
		roleCode = V_roleCode,
		roleName = V_roleName,
		combatNum = V_combatNum,
		vipLevel = V_vipLevel,
		playerLevel = V_playerLevel,
		applyTime = V_applyTime,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID
		},
	Bin12 }.

%GENERATED from file:guild.h => GuildBattleInfo
-spec decode_GuildBattleInfo(Bin0) -> { #pk_GuildBattleInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildBattleInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_guildLevel, Bin3 } = read_uint8( Bin2 ),
	{ V_fightForce, Bin4 } = read_uint32( Bin3 ),
	{ V_leaderName, Bin5 } = read_string( Bin4 ),
	{ V_leaderRoleID, Bin6 } = read_uint64( Bin5 ),
	{ V_denoter, Bin7 } = read_uint8( Bin6 ),
	{ #pk_GuildBattleInfo {
		guildID = V_guildID,
		guildName = V_guildName,
		guildLevel = V_guildLevel,
		fightForce = V_fightForce,
		leaderName = V_leaderName,
		leaderRoleID = V_leaderRoleID,
		denoter = V_denoter
		},
	Bin7 }.

%GENERATED from file:guild.h => GuildBattlePlayerInfo
-spec decode_GuildBattlePlayerInfo(Bin0) -> { #pk_GuildBattlePlayerInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildBattlePlayerInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_rank, Bin2 } = read_uint8( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_roleName, Bin4 } = read_string( Bin3 ),
	{ V_point, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GuildBattlePlayerInfo {
		guildID = V_guildID,
		rank = V_rank,
		roleID = V_roleID,
		roleName = V_roleName,
		point = V_point
		},
	Bin5 }.

%GENERATED from file:guild.h => GuildBattleResultInfo
-spec decode_GuildBattleResultInfo(Bin0) -> { #pk_GuildBattleResultInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildBattleResultInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_point, Bin3 } = read_uint32( Bin2 ),
	{ V_playerInfos, Bin4 } = read_array(Bin3, fun(X) -> decode_GuildBattlePlayerInfo( X ) end),
	{ #pk_GuildBattleResultInfo {
		guildID = V_guildID,
		guildName = V_guildName,
		point = V_point,
		playerInfos = V_playerInfos
		},
	Bin4 }.

%GENERATED from file:guild.h => GuildBuff
-spec decode_GuildBuff(Bin0) -> { #pk_GuildBuff{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildBuff(Bin0) ->
	{ V_confId, Bin1 } = read_uint32( Bin0 ),
	{ V_buffID, Bin2 } = read_uint32( Bin1 ),
	{ V_getFlag, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GuildBuff {
		confId = V_confId,
		buffID = V_buffID,
		getFlag = V_getFlag
		},
	Bin3 }.

%GENERATED from file:guild.h => GuildBuffRole
-spec decode_GuildBuffRole(Bin0) -> { #pk_GuildBuffRole{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildBuffRole(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_buyTime, Bin3 } = read_uint64( Bin2 ),
	{ V_confId, Bin4 } = read_uint32( Bin3 ),
	{ V_buffID, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GuildBuffRole {
		roleID = V_roleID,
		roleName = V_roleName,
		buyTime = V_buyTime,
		confId = V_confId,
		buffID = V_buffID
		},
	Bin5 }.

%GENERATED from file:guild.h => GuildFastrecord
-spec decode_GuildFastrecord(Bin0) -> { #pk_GuildFastrecord{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildFastrecord(Bin0) ->
	{ V_guildname, Bin1 } = read_string( Bin0 ),
	{ V_useTime, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GuildFastrecord {
		guildname = V_guildname,
		useTime = V_useTime
		},
	Bin2 }.

%GENERATED from file:guild.h => GuildHurtList
-spec decode_GuildHurtList(Bin0) -> { #pk_GuildHurtList{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildHurtList(Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ V_hurt, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GuildHurtList {
		name = V_name,
		hurt = V_hurt
		},
	Bin2 }.

%GENERATED from file:guild.h => GuildIDList
-spec decode_GuildIDList(Bin0) -> { #pk_GuildIDList{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildIDList(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_denoter, Bin3 } = read_uint8( Bin2 ),
	{ #pk_GuildIDList {
		guildID = V_guildID,
		guildName = V_guildName,
		denoter = V_denoter
		},
	Bin3 }.

%GENERATED from file:guild.h => GuildInfo
-spec decode_GuildInfo(Bin0) -> { #pk_GuildInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_guildLevel, Bin3 } = read_uint8( Bin2 ),
	{ V_denoter, Bin4 } = read_uint8( Bin3 ),
	{ V_fightForce, Bin5 } = read_uint32( Bin4 ),
	{ V_memberNumber, Bin6 } = read_uint32( Bin5 ),
	{ V_maxMemberNumber, Bin7 } = read_uint32( Bin6 ),
	{ V_leaderName, Bin8 } = read_string( Bin7 ),
	{ V_leaderRoleID, Bin9 } = read_uint64( Bin8 ),
	{ V_isRequest, Bin10 } = read_uint8( Bin9 ),
	{ #pk_GuildInfo {
		guildID = V_guildID,
		guildName = V_guildName,
		guildLevel = V_guildLevel,
		denoter = V_denoter,
		fightForce = V_fightForce,
		memberNumber = V_memberNumber,
		maxMemberNumber = V_maxMemberNumber,
		leaderName = V_leaderName,
		leaderRoleID = V_leaderRoleID,
		isRequest = V_isRequest
		},
	Bin10 }.

%GENERATED from file:guild.h => GuildLoopTaskGiveHistory
-spec decode_GuildLoopTaskGiveHistory(Bin0) -> { #pk_GuildLoopTaskGiveHistory{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildLoopTaskGiveHistory(Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_tarRoleID, Bin3 } = read_uint64( Bin2 ),
	{ V_taskID, Bin4 } = read_uint16( Bin3 ),
	{ V_itemID, Bin5 } = read_uint16( Bin4 ),
	{ V_itemM, Bin6 } = read_uint16( Bin5 ),
	{ V_itemN, Bin7 } = read_uint16( Bin6 ),
	{ #pk_GuildLoopTaskGiveHistory {
		time = V_time,
		roleID = V_roleID,
		tarRoleID = V_tarRoleID,
		taskID = V_taskID,
		itemID = V_itemID,
		itemM = V_itemM,
		itemN = V_itemN
		},
	Bin7 }.

%GENERATED from file:guild.h => GuildLoopTaskGiveHistory2
-spec decode_GuildLoopTaskGiveHistory2(Bin0) -> { #pk_GuildLoopTaskGiveHistory2{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildLoopTaskGiveHistory2(Bin0) ->
	{ V_career, Bin1 } = read_uint32( Bin0 ),
	{ V_race, Bin2 } = read_int8( Bin1 ),
	{ V_sex, Bin3 } = read_int8( Bin2 ),
	{ V_head, Bin4 } = read_int32( Bin3 ),
	{ V_level, Bin5 } = read_int32( Bin4 ),
	{ V_history, Bin6 } = decode_GuildLoopTaskGiveHistory( Bin5 ),
	{ #pk_GuildLoopTaskGiveHistory2 {
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		level = V_level,
		history = V_history
		},
	Bin6 }.

%GENERATED from file:guild.h => GuildLoopTask_Get
-spec decode_GuildLoopTask_Get(Bin0) -> { #pk_GuildLoopTask_Get{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildLoopTask_Get(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleCode, Bin2 } = read_uint64( Bin1 ),
	{ V_roleName, Bin3 } = read_string( Bin2 ),
	{ V_roleGuildLevel, Bin4 } = read_uint8( Bin3 ),
	{ V_career, Bin5 } = read_uint32( Bin4 ),
	{ V_race, Bin6 } = read_int8( Bin5 ),
	{ V_sex, Bin7 } = read_int8( Bin6 ),
	{ V_head, Bin8 } = read_int32( Bin7 ),
	{ V_frameID, Bin9 } = read_uint16( Bin8 ),
	{ V_level, Bin10 } = read_int32( Bin9 ),
	{ V_taskID, Bin11 } = read_uint16( Bin10 ),
	{ V_itemID, Bin12 } = read_uint16( Bin11 ),
	{ V_itemM, Bin13 } = read_uint16( Bin12 ),
	{ V_itemN, Bin14 } = read_uint16( Bin13 ),
	{ V_isGive, Bin15 } = read_bool( Bin14 ),
	{ V_timeWantGet, Bin16 } = read_uint32( Bin15 ),
	{ #pk_GuildLoopTask_Get {
		roleID = V_roleID,
		roleCode = V_roleCode,
		roleName = V_roleName,
		roleGuildLevel = V_roleGuildLevel,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		level = V_level,
		taskID = V_taskID,
		itemID = V_itemID,
		itemM = V_itemM,
		itemN = V_itemN,
		isGive = V_isGive,
		timeWantGet = V_timeWantGet
		},
	Bin16 }.

%GENERATED from file:guild.h => GuildMemberInfo
-spec decode_GuildMemberInfo(Bin0) -> { #pk_GuildMemberInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildMemberInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleCode, Bin2 } = read_uint64( Bin1 ),
	{ V_roleName, Bin3 } = read_string( Bin2 ),
	{ V_roleGuildLevel, Bin4 } = read_uint8( Bin3 ),
	{ V_liveness, Bin5 } = read_uint32( Bin4 ),
	{ V_combatNum, Bin6 } = read_uint32( Bin5 ),
	{ V_offlineTime, Bin7 } = read_uint64( Bin6 ),
	{ V_vipLevel, Bin8 } = read_uint8( Bin7 ),
	{ V_playerLevel, Bin9 } = read_uint16( Bin8 ),
	{ V_career, Bin10 } = read_uint32( Bin9 ),
	{ V_race, Bin11 } = read_uint8( Bin10 ),
	{ V_sex, Bin12 } = read_uint8( Bin11 ),
	{ V_head, Bin13 } = read_int32( Bin12 ),
	{ V_frameID, Bin14 } = read_uint16( Bin13 ),
	{ #pk_GuildMemberInfo {
		roleID = V_roleID,
		roleCode = V_roleCode,
		roleName = V_roleName,
		roleGuildLevel = V_roleGuildLevel,
		liveness = V_liveness,
		combatNum = V_combatNum,
		offlineTime = V_offlineTime,
		vipLevel = V_vipLevel,
		playerLevel = V_playerLevel,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID
		},
	Bin14 }.

%GENERATED from file:guild.h => GuildSkill
-spec decode_GuildSkill(Bin0) -> { #pk_GuildSkill{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildSkill(Bin0) ->
	{ V_confId, Bin1 } = read_uint32( Bin0 ),
	{ V_skillID, Bin2 } = read_uint32( Bin1 ),
	{ V_skillLvl, Bin3 } = read_uint16( Bin2 ),
	{ V_next_confID, Bin4 } = read_uint32( Bin3 ),
	{ #pk_GuildSkill {
		confId = V_confId,
		skillID = V_skillID,
		skillLvl = V_skillLvl,
		next_confID = V_next_confID
		},
	Bin4 }.

%GENERATED from file:guild.h => GuildTask
-spec decode_GuildTask(Bin0) -> { #pk_GuildTask{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildTask(Bin0) ->
	{ V_taskType, Bin1 } = read_uint8( Bin0 ),
	{ V_taskState, Bin2 } = read_uint8( Bin1 ),
	{ V_curTimes, Bin3 } = read_uint16( Bin2 ),
	{ V_maxTimes, Bin4 } = read_uint16( Bin3 ),
	{ V_accCDTime, Bin5 } = read_uint32( Bin4 ),
	{ V_taskID, Bin6 } = read_uint16( Bin5 ),
	{ V_targetGuildID, Bin7 } = read_uint64( Bin6 ),
	{ V_targetGuildName, Bin8 } = read_string( Bin7 ),
	{ V_targetPlayerRoleID, Bin9 } = read_uint64( Bin8 ),
	{ V_targetPLayerName, Bin10 } = read_string( Bin9 ),
	{ V_number1, Bin11 } = read_uint32( Bin10 ),
	{ V_number2, Bin12 } = read_uint32( Bin11 ),
	{ V_number3, Bin13 } = read_uint32( Bin12 ),
	{ #pk_GuildTask {
		taskType = V_taskType,
		taskState = V_taskState,
		curTimes = V_curTimes,
		maxTimes = V_maxTimes,
		accCDTime = V_accCDTime,
		taskID = V_taskID,
		targetGuildID = V_targetGuildID,
		targetGuildName = V_targetGuildName,
		targetPlayerRoleID = V_targetPlayerRoleID,
		targetPLayerName = V_targetPLayerName,
		number1 = V_number1,
		number2 = V_number2,
		number3 = V_number3
		},
	Bin13 }.

%GENERATED from file:guild.h => GuildWar
-spec decode_GuildWar(Bin0) -> { #pk_GuildWar{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildWar(Bin0) ->
	{ V_stage, Bin1 } = read_uint8( Bin0 ),
	{ V_group, Bin2 } = read_uint8( Bin1 ),
	{ V_guildID1, Bin3 } = read_uint64( Bin2 ),
	{ V_guildName1, Bin4 } = read_string( Bin3 ),
	{ V_denoter1, Bin5 } = read_uint8( Bin4 ),
	{ V_guildID2, Bin6 } = read_uint64( Bin5 ),
	{ V_guildName2, Bin7 } = read_string( Bin6 ),
	{ V_denoter2, Bin8 } = read_uint8( Bin7 ),
	{ V_guildID3, Bin9 } = read_uint64( Bin8 ),
	{ V_guildName3, Bin10 } = read_string( Bin9 ),
	{ V_denoter3, Bin11 } = read_uint8( Bin10 ),
	{ V_winguildID, Bin12 } = read_uint64( Bin11 ),
	{ V_winguildName, Bin13 } = read_string( Bin12 ),
	{ V_windenoter, Bin14 } = read_uint8( Bin13 ),
	{ #pk_GuildWar {
		stage = V_stage,
		group = V_group,
		guildID1 = V_guildID1,
		guildName1 = V_guildName1,
		denoter1 = V_denoter1,
		guildID2 = V_guildID2,
		guildName2 = V_guildName2,
		denoter2 = V_denoter2,
		guildID3 = V_guildID3,
		guildName3 = V_guildName3,
		denoter3 = V_denoter3,
		winguildID = V_winguildID,
		winguildName = V_winguildName,
		windenoter = V_windenoter
		},
	Bin14 }.

%GENERATED from file:guild.h => GuildWarInfo
-spec decode_GuildWarInfo(Bin0) -> { #pk_GuildWarInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildWarInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_denoter, Bin3 } = read_uint8( Bin2 ),
	{ V_key, Bin4 } = read_uint8( Bin3 ),
	{ V_stage, Bin5 } = read_uint8( Bin4 ),
	{ V_all_integral, Bin6 } = read_uint32( Bin5 ),
	{ V_integrals, Bin7 } = read_array(Bin6, fun(X) -> decode_GuildWarInfoIntegral( X ) end),
	{ #pk_GuildWarInfo {
		guildID = V_guildID,
		guildName = V_guildName,
		denoter = V_denoter,
		key = V_key,
		stage = V_stage,
		all_integral = V_all_integral,
		integrals = V_integrals
		},
	Bin7 }.

%GENERATED from file:guild.h => GuildWarInfoIntegral
-spec decode_GuildWarInfoIntegral(Bin0) -> { #pk_GuildWarInfoIntegral{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildWarInfoIntegral(Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ V_integral, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GuildWarInfoIntegral {
		type = V_type,
		number = V_number,
		integral = V_integral
		},
	Bin3 }.

%GENERATED from file:guild.h => GuildWarRank
-spec decode_GuildWarRank(Bin0) -> { #pk_GuildWarRank{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildWarRank(Bin0) ->
	{ V_rank, Bin1 } = read_uint16( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_roleName, Bin3 } = read_string( Bin2 ),
	{ V_killPlayer, Bin4 } = read_uint32( Bin3 ),
	{ V_secondAttack, Bin5 } = read_uint32( Bin4 ),
	{ #pk_GuildWarRank {
		rank = V_rank,
		roleID = V_roleID,
		roleName = V_roleName,
		killPlayer = V_killPlayer,
		secondAttack = V_secondAttack
		},
	Bin5 }.

%GENERATED from file:guild.h => GuildWarRankInfo
-spec decode_GuildWarRankInfo(Bin0) -> { #pk_GuildWarRankInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildWarRankInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_rank, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GuildWarRankInfo {
		guildID = V_guildID,
		rank = V_rank
		},
	Bin2 }.

%GENERATED from file:guild.h => GuildWarReward_coin
-spec decode_GuildWarReward_coin(Bin0) -> { #pk_GuildWarReward_coin{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildWarReward_coin(Bin0) ->
	{ V_cointype, Bin1 } = read_uint8( Bin0 ),
	{ V_number, Bin2 } = read_uint32( Bin1 ),
	{ #pk_GuildWarReward_coin {
		cointype = V_cointype,
		number = V_number
		},
	Bin2 }.

%GENERATED from file:guild.h => GuildWarReward_item
-spec decode_GuildWarReward_item(Bin0) -> { #pk_GuildWarReward_item{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GuildWarReward_item(Bin0) ->
	{ V_isBind, Bin1 } = read_uint8( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_itemNumber, Bin3 } = read_uint32( Bin2 ),
	{ #pk_GuildWarReward_item {
		isBind = V_isBind,
		itemID = V_itemID,
		itemNumber = V_itemNumber
		},
	Bin3 }.

%GENERATED from file:guild.h => NameTable2
-spec decode_NameTable2(Bin0) -> { #pk_NameTable2{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_NameTable2(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_NameTable2 {
		id = V_id,
		name = V_name
		},
	Bin2 }.

%GENERATED from file:guild.h => OccupyGuildInfo
-spec decode_OccupyGuildInfo(Bin0) -> { #pk_OccupyGuildInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OccupyGuildInfo(Bin0) ->
	{ V_guildID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildName, Bin2 } = read_string( Bin1 ),
	{ V_occupyIDs, Bin3 } = read_array(Bin2, fun(X) -> read_uint32( X ) end),
	{ V_allPoint, Bin4 } = read_uint32( Bin3 ),
	{ V_denoter, Bin5 } = read_uint8( Bin4 ),
	{ #pk_OccupyGuildInfo {
		guildID = V_guildID,
		guildName = V_guildName,
		occupyIDs = V_occupyIDs,
		allPoint = V_allPoint,
		denoter = V_denoter
		},
	Bin5 }.

%GENERATED from file:guild.h => PebbleState
-spec decode_PebbleState(Bin0) -> { #pk_PebbleState{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PebbleState(Bin0) ->
	{ V_monsterID, Bin1 } = read_uint32( Bin0 ),
	{ V_curHP, Bin2 } = read_uint32( Bin1 ),
	{ V_maxHP, Bin3 } = read_uint32( Bin2 ),
	{ V_resetTime, Bin4 } = read_uint32( Bin3 ),
	{ #pk_PebbleState {
		monsterID = V_monsterID,
		curHP = V_curHP,
		maxHP = V_maxHP,
		resetTime = V_resetTime
		},
	Bin4 }.

%GENERATED from file:guild.h => Ride
-spec decode_Ride(Bin0) -> { #pk_Ride{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Ride(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ V_state, Bin3 } = read_uint8( Bin2 ),
	{ #pk_Ride {
		id = V_id,
		level = V_level,
		state = V_state
		},
	Bin3 }.

%GENERATED from file:guild.h => RideRole
-spec decode_RideRole(Bin0) -> { #pk_RideRole{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RideRole(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_guildID, Bin2 } = read_uint64( Bin1 ),
	{ V_rideID, Bin3 } = read_uint32( Bin2 ),
	{ V_seatID, Bin4 } = read_uint32( Bin3 ),
	{ V_time, Bin5 } = read_uint32( Bin4 ),
	{ #pk_RideRole {
		roleID = V_roleID,
		guildID = V_guildID,
		rideID = V_rideID,
		seatID = V_seatID,
		time = V_time
		},
	Bin5 }.

%GENERATED from file:guild.h => SuppHistory
-spec decode_SuppHistory(Bin0) -> { #pk_SuppHistory{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SuppHistory(Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_tarRoleID, Bin3 } = read_uint64( Bin2 ),
	{ V_itemID, Bin4 } = read_uint16( Bin3 ),
	{ V_itemM, Bin5 } = read_uint16( Bin4 ),
	{ #pk_SuppHistory {
		time = V_time,
		roleID = V_roleID,
		tarRoleID = V_tarRoleID,
		itemID = V_itemID,
		itemM = V_itemM
		},
	Bin5 }.

%GENERATED from file:guild.h => SuppHistory2
-spec decode_SuppHistory2(Bin0) -> { #pk_SuppHistory2{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SuppHistory2(Bin0) ->
	{ V_career, Bin1 } = read_uint32( Bin0 ),
	{ V_race, Bin2 } = read_int8( Bin1 ),
	{ V_sex, Bin3 } = read_int8( Bin2 ),
	{ V_head, Bin4 } = read_int32( Bin3 ),
	{ V_level, Bin5 } = read_int32( Bin4 ),
	{ V_history, Bin6 } = decode_SuppHistory( Bin5 ),
	{ #pk_SuppHistory2 {
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		level = V_level,
		history = V_history
		},
	Bin6 }.

%GENERATED from file:guild.h => Supplication
-spec decode_Supplication(Bin0) -> { #pk_Supplication{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Supplication(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleCode, Bin2 } = read_uint64( Bin1 ),
	{ V_roleName, Bin3 } = read_string( Bin2 ),
	{ V_roleGuildLevel, Bin4 } = read_uint8( Bin3 ),
	{ V_career, Bin5 } = read_uint32( Bin4 ),
	{ V_race, Bin6 } = read_int8( Bin5 ),
	{ V_sex, Bin7 } = read_int8( Bin6 ),
	{ V_head, Bin8 } = read_int32( Bin7 ),
	{ V_frameID, Bin9 } = read_uint16( Bin8 ),
	{ V_level, Bin10 } = read_int32( Bin9 ),
	{ V_itemID, Bin11 } = read_uint16( Bin10 ),
	{ V_itemM, Bin12 } = read_uint16( Bin11 ),
	{ V_isGive, Bin13 } = read_bool( Bin12 ),
	{ #pk_Supplication {
		roleID = V_roleID,
		roleCode = V_roleCode,
		roleName = V_roleName,
		roleGuildLevel = V_roleGuildLevel,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		level = V_level,
		itemID = V_itemID,
		itemM = V_itemM,
		isGive = V_isGive
		},
	Bin13 }.

%GENERATED from file:home.h => FarmingPet
-spec decode_FarmingPet(Bin0) -> { #pk_FarmingPet{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_FarmingPet(Bin0) ->
	{ V_itemUid, Bin1 } = read_uint64( Bin0 ),
	{ V_petID, Bin2 } = read_uint16( Bin1 ),
	{ V_deltaTime, Bin3 } = read_uint16( Bin2 ),
	{ V_time, Bin4 } = read_uint64( Bin3 ),
	{ V_lastdeltaTime, Bin5 } = read_uint16( Bin4 ),
	{ V_addTime, Bin6 } = read_uint16( Bin5 ),
	{ #pk_FarmingPet {
		itemUid = V_itemUid,
		petID = V_petID,
		deltaTime = V_deltaTime,
		time = V_time,
		lastdeltaTime = V_lastdeltaTime,
		addTime = V_addTime
		},
	Bin6 }.

%GENERATED from file:home.h => FurniInteractTrueData
-spec decode_FurniInteractTrueData(Bin0) -> { #pk_FurniInteractTrueData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_FurniInteractTrueData(Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_playerList, Bin2 } = read_array(Bin1, fun(X) -> decode_FurniTruePlayerInfo( X ) end),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ #pk_FurniInteractTrueData {
		itemUID = V_itemUID,
		playerList = V_playerList,
		roleID = V_roleID
		},
	Bin3 }.

%GENERATED from file:home.h => FurniTruePlayerInfo
-spec decode_FurniTruePlayerInfo(Bin0) -> { #pk_FurniTruePlayerInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_FurniTruePlayerInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_seatID, Bin2 } = read_uint8( Bin1 ),
	{ #pk_FurniTruePlayerInfo {
		roleID = V_roleID,
		seatID = V_seatID
		},
	Bin2 }.

%GENERATED from file:home.h => GivingFurniTrue
-spec decode_GivingFurniTrue(Bin0) -> { #pk_GivingFurniTrue{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GivingFurniTrue(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_num, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GivingFurniTrue {
		itemID = V_itemID,
		num = V_num
		},
	Bin2 }.

%GENERATED from file:home.h => HomeArea
-spec decode_HomeArea(Bin0) -> { #pk_HomeArea{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_HomeArea(Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaID, Bin2 } = read_uint32( Bin1 ),
	{ V_areaLvl, Bin3 } = read_uint32( Bin2 ),
	{ #pk_HomeArea {
		homeID = V_homeID,
		areaID = V_areaID,
		areaLvl = V_areaLvl
		},
	Bin3 }.

%GENERATED from file:home.h => HomeLayoutInfo
-spec decode_HomeLayoutInfo(Bin0) -> { #pk_HomeLayoutInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_HomeLayoutInfo(Bin0) ->
	{ V_uid, Bin1 } = read_uint64( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_itemID, Bin3 } = read_uint16( Bin2 ),
	{ V_gridID, Bin4 } = read_int32( Bin3 ),
	{ V_rotationY, Bin5 } = read_int32( Bin4 ),
	{ V_type, Bin6 } = read_uint8( Bin5 ),
	{ #pk_HomeLayoutInfo {
		uid = V_uid,
		roleID = V_roleID,
		itemID = V_itemID,
		gridID = V_gridID,
		rotationY = V_rotationY,
		type = V_type
		},
	Bin6 }.

%GENERATED from file:home.h => HomeLetter
-spec decode_HomeLetter(Bin0) -> { #pk_HomeLetter{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_HomeLetter(Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_overTime, Bin2 } = read_uint64( Bin1 ),
	{ #pk_HomeLetter {
		itemUID = V_itemUID,
		overTime = V_overTime
		},
	Bin2 }.

%GENERATED from file:home.h => HomeVisit
-spec decode_HomeVisit(Bin0) -> { #pk_HomeVisit{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_HomeVisit(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint32( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_int8( Bin4 ),
	{ V_sex, Bin6 } = read_int8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_frameID, Bin8 } = read_uint16( Bin7 ),
	{ V_homeID, Bin9 } = read_uint64( Bin8 ),
	{ V_closeness, Bin10 } = read_int32( Bin9 ),
	{ V_face, Bin11 } = read_array(Bin10, fun(X) -> read_uint8( X ) end),
	{ V_stylish, Bin12 } = read_int32( Bin11 ),
	{ V_isCanPick, Bin13 } = read_bool( Bin12 ),
	{ V_isdecorate, Bin14 } = read_bool( Bin13 ),
	{ #pk_HomeVisit {
		roleID = V_roleID,
		roleName = V_roleName,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		homeID = V_homeID,
		closeness = V_closeness,
		face = V_face,
		stylish = V_stylish,
		isCanPick = V_isCanPick,
		isdecorate = V_isdecorate
		},
	Bin14 }.

%GENERATED from file:home.h => Plant
-spec decode_Plant(Bin0) -> { #pk_Plant{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Plant(Bin0) ->
	{ V_homeID, Bin1 } = read_uint64( Bin0 ),
	{ V_areaType, Bin2 } = read_uint8( Bin1 ),
	{ V_itemUid, Bin3 } = read_uint64( Bin2 ),
	{ V_id, Bin4 } = read_uint16( Bin3 ),
	{ V_time, Bin5 } = read_uint32( Bin4 ),
	{ V_health, Bin6 } = read_uint8( Bin5 ),
	{ V_wateringCount, Bin7 } = read_uint8( Bin6 ),
	{ V_wateringTime, Bin8 } = read_uint32( Bin7 ),
	{ V_compostCount, Bin9 } = read_uint8( Bin8 ),
	{ V_compostTime, Bin10 } = read_uint8( Bin9 ),
	{ V_isPestis, Bin11 } = read_bool( Bin10 ),
	{ #pk_Plant {
		homeID = V_homeID,
		areaType = V_areaType,
		itemUid = V_itemUid,
		id = V_id,
		time = V_time,
		health = V_health,
		wateringCount = V_wateringCount,
		wateringTime = V_wateringTime,
		compostCount = V_compostCount,
		compostTime = V_compostTime,
		isPestis = V_isPestis
		},
	Bin11 }.

%GENERATED from file:home.h => UpgradeHomeData
-spec decode_UpgradeHomeData(Bin0) -> { #pk_UpgradeHomeData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_UpgradeHomeData(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_num, Bin2 } = read_uint16( Bin1 ),
	{ #pk_UpgradeHomeData {
		itemID = V_itemID,
		num = V_num
		},
	Bin2 }.

%GENERATED from file:home.h => VisitRecord
-spec decode_VisitRecord(Bin0) -> { #pk_VisitRecord{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_VisitRecord(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_relationType, Bin3 } = read_uint8( Bin2 ),
	{ V_opType, Bin4 } = read_uint8( Bin3 ),
	{ V_opParam1, Bin5 } = read_uint32( Bin4 ),
	{ V_opParam2, Bin6 } = read_uint32( Bin5 ),
	{ V_opParam3, Bin7 } = read_uint32( Bin6 ),
	{ V_timestamp, Bin8 } = read_uint64( Bin7 ),
	{ #pk_VisitRecord {
		roleID = V_roleID,
		roleName = V_roleName,
		relationType = V_relationType,
		opType = V_opType,
		opParam1 = V_opParam1,
		opParam2 = V_opParam2,
		opParam3 = V_opParam3,
		timestamp = V_timestamp
		},
	Bin8 }.

%GENERATED from file:identity.h => GiftHistory
-spec decode_GiftHistory(Bin0) -> { #pk_GiftHistory{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GiftHistory(Bin0) ->
	{ V_index, Bin1 } = read_uint64( Bin0 ),
	{ V_time, Bin2 } = read_uint32( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_tarRoleID, Bin4 } = read_uint64( Bin3 ),
	{ V_itemID, Bin5 } = read_uint16( Bin4 ),
	{ V_itemCount, Bin6 } = read_uint16( Bin5 ),
	{ V_charmUpdate, Bin7 } = read_uint32( Bin6 ),
	{ #pk_GiftHistory {
		index = V_index,
		time = V_time,
		roleID = V_roleID,
		tarRoleID = V_tarRoleID,
		itemID = V_itemID,
		itemCount = V_itemCount,
		charmUpdate = V_charmUpdate
		},
	Bin7 }.

%GENERATED from file:identity.h => MD5
-spec decode_MD5(Bin0) -> { #pk_MD5{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MD5(Bin0) ->
	{ V_md5, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ #pk_MD5 {
		md5 = V_md5
		},
	Bin1 }.

%GENERATED from file:identity.h => NameTable
-spec decode_NameTable(Bin0) -> { #pk_NameTable{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_NameTable(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ #pk_NameTable {
		id = V_id,
		name = V_name
		},
	Bin2 }.

%GENERATED from file:identity.h => RoleHeadPic
-spec decode_RoleHeadPic(Bin0) -> { #pk_RoleHeadPic{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RoleHeadPic(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_md5, Bin2 } = read_array(Bin1, fun(X) -> read_uint8( X ) end),
	{ #pk_RoleHeadPic {
		roleID = V_roleID,
		md5 = V_md5
		},
	Bin2 }.

%GENERATED from file:item.h => GiftItemInfo
-spec decode_GiftItemInfo(Bin0) -> { #pk_GiftItemInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GiftItemInfo(Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ #pk_GiftItemInfo {
		itemid = V_itemid,
		number = V_number
		},
	Bin2 }.

%GENERATED from file:item.h => LookInfoItem
-spec decode_LookInfoItem(Bin0) -> { #pk_LookInfoItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookInfoItem(Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_sortid, Bin2 } = read_uint32( Bin1 ),
	{ V_type, Bin3 } = read_uint8( Bin2 ),
	{ V_value, Bin4 } = read_uint32( Bin3 ),
	{ V_quality, Bin5 } = read_uint8( Bin4 ),
	{ V_useLevel, Bin6 } = read_uint16( Bin5 ),
	{ V_quotaNumber, Bin7 } = read_int32( Bin6 ),
	{ #pk_LookInfoItem {
		itemid = V_itemid,
		sortid = V_sortid,
		type = V_type,
		value = V_value,
		quality = V_quality,
		useLevel = V_useLevel,
		quotaNumber = V_quotaNumber
		},
	Bin7 }.

%GENERATED from file:item.h => LookInfoItemAtMall
-spec decode_LookInfoItemAtMall(Bin0) -> { #pk_LookInfoItemAtMall{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookInfoItemAtMall(Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_sortid, Bin2 } = read_uint8( Bin1 ),
	{ V_type, Bin3 } = read_uint8( Bin2 ),
	{ V_value, Bin4 } = read_uint32( Bin3 ),
	{ V_stockCount, Bin5 } = read_uint16( Bin4 ),
	{ V_stockGiftCount, Bin6 } = read_uint16( Bin5 ),
	{ V_gifts, Bin7 } = read_array(Bin6, fun(X) -> decode_GiftItemInfo( X ) end),
	{ V_saleStartTime, Bin8 } = read_uint32( Bin7 ),
	{ V_saleEndTime, Bin9 } = read_uint32( Bin8 ),
	{ V_quotaNum, Bin10 } = read_uint8( Bin9 ),
	{ #pk_LookInfoItemAtMall {
		itemid = V_itemid,
		sortid = V_sortid,
		type = V_type,
		value = V_value,
		stockCount = V_stockCount,
		stockGiftCount = V_stockGiftCount,
		gifts = V_gifts,
		saleStartTime = V_saleStartTime,
		saleEndTime = V_saleEndTime,
		quotaNum = V_quotaNum
		},
	Bin10 }.

%GENERATED from file:item.h => MysteriousShopItem
-spec decode_MysteriousShopItem(Bin0) -> { #pk_MysteriousShopItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MysteriousShopItem(Bin0) ->
	{ V_only_id, Bin1 } = read_uint32( Bin0 ),
	{ V_itemid, Bin2 } = read_uint16( Bin1 ),
	{ V_money_type, Bin3 } = read_uint8( Bin2 ),
	{ V_money, Bin4 } = read_uint32( Bin3 ),
	{ V_number, Bin5 } = read_int32( Bin4 ),
	{ #pk_MysteriousShopItem {
		only_id = V_only_id,
		itemid = V_itemid,
		money_type = V_money_type,
		money = V_money,
		number = V_number
		},
	Bin5 }.

%GENERATED from file:item.h => OneCoinInfo
-spec decode_OneCoinInfo(Bin0) -> { #pk_OneCoinInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OneCoinInfo(Bin0) ->
	{ V_coinType, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_OneCoinInfo {
		coinType = V_coinType,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:item.h => OneGoodsInfo
-spec decode_OneGoodsInfo(Bin0) -> { #pk_OneGoodsInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OneGoodsInfo(Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint16( Bin1 ),
	{ V_quality, Bin3 } = read_uint8( Bin2 ),
	{ V_isBind, Bin4 } = read_uint8( Bin3 ),
	{ #pk_OneGoodsInfo {
		itemID = V_itemID,
		itemNum = V_itemNum,
		quality = V_quality,
		isBind = V_isBind
		},
	Bin4 }.

%GENERATED from file:item.h => RefindResInfo
-spec decode_RefindResInfo(Bin0) -> { #pk_RefindResInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RefindResInfo(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_number, Bin2 } = read_int32( Bin1 ),
	{ #pk_RefindResInfo {
		id = V_id,
		number = V_number
		},
	Bin2 }.

%GENERATED from file:item.h => UseItemCD
-spec decode_UseItemCD(Bin0) -> { #pk_UseItemCD{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_UseItemCD(Bin0) ->
	{ V_itemGroupID, Bin1 } = read_uint16( Bin0 ),
	{ V_remainCDTime, Bin2 } = read_uint32( Bin1 ),
	{ #pk_UseItemCD {
		itemGroupID = V_itemGroupID,
		remainCDTime = V_remainCDTime
		},
	Bin2 }.

%GENERATED from file:item.h => UseItemGainCoinTips
-spec decode_UseItemGainCoinTips(Bin0) -> { #pk_UseItemGainCoinTips{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_UseItemGainCoinTips(Bin0) ->
	{ V_coinType, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_UseItemGainCoinTips {
		coinType = V_coinType,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:item.h => UseItemGainGoodsTips
-spec decode_UseItemGainGoodsTips(Bin0) -> { #pk_UseItemGainGoodsTips{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_UseItemGainGoodsTips(Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint16( Bin1 ),
	{ V_quality, Bin3 } = read_uint8( Bin2 ),
	{ V_isBind, Bin4 } = read_uint8( Bin3 ),
	{ #pk_UseItemGainGoodsTips {
		itemID = V_itemID,
		itemNum = V_itemNum,
		quality = V_quality,
		isBind = V_isBind
		},
	Bin4 }.

%GENERATED from file:luckycoin.h => GainLuckyCoinInfo
-spec decode_GainLuckyCoinInfo(Bin0) -> { #pk_GainLuckyCoinInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GainLuckyCoinInfo(Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_friendID, Bin2 } = read_uint64( Bin1 ),
	{ #pk_GainLuckyCoinInfo {
		time = V_time,
		friendID = V_friendID
		},
	Bin2 }.

%GENERATED from file:mail.h => MailCoin
-spec decode_MailCoin(Bin0) -> { #pk_MailCoin{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MailCoin(Bin0) ->
	{ V_coinType, Bin1 } = read_uint8( Bin0 ),
	{ V_coinNum, Bin2 } = read_uint32( Bin1 ),
	{ #pk_MailCoin {
		coinType = V_coinType,
		coinNum = V_coinNum
		},
	Bin2 }.

%GENERATED from file:mail.h => MailDetail
-spec decode_MailDetail(Bin0) -> { #pk_MailDetail{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MailDetail(Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ V_sendRoleID, Bin2 } = read_uint64( Bin1 ),
	{ V_isLocked, Bin3 } = read_bool( Bin2 ),
	{ V_remainDay, Bin4 } = read_uint8( Bin3 ),
	{ V_sendPlayerName, Bin5 } = read_string( Bin4 ),
	{ V_mailTitle, Bin6 } = read_string( Bin5 ),
	{ V_mailContent, Bin7 } = read_string( Bin6 ),
	{ V_itemList, Bin8 } = read_array(Bin7, fun(X) -> decode_MailItem( X ) end),
	{ V_coinList, Bin9 } = read_array(Bin8, fun(X) -> decode_MailCoin( X ) end),
	{ #pk_MailDetail {
		mailID = V_mailID,
		sendRoleID = V_sendRoleID,
		isLocked = V_isLocked,
		remainDay = V_remainDay,
		sendPlayerName = V_sendPlayerName,
		mailTitle = V_mailTitle,
		mailContent = V_mailContent,
		itemList = V_itemList,
		coinList = V_coinList
		},
	Bin9 }.

%GENERATED from file:mail.h => MailInfo
-spec decode_MailInfo(Bin0) -> { #pk_MailInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MailInfo(Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ V_mailTitle, Bin2 } = read_string( Bin1 ),
	{ V_mailReadTime, Bin3 } = read_uint64( Bin2 ),
	{ V_mailSendTime, Bin4 } = read_uint64( Bin3 ),
	{ V_ishaveAttach, Bin5 } = read_bool( Bin4 ),
	{ V_senderName, Bin6 } = read_string( Bin5 ),
	{ #pk_MailInfo {
		mailID = V_mailID,
		mailTitle = V_mailTitle,
		mailReadTime = V_mailReadTime,
		mailSendTime = V_mailSendTime,
		ishaveAttach = V_ishaveAttach,
		senderName = V_senderName
		},
	Bin6 }.

%GENERATED from file:mail.h => MailItem
-spec decode_MailItem(Bin0) -> { #pk_MailItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MailItem(Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_itemNumber, Bin3 } = read_uint32( Bin2 ),
	{ V_quality, Bin4 } = read_uint8( Bin3 ),
	{ V_isBind, Bin5 } = read_bool( Bin4 ),
	{ #pk_MailItem {
		itemUID = V_itemUID,
		itemID = V_itemID,
		itemNumber = V_itemNumber,
		quality = V_quality,
		isBind = V_isBind
		},
	Bin5 }.

%GENERATED from file:mail.h => MailItemAll
-spec decode_MailItemAll(Bin0) -> { #pk_MailItemAll{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MailItemAll(Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemNumber, Bin2 } = read_uint32( Bin1 ),
	{ #pk_MailItemAll {
		itemID = V_itemID,
		itemNumber = V_itemNumber
		},
	Bin2 }.

%GENERATED from file:mail.h => retMailOpt
-spec decode_retMailOpt(Bin0) -> { #pk_retMailOpt{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_retMailOpt(Bin0) ->
	{ V_mailID, Bin1 } = read_uint64( Bin0 ),
	{ V_result, Bin2 } = read_bool( Bin1 ),
	{ #pk_retMailOpt {
		mailID = V_mailID,
		result = V_result
		},
	Bin2 }.

%GENERATED from file:mall.h => FashionConfigInfo
-spec decode_FashionConfigInfo(Bin0) -> { #pk_FashionConfigInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_FashionConfigInfo(Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_batch, Bin2 } = read_int32( Bin1 ),
	{ V_fashionID, Bin3 } = read_array(Bin2, fun(X) -> decode_fashionIDCob( X ) end),
	{ V_itemID, Bin4 } = read_array(Bin3, fun(X) -> decode_itemIDCob( X ) end),
	{ V_discount, Bin5 } = read_float( Bin4 ),
	{ V_cointype, Bin6 } = read_int32( Bin5 ),
	{ V_original_price, Bin7 } = read_uint64( Bin6 ),
	{ V_price, Bin8 } = read_uint64( Bin7 ),
	{ V_start_time, Bin9 } = read_uint64( Bin8 ),
	{ V_time, Bin10 } = read_uint64( Bin9 ),
	{ V_resources_bg, Bin11 } = read_string( Bin10 ),
	{ V_fashion_show, Bin12 } = read_int32( Bin11 ),
	{ #pk_FashionConfigInfo {
		id = V_id,
		batch = V_batch,
		fashionID = V_fashionID,
		itemID = V_itemID,
		discount = V_discount,
		cointype = V_cointype,
		original_price = V_original_price,
		price = V_price,
		start_time = V_start_time,
		time = V_time,
		resources_bg = V_resources_bg,
		fashion_show = V_fashion_show
		},
	Bin12 }.

%GENERATED from file:mall.h => GroupBuyGoodsInfo
-spec decode_GroupBuyGoodsInfo(Bin0) -> { #pk_GroupBuyGoodsInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GroupBuyGoodsInfo(Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_collect_num, Bin2 } = read_int32( Bin1 ),
	{ V_product_name, Bin3 } = read_string( Bin2 ),
	{ V_product_icon, Bin4 } = read_string( Bin3 ),
	{ V_product_quality, Bin5 } = read_int32( Bin4 ),
	{ V_price, Bin6 } = read_uint64( Bin5 ),
	{ V_true_price, Bin7 } = read_uint64( Bin6 ),
	{ V_rebate1_num, Bin8 } = read_uint64( Bin7 ),
	{ V_rebate1_price, Bin9 } = read_uint64( Bin8 ),
	{ V_rebate2_num, Bin10 } = read_uint64( Bin9 ),
	{ V_rebate2_price, Bin11 } = read_uint64( Bin10 ),
	{ V_rebate3_num, Bin12 } = read_uint64( Bin11 ),
	{ V_rebate3_price, Bin13 } = read_uint64( Bin12 ),
	{ V_rebate4_num, Bin14 } = read_uint64( Bin13 ),
	{ V_rebate4_price, Bin15 } = read_uint64( Bin14 ),
	{ V_rebate5_num, Bin16 } = read_uint64( Bin15 ),
	{ V_rebate5_price, Bin17 } = read_uint64( Bin16 ),
	{ V_item1_id, Bin18 } = read_uint16( Bin17 ),
	{ V_item1_num, Bin19 } = read_uint16( Bin18 ),
	{ V_item2_id, Bin20 } = read_uint16( Bin19 ),
	{ V_item2_num, Bin21 } = read_uint16( Bin20 ),
	{ V_item3_id, Bin22 } = read_uint16( Bin21 ),
	{ V_item3_num, Bin23 } = read_uint16( Bin22 ),
	{ V_item4_id, Bin24 } = read_uint16( Bin23 ),
	{ V_item4_num, Bin25 } = read_uint16( Bin24 ),
	{ V_item5_id, Bin26 } = read_uint16( Bin25 ),
	{ V_item5_num, Bin27 } = read_uint16( Bin26 ),
	{ V_score, Bin28 } = read_uint64( Bin27 ),
	{ V_buy_count, Bin29 } = read_uint64( Bin28 ),
	{ #pk_GroupBuyGoodsInfo {
		id = V_id,
		collect_num = V_collect_num,
		product_name = V_product_name,
		product_icon = V_product_icon,
		product_quality = V_product_quality,
		price = V_price,
		true_price = V_true_price,
		rebate1_num = V_rebate1_num,
		rebate1_price = V_rebate1_price,
		rebate2_num = V_rebate2_num,
		rebate2_price = V_rebate2_price,
		rebate3_num = V_rebate3_num,
		rebate3_price = V_rebate3_price,
		rebate4_num = V_rebate4_num,
		rebate4_price = V_rebate4_price,
		rebate5_num = V_rebate5_num,
		rebate5_price = V_rebate5_price,
		item1_id = V_item1_id,
		item1_num = V_item1_num,
		item2_id = V_item2_id,
		item2_num = V_item2_num,
		item3_id = V_item3_id,
		item3_num = V_item3_num,
		item4_id = V_item4_id,
		item4_num = V_item4_num,
		item5_id = V_item5_id,
		item5_num = V_item5_num,
		score = V_score,
		buy_count = V_buy_count
		},
	Bin29 }.

%GENERATED from file:mall.h => GroupBuyRewardInfo
-spec decode_GroupBuyRewardInfo(Bin0) -> { #pk_GroupBuyRewardInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_GroupBuyRewardInfo(Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_score, Bin2 } = read_uint64( Bin1 ),
	{ V_reward1_id, Bin3 } = read_uint16( Bin2 ),
	{ V_reward1_num, Bin4 } = read_uint16( Bin3 ),
	{ V_reward2_id, Bin5 } = read_uint16( Bin4 ),
	{ V_reward2_num, Bin6 } = read_uint16( Bin5 ),
	{ V_reward3_id, Bin7 } = read_uint16( Bin6 ),
	{ V_reward3_num, Bin8 } = read_uint16( Bin7 ),
	{ V_reward4_id, Bin9 } = read_uint16( Bin8 ),
	{ V_reward4_num, Bin10 } = read_uint16( Bin9 ),
	{ V_reward5_id, Bin11 } = read_uint16( Bin10 ),
	{ V_reward5_num, Bin12 } = read_uint16( Bin11 ),
	{ #pk_GroupBuyRewardInfo {
		id = V_id,
		score = V_score,
		reward1_id = V_reward1_id,
		reward1_num = V_reward1_num,
		reward2_id = V_reward2_id,
		reward2_num = V_reward2_num,
		reward3_id = V_reward3_id,
		reward3_num = V_reward3_num,
		reward4_id = V_reward4_id,
		reward4_num = V_reward4_num,
		reward5_id = V_reward5_id,
		reward5_num = V_reward5_num
		},
	Bin12 }.

%GENERATED from file:mall.h => KoreaNaverConfigInfo
-spec decode_KoreaNaverConfigInfo(Bin0) -> { #pk_KoreaNaverConfigInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_KoreaNaverConfigInfo(Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_beginTime, Bin3 } = read_int32( Bin2 ),
	{ V_endTime, Bin4 } = read_int32( Bin3 ),
	{ V_itemID, Bin5 } = read_int32( Bin4 ),
	{ V_itemCount, Bin6 } = read_int32( Bin5 ),
	{ V_param, Bin7 } = read_string( Bin6 ),
	{ V_ver, Bin8 } = read_int32( Bin7 ),
	{ V_id_num, Bin9 } = read_int32( Bin8 ),
	{ V_menuID, Bin10 } = read_int32( Bin9 ),
	{ V_articleID, Bin11 } = read_int32( Bin10 ),
	{ #pk_KoreaNaverConfigInfo {
		id = V_id,
		name = V_name,
		beginTime = V_beginTime,
		endTime = V_endTime,
		itemID = V_itemID,
		itemCount = V_itemCount,
		param = V_param,
		ver = V_ver,
		id_num = V_id_num,
		menuID = V_menuID,
		articleID = V_articleID
		},
	Bin11 }.

%GENERATED from file:mall.h => KoreaNaverIdAndVer
-spec decode_KoreaNaverIdAndVer(Bin0) -> { #pk_KoreaNaverIdAndVer{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_KoreaNaverIdAndVer(Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_ver, Bin2 } = read_int32( Bin1 ),
	{ #pk_KoreaNaverIdAndVer {
		id = V_id,
		ver = V_ver
		},
	Bin2 }.

%GENERATED from file:mall.h => MallInfo
-spec decode_MallInfo(Bin0) -> { #pk_MallInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MallInfo(Bin0) ->
	{ V_db_id, Bin1 } = read_uint32( Bin0 ),
	{ V_itemid, Bin2 } = read_uint32( Bin1 ),
	{ V_buyNumDefalut, Bin3 } = read_uint16( Bin2 ),
	{ V_mainmenu, Bin4 } = read_int8( Bin3 ),
	{ V_submenu, Bin5 } = read_int8( Bin4 ),
	{ V_gold, Bin6 } = read_int32( Bin5 ),
	{ V_bind_gold, Bin7 } = read_int32( Bin6 ),
	{ V_use_integral, Bin8 } = read_int32( Bin7 ),
	{ V_get_integral, Bin9 } = read_int32( Bin8 ),
	{ V_lefttime, Bin10 } = read_int32( Bin9 ),
	{ V_leftcount, Bin11 } = read_int32( Bin10 ),
	{ V_leftcountMax, Bin12 } = read_int32( Bin11 ),
	{ V_sortNumber, Bin13 } = read_int32( Bin12 ),
	{ V_rebate, Bin14 } = read_int8( Bin13 ),
	{ V_showtype, Bin15 } = read_int8( Bin14 ),
	{ V_limitType, Bin16 } = read_int8( Bin15 ),
	{ V_present, Bin17 } = read_uint8( Bin16 ),
	{ #pk_MallInfo {
		db_id = V_db_id,
		itemid = V_itemid,
		buyNumDefalut = V_buyNumDefalut,
		mainmenu = V_mainmenu,
		submenu = V_submenu,
		gold = V_gold,
		bind_gold = V_bind_gold,
		use_integral = V_use_integral,
		get_integral = V_get_integral,
		lefttime = V_lefttime,
		leftcount = V_leftcount,
		leftcountMax = V_leftcountMax,
		sortNumber = V_sortNumber,
		rebate = V_rebate,
		showtype = V_showtype,
		limitType = V_limitType,
		present = V_present
		},
	Bin17 }.

%GENERATED from file:mall.h => fashionIDCob
-spec decode_fashionIDCob(Bin0) -> { #pk_fashionIDCob{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_fashionIDCob(Bin0) ->
	{ V_sex, Bin1 } = read_int32( Bin0 ),
	{ V_fashionID, Bin2 } = read_int32( Bin1 ),
	{ #pk_fashionIDCob {
		sex = V_sex,
		fashionID = V_fashionID
		},
	Bin2 }.

%GENERATED from file:mall.h => idAndCount
-spec decode_idAndCount(Bin0) -> { #pk_idAndCount{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_idAndCount(Bin0) ->
	{ V_id, Bin1 } = read_int32( Bin0 ),
	{ V_count, Bin2 } = read_int32( Bin1 ),
	{ #pk_idAndCount {
		id = V_id,
		count = V_count
		},
	Bin2 }.

%GENERATED from file:mall.h => itemIDCob
-spec decode_itemIDCob(Bin0) -> { #pk_itemIDCob{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_itemIDCob(Bin0) ->
	{ V_itemID, Bin1 } = read_int32( Bin0 ),
	{ V_count, Bin2 } = read_int32( Bin1 ),
	{ #pk_itemIDCob {
		itemID = V_itemID,
		count = V_count
		},
	Bin2 }.

%GENERATED from file:marriage.h => InvitedPlayerData
-spec decode_InvitedPlayerData(Bin0) -> { #pk_InvitedPlayerData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_InvitedPlayerData(Bin0) ->
	{ V_roleId, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_uint8( Bin4 ),
	{ V_sex, Bin6 } = read_uint8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_giveGiftsID, Bin8 } = read_uint32( Bin7 ),
	{ #pk_InvitedPlayerData {
		roleId = V_roleId,
		name = V_name,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		giveGiftsID = V_giveGiftsID
		},
	Bin8 }.

%GENERATED from file:marriage.h => KetubbaData
-spec decode_KetubbaData(Bin0) -> { #pk_KetubbaData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_KetubbaData(Bin0) ->
	{ V_roleId, Bin1 } = read_uint64( Bin0 ),
	{ V_partnerRoleId, Bin2 } = read_uint64( Bin1 ),
	{ V_startTime, Bin3 } = read_uint64( Bin2 ),
	{ V_itemUID, Bin4 } = read_uint64( Bin3 ),
	{ V_type, Bin5 } = read_uint8( Bin4 ),
	{ V_name, Bin6 } = read_string( Bin5 ),
	{ V_partnerName, Bin7 } = read_string( Bin6 ),
	{ V_weddingState, Bin8 } = read_uint8( Bin7 ),
	{ #pk_KetubbaData {
		roleId = V_roleId,
		partnerRoleId = V_partnerRoleId,
		startTime = V_startTime,
		itemUID = V_itemUID,
		type = V_type,
		name = V_name,
		partnerName = V_partnerName,
		weddingState = V_weddingState
		},
	Bin8 }.

%GENERATED from file:marriage.h => RobRedData
-spec decode_RobRedData(Bin0) -> { #pk_RobRedData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RobRedData(Bin0) ->
	{ V_roleId, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_uint8( Bin4 ),
	{ V_sex, Bin6 } = read_uint8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_robNum, Bin8 } = read_uint16( Bin7 ),
	{ V_useTime, Bin9 } = read_uint16( Bin8 ),
	{ #pk_RobRedData {
		roleId = V_roleId,
		name = V_name,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		robNum = V_robNum,
		useTime = V_useTime
		},
	Bin9 }.

%GENERATED from file:marriage.h => SitNpcData
-spec decode_SitNpcData(Bin0) -> { #pk_SitNpcData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SitNpcData(Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ V_sitRoleID, Bin2 } = read_uint64( Bin1 ),
	{ V_npcX, Bin3 } = read_float( Bin2 ),
	{ V_npcY, Bin4 } = read_float( Bin3 ),
	{ #pk_SitNpcData {
		npcCode = V_npcCode,
		sitRoleID = V_sitRoleID,
		npcX = V_npcX,
		npcY = V_npcY
		},
	Bin4 }.

%GENERATED from file:marriage.h => SkillInfoForMarraige
-spec decode_SkillInfoForMarraige(Bin0) -> { #pk_SkillInfoForMarraige{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SkillInfoForMarraige(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_exp, Bin2 } = read_uint32( Bin1 ),
	{ #pk_SkillInfoForMarraige {
		id = V_id,
		exp = V_exp
		},
	Bin2 }.

%GENERATED from file:mount.h => MountInfo
-spec decode_MountInfo(Bin0) -> { #pk_MountInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MountInfo(Bin0) ->
	{ V_level, Bin1 } = read_uint8( Bin0 ),
	{ V_state, Bin2 } = read_uint8( Bin1 ),
	{ V_curProcess, Bin3 } = read_uint32( Bin2 ),
	{ V_shape_id, Bin4 } = read_uint16( Bin3 ),
	{ #pk_MountInfo {
		level = V_level,
		state = V_state,
		curProcess = V_curProcess,
		shape_id = V_shape_id
		},
	Bin4 }.

%GENERATED from file:npc.h => NpcTitle
-spec decode_NpcTitle(Bin0) -> { #pk_NpcTitle{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_NpcTitle(Bin0) ->
	{ V_npccode, Bin1 } = read_uint64( Bin0 ),
	{ V_new_title, Bin2 } = read_string( Bin1 ),
	{ #pk_NpcTitle {
		npccode = V_npccode,
		new_title = V_new_title
		},
	Bin2 }.

%GENERATED from file:pet.h => AddProp
-spec decode_AddProp(Bin0) -> { #pk_AddProp{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_AddProp(Bin0) ->
	{ V_prop, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_float( Bin1 ),
	{ #pk_AddProp {
		prop = V_prop,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:pet.h => AssistBattleInfo
-spec decode_AssistBattleInfo(Bin0) -> { #pk_AssistBattleInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_AssistBattleInfo(Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_slot, Bin2 } = read_uint8( Bin1 ),
	{ #pk_AssistBattleInfo {
		petID = V_petID,
		slot = V_slot
		},
	Bin2 }.

%GENERATED from file:pet.h => CatalogNode
-spec decode_CatalogNode(Bin0) -> { #pk_CatalogNode{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CatalogNode(Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ V_starLevel, Bin2 } = read_uint8( Bin1 ),
	{ #pk_CatalogNode {
		id = V_id,
		starLevel = V_starLevel
		},
	Bin2 }.

%GENERATED from file:pet.h => PetBaseInfo
-spec decode_PetBaseInfo(Bin0) -> { #pk_PetBaseInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PetBaseInfo(Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_petStar, Bin2 } = read_uint8( Bin1 ),
	{ V_status, Bin3 } = read_uint8( Bin2 ),
	{ V_skillList, Bin4 } = read_array(Bin3, fun(X) -> decode_PetSkillBaseInfo( X ) end),
	{ V_petName, Bin5 } = read_string( Bin4 ),
	{ V_petRaw, Bin6 } = read_uint8( Bin5 ),
	{ V_petTime, Bin7 } = read_uint64( Bin6 ),
	{ V_petProps, Bin8 } = read_array(Bin7, fun(X) -> decode_AddProp( X ) end),
	{ V_petForce, Bin9 } = read_uint64( Bin8 ),
	{ V_upCount, Bin10 } = read_uint32( Bin9 ),
	{ V_petLevel, Bin11 } = read_uint32( Bin10 ),
	{ V_petExp, Bin12 } = read_uint32( Bin11 ),
	{ #pk_PetBaseInfo {
		petID = V_petID,
		petStar = V_petStar,
		status = V_status,
		skillList = V_skillList,
		petName = V_petName,
		petRaw = V_petRaw,
		petTime = V_petTime,
		petProps = V_petProps,
		petForce = V_petForce,
		upCount = V_upCount,
		petLevel = V_petLevel,
		petExp = V_petExp
		},
	Bin12 }.

%GENERATED from file:pet.h => PetEquipInfo
-spec decode_PetEquipInfo(Bin0) -> { #pk_PetEquipInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PetEquipInfo(Bin0) ->
	{ V_equipID, Bin1 } = read_uint8( Bin0 ),
	{ V_equipLv, Bin2 } = read_uint8( Bin1 ),
	{ #pk_PetEquipInfo {
		equipID = V_equipID,
		equipLv = V_equipLv
		},
	Bin2 }.

%GENERATED from file:pet.h => PetSkillBaseInfo
-spec decode_PetSkillBaseInfo(Bin0) -> { #pk_PetSkillBaseInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PetSkillBaseInfo(Bin0) ->
	{ V_petSkillIndex, Bin1 } = read_uint8( Bin0 ),
	{ V_petSkillId, Bin2 } = read_uint16( Bin1 ),
	{ V_petSkillCd, Bin3 } = read_uint16( Bin2 ),
	{ V_petSkillType, Bin4 } = read_uint8( Bin3 ),
	{ V_petSkillLv, Bin5 } = read_uint8( Bin4 ),
	{ V_petSkillIsUnlock, Bin6 } = read_uint8( Bin5 ),
	{ #pk_PetSkillBaseInfo {
		petSkillIndex = V_petSkillIndex,
		petSkillId = V_petSkillId,
		petSkillCd = V_petSkillCd,
		petSkillType = V_petSkillType,
		petSkillLv = V_petSkillLv,
		petSkillIsUnlock = V_petSkillIsUnlock
		},
	Bin6 }.

%GENERATED from file:pet.h => PetSkillCastResult
-spec decode_PetSkillCastResult(Bin0) -> { #pk_PetSkillCastResult{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PetSkillCastResult(Bin0) ->
	{ V_oldSkillID, Bin1 } = read_uint16( Bin0 ),
	{ V_newSkillID, Bin2 } = read_uint16( Bin1 ),
	{ V_newSkillLevel, Bin3 } = read_uint16( Bin2 ),
	{ #pk_PetSkillCastResult {
		oldSkillID = V_oldSkillID,
		newSkillID = V_newSkillID,
		newSkillLevel = V_newSkillLevel
		},
	Bin3 }.

%GENERATED from file:pet.h => PetTerritoryInfo
-spec decode_PetTerritoryInfo(Bin0) -> { #pk_PetTerritoryInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PetTerritoryInfo(Bin0) ->
	{ V_petID, Bin1 } = read_uint16( Bin0 ),
	{ V_petLevel, Bin2 } = read_uint16( Bin1 ),
	{ V_petForce, Bin3 } = read_uint64( Bin2 ),
	{ V_territoryID, Bin4 } = read_uint32( Bin3 ),
	{ V_star, Bin5 } = read_uint8( Bin4 ),
	{ V_raw, Bin6 } = read_uint8( Bin5 ),
	{ #pk_PetTerritoryInfo {
		petID = V_petID,
		petLevel = V_petLevel,
		petForce = V_petForce,
		territoryID = V_territoryID,
		star = V_star,
		raw = V_raw
		},
	Bin6 }.

%GENERATED from file:pet.h => PvPCityInfo
-spec decode_PvPCityInfo(Bin0) -> { #pk_PvPCityInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PvPCityInfo(Bin0) ->
	{ V_cityID, Bin1 } = read_uint8( Bin0 ),
	{ V_cityTime, Bin2 } = read_uint64( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_cityHp, Bin4 } = read_uint32( Bin3 ),
	{ V_cityMax, Bin5 } = read_uint32( Bin4 ),
	{ V_force, Bin6 } = read_uint32( Bin5 ),
	{ V_roleName, Bin7 } = read_string( Bin6 ),
	{ V_petList, Bin8 } = read_array(Bin7, fun(X) -> read_uint16( X ) end),
	{ #pk_PvPCityInfo {
		cityID = V_cityID,
		cityTime = V_cityTime,
		roleID = V_roleID,
		cityHp = V_cityHp,
		cityMax = V_cityMax,
		force = V_force,
		roleName = V_roleName,
		petList = V_petList
		},
	Bin8 }.

%GENERATED from file:pet.h => PveItem
-spec decode_PveItem(Bin0) -> { #pk_PveItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PveItem(Bin0) ->
	{ V_id, Bin1 } = read_int16( Bin0 ),
	{ V_num, Bin2 } = read_int16( Bin1 ),
	{ #pk_PveItem {
		id = V_id,
		num = V_num
		},
	Bin2 }.

%GENERATED from file:pet.h => PveSweep
-spec decode_PveSweep(Bin0) -> { #pk_PveSweep{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PveSweep(Bin0) ->
	{ V_num, Bin1 } = read_uint8( Bin0 ),
	{ V_coin, Bin2 } = read_int32( Bin1 ),
	{ V_exp, Bin3 } = read_int32( Bin2 ),
	{ V_itemList, Bin4 } = read_array(Bin3, fun(X) -> decode_PveItem( X ) end),
	{ #pk_PveSweep {
		num = V_num,
		coin = V_coin,
		exp = V_exp,
		itemList = V_itemList
		},
	Bin4 }.

%GENERATED from file:pet.h => PvpBattleReportInfo
-spec decode_PvpBattleReportInfo(Bin0) -> { #pk_PvpBattleReportInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PvpBattleReportInfo(Bin0) ->
	{ V_time, Bin1 } = read_uint64( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ V_cityID, Bin3 } = read_uint8( Bin2 ),
	{ V_roleID, Bin4 } = read_uint64( Bin3 ),
	{ V_roleName, Bin5 } = read_string( Bin4 ),
	{ #pk_PvpBattleReportInfo {
		time = V_time,
		type = V_type,
		cityID = V_cityID,
		roleID = V_roleID,
		roleName = V_roleName
		},
	Bin5 }.

%GENERATED from file:pet.h => TerritoryHistoryCell
-spec decode_TerritoryHistoryCell(Bin0) -> { #pk_TerritoryHistoryCell{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TerritoryHistoryCell(Bin0) ->
	{ V_time, Bin1 } = read_uint32( Bin0 ),
	{ V_roleName, Bin2 } = read_string( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_territoryID, Bin4 } = read_uint32( Bin3 ),
	{ V_cfgReward, Bin5 } = read_uint32( Bin4 ),
	{ V_count1, Bin6 } = read_uint32( Bin5 ),
	{ V_count2, Bin7 } = read_uint32( Bin6 ),
	{ #pk_TerritoryHistoryCell {
		time = V_time,
		roleName = V_roleName,
		roleID = V_roleID,
		territoryID = V_territoryID,
		cfgReward = V_cfgReward,
		count1 = V_count1,
		count2 = V_count2
		},
	Bin7 }.

%GENERATED from file:pet.h => TerritoryInfo
-spec decode_TerritoryInfo(Bin0) -> { #pk_TerritoryInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TerritoryInfo(Bin0) ->
	{ V_territoryID, Bin1 } = read_uint32( Bin0 ),
	{ V_cfgReward, Bin2 } = read_uint32( Bin1 ),
	{ V_cfgTime, Bin3 } = read_uint32( Bin2 ),
	{ V_cfgLevel, Bin4 } = read_uint32( Bin3 ),
	{ V_cfgForce, Bin5 } = read_uint32( Bin4 ),
	{ V_timeFresh, Bin6 } = read_uint32( Bin5 ),
	{ V_timeEnd, Bin7 } = read_uint32( Bin6 ),
	{ V_rewardCount1, Bin8 } = read_uint32( Bin7 ),
	{ V_rewardCount2, Bin9 } = read_uint32( Bin8 ),
	{ V_timeSafe, Bin10 } = read_uint32( Bin9 ),
	{ V_timeSearch, Bin11 } = read_uint32( Bin10 ),
	{ #pk_TerritoryInfo {
		territoryID = V_territoryID,
		cfgReward = V_cfgReward,
		cfgTime = V_cfgTime,
		cfgLevel = V_cfgLevel,
		cfgForce = V_cfgForce,
		timeFresh = V_timeFresh,
		timeEnd = V_timeEnd,
		rewardCount1 = V_rewardCount1,
		rewardCount2 = V_rewardCount2,
		timeSafe = V_timeSafe,
		timeSearch = V_timeSearch
		},
	Bin11 }.

%GENERATED from file:player.h => AliveRole
-spec decode_AliveRole(Bin0) -> { #pk_AliveRole{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_AliveRole(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_role, Bin2 } = decode_CrossRoleBase( Bin1 ),
	{ V_listVE, Bin3 } = read_array(Bin2, fun(X) -> read_uint16( X ) end),
	{ V_countKill, Bin4 } = read_uint16( Bin3 ),
	{ V_countDead, Bin5 } = read_uint16( Bin4 ),
	{ V_isGiveUp, Bin6 } = read_bool( Bin5 ),
	{ V_rankID, Bin7 } = read_uint8( Bin6 ),
	{ V_timeDead, Bin8 } = read_uint64( Bin7 ),
	{ V_isRevive, Bin9 } = read_bool( Bin8 ),
	{ V_deadRank, Bin10 } = read_uint16( Bin9 ),
	{ #pk_AliveRole {
		roleID = V_roleID,
		role = V_role,
		listVE = V_listVE,
		countKill = V_countKill,
		countDead = V_countDead,
		isGiveUp = V_isGiveUp,
		rankID = V_rankID,
		timeDead = V_timeDead,
		isRevive = V_isRevive,
		deadRank = V_deadRank
		},
	Bin10 }.

%GENERATED from file:player.h => AliveRolePos
-spec decode_AliveRolePos(Bin0) -> { #pk_AliveRolePos{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_AliveRolePos(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_level, Bin2 } = read_uint16( Bin1 ),
	{ V_career, Bin3 } = read_uint32( Bin2 ),
	{ V_race, Bin4 } = read_uint8( Bin3 ),
	{ V_sex, Bin5 } = read_uint8( Bin4 ),
	{ V_head, Bin6 } = read_int32( Bin5 ),
	{ V_x, Bin7 } = read_float( Bin6 ),
	{ V_y, Bin8 } = read_float( Bin7 ),
	{ #pk_AliveRolePos {
		id = V_id,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		x = V_x,
		y = V_y
		},
	Bin8 }.

%GENERATED from file:player.h => BattleProp
-spec decode_BattleProp(Bin0) -> { #pk_BattleProp{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BattleProp(Bin0) ->
	{ V_index, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_float( Bin1 ),
	{ #pk_BattleProp {
		index = V_index,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:player.h => BlockStatusChange
-spec decode_BlockStatusChange(Bin0) -> { #pk_BlockStatusChange{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BlockStatusChange(Bin0) ->
	{ V_blockName, Bin1 } = read_string( Bin0 ),
	{ V_blockStatus, Bin2 } = read_uint32( Bin1 ),
	{ #pk_BlockStatusChange {
		blockName = V_blockName,
		blockStatus = V_blockStatus
		},
	Bin2 }.

%GENERATED from file:player.h => BuffBaseInfo
-spec decode_BuffBaseInfo(Bin0) -> { #pk_BuffBaseInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_BuffBaseInfo(Bin0) ->
	{ V_buffUID, Bin1 } = read_uint64( Bin0 ),
	{ V_buffID, Bin2 } = read_uint32( Bin1 ),
	{ V_time, Bin3 } = read_uint32( Bin2 ),
	{ #pk_BuffBaseInfo {
		buffUID = V_buffUID,
		buffID = V_buffID,
		time = V_time
		},
	Bin3 }.

%GENERATED from file:player.h => CoinData
-spec decode_CoinData(Bin0) -> { #pk_CoinData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CoinData(Bin0) ->
	{ V_coinType, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_CoinData {
		coinType = V_coinType,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:player.h => CopyMapDropItem
-spec decode_CopyMapDropItem(Bin0) -> { #pk_CopyMapDropItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CopyMapDropItem(Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemID, Bin2 } = read_uint16( Bin1 ),
	{ V_number, Bin3 } = read_uint16( Bin2 ),
	{ V_quality, Bin4 } = read_uint8( Bin3 ),
	{ V_isBind, Bin5 } = read_bool( Bin4 ),
	{ #pk_CopyMapDropItem {
		itemUID = V_itemUID,
		itemID = V_itemID,
		number = V_number,
		quality = V_quality,
		isBind = V_isBind
		},
	Bin5 }.

%GENERATED from file:player.h => CopyMapStatHurt
-spec decode_CopyMapStatHurt(Bin0) -> { #pk_CopyMapStatHurt{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CopyMapStatHurt(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_beHurt, Bin2 } = read_uint32( Bin1 ),
	{ V_playerHurt, Bin3 } = read_uint32( Bin2 ),
	{ V_petHurt, Bin4 } = read_uint32( Bin3 ),
	{ #pk_CopyMapStatHurt {
		roleID = V_roleID,
		beHurt = V_beHurt,
		playerHurt = V_playerHurt,
		petHurt = V_petHurt
		},
	Bin4 }.

%GENERATED from file:player.h => CopyObj
-spec decode_CopyObj(Bin0) -> { #pk_CopyObj{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CopyObj(Bin0) ->
	{ V_targetID, Bin1 } = read_uint16( Bin0 ),
	{ V_targetType, Bin2 } = read_uint8( Bin1 ),
	{ V_curNumber, Bin3 } = read_uint16( Bin2 ),
	{ V_allNumber, Bin4 } = read_uint16( Bin3 ),
	{ #pk_CopyObj {
		targetID = V_targetID,
		targetType = V_targetType,
		curNumber = V_curNumber,
		allNumber = V_allNumber
		},
	Bin4 }.

%GENERATED from file:player.h => CrossRoleBase
-spec decode_CrossRoleBase(Bin0) -> { #pk_CrossRoleBase{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_CrossRoleBase(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_server, Bin3 } = read_string( Bin2 ),
	{ V_level, Bin4 } = read_uint16( Bin3 ),
	{ V_career, Bin5 } = read_uint32( Bin4 ),
	{ V_race, Bin6 } = read_uint8( Bin5 ),
	{ V_sex, Bin7 } = read_uint8( Bin6 ),
	{ V_head, Bin8 } = read_int32( Bin7 ),
	{ V_frameID, Bin9 } = read_uint16( Bin8 ),
	{ V_face, Bin10 } = read_array(Bin9, fun(X) -> read_uint8( X ) end),
	{ V_maxForce, Bin11 } = read_uint64( Bin10 ),
	{ V_maxForceNoPet, Bin12 } = read_uint64( Bin11 ),
	{ #pk_CrossRoleBase {
		id = V_id,
		name = V_name,
		server = V_server,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		face = V_face,
		maxForce = V_maxForce,
		maxForceNoPet = V_maxForceNoPet
		},
	Bin12 }.

%GENERATED from file:player.h => Error
-spec decode_Error(Bin0) -> { #pk_Error{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_Error(Bin0) ->
	{ V_errorCode, Bin1 } = read_uint32( Bin0 ),
	{ V_params, Bin2 } = read_array(Bin1, fun(X) -> read_string( X ) end),
	{ #pk_Error {
		errorCode = V_errorCode,
		params = V_params
		},
	Bin2 }.

%GENERATED from file:player.h => LBSRole
-spec decode_LBSRole(Bin0) -> { #pk_LBSRole{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LBSRole(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_server, Bin3 } = read_string( Bin2 ),
	{ V_level, Bin4 } = read_uint16( Bin3 ),
	{ V_career, Bin5 } = read_uint32( Bin4 ),
	{ V_race, Bin6 } = read_uint8( Bin5 ),
	{ V_sex, Bin7 } = read_uint8( Bin6 ),
	{ V_head, Bin8 } = read_int32( Bin7 ),
	{ V_face, Bin9 } = read_array(Bin8, fun(X) -> read_uint8( X ) end),
	{ V_maxForceAll, Bin10 } = read_uint64( Bin9 ),
	{ V_frt, Bin11 } = read_uint8( Bin10 ),
	{ V_homeID, Bin12 } = read_uint64( Bin11 ),
	{ V_lat, Bin13 } = read_float( Bin12 ),
	{ V_lng, Bin14 } = read_float( Bin13 ),
	{ V_dist, Bin15 } = read_float( Bin14 ),
	{ #pk_LBSRole {
		id = V_id,
		name = V_name,
		server = V_server,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		face = V_face,
		maxForceAll = V_maxForceAll,
		frt = V_frt,
		homeID = V_homeID,
		lat = V_lat,
		lng = V_lng,
		dist = V_dist
		},
	Bin15 }.

%GENERATED from file:player.h => LookInfoMonster
-spec decode_LookInfoMonster(Bin0) -> { #pk_LookInfoMonster{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookInfoMonster(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ V_rotW, Bin5 } = read_float( Bin4 ),
	{ V_targetX, Bin6 } = read_float( Bin5 ),
	{ V_targetY, Bin7 } = read_float( Bin6 ),
	{ V_move_speed, Bin8 } = read_float( Bin7 ),
	{ V_attack_speed, Bin9 } = read_float( Bin8 ),
	{ V_moveStatus, Bin10 } = read_uint8( Bin9 ),
	{ V_type, Bin11 } = read_uint8( Bin10 ),
	{ V_hp_per, Bin12 } = read_uint8( Bin11 ),
	{ V_camp, Bin13 } = read_int8( Bin12 ),
	{ V_usercode, Bin14 } = read_uint64( Bin13 ),
	{ V_groupID, Bin15 } = read_uint64( Bin14 ),
	{ V_guildID, Bin16 } = read_uint64( Bin15 ),
	{ V_buffs, Bin17 } = read_array(Bin16, fun(X) -> decode_BuffBaseInfo( X ) end),
	{ V_name, Bin18 } = read_string( Bin17 ),
	{ V_level, Bin19 } = read_uint16( Bin18 ),
	{ #pk_LookInfoMonster {
		code = V_code,
		id = V_id,
		x = V_x,
		y = V_y,
		rotW = V_rotW,
		targetX = V_targetX,
		targetY = V_targetY,
		move_speed = V_move_speed,
		attack_speed = V_attack_speed,
		moveStatus = V_moveStatus,
		type = V_type,
		hp_per = V_hp_per,
		camp = V_camp,
		usercode = V_usercode,
		groupID = V_groupID,
		guildID = V_guildID,
		buffs = V_buffs,
		name = V_name,
		level = V_level
		},
	Bin19 }.

%GENERATED from file:player.h => LookInfoNpc
-spec decode_LookInfoNpc(Bin0) -> { #pk_LookInfoNpc{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookInfoNpc(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ V_rotW, Bin5 } = read_float( Bin4 ),
	{ V_name, Bin6 } = read_string( Bin5 ),
	{ V_actionStatus, Bin7 } = read_uint32( Bin6 ),
	{ V_title, Bin8 } = read_string( Bin7 ),
	{ #pk_LookInfoNpc {
		code = V_code,
		id = V_id,
		x = V_x,
		y = V_y,
		rotW = V_rotW,
		name = V_name,
		actionStatus = V_actionStatus,
		title = V_title
		},
	Bin8 }.

%GENERATED from file:player.h => LookInfoPet
-spec decode_LookInfoPet(Bin0) -> { #pk_LookInfoPet{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LookInfoPet(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_level, Bin4 } = read_uint16( Bin3 ),
	{ V_playerCode, Bin5 } = read_uint64( Bin4 ),
	{ V_x, Bin6 } = read_float( Bin5 ),
	{ V_y, Bin7 } = read_float( Bin6 ),
	{ V_targetX, Bin8 } = read_float( Bin7 ),
	{ V_targetY, Bin9 } = read_float( Bin8 ),
	{ V_move_speed, Bin10 } = read_float( Bin9 ),
	{ V_hp_per, Bin11 } = read_uint8( Bin10 ),
	{ V_status, Bin12 } = read_int8( Bin11 ),
	{ V_camp, Bin13 } = read_int8( Bin12 ),
	{ V_pkMode, Bin14 } = read_uint8( Bin13 ),
	{ V_rawLvl, Bin15 } = read_uint8( Bin14 ),
	{ V_buffs, Bin16 } = read_array(Bin15, fun(X) -> decode_BuffBaseInfo( X ) end),
	{ #pk_LookInfoPet {
		code = V_code,
		id = V_id,
		name = V_name,
		level = V_level,
		playerCode = V_playerCode,
		x = V_x,
		y = V_y,
		targetX = V_targetX,
		targetY = V_targetY,
		move_speed = V_move_speed,
		hp_per = V_hp_per,
		status = V_status,
		camp = V_camp,
		pkMode = V_pkMode,
		rawLvl = V_rawLvl,
		buffs = V_buffs
		},
	Bin16 }.

%GENERATED from file:player.h => MapLineInfo
-spec decode_MapLineInfo(Bin0) -> { #pk_MapLineInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MapLineInfo(Bin0) ->
	{ V_lineID, Bin1 } = read_uint32( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ V_inStates, Bin3 } = read_uint8( Bin2 ),
	{ #pk_MapLineInfo {
		lineID = V_lineID,
		number = V_number,
		inStates = V_inStates
		},
	Bin3 }.

%GENERATED from file:player.h => MissionObjectInfo
-spec decode_MissionObjectInfo(Bin0) -> { #pk_MissionObjectInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MissionObjectInfo(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ V_rotW, Bin5 } = read_float( Bin4 ),
	{ #pk_MissionObjectInfo {
		code = V_code,
		id = V_id,
		x = V_x,
		y = V_y,
		rotW = V_rotW
		},
	Bin5 }.

%GENERATED from file:player.h => MoneyChanges
-spec decode_MoneyChanges(Bin0) -> { #pk_MoneyChanges{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MoneyChanges(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_moneys, Bin2 } = read_array(Bin1, fun(X) -> decode_MoneyInit( X ) end),
	{ #pk_MoneyChanges {
		code = V_code,
		moneys = V_moneys
		},
	Bin2 }.

%GENERATED from file:player.h => MoneyInit
-spec decode_MoneyInit(Bin0) -> { #pk_MoneyInit{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MoneyInit(Bin0) ->
	{ V_moneyType, Bin1 } = read_uint8( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_MoneyInit {
		moneyType = V_moneyType,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:player.h => MonsterBook
-spec decode_MonsterBook(Bin0) -> { #pk_MonsterBook{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_MonsterBook(Bin0) ->
	{ V_id, Bin1 } = read_uint16( Bin0 ),
	{ V_kill, Bin2 } = read_uint32( Bin1 ),
	{ V_isSnap, Bin3 } = read_bool( Bin2 ),
	{ V_isUnlock, Bin4 } = read_bool( Bin3 ),
	{ V_isReward, Bin5 } = read_bool( Bin4 ),
	{ #pk_MonsterBook {
		id = V_id,
		kill = V_kill,
		isSnap = V_isSnap,
		isUnlock = V_isUnlock,
		isReward = V_isReward
		},
	Bin5 }.

%GENERATED from file:player.h => NoticeInfo
-spec decode_NoticeInfo(Bin0) -> { #pk_NoticeInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_NoticeInfo(Bin0) ->
	{ V_id, Bin1 } = read_int64( Bin0 ),
	{ V_type, Bin2 } = read_int8( Bin1 ),
	{ V_pos, Bin3 } = read_int8( Bin2 ),
	{ V_content, Bin4 } = read_string( Bin3 ),
	{ V_color, Bin5 } = read_int32( Bin4 ),
	{ V_afterSecondStart, Bin6 } = read_int64( Bin5 ),
	{ V_duration, Bin7 } = read_int64( Bin6 ),
	{ V_interval, Bin8 } = read_int32( Bin7 ),
	{ #pk_NoticeInfo {
		id = V_id,
		type = V_type,
		pos = V_pos,
		content = V_content,
		color = V_color,
		afterSecondStart = V_afterSecondStart,
		duration = V_duration,
		interval = V_interval
		},
	Bin8 }.

%GENERATED from file:player.h => ObjBrief
-spec decode_ObjBrief(Bin0) -> { #pk_ObjBrief{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ObjBrief(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ #pk_ObjBrief {
		code = V_code,
		name = V_name,
		x = V_x,
		y = V_y
		},
	Bin4 }.

%GENERATED from file:player.h => OneAwakeinfo
-spec decode_OneAwakeinfo(Bin0) -> { #pk_OneAwakeinfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OneAwakeinfo(Bin0) ->
	{ V_stage, Bin1 } = read_uint8( Bin0 ),
	{ V_stone, Bin2 } = read_uint8( Bin1 ),
	{ V_param, Bin3 } = read_uint32( Bin2 ),
	{ #pk_OneAwakeinfo {
		stage = V_stage,
		stone = V_stone,
		param = V_param
		},
	Bin3 }.

%GENERATED from file:player.h => PlayerDailyCount
-spec decode_PlayerDailyCount(Bin0) -> { #pk_PlayerDailyCount{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PlayerDailyCount(Bin0) ->
	{ V_dailyType, Bin1 } = read_uint32( Bin0 ),
	{ V_dailyID, Bin2 } = read_uint32( Bin1 ),
	{ V_dailyValue, Bin3 } = read_uint32( Bin2 ),
	{ #pk_PlayerDailyCount {
		dailyType = V_dailyType,
		dailyID = V_dailyID,
		dailyValue = V_dailyValue
		},
	Bin3 }.

%GENERATED from file:player.h => PosInfo
-spec decode_PosInfo(Bin0) -> { #pk_PosInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PosInfo(Bin0) ->
	{ V_x, Bin1 } = read_float( Bin0 ),
	{ V_y, Bin2 } = read_float( Bin1 ),
	{ #pk_PosInfo {
		x = V_x,
		y = V_y
		},
	Bin2 }.

%GENERATED from file:player.h => PropFloat
-spec decode_PropFloat(Bin0) -> { #pk_PropFloat{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PropFloat(Bin0) ->
	{ V_index, Bin1 } = read_uint16( Bin0 ),
	{ V_value, Bin2 } = read_float( Bin1 ),
	{ #pk_PropFloat {
		index = V_index,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:player.h => PropInt
-spec decode_PropInt(Bin0) -> { #pk_PropInt{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PropInt(Bin0) ->
	{ V_index, Bin1 } = read_uint16( Bin0 ),
	{ V_value, Bin2 } = read_int32( Bin1 ),
	{ #pk_PropInt {
		index = V_index,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:player.h => PropInt64
-spec decode_PropInt64(Bin0) -> { #pk_PropInt64{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PropInt64(Bin0) ->
	{ V_index, Bin1 } = read_uint16( Bin0 ),
	{ V_value, Bin2 } = read_uint64( Bin1 ),
	{ #pk_PropInt64 {
		index = V_index,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:player.h => PropString
-spec decode_PropString(Bin0) -> { #pk_PropString{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PropString(Bin0) ->
	{ V_index, Bin1 } = read_uint16( Bin0 ),
	{ V_value, Bin2 } = read_string( Bin1 ),
	{ #pk_PropString {
		index = V_index,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:player.h => RaceCanBeInvite
-spec decode_RaceCanBeInvite(Bin0) -> { #pk_RaceCanBeInvite{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RaceCanBeInvite(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_uint8( Bin4 ),
	{ V_sex, Bin6 } = read_uint8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_frameID, Bin8 } = read_uint16( Bin7 ),
	{ V_face, Bin9 } = read_array(Bin8, fun(X) -> read_uint8( X ) end),
	{ V_maxForce, Bin10 } = read_uint64( Bin9 ),
	{ V_isCouple, Bin11 } = read_bool( Bin10 ),
	{ V_isFriend, Bin12 } = read_bool( Bin11 ),
	{ V_isGuildMember, Bin13 } = read_bool( Bin12 ),
	{ V_friendliness, Bin14 } = read_uint32( Bin13 ),
	{ V_liveness, Bin15 } = read_uint32( Bin14 ),
	{ #pk_RaceCanBeInvite {
		id = V_id,
		name = V_name,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		face = V_face,
		maxForce = V_maxForce,
		isCouple = V_isCouple,
		isFriend = V_isFriend,
		isGuildMember = V_isGuildMember,
		friendliness = V_friendliness,
		liveness = V_liveness
		},
	Bin15 }.

%GENERATED from file:player.h => RaceTeamBase
-spec decode_RaceTeamBase(Bin0) -> { #pk_RaceTeamBase{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RaceTeamBase(Bin0) ->
	{ V_applyID, Bin1 } = read_uint64( Bin0 ),
	{ V_leaderID, Bin2 } = read_uint64( Bin1 ),
	{ V_members, Bin3 } = read_array(Bin2, fun(X) -> decode_CrossRoleBase( X ) end),
	{ V_petID, Bin4 } = read_uint16( Bin3 ),
	{ #pk_RaceTeamBase {
		applyID = V_applyID,
		leaderID = V_leaderID,
		members = V_members,
		petID = V_petID
		},
	Bin4 }.

%GENERATED from file:player.h => RaceTeamEx
-spec decode_RaceTeamEx(Bin0) -> { #pk_RaceTeamEx{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RaceTeamEx(Bin0) ->
	{ V_applyID, Bin1 } = read_uint64( Bin0 ),
	{ V_base, Bin2 } = decode_RaceTeamBase( Bin1 ),
	{ V_item, Bin3 } = decode_RaceTeamItem( Bin2 ),
	{ V_sort, Bin4 } = decode_RaceTeamSort( Bin3 ),
	{ V_giveUpID, Bin5 } = read_uint64( Bin4 ),
	{ #pk_RaceTeamEx {
		applyID = V_applyID,
		base = V_base,
		item = V_item,
		sort = V_sort,
		giveUpID = V_giveUpID
		},
	Bin5 }.

%GENERATED from file:player.h => RaceTeamItem
-spec decode_RaceTeamItem(Bin0) -> { #pk_RaceTeamItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RaceTeamItem(Bin0) ->
	{ V_listItemIDA, Bin1 } = read_array(Bin0, fun(X) -> read_uint8( X ) end),
	{ V_listItemIDB, Bin2 } = read_array(Bin1, fun(X) -> read_uint8( X ) end),
	{ #pk_RaceTeamItem {
		listItemIDA = V_listItemIDA,
		listItemIDB = V_listItemIDB
		},
	Bin2 }.

%GENERATED from file:player.h => RaceTeamSort
-spec decode_RaceTeamSort(Bin0) -> { #pk_RaceTeamSort{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RaceTeamSort(Bin0) ->
	{ V_laps, Bin1 } = read_uint8( Bin0 ),
	{ V_milestone, Bin2 } = read_uint8( Bin1 ),
	{ V_time, Bin3 } = read_uint64( Bin2 ),
	{ #pk_RaceTeamSort {
		laps = V_laps,
		milestone = V_milestone,
		time = V_time
		},
	Bin3 }.

%GENERATED from file:player.h => RechargeDoubleConf
-spec decode_RechargeDoubleConf(Bin0) -> { #pk_RechargeDoubleConf{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RechargeDoubleConf(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_payMoney, Bin2 } = read_float( Bin1 ),
	{ #pk_RechargeDoubleConf {
		id = V_id,
		payMoney = V_payMoney
		},
	Bin2 }.

%GENERATED from file:player.h => RequestAutoDeal
-spec decode_RequestAutoDeal(Bin0) -> { #pk_RequestAutoDeal{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RequestAutoDeal(Bin0) ->
	{ V_isSuccess, Bin1 } = read_bool( Bin0 ),
	{ V_copyMapID, Bin2 } = read_uint16( Bin1 ),
	{ V_coinReward, Bin3 } = read_array(Bin2, fun(X) -> decode_CoinData( X ) end),
	{ V_expReward, Bin4 } = read_uint64( Bin3 ),
	{ V_dropItems, Bin5 } = read_array(Bin4, fun(X) -> decode_CopyMapDropItem( X ) end),
	{ #pk_RequestAutoDeal {
		isSuccess = V_isSuccess,
		copyMapID = V_copyMapID,
		coinReward = V_coinReward,
		expReward = V_expReward,
		dropItems = V_dropItems
		},
	Bin5 }.

%GENERATED from file:player.h => RewardUpdateResource
-spec decode_RewardUpdateResource(Bin0) -> { #pk_RewardUpdateResource{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RewardUpdateResource(Bin0) ->
	{ V_count, Bin1 } = read_uint8( Bin0 ),
	{ V_flag, Bin2 } = read_bool( Bin1 ),
	{ V_rewardList, Bin3 } = read_array(Bin2, fun(X) -> decode_UpdateReward( X ) end),
	{ #pk_RewardUpdateResource {
		count = V_count,
		flag = V_flag,
		rewardList = V_rewardList
		},
	Bin3 }.

%GENERATED from file:player.h => RoleBaseInfo
-spec decode_RoleBaseInfo(Bin0) -> { #pk_RoleBaseInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RoleBaseInfo(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_roleID, Bin2 } = read_uint64( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_servername, Bin4 } = read_string( Bin3 ),
	{ V_myServerName, Bin5 } = read_string( Bin4 ),
	{ V_isInCross, Bin6 } = read_bool( Bin5 ),
	{ V_x, Bin7 } = read_float( Bin6 ),
	{ V_y, Bin8 } = read_float( Bin7 ),
	{ V_head, Bin9 } = read_uint32( Bin8 ),
	{ V_level, Bin10 } = read_int16( Bin9 ),
	{ V_camp, Bin11 } = read_int8( Bin10 ),
	{ V_career, Bin12 } = read_uint32( Bin11 ),
	{ V_race, Bin13 } = read_int8( Bin12 ),
	{ V_sex, Bin14 } = read_int8( Bin13 ),
	{ V_vip, Bin15 } = read_int8( Bin14 ),
	{ V_hp_per, Bin16 } = read_uint8( Bin15 ),
	{ V_exp, Bin17 } = read_uint32( Bin16 ),
	{ V_maxExp, Bin18 } = read_uint32( Bin17 ),
	{ V_cur_hp, Bin19 } = read_uint32( Bin18 ),
	{ V_max_hp, Bin20 } = read_uint32( Bin19 ),
	{ V_mp, Bin21 } = read_uint32( Bin20 ),
	{ V_mountID, Bin22 } = read_uint16( Bin21 ),
	{ V_otherCode, Bin23 } = read_uint64( Bin22 ),
	{ V_pkMode, Bin24 } = read_uint8( Bin23 ),
	{ V_maxCourage, Bin25 } = read_uint16( Bin24 ),
	{ V_moneys, Bin26 } = read_array(Bin25, fun(X) -> decode_MoneyInit( X ) end),
	{ V_visible_equips, Bin27 } = read_array(Bin26, fun(X) -> decode_visibleEquip( X ) end),
	{ V_refine_levels, Bin28 } = read_array(Bin27, fun(X) -> decode_refineLevel( X ) end),
	{ #pk_RoleBaseInfo {
		code = V_code,
		roleID = V_roleID,
		name = V_name,
		servername = V_servername,
		myServerName = V_myServerName,
		isInCross = V_isInCross,
		x = V_x,
		y = V_y,
		head = V_head,
		level = V_level,
		camp = V_camp,
		career = V_career,
		race = V_race,
		sex = V_sex,
		vip = V_vip,
		hp_per = V_hp_per,
		exp = V_exp,
		maxExp = V_maxExp,
		cur_hp = V_cur_hp,
		max_hp = V_max_hp,
		mp = V_mp,
		mountID = V_mountID,
		otherCode = V_otherCode,
		pkMode = V_pkMode,
		maxCourage = V_maxCourage,
		moneys = V_moneys,
		visible_equips = V_visible_equips,
		refine_levels = V_refine_levels
		},
	Bin28 }.

%GENERATED from file:player.h => SevenDayAimUpdate
-spec decode_SevenDayAimUpdate(Bin0) -> { #pk_SevenDayAimUpdate{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SevenDayAimUpdate(Bin0) ->
	{ V_type, Bin1 } = read_int32( Bin0 ),
	{ V_args, Bin2 } = read_array(Bin1, fun(X) -> read_int64( X ) end),
	{ #pk_SevenDayAimUpdate {
		type = V_type,
		args = V_args
		},
	Bin2 }.

%GENERATED from file:player.h => TaskUseItem
-spec decode_TaskUseItem(Bin0) -> { #pk_TaskUseItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TaskUseItem(Bin0) ->
	{ V_code, Bin1 } = read_uint64( Bin0 ),
	{ V_id, Bin2 } = read_uint32( Bin1 ),
	{ V_x, Bin3 } = read_float( Bin2 ),
	{ V_y, Bin4 } = read_float( Bin3 ),
	{ V_rotW, Bin5 } = read_float( Bin4 ),
	{ #pk_TaskUseItem {
		code = V_code,
		id = V_id,
		x = V_x,
		y = V_y,
		rotW = V_rotW
		},
	Bin5 }.

%GENERATED from file:player.h => UpdateReward
-spec decode_UpdateReward(Bin0) -> { #pk_UpdateReward{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_UpdateReward(Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ #pk_UpdateReward {
		itemid = V_itemid,
		number = V_number
		},
	Bin2 }.

%GENERATED from file:player.h => UserPlayerData
-spec decode_UserPlayerData(Bin0) -> { #pk_UserPlayerData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_UserPlayerData(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_int32( Bin2 ),
	{ V_wingLevel, Bin4 } = read_int32( Bin3 ),
	{ V_camp, Bin5 } = read_int8( Bin4 ),
	{ V_race, Bin6 } = read_int8( Bin5 ),
	{ V_career, Bin7 } = read_uint32( Bin6 ),
	{ V_sex, Bin8 } = read_int8( Bin7 ),
	{ V_head, Bin9 } = read_int32( Bin8 ),
	{ V_mapID, Bin10 } = read_uint16( Bin9 ),
	{ V_oldMapID, Bin11 } = read_uint16( Bin10 ),
	{ V_canRename, Bin12 } = read_bool( Bin11 ),
	{ V_visible_equips, Bin13 } = read_array(Bin12, fun(X) -> decode_visibleEquip( X ) end),
	{ V_fashionList, Bin14 } = read_array(Bin13, fun(X) -> read_uint16( X ) end),
	{ V_refine_levels, Bin15 } = read_array(Bin14, fun(X) -> decode_refineLevel( X ) end),
	{ #pk_UserPlayerData {
		roleID = V_roleID,
		name = V_name,
		level = V_level,
		wingLevel = V_wingLevel,
		camp = V_camp,
		race = V_race,
		career = V_career,
		sex = V_sex,
		head = V_head,
		mapID = V_mapID,
		oldMapID = V_oldMapID,
		canRename = V_canRename,
		visible_equips = V_visible_equips,
		fashionList = V_fashionList,
		refine_levels = V_refine_levels
		},
	Bin15 }.

%GENERATED from file:player.h => lotteryForToweItem
-spec decode_lotteryForToweItem(Bin0) -> { #pk_lotteryForToweItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_lotteryForToweItem(Bin0) ->
	{ V_pool_id, Bin1 } = read_uint32( Bin0 ),
	{ V_cfg_id, Bin2 } = read_uint32( Bin1 ),
	{ V_itemID, Bin3 } = read_uint32( Bin2 ),
	{ V_itemNumber, Bin4 } = read_uint32( Bin3 ),
	{ V_isBind, Bin5 } = read_uint32( Bin4 ),
	{ V_isWin, Bin6 } = read_int16( Bin5 ),
	{ #pk_lotteryForToweItem {
		pool_id = V_pool_id,
		cfg_id = V_cfg_id,
		itemID = V_itemID,
		itemNumber = V_itemNumber,
		isBind = V_isBind,
		isWin = V_isWin
		},
	Bin6 }.

%GENERATED from file:player.h => lotteryForTowerNotice
-spec decode_lotteryForTowerNotice(Bin0) -> { #pk_lotteryForTowerNotice{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_lotteryForTowerNotice(Bin0) ->
	{ V_roleName, Bin1 } = read_string( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_itemNumber, Bin3 } = read_uint32( Bin2 ),
	{ #pk_lotteryForTowerNotice {
		roleName = V_roleName,
		itemID = V_itemID,
		itemNumber = V_itemNumber
		},
	Bin3 }.

%GENERATED from file:player.h => lottery_award_item_info
-spec decode_lottery_award_item_info(Bin0) -> { #pk_lottery_award_item_info{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_lottery_award_item_info(Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_itemNumber, Bin2 } = read_uint32( Bin1 ),
	{ #pk_lottery_award_item_info {
		itemID = V_itemID,
		itemNumber = V_itemNumber
		},
	Bin2 }.

%GENERATED from file:player.h => lsbattlefield_award
-spec decode_lsbattlefield_award(Bin0) -> { #pk_lsbattlefield_award{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_lsbattlefield_award(Bin0) ->
	{ V_itemid, Bin1 } = read_uint16( Bin0 ),
	{ V_number, Bin2 } = read_uint16( Bin1 ),
	{ V_isBind, Bin3 } = read_uint32( Bin2 ),
	{ #pk_lsbattlefield_award {
		itemid = V_itemid,
		number = V_number,
		isBind = V_isBind
		},
	Bin3 }.

%GENERATED from file:player.h => lsbattlefield_rank
-spec decode_lsbattlefield_rank(Bin0) -> { #pk_lsbattlefield_rank{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_lsbattlefield_rank(Bin0) ->
	{ V_index, Bin1 } = read_uint16( Bin0 ),
	{ V_score, Bin2 } = read_uint16( Bin1 ),
	{ V_roleName, Bin3 } = read_string( Bin2 ),
	{ #pk_lsbattlefield_rank {
		index = V_index,
		score = V_score,
		roleName = V_roleName
		},
	Bin3 }.

%GENERATED from file:player.h => pushItem
-spec decode_pushItem(Bin0) -> { #pk_pushItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_pushItem(Bin0) ->
	{ V_sku, Bin1 } = read_uint32( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_num, Bin3 } = read_uint16( Bin2 ),
	{ V_isBinded, Bin4 } = read_uint8( Bin3 ),
	{ V_price, Bin5 } = read_uint32( Bin4 ),
	{ V_rebate, Bin6 } = read_uint8( Bin5 ),
	{ V_coinType, Bin7 } = read_uint8( Bin6 ),
	{ V_limited, Bin8 } = read_uint8( Bin7 ),
	{ #pk_pushItem {
		sku = V_sku,
		itemID = V_itemID,
		num = V_num,
		isBinded = V_isBinded,
		price = V_price,
		rebate = V_rebate,
		coinType = V_coinType,
		limited = V_limited
		},
	Bin8 }.

%GENERATED from file:player.h => refineLevel
-spec decode_refineLevel(Bin0) -> { #pk_refineLevel{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_refineLevel(Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_refineLevel {
		type = V_type,
		level = V_level
		},
	Bin2 }.

%GENERATED from file:player.h => visibleEquip
-spec decode_visibleEquip(Bin0) -> { #pk_visibleEquip{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_visibleEquip(Bin0) ->
	{ V_equipID, Bin1 } = read_uint32( Bin0 ),
	{ V_quality, Bin2 } = read_uint8( Bin1 ),
	{ #pk_visibleEquip {
		equipID = V_equipID,
		quality = V_quality
		},
	Bin2 }.

%GENERATED from file:rank.h => ActivityMapRankData
-spec decode_ActivityMapRankData(Bin0) -> { #pk_ActivityMapRankData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ActivityMapRankData(Bin0) ->
	{ V_name, Bin1 } = read_string( Bin0 ),
	{ V_value, Bin2 } = read_uint64( Bin1 ),
	{ #pk_ActivityMapRankData {
		name = V_name,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:rank.h => PlayerEquip
-spec decode_PlayerEquip(Bin0) -> { #pk_PlayerEquip{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PlayerEquip(Bin0) ->
	{ V_equipID, Bin1 } = read_uint32( Bin0 ),
	{ V_quality, Bin2 } = read_uint8( Bin1 ),
	{ #pk_PlayerEquip {
		equipID = V_equipID,
		quality = V_quality
		},
	Bin2 }.

%GENERATED from file:rank.h => PlayerEquipLevel
-spec decode_PlayerEquipLevel(Bin0) -> { #pk_PlayerEquipLevel{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PlayerEquipLevel(Bin0) ->
	{ V_type, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ #pk_PlayerEquipLevel {
		type = V_type,
		level = V_level
		},
	Bin2 }.

%GENERATED from file:rank.h => RankInfo
-spec decode_RankInfo(Bin0) -> { #pk_RankInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RankInfo(Bin0) ->
	{ V_rankSort, Bin1 } = read_uint8( Bin0 ),
	{ V_rankSortC, Bin2 } = read_int8( Bin1 ),
	{ V_roleID, Bin3 } = read_uint64( Bin2 ),
	{ V_name, Bin4 } = read_string( Bin3 ),
	{ V_wingLevel, Bin5 } = read_int32( Bin4 ),
	{ V_rankValue1, Bin6 } = read_int64( Bin5 ),
	{ V_rankValue2, Bin7 } = read_int64( Bin6 ),
	{ V_rankValue3, Bin8 } = read_int64( Bin7 ),
	{ V_title, Bin9 } = decode_TitleData( Bin8 ),
	{ V_frameID, Bin10 } = read_uint16( Bin9 ),
	{ V_career, Bin11 } = read_uint32( Bin10 ),
	{ V_race, Bin12 } = read_int8( Bin11 ),
	{ V_sex, Bin13 } = read_int8( Bin12 ),
	{ V_head, Bin14 } = read_int32( Bin13 ),
	{ V_level, Bin15 } = read_int32( Bin14 ),
	{ #pk_RankInfo {
		rankSort = V_rankSort,
		rankSortC = V_rankSortC,
		roleID = V_roleID,
		name = V_name,
		wingLevel = V_wingLevel,
		rankValue1 = V_rankValue1,
		rankValue2 = V_rankValue2,
		rankValue3 = V_rankValue3,
		title = V_title,
		frameID = V_frameID,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		level = V_level
		},
	Bin15 }.

%GENERATED from file:rank.h => RankModelData
-spec decode_RankModelData(Bin0) -> { #pk_RankModelData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RankModelData(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_sb_type, Bin2 } = read_int8( Bin1 ),
	{ V_name, Bin3 } = read_string( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_int8( Bin4 ),
	{ V_sex, Bin6 } = read_int8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_wingLevel, Bin8 } = read_int32( Bin7 ),
	{ V_fashionIDs, Bin9 } = read_array(Bin8, fun(X) -> read_int32( X ) end),
	{ V_equipIDList, Bin10 } = read_array(Bin9, fun(X) -> decode_PlayerEquip( X ) end),
	{ #pk_RankModelData {
		roleID = V_roleID,
		sb_type = V_sb_type,
		name = V_name,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		wingLevel = V_wingLevel,
		fashionIDs = V_fashionIDs,
		equipIDList = V_equipIDList
		},
	Bin10 }.

%GENERATED from file:rank.h => TitleData
-spec decode_TitleData(Bin0) -> { #pk_TitleData{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TitleData(Bin0) ->
	{ V_title1, Bin1 } = read_uint32( Bin0 ),
	{ V_title2, Bin2 } = read_uint32( Bin1 ),
	{ V_title3, Bin3 } = read_uint32( Bin2 ),
	{ V_color, Bin4 } = read_uint32( Bin3 ),
	{ V_background, Bin5 } = read_uint32( Bin4 ),
	{ V_customTitle, Bin6 } = read_string( Bin5 ),
	{ #pk_TitleData {
		title1 = V_title1,
		title2 = V_title2,
		title3 = V_title3,
		color = V_color,
		background = V_background,
		customTitle = V_customTitle
		},
	Bin6 }.

%GENERATED from file:redenvelope.h => redEnvelopeBaseInfo
-spec decode_redEnvelopeBaseInfo(Bin0) -> { #pk_redEnvelopeBaseInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_redEnvelopeBaseInfo(Bin0) ->
	{ V_redUID, Bin1 } = read_uint64( Bin0 ),
	{ V_creatorRoleID, Bin2 } = read_uint64( Bin1 ),
	{ V_targetUID, Bin3 } = read_uint64( Bin2 ),
	{ V_luckContent, Bin4 } = read_string( Bin3 ),
	{ V_creatorName, Bin5 } = read_string( Bin4 ),
	{ V_creatorLevel, Bin6 } = read_uint32( Bin5 ),
	{ V_type, Bin7 } = read_uint8( Bin6 ),
	{ V_targetType, Bin8 } = read_uint8( Bin7 ),
	{ V_creatorCareer, Bin9 } = read_uint32( Bin8 ),
	{ V_creatorRace, Bin10 } = read_uint8( Bin9 ),
	{ V_creatorSex, Bin11 } = read_uint8( Bin10 ),
	{ V_creatorHead, Bin12 } = read_int32( Bin11 ),
	{ V_allMoney, Bin13 } = read_uint32( Bin12 ),
	{ V_allNumber, Bin14 } = read_uint32( Bin13 ),
	{ V_takenMoney, Bin15 } = read_uint32( Bin14 ),
	{ V_takenNumber, Bin16 } = read_uint32( Bin15 ),
	{ #pk_redEnvelopeBaseInfo {
		redUID = V_redUID,
		creatorRoleID = V_creatorRoleID,
		targetUID = V_targetUID,
		luckContent = V_luckContent,
		creatorName = V_creatorName,
		creatorLevel = V_creatorLevel,
		type = V_type,
		targetType = V_targetType,
		creatorCareer = V_creatorCareer,
		creatorRace = V_creatorRace,
		creatorSex = V_creatorSex,
		creatorHead = V_creatorHead,
		allMoney = V_allMoney,
		allNumber = V_allNumber,
		takenMoney = V_takenMoney,
		takenNumber = V_takenNumber
		},
	Bin16 }.

%GENERATED from file:redenvelope.h => redEnvelopeHistory
-spec decode_redEnvelopeHistory(Bin0) -> { #pk_redEnvelopeHistory{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_redEnvelopeHistory(Bin0) ->
	{ V_redUID, Bin1 } = read_uint64( Bin0 ),
	{ V_creatorRoleID, Bin2 } = read_uint64( Bin1 ),
	{ V_creatorName, Bin3 } = read_string( Bin2 ),
	{ V_createTime, Bin4 } = read_uint32( Bin3 ),
	{ V_targetType, Bin5 } = read_uint8( Bin4 ),
	{ V_moneyNumber, Bin6 } = read_int32( Bin5 ),
	{ #pk_redEnvelopeHistory {
		redUID = V_redUID,
		creatorRoleID = V_creatorRoleID,
		creatorName = V_creatorName,
		createTime = V_createTime,
		targetType = V_targetType,
		moneyNumber = V_moneyNumber
		},
	Bin6 }.

%GENERATED from file:redenvelope.h => redEnvelopeInfo
-spec decode_redEnvelopeInfo(Bin0) -> { #pk_redEnvelopeInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_redEnvelopeInfo(Bin0) ->
	{ V_baseInfo, Bin1 } = decode_redEnvelopeBaseInfo( Bin0 ),
	{ V_takenList, Bin2 } = read_array(Bin1, fun(X) -> decode_takeHistory( X ) end),
	{ #pk_redEnvelopeInfo {
		baseInfo = V_baseInfo,
		takenList = V_takenList
		},
	Bin2 }.

%GENERATED from file:redenvelope.h => takeHistory
-spec decode_takeHistory(Bin0) -> { #pk_takeHistory{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_takeHistory(Bin0) ->
	{ V_takeRoleID, Bin1 } = read_uint64( Bin0 ),
	{ V_takeName, Bin2 } = read_string( Bin1 ),
	{ V_takeTime, Bin3 } = read_uint32( Bin2 ),
	{ V_takeMoney, Bin4 } = read_uint32( Bin3 ),
	{ #pk_takeHistory {
		takeRoleID = V_takeRoleID,
		takeName = V_takeName,
		takeTime = V_takeTime,
		takeMoney = V_takeMoney
		},
	Bin4 }.

%GENERATED from file:ride.h => RideInfo
-spec decode_RideInfo(Bin0) -> { #pk_RideInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RideInfo(Bin0) ->
	{ V_npcCode, Bin1 } = read_uint64( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_ownerID, Bin3 } = read_uint64( Bin2 ),
	{ V_ownerName, Bin4 } = read_string( Bin3 ),
	{ V_players, Bin5 } = read_array(Bin4, fun(X) -> decode_RidePlayerInfo( X ) end),
	{ V_number, Bin6 } = read_uint32( Bin5 ),
	{ #pk_RideInfo {
		npcCode = V_npcCode,
		itemID = V_itemID,
		ownerID = V_ownerID,
		ownerName = V_ownerName,
		players = V_players,
		number = V_number
		},
	Bin6 }.

%GENERATED from file:ride.h => RideItem
-spec decode_RideItem(Bin0) -> { #pk_RideItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RideItem(Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_number, Bin2 } = read_uint32( Bin1 ),
	{ V_state, Bin3 } = read_uint8( Bin2 ),
	{ #pk_RideItem {
		itemUID = V_itemUID,
		number = V_number,
		state = V_state
		},
	Bin3 }.

%GENERATED from file:ride.h => RidePlayerInfo
-spec decode_RidePlayerInfo(Bin0) -> { #pk_RidePlayerInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RidePlayerInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_seatID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_RidePlayerInfo {
		roleID = V_roleID,
		seatID = V_seatID
		},
	Bin2 }.

%GENERATED from file:rune.h => RuneBaseProp
-spec decode_RuneBaseProp(Bin0) -> { #pk_RuneBaseProp{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RuneBaseProp(Bin0) ->
	{ V_prop, Bin1 } = read_int32( Bin0 ),
	{ V_calcType, Bin2 } = read_uint8( Bin1 ),
	{ V_value, Bin3 } = read_float( Bin2 ),
	{ #pk_RuneBaseProp {
		prop = V_prop,
		calcType = V_calcType,
		value = V_value
		},
	Bin3 }.

%GENERATED from file:rune.h => RuneInfo
-spec decode_RuneInfo(Bin0) -> { #pk_RuneInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RuneInfo(Bin0) ->
	{ V_runeUID, Bin1 } = read_uint64( Bin0 ),
	{ V_pos, Bin2 } = read_uint32( Bin1 ),
	{ V_runeID, Bin3 } = read_uint32( Bin2 ),
	{ V_level, Bin4 } = read_uint8( Bin3 ),
	{ V_exp, Bin5 } = read_uint32( Bin4 ),
	{ V_isBind, Bin6 } = read_bool( Bin5 ),
	{ V_validSecond, Bin7 } = read_uint32( Bin6 ),
	{ V_subType, Bin8 } = read_uint8( Bin7 ),
	{ V_turnPosNum, Bin9 } = read_uint8( Bin8 ),
	{ V_baseProps, Bin10 } = read_array(Bin9, fun(X) -> decode_RuneBaseProp( X ) end),
	{ V_randProps, Bin11 } = read_array(Bin10, fun(X) -> decode_RuneRandProp( X ) end),
	{ V_skillProps, Bin12 } = read_array(Bin11, fun(X) -> decode_RuneRandProp( X ) end),
	{ #pk_RuneInfo {
		runeUID = V_runeUID,
		pos = V_pos,
		runeID = V_runeID,
		level = V_level,
		exp = V_exp,
		isBind = V_isBind,
		validSecond = V_validSecond,
		subType = V_subType,
		turnPosNum = V_turnPosNum,
		baseProps = V_baseProps,
		randProps = V_randProps,
		skillProps = V_skillProps
		},
	Bin12 }.

%GENERATED from file:rune.h => RuneRandProp
-spec decode_RuneRandProp(Bin0) -> { #pk_RuneRandProp{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RuneRandProp(Bin0) ->
	{ V_prop, Bin1 } = decode_RuneBaseProp( Bin0 ),
	{ V_indexNumber, Bin2 } = read_uint32( Bin1 ),
	{ #pk_RuneRandProp {
		prop = V_prop,
		indexNumber = V_indexNumber
		},
	Bin2 }.

%GENERATED from file:rune.h => RuneSuitProp
-spec decode_RuneSuitProp(Bin0) -> { #pk_RuneSuitProp{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_RuneSuitProp(Bin0) ->
	{ V_props, Bin1 } = read_array(Bin0, fun(X) -> decode_RuneBaseProp( X ) end),
	{ V_suitID, Bin2 } = read_uint32( Bin1 ),
	{ V_suitNum, Bin3 } = read_uint8( Bin2 ),
	{ V_ownerID, Bin4 } = read_uint32( Bin3 ),
	{ #pk_RuneSuitProp {
		props = V_props,
		suitID = V_suitID,
		suitNum = V_suitNum,
		ownerID = V_ownerID
		},
	Bin4 }.

%GENERATED from file:setting.h => SwitchVariantInfo
-spec decode_SwitchVariantInfo(Bin0) -> { #pk_SwitchVariantInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SwitchVariantInfo(Bin0) ->
	{ V_bitIndex, Bin1 } = read_uint32( Bin0 ),
	{ V_bitValue, Bin2 } = read_bool( Bin1 ),
	{ #pk_SwitchVariantInfo {
		bitIndex = V_bitIndex,
		bitValue = V_bitValue
		},
	Bin2 }.

%GENERATED from file:setting.h => VariantInfo
-spec decode_VariantInfo(Bin0) -> { #pk_VariantInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_VariantInfo(Bin0) ->
	{ V_index, Bin1 } = read_uint16( Bin0 ),
	{ V_value, Bin2 } = read_uint32( Bin1 ),
	{ #pk_VariantInfo {
		index = V_index,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:signin.h => SignInInfo
-spec decode_SignInInfo(Bin0) -> { #pk_SignInInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SignInInfo(Bin0) ->
	{ V_signType, Bin1 } = read_uint8( Bin0 ),
	{ V_itemList, Bin2 } = read_array(Bin1, fun(X) -> decode_SignItem( X ) end),
	{ V_signState, Bin3 } = read_uint8( Bin2 ),
	{ #pk_SignInInfo {
		signType = V_signType,
		itemList = V_itemList,
		signState = V_signState
		},
	Bin3 }.

%GENERATED from file:signin.h => SignItem
-spec decode_SignItem(Bin0) -> { #pk_SignItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SignItem(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemNumber, Bin2 } = read_uint16( Bin1 ),
	{ #pk_SignItem {
		itemID = V_itemID,
		itemNumber = V_itemNumber
		},
	Bin2 }.

%GENERATED from file:skill.h => LifeSkillInfo
-spec decode_LifeSkillInfo(Bin0) -> { #pk_LifeSkillInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LifeSkillInfo(Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ V_level, Bin2 } = read_int16( Bin1 ),
	{ V_exp, Bin3 } = read_int32( Bin2 ),
	{ #pk_LifeSkillInfo {
		type = V_type,
		level = V_level,
		exp = V_exp
		},
	Bin3 }.

%GENERATED from file:skill.h => OpenSlot
-spec decode_OpenSlot(Bin0) -> { #pk_OpenSlot{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OpenSlot(Bin0) ->
	{ V_slot, Bin1 } = read_uint8( Bin0 ),
	{ V_type, Bin2 } = read_uint8( Bin1 ),
	{ #pk_OpenSlot {
		slot = V_slot,
		type = V_type
		},
	Bin2 }.

%GENERATED from file:skill.h => PassiveSkillInfo
-spec decode_PassiveSkillInfo(Bin0) -> { #pk_PassiveSkillInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_PassiveSkillInfo(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ #pk_PassiveSkillInfo {
		id = V_id,
		level = V_level
		},
	Bin2 }.

%GENERATED from file:skill.h => SkillInfo
-spec decode_SkillInfo(Bin0) -> { #pk_SkillInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SkillInfo(Bin0) ->
	{ V_id, Bin1 } = read_uint32( Bin0 ),
	{ V_level, Bin2 } = read_uint32( Bin1 ),
	{ V_remainCD, Bin3 } = read_uint32( Bin2 ),
	{ #pk_SkillInfo {
		id = V_id,
		level = V_level,
		remainCD = V_remainCD
		},
	Bin3 }.

%GENERATED from file:skill.h => SkillSlotInfo
-spec decode_SkillSlotInfo(Bin0) -> { #pk_SkillSlotInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SkillSlotInfo(Bin0) ->
	{ V_index, Bin1 } = read_uint32( Bin0 ),
	{ V_skillID, Bin2 } = read_uint32( Bin1 ),
	{ #pk_SkillSlotInfo {
		index = V_index,
		skillID = V_skillID
		},
	Bin2 }.

%GENERATED from file:skill.h => itemInfo
-spec decode_itemInfo(Bin0) -> { #pk_itemInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_itemInfo(Bin0) ->
	{ V_itemID, Bin1 } = read_uint16( Bin0 ),
	{ V_itemNum, Bin2 } = read_uint16( Bin1 ),
	{ #pk_itemInfo {
		itemID = V_itemID,
		itemNum = V_itemNum
		},
	Bin2 }.

%GENERATED from file:skill.h => lifeSkillCanUseCount
-spec decode_lifeSkillCanUseCount(Bin0) -> { #pk_lifeSkillCanUseCount{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_lifeSkillCanUseCount(Bin0) ->
	{ V_type, Bin1 } = read_int16( Bin0 ),
	{ V_count, Bin2 } = read_uint32( Bin1 ),
	{ #pk_lifeSkillCanUseCount {
		type = V_type,
		count = V_count
		},
	Bin2 }.

%GENERATED from file:talent.h => TalentInfo
-spec decode_TalentInfo(Bin0) -> { #pk_TalentInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TalentInfo(Bin0) ->
	{ V_id, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ V_nextlevelexp, Bin3 } = read_uint64( Bin2 ),
	{ #pk_TalentInfo {
		id = V_id,
		level = V_level,
		nextlevelexp = V_nextlevelexp
		},
	Bin3 }.

%GENERATED from file:task.h => LoopTaskState
-spec decode_LoopTaskState(Bin0) -> { #pk_LoopTaskState{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_LoopTaskState(Bin0) ->
	{ V_taskID, Bin1 } = read_uint16( Bin0 ),
	{ V_state, Bin2 } = read_uint8( Bin1 ),
	{ V_task, Bin3 } = decode_taskInfo( Bin2 ),
	{ #pk_LoopTaskState {
		taskID = V_taskID,
		state = V_state,
		task = V_task
		},
	Bin3 }.

%GENERATED from file:task.h => SubmittedTaskInfo
-spec decode_SubmittedTaskInfo(Bin0) -> { #pk_SubmittedTaskInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_SubmittedTaskInfo(Bin0) ->
	{ V_slot, Bin1 } = read_uint16( Bin0 ),
	{ V_value, Bin2 } = read_uint64( Bin1 ),
	{ #pk_SubmittedTaskInfo {
		slot = V_slot,
		value = V_value
		},
	Bin2 }.

%GENERATED from file:task.h => acceptedAimTask
-spec decode_acceptedAimTask(Bin0) -> { #pk_acceptedAimTask{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_acceptedAimTask(Bin0) ->
	{ V_aimType, Bin1 } = read_int32( Bin0 ),
	{ V_aimIndex, Bin2 } = read_int32( Bin1 ),
	{ V_aimCurCount, Bin3 } = read_int32( Bin2 ),
	{ #pk_acceptedAimTask {
		aimType = V_aimType,
		aimIndex = V_aimIndex,
		aimCurCount = V_aimCurCount
		},
	Bin3 }.

%GENERATED from file:task.h => acceptedBaseTask
-spec decode_acceptedBaseTask(Bin0) -> { #pk_acceptedBaseTask{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_acceptedBaseTask(Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ V_taskProcess, Bin2 } = read_array(Bin1, fun(X) -> decode_acceptedAimTask( X ) end),
	{ #pk_acceptedBaseTask {
		taskID = V_taskID,
		taskProcess = V_taskProcess
		},
	Bin2 }.

%GENERATED from file:task.h => taskInfo
-spec decode_taskInfo(Bin0) -> { #pk_taskInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_taskInfo(Bin0) ->
	{ V_taskID, Bin1 } = read_int32( Bin0 ),
	{ V_target, Bin2 } = read_int32( Bin1 ),
	{ V_curNumber, Bin3 } = read_int32( Bin2 ),
	{ V_maxNumber, Bin4 } = read_int32( Bin3 ),
	{ #pk_taskInfo {
		taskID = V_taskID,
		target = V_target,
		curNumber = V_curNumber,
		maxNumber = V_maxNumber
		},
	Bin4 }.

%GENERATED from file:team.h => FightingCapacityInfo
-spec decode_FightingCapacityInfo(Bin0) -> { #pk_FightingCapacityInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_FightingCapacityInfo(Bin0) ->
	{ V_roleID, Bin1 } = read_uint64( Bin0 ),
	{ V_fightingCapacity, Bin2 } = read_uint64( Bin1 ),
	{ #pk_FightingCapacityInfo {
		roleID = V_roleID,
		fightingCapacity = V_fightingCapacity
		},
	Bin2 }.

%GENERATED from file:team.h => NearTeamInfo
-spec decode_NearTeamInfo(Bin0) -> { #pk_NearTeamInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_NearTeamInfo(Bin0) ->
	{ V_teamID, Bin1 } = read_int64( Bin0 ),
	{ V_leaderID, Bin2 } = read_uint64( Bin1 ),
	{ V_leaderName, Bin3 } = read_string( Bin2 ),
	{ V_leaderLevel, Bin4 } = read_int16( Bin3 ),
	{ V_numberOfTeam, Bin5 } = read_uint8( Bin4 ),
	{ V_career, Bin6 } = read_uint32( Bin5 ),
	{ V_race, Bin7 } = read_uint8( Bin6 ),
	{ V_sex, Bin8 } = read_uint8( Bin7 ),
	{ V_head, Bin9 } = read_int32( Bin8 ),
	{ #pk_NearTeamInfo {
		teamID = V_teamID,
		leaderID = V_leaderID,
		leaderName = V_leaderName,
		leaderLevel = V_leaderLevel,
		numberOfTeam = V_numberOfTeam,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head
		},
	Bin9 }.

%GENERATED from file:team.h => NotTeamMemberInfo
-spec decode_NotTeamMemberInfo(Bin0) -> { #pk_NotTeamMemberInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_NotTeamMemberInfo(Bin0) ->
	{ V_id, Bin1 } = read_uint64( Bin0 ),
	{ V_name, Bin2 } = read_string( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_race, Bin5 } = read_uint8( Bin4 ),
	{ V_sex, Bin6 } = read_uint8( Bin5 ),
	{ V_head, Bin7 } = read_int32( Bin6 ),
	{ V_serverID, Bin8 } = read_uint32( Bin7 ),
	{ #pk_NotTeamMemberInfo {
		id = V_id,
		name = V_name,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		serverID = V_serverID
		},
	Bin8 }.

%GENERATED from file:team.h => OnlineMemberSnapshot
-spec decode_OnlineMemberSnapshot(Bin0) -> { #pk_OnlineMemberSnapshot{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_OnlineMemberSnapshot(Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_guildID, Bin3 } = read_uint64( Bin2 ),
	{ V_playerName, Bin4 } = read_string( Bin3 ),
	{ V_guildName, Bin5 } = read_string( Bin4 ),
	{ V_career, Bin6 } = read_uint32( Bin5 ),
	{ V_level, Bin7 } = read_uint16( Bin6 ),
	{ V_friendState, Bin8 } = read_uint8( Bin7 ),
	{ V_race, Bin9 } = read_uint8( Bin8 ),
	{ V_sex, Bin10 } = read_uint8( Bin9 ),
	{ V_head, Bin11 } = read_int32( Bin10 ),
	{ V_frameID, Bin12 } = read_uint16( Bin11 ),
	{ V_force, Bin13 } = read_uint32( Bin12 ),
	{ #pk_OnlineMemberSnapshot {
		playerID = V_playerID,
		code = V_code,
		guildID = V_guildID,
		playerName = V_playerName,
		guildName = V_guildName,
		career = V_career,
		level = V_level,
		friendState = V_friendState,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		force = V_force
		},
	Bin13 }.

%GENERATED from file:team.h => TeamBaseInfo
-spec decode_TeamBaseInfo(Bin0) -> { #pk_TeamBaseInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TeamBaseInfo(Bin0) ->
	{ V_teamID, Bin1 } = read_uint64( Bin0 ),
	{ V_leaderID, Bin2 } = read_uint64( Bin1 ),
	{ V_copyMapID, Bin3 } = read_int32( Bin2 ),
	{ V_canBeSearched, Bin4 } = read_int32( Bin3 ),
	{ V_searchStartTime, Bin5 } = read_uint64( Bin4 ),
	{ #pk_TeamBaseInfo {
		teamID = V_teamID,
		leaderID = V_leaderID,
		copyMapID = V_copyMapID,
		canBeSearched = V_canBeSearched,
		searchStartTime = V_searchStartTime
		},
	Bin5 }.

%GENERATED from file:team.h => TeamMemberInfo
-spec decode_TeamMemberInfo(Bin0) -> { #pk_TeamMemberInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TeamMemberInfo(Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_playerName, Bin3 } = read_string( Bin2 ),
	{ V_guildID, Bin4 } = read_uint64( Bin3 ),
	{ V_guildName, Bin5 } = read_string( Bin4 ),
	{ V_force, Bin6 } = read_uint64( Bin5 ),
	{ V_level, Bin7 } = read_uint16( Bin6 ),
	{ V_career, Bin8 } = read_uint32( Bin7 ),
	{ V_race, Bin9 } = read_uint8( Bin8 ),
	{ V_sex, Bin10 } = read_uint8( Bin9 ),
	{ V_head, Bin11 } = read_int32( Bin10 ),
	{ V_frameID, Bin12 } = read_uint16( Bin11 ),
	{ V_hpPercent, Bin13 } = read_uint8( Bin12 ),
	{ V_mapID, Bin14 } = read_uint16( Bin13 ),
	{ V_groupID, Bin15 } = read_uint32( Bin14 ),
	{ V_mapInstanceID, Bin16 } = read_uint64( Bin15 ),
	{ V_assistMapID, Bin17 } = read_uint16( Bin16 ),
	{ V_x, Bin18 } = read_float( Bin17 ),
	{ V_y, Bin19 } = read_float( Bin18 ),
	{ V_customInfo, Bin20 } = read_string( Bin19 ),
	{ V_copyMapLeftCount, Bin21 } = read_uint16( Bin20 ),
	{ V_actionPoint, Bin22 } = read_uint32( Bin21 ),
	{ V_serverID, Bin23 } = read_uint32( Bin22 ),
	{ V_copyMapStar, Bin24 } = read_uint16( Bin23 ),
	{ #pk_TeamMemberInfo {
		playerID = V_playerID,
		code = V_code,
		playerName = V_playerName,
		guildID = V_guildID,
		guildName = V_guildName,
		force = V_force,
		level = V_level,
		career = V_career,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		hpPercent = V_hpPercent,
		mapID = V_mapID,
		groupID = V_groupID,
		mapInstanceID = V_mapInstanceID,
		assistMapID = V_assistMapID,
		x = V_x,
		y = V_y,
		customInfo = V_customInfo,
		copyMapLeftCount = V_copyMapLeftCount,
		actionPoint = V_actionPoint,
		serverID = V_serverID,
		copyMapStar = V_copyMapStar
		},
	Bin24 }.

%GENERATED from file:team.h => TeamMemberInfoEx
-spec decode_TeamMemberInfoEx(Bin0) -> { #pk_TeamMemberInfoEx{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TeamMemberInfoEx(Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_level, Bin3 } = read_uint16( Bin2 ),
	{ V_hpPercent, Bin4 } = read_uint16( Bin3 ),
	{ V_mapID, Bin5 } = read_uint16( Bin4 ),
	{ V_groupID, Bin6 } = read_uint32( Bin5 ),
	{ V_mapInstanceID, Bin7 } = read_uint64( Bin6 ),
	{ V_copyMapLeftCount, Bin8 } = read_uint16( Bin7 ),
	{ V_actionPoint, Bin9 } = read_uint32( Bin8 ),
	{ V_force, Bin10 } = read_uint64( Bin9 ),
	{ V_assistMapID, Bin11 } = read_uint16( Bin10 ),
	{ V_x, Bin12 } = read_float( Bin11 ),
	{ V_y, Bin13 } = read_float( Bin12 ),
	{ V_serverID, Bin14 } = read_uint32( Bin13 ),
	{ V_copyMapStar, Bin15 } = read_uint16( Bin14 ),
	{ #pk_TeamMemberInfoEx {
		playerID = V_playerID,
		code = V_code,
		level = V_level,
		hpPercent = V_hpPercent,
		mapID = V_mapID,
		groupID = V_groupID,
		mapInstanceID = V_mapInstanceID,
		copyMapLeftCount = V_copyMapLeftCount,
		actionPoint = V_actionPoint,
		force = V_force,
		assistMapID = V_assistMapID,
		x = V_x,
		y = V_y,
		serverID = V_serverID,
		copyMapStar = V_copyMapStar
		},
	Bin15 }.

%GENERATED from file:team.h => TeamMemberLocation
-spec decode_TeamMemberLocation(Bin0) -> { #pk_TeamMemberLocation{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TeamMemberLocation(Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_x, Bin2 } = read_float( Bin1 ),
	{ V_y, Bin3 } = read_float( Bin2 ),
	{ #pk_TeamMemberLocation {
		playerID = V_playerID,
		x = V_x,
		y = V_y
		},
	Bin3 }.

%GENERATED from file:team.h => TeamMemberSnapshot
-spec decode_TeamMemberSnapshot(Bin0) -> { #pk_TeamMemberSnapshot{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TeamMemberSnapshot(Bin0) ->
	{ V_playerID, Bin1 } = read_uint64( Bin0 ),
	{ V_code, Bin2 } = read_uint64( Bin1 ),
	{ V_playerName, Bin3 } = read_string( Bin2 ),
	{ V_career, Bin4 } = read_uint32( Bin3 ),
	{ V_level, Bin5 } = read_uint16( Bin4 ),
	{ V_race, Bin6 } = read_uint8( Bin5 ),
	{ V_sex, Bin7 } = read_uint8( Bin6 ),
	{ V_head, Bin8 } = read_int32( Bin7 ),
	{ V_frameID, Bin9 } = read_uint16( Bin8 ),
	{ V_force, Bin10 } = read_uint64( Bin9 ),
	{ V_guildID, Bin11 } = read_uint64( Bin10 ),
	{ #pk_TeamMemberSnapshot {
		playerID = V_playerID,
		code = V_code,
		playerName = V_playerName,
		career = V_career,
		level = V_level,
		race = V_race,
		sex = V_sex,
		head = V_head,
		frameID = V_frameID,
		force = V_force,
		guildID = V_guildID
		},
	Bin11 }.

%GENERATED from file:team.h => TeamSnapshot
-spec decode_TeamSnapshot(Bin0) -> { #pk_TeamSnapshot{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_TeamSnapshot(Bin0) ->
	{ V_base, Bin1 } = decode_TeamBaseInfo( Bin0 ),
	{ V_members, Bin2 } = read_array(Bin1, fun(X) -> decode_TeamMemberSnapshot( X ) end),
	{ #pk_TeamSnapshot {
		base = V_base,
		members = V_members
		},
	Bin2 }.

%GENERATED from file:trade.h => DealRecord
-spec decode_DealRecord(Bin0) -> { #pk_DealRecord{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_DealRecord(Bin0) ->
	{ V_itemUID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemID, Bin2 } = read_uint32( Bin1 ),
	{ V_sellType, Bin3 } = read_uint8( Bin2 ),
	{ V_buyorsell, Bin4 } = read_uint8( Bin3 ),
	{ V_dealTime, Bin5 } = read_uint64( Bin4 ),
	{ V_gold, Bin6 } = read_uint32( Bin5 ),
	{ V_diamond, Bin7 } = read_uint32( Bin6 ),
	{ V_tax, Bin8 } = read_uint32( Bin7 ),
	{ V_equipProps, Bin9 } = read_array(Bin8, fun(X) -> decode_QueryEquipPropInfo( X ) end),
	{ #pk_DealRecord {
		itemUID = V_itemUID,
		itemID = V_itemID,
		sellType = V_sellType,
		buyorsell = V_buyorsell,
		dealTime = V_dealTime,
		gold = V_gold,
		diamond = V_diamond,
		tax = V_tax,
		equipProps = V_equipProps
		},
	Bin9 }.

%GENERATED from file:trade.h => QueryEquipPropInfo
-spec decode_QueryEquipPropInfo(Bin0) -> { #pk_QueryEquipPropInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_QueryEquipPropInfo(Bin0) ->
	{ V_propType, Bin1 } = read_uint8( Bin0 ),
	{ V_propKey, Bin2 } = read_uint8( Bin1 ),
	{ V_propAffix, Bin3 } = read_uint16( Bin2 ),
	{ V_calcType, Bin4 } = read_bool( Bin3 ),
	{ V_propValue, Bin5 } = read_float( Bin4 ),
	{ #pk_QueryEquipPropInfo {
		propType = V_propType,
		propKey = V_propKey,
		propAffix = V_propAffix,
		calcType = V_calcType,
		propValue = V_propValue
		},
	Bin5 }.

%GENERATED from file:trade.h => QueryTradeList
-spec decode_QueryTradeList(Bin0) -> { #pk_QueryTradeList{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_QueryTradeList(Bin0) ->
	{ V_orderID, Bin1 } = read_uint64( Bin0 ),
	{ V_itemUID, Bin2 } = read_uint64( Bin1 ),
	{ V_itemID, Bin3 } = read_uint32( Bin2 ),
	{ V_roleName, Bin4 } = read_string( Bin3 ),
	{ V_sellType, Bin5 } = read_uint8( Bin4 ),
	{ V_putTime, Bin6 } = read_uint64( Bin5 ),
	{ V_downTime, Bin7 } = read_uint64( Bin6 ),
	{ V_gold, Bin8 } = read_uint32( Bin7 ),
	{ V_diamond, Bin9 } = read_uint32( Bin8 ),
	{ V_destRoleName, Bin10 } = read_string( Bin9 ),
	{ V_quality, Bin11 } = read_uint8( Bin10 ),
	{ V_itemLevel, Bin12 } = read_uint8( Bin11 ),
	{ V_pileCount, Bin13 } = read_uint32( Bin12 ),
	{ V_equipProps, Bin14 } = read_array(Bin13, fun(X) -> decode_QueryEquipPropInfo( X ) end),
	{ #pk_QueryTradeList {
		orderID = V_orderID,
		itemUID = V_itemUID,
		itemID = V_itemID,
		roleName = V_roleName,
		sellType = V_sellType,
		putTime = V_putTime,
		downTime = V_downTime,
		gold = V_gold,
		diamond = V_diamond,
		destRoleName = V_destRoleName,
		quality = V_quality,
		itemLevel = V_itemLevel,
		pileCount = V_pileCount,
		equipProps = V_equipProps
		},
	Bin14 }.

%GENERATED from file:trade.h => ReferenceItem
-spec decode_ReferenceItem(Bin0) -> { #pk_ReferenceItem{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_ReferenceItem(Bin0) ->
	{ V_itemID, Bin1 } = read_uint32( Bin0 ),
	{ V_sellNumber, Bin2 } = read_uint16( Bin1 ),
	{ V_gold, Bin3 } = read_uint32( Bin2 ),
	{ V_diamond, Bin4 } = read_uint32( Bin3 ),
	{ #pk_ReferenceItem {
		itemID = V_itemID,
		sellNumber = V_sellNumber,
		gold = V_gold,
		diamond = V_diamond
		},
	Bin4 }.

%GENERATED from file:wake.h => WakeInfo
-spec decode_WakeInfo(Bin0) -> { #pk_WakeInfo{},LeftBin }
	when Bin0 :: binary(), LeftBin :: binary().
decode_WakeInfo(Bin0) ->
	{ V_cardID, Bin1 } = read_uint8( Bin0 ),
	{ V_level, Bin2 } = read_uint8( Bin1 ),
	{ V_curNum, Bin3 } = read_uint16( Bin2 ),
	{ V_activeProgress, Bin4 } = read_uint16( Bin3 ),
	{ V_unlockStateMax, Bin5 } = read_uint8( Bin4 ),
	{ V_curState, Bin6 } = read_uint8( Bin5 ),
	{ #pk_WakeInfo {
		cardID = V_cardID,
		level = V_level,
		curNum = V_curNum,
		activeProgress = V_activeProgress,
		unlockStateMax = V_unlockStateMax,
		curState = V_curState
		},
	Bin6 }.

%GENERATED from file:Date.h => GS2U_DateFindTreasure_Welcome_Sync
encode(#pk_GS2U_DateFindTreasure_Welcome_Sync{} = P) ->
	Bin_timeForBegin = write_uint16( P#pk_GS2U_DateFindTreasure_Welcome_Sync.timeForBegin ),
	Bin_timeForEnd = write_uint16( P#pk_GS2U_DateFindTreasure_Welcome_Sync.timeForEnd ),
	Bin_score = write_uint16( P#pk_GS2U_DateFindTreasure_Welcome_Sync.score ),
	[
		<<?GS2U_DateFindTreasure_Welcome_Sync:?U16>>,
		Bin_timeForBegin,
		Bin_timeForEnd,
		Bin_score
	];

%GENERATED from file:Date.h => GS2U_DateLink_BuffAddScore_Sync
encode(#pk_GS2U_DateLink_BuffAddScore_Sync{} = P) ->
	Bin_score = write_uint16( P#pk_GS2U_DateLink_BuffAddScore_Sync.score ),
	Bin_scoreAll = write_uint16( P#pk_GS2U_DateLink_BuffAddScore_Sync.scoreAll ),
	[
		<<?GS2U_DateLink_BuffAddScore_Sync:?U16>>,
		Bin_score,
		Bin_scoreAll
	];

%GENERATED from file:Date.h => GS2U_DateLink_BuffAddTime_Sync
encode(#pk_GS2U_DateLink_BuffAddTime_Sync{} = P) ->
	Bin_timeAdd = write_uint16( P#pk_GS2U_DateLink_BuffAddTime_Sync.timeAdd ),
	Bin_timeRemainder = write_uint16( P#pk_GS2U_DateLink_BuffAddTime_Sync.timeRemainder ),
	[
		<<?GS2U_DateLink_BuffAddTime_Sync:?U16>>,
		Bin_timeAdd,
		Bin_timeRemainder
	];

%GENERATED from file:Date.h => GS2U_DateLink_BuffBuff_Sync
encode(#pk_GS2U_DateLink_BuffBuff_Sync{} = P) ->
	Bin_buffID = write_uint16( P#pk_GS2U_DateLink_BuffBuff_Sync.buffID ),
	[
		<<?GS2U_DateLink_BuffBuff_Sync:?U16>>,
		Bin_buffID
	];

%GENERATED from file:Date.h => GS2U_DateLink_BuffPower_Sync
encode(#pk_GS2U_DateLink_BuffPower_Sync{} = P) ->
	Bin_time = write_uint8( P#pk_GS2U_DateLink_BuffPower_Sync.time ),
	Bin_power = write_uint8( P#pk_GS2U_DateLink_BuffPower_Sync.power ),
	[
		<<?GS2U_DateLink_BuffPower_Sync:?U16>>,
		Bin_time,
		Bin_power
	];

%GENERATED from file:Date.h => GS2U_DateLink_DeduffBuff_Sync
encode(#pk_GS2U_DateLink_DeduffBuff_Sync{} = P) ->
	Bin_buffID = write_uint16( P#pk_GS2U_DateLink_DeduffBuff_Sync.buffID ),
	[
		<<?GS2U_DateLink_DeduffBuff_Sync:?U16>>,
		Bin_buffID
	];

%GENERATED from file:Date.h => GS2U_DateLink_GameEnd_Sync
encode(#pk_GS2U_DateLink_GameEnd_Sync{} = P) ->
	Bin_reason = write_uint8( P#pk_GS2U_DateLink_GameEnd_Sync.reason ),
	Bin_time = write_uint8( P#pk_GS2U_DateLink_GameEnd_Sync.time ),
	Bin_score = write_uint16( P#pk_GS2U_DateLink_GameEnd_Sync.score ),
	Bin_id = write_uint8( P#pk_GS2U_DateLink_GameEnd_Sync.id ),
	Bin_isAssist = write_bool( P#pk_GS2U_DateLink_GameEnd_Sync.isAssist ),
	[
		<<?GS2U_DateLink_GameEnd_Sync:?U16>>,
		Bin_reason,
		Bin_time,
		Bin_score,
		Bin_id,
		Bin_isAssist
	];

%GENERATED from file:Date.h => GS2U_DateLink_Link_Sync
encode(#pk_GS2U_DateLink_Link_Sync{} = P) ->
	Bin_indexA = write_uint8( P#pk_GS2U_DateLink_Link_Sync.indexA ),
	Bin_xA = write_float( P#pk_GS2U_DateLink_Link_Sync.xA ),
	Bin_yA = write_float( P#pk_GS2U_DateLink_Link_Sync.yA ),
	Bin_indexB = write_uint8( P#pk_GS2U_DateLink_Link_Sync.indexB ),
	Bin_xB = write_float( P#pk_GS2U_DateLink_Link_Sync.xB ),
	Bin_yB = write_float( P#pk_GS2U_DateLink_Link_Sync.yB ),
	Bin_combo = write_uint8( P#pk_GS2U_DateLink_Link_Sync.combo ),
	Bin_comboMax = write_uint8( P#pk_GS2U_DateLink_Link_Sync.comboMax ),
	Bin_score = write_uint16( P#pk_GS2U_DateLink_Link_Sync.score ),
	Bin_scoreAll = write_uint16( P#pk_GS2U_DateLink_Link_Sync.scoreAll ),
	Bin_listGemMatrix = write_array(P#pk_GS2U_DateLink_Link_Sync.listGemMatrix, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_DateLink_Link_Sync:?U16>>,
		Bin_indexA,
		Bin_xA,
		Bin_yA,
		Bin_indexB,
		Bin_xB,
		Bin_yB,
		Bin_combo,
		Bin_comboMax,
		Bin_score,
		Bin_scoreAll,
		Bin_listGemMatrix
	];

%GENERATED from file:Date.h => GS2U_DateLink_MainTime_Sync
encode(#pk_GS2U_DateLink_MainTime_Sync{} = P) ->
	Bin_timeRemainder = write_uint16( P#pk_GS2U_DateLink_MainTime_Sync.timeRemainder ),
	[
		<<?GS2U_DateLink_MainTime_Sync:?U16>>,
		Bin_timeRemainder
	];

%GENERATED from file:Date.h => GS2U_DateLink_ResetGem_Sync
encode(#pk_GS2U_DateLink_ResetGem_Sync{} = P) ->
	Bin_listGem = write_array(P#pk_GS2U_DateLink_ResetGem_Sync.listGem, fun(X) -> write_uint16( X ) end),
	Bin_resetCount = write_uint8( P#pk_GS2U_DateLink_ResetGem_Sync.resetCount ),
	Bin_resetCD = write_uint8( P#pk_GS2U_DateLink_ResetGem_Sync.resetCD ),
	Bin_listGemMatrix = write_array(P#pk_GS2U_DateLink_ResetGem_Sync.listGemMatrix, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_DateLink_ResetGem_Sync:?U16>>,
		Bin_listGem,
		Bin_resetCount,
		Bin_resetCD,
		Bin_listGemMatrix
	];

%GENERATED from file:Date.h => GS2U_DateLink_Select_Ack
encode(#pk_GS2U_DateLink_Select_Ack{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_DateLink_Select_Ack.roleID ),
	Bin_index = write_uint8( P#pk_GS2U_DateLink_Select_Ack.index ),
	Bin_x = write_float( P#pk_GS2U_DateLink_Select_Ack.x ),
	Bin_y = write_float( P#pk_GS2U_DateLink_Select_Ack.y ),
	Bin_isSelect = write_bool( P#pk_GS2U_DateLink_Select_Ack.isSelect ),
	Bin_listGemMatrix = write_array(P#pk_GS2U_DateLink_Select_Ack.listGemMatrix, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_DateLink_Select_Ack:?U16>>,
		Bin_roleID,
		Bin_index,
		Bin_x,
		Bin_y,
		Bin_isSelect,
		Bin_listGemMatrix
	];

%GENERATED from file:Date.h => GS2U_DateLink_Welcome_Sync
encode(#pk_GS2U_DateLink_Welcome_Sync{} = P) ->
	Bin_timeForBegin = write_uint16( P#pk_GS2U_DateLink_Welcome_Sync.timeForBegin ),
	Bin_timeForEnd = write_uint16( P#pk_GS2U_DateLink_Welcome_Sync.timeForEnd ),
	Bin_timePower = write_uint8( P#pk_GS2U_DateLink_Welcome_Sync.timePower ),
	Bin_listGem = write_array(P#pk_GS2U_DateLink_Welcome_Sync.listGem, fun(X) -> write_uint16( X ) end),
	Bin_score = write_uint16( P#pk_GS2U_DateLink_Welcome_Sync.score ),
	Bin_indexA = write_uint8( P#pk_GS2U_DateLink_Welcome_Sync.indexA ),
	Bin_indexB = write_uint8( P#pk_GS2U_DateLink_Welcome_Sync.indexB ),
	Bin_power = write_uint8( P#pk_GS2U_DateLink_Welcome_Sync.power ),
	Bin_resetCount = write_uint8( P#pk_GS2U_DateLink_Welcome_Sync.resetCount ),
	Bin_listGemMatrix = write_array(P#pk_GS2U_DateLink_Welcome_Sync.listGemMatrix, fun(X) -> write_uint8( X ) end),
	Bin_resetCD = write_uint8( P#pk_GS2U_DateLink_Welcome_Sync.resetCD ),
	[
		<<?GS2U_DateLink_Welcome_Sync:?U16>>,
		Bin_timeForBegin,
		Bin_timeForEnd,
		Bin_timePower,
		Bin_listGem,
		Bin_score,
		Bin_indexA,
		Bin_indexB,
		Bin_power,
		Bin_resetCount,
		Bin_listGemMatrix,
		Bin_resetCD
	];

%GENERATED from file:Date.h => GS2U_DatePoolShooting_Welcome_Sync
encode(#pk_GS2U_DatePoolShooting_Welcome_Sync{} = P) ->
	Bin_timeForBegin = write_uint16( P#pk_GS2U_DatePoolShooting_Welcome_Sync.timeForBegin ),
	Bin_timeForEnd = write_uint16( P#pk_GS2U_DatePoolShooting_Welcome_Sync.timeForEnd ),
	Bin_score = write_uint16( P#pk_GS2U_DatePoolShooting_Welcome_Sync.score ),
	[
		<<?GS2U_DatePoolShooting_Welcome_Sync:?U16>>,
		Bin_timeForBegin,
		Bin_timeForEnd,
		Bin_score
	];

%GENERATED from file:Date.h => GS2U_DatePushBox_GreateNPC_Sync
encode(#pk_GS2U_DatePushBox_GreateNPC_Sync{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_DatePushBox_GreateNPC_Sync.code ),
	Bin_x = write_float( P#pk_GS2U_DatePushBox_GreateNPC_Sync.x ),
	Bin_z = write_float( P#pk_GS2U_DatePushBox_GreateNPC_Sync.z ),
	[
		<<?GS2U_DatePushBox_GreateNPC_Sync:?U16>>,
		Bin_code,
		Bin_x,
		Bin_z
	];

%GENERATED from file:Date.h => GS2U_DatePushBox_Succeed_Sync
encode(#pk_GS2U_DatePushBox_Succeed_Sync{} = P) ->
	Bin_isSucceed = write_bool( P#pk_GS2U_DatePushBox_Succeed_Sync.isSucceed ),
	Bin_isDelete = write_bool( P#pk_GS2U_DatePushBox_Succeed_Sync.isDelete ),
	Bin_code = write_uint64( P#pk_GS2U_DatePushBox_Succeed_Sync.code ),
	Bin_x = write_float( P#pk_GS2U_DatePushBox_Succeed_Sync.x ),
	Bin_z = write_float( P#pk_GS2U_DatePushBox_Succeed_Sync.z ),
	Bin_score = write_uint16( P#pk_GS2U_DatePushBox_Succeed_Sync.score ),
	[
		<<?GS2U_DatePushBox_Succeed_Sync:?U16>>,
		Bin_isSucceed,
		Bin_isDelete,
		Bin_code,
		Bin_x,
		Bin_z,
		Bin_score
	];

%GENERATED from file:Date.h => GS2U_DatePushBox_Welcome_Sync
encode(#pk_GS2U_DatePushBox_Welcome_Sync{} = P) ->
	Bin_timeForBegin = write_uint16( P#pk_GS2U_DatePushBox_Welcome_Sync.timeForBegin ),
	Bin_timeForEnd = write_uint16( P#pk_GS2U_DatePushBox_Welcome_Sync.timeForEnd ),
	Bin_score = write_uint16( P#pk_GS2U_DatePushBox_Welcome_Sync.score ),
	Bin_listGemMatrix = write_array(P#pk_GS2U_DatePushBox_Welcome_Sync.listGemMatrix, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_DatePushBox_Welcome_Sync:?U16>>,
		Bin_timeForBegin,
		Bin_timeForEnd,
		Bin_score,
		Bin_listGemMatrix
	];

%GENERATED from file:Date.h => GS2U_Date_FindTreasure_Sync
encode(#pk_GS2U_Date_FindTreasure_Sync{} = P) ->
	Bin_score = write_uint16( P#pk_GS2U_Date_FindTreasure_Sync.score ),
	[
		<<?GS2U_Date_FindTreasure_Sync:?U16>>,
		Bin_score
	];

%GENERATED from file:Date.h => GS2U_Date_PlayerAnimation_Sync
encode(#pk_GS2U_Date_PlayerAnimation_Sync{}) ->
	[
		<<?GS2U_Date_PlayerAnimation_Sync:?U16>>

	];

%GENERATED from file:Date.h => GS2U_Date_RefreshSocre_Sync
encode(#pk_GS2U_Date_RefreshSocre_Sync{} = P) ->
	Bin_score = write_uint16( P#pk_GS2U_Date_RefreshSocre_Sync.score ),
	Bin_hitA = write_bool( P#pk_GS2U_Date_RefreshSocre_Sync.hitA ),
	Bin_hitB = write_bool( P#pk_GS2U_Date_RefreshSocre_Sync.hitB ),
	[
		<<?GS2U_Date_RefreshSocre_Sync:?U16>>,
		Bin_score,
		Bin_hitA,
		Bin_hitB
	];

%GENERATED from file:Date.h => GS2U_Date_ResetBox_Sync
encode(#pk_GS2U_Date_ResetBox_Sync{} = P) ->
	Bin_refreshNum = write_uint32( P#pk_GS2U_Date_ResetBox_Sync.refreshNum ),
	[
		<<?GS2U_Date_ResetBox_Sync:?U16>>,
		Bin_refreshNum
	];

%GENERATED from file:Date.h => GS2U_Date_ResetFindTreasure_Sync
encode(#pk_GS2U_Date_ResetFindTreasure_Sync{}) ->
	[
		<<?GS2U_Date_ResetFindTreasure_Sync:?U16>>

	];

%GENERATED from file:Date.h => GS2U_Date_ResetPoolShooting_Sync
encode(#pk_GS2U_Date_ResetPoolShooting_Sync{} = P) ->
	Bin_listPoolShootingPosIndex = write_array(P#pk_GS2U_Date_ResetPoolShooting_Sync.listPoolShootingPosIndex, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_Date_ResetPoolShooting_Sync:?U16>>,
		Bin_listPoolShootingPosIndex
	];

%GENERATED from file:Date.h => GS2U_MonsterMoveSync
encode(#pk_GS2U_MonsterMoveSync{} = P) ->
	Bin_monsterPosList = write_array(P#pk_GS2U_MonsterMoveSync.monsterPosList, fun(X) -> encode_DateMonsterPos( X ) end),
	[
		<<?GS2U_MonsterMoveSync:?U16>>,
		Bin_monsterPosList
	];

%GENERATED from file:Date.h => U2GS_DateEnter_Request
encode(#pk_U2GS_DateEnter_Request{} = P) ->
	Bin_id = write_uint8( P#pk_U2GS_DateEnter_Request.id ),
	[
		<<?U2GS_DateEnter_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:Date.h => U2GS_DateLink_Giveup_Requset
encode(#pk_U2GS_DateLink_Giveup_Requset{}) ->
	[
		<<?U2GS_DateLink_Giveup_Requset:?U16>>

	];

%GENERATED from file:Date.h => U2GS_DateLink_ResetGem_Request
encode(#pk_U2GS_DateLink_ResetGem_Request{}) ->
	[
		<<?U2GS_DateLink_ResetGem_Request:?U16>>

	];

%GENERATED from file:Date.h => U2GS_DateLink_Select_Request
encode(#pk_U2GS_DateLink_Select_Request{} = P) ->
	Bin_x = write_float( P#pk_U2GS_DateLink_Select_Request.x ),
	Bin_y = write_float( P#pk_U2GS_DateLink_Select_Request.y ),
	Bin_index = write_uint8( P#pk_U2GS_DateLink_Select_Request.index ),
	Bin_isSelect = write_bool( P#pk_U2GS_DateLink_Select_Request.isSelect ),
	[
		<<?U2GS_DateLink_Select_Request:?U16>>,
		Bin_x,
		Bin_y,
		Bin_index,
		Bin_isSelect
	];

%GENERATED from file:Date.h => U2GS_DatePushBox_Request
encode(#pk_U2GS_DatePushBox_Request{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_DatePushBox_Request.code ),
	Bin_x = write_float( P#pk_U2GS_DatePushBox_Request.x ),
	Bin_z = write_float( P#pk_U2GS_DatePushBox_Request.z ),
	Bin_isDelete = write_bool( P#pk_U2GS_DatePushBox_Request.isDelete ),
	[
		<<?U2GS_DatePushBox_Request:?U16>>,
		Bin_code,
		Bin_x,
		Bin_z,
		Bin_isDelete
	];

%GENERATED from file:Date.h => U2GS_DateShooting_Over
encode(#pk_U2GS_DateShooting_Over{}) ->
	[
		<<?U2GS_DateShooting_Over:?U16>>

	];

%GENERATED from file:LS2User.h => GS2U_ChangeLineResponse
encode(#pk_GS2U_ChangeLineResponse{} = P) ->
	Bin_gameServers = write_array(P#pk_GS2U_ChangeLineResponse.gameServers, fun(X) -> encode_GameServerInfo( X ) end),
	Bin_identity = write_string( P#pk_GS2U_ChangeLineResponse.identity ),
	[
		<<?GS2U_ChangeLineResponse:?U16>>,
		Bin_gameServers,
		Bin_identity
	];

%GENERATED from file:LS2User.h => LS2U_GameLineServerList
encode(#pk_LS2U_GameLineServerList{} = P) ->
	Bin_gameServers = write_array(P#pk_LS2U_GameLineServerList.gameServers, fun(X) -> encode_GameServerInfo( X ) end),
	[
		<<?LS2U_GameLineServerList:?U16>>,
		Bin_gameServers
	];

%GENERATED from file:LS2User.h => LS2U_LoginQue
encode(#pk_LS2U_LoginQue{} = P) ->
	Bin_currentNumber = write_uint64( P#pk_LS2U_LoginQue.currentNumber ),
	[
		<<?LS2U_LoginQue:?U16>>,
		Bin_currentNumber
	];

%GENERATED from file:LS2User.h => LS2U_LoginResult
encode(#pk_LS2U_LoginResult{} = P) ->
	Bin_result = write_int8( P#pk_LS2U_LoginResult.result ),
	Bin_accountID = write_uint64( P#pk_LS2U_LoginResult.accountID ),
	Bin_identity = write_string( P#pk_LS2U_LoginResult.identity ),
	Bin_msg = write_string( P#pk_LS2U_LoginResult.msg ),
	[
		<<?LS2U_LoginResult:?U16>>,
		Bin_result,
		Bin_accountID,
		Bin_identity,
		Bin_msg
	];

%GENERATED from file:LS2User.h => LS2Web_CryptoAck
encode(#pk_LS2Web_CryptoAck{} = P) ->
	Bin_bodyJsonStr = write_string( P#pk_LS2Web_CryptoAck.bodyJsonStr ),
	[
		<<?LS2Web_CryptoAck:?U16>>,
		Bin_bodyJsonStr
	];

%GENERATED from file:LS2User.h => LS2Web_NormalAck
encode(#pk_LS2Web_NormalAck{} = P) ->
	Bin_bodyJsonStr = write_string( P#pk_LS2Web_NormalAck.bodyJsonStr ),
	[
		<<?LS2Web_NormalAck:?U16>>,
		Bin_bodyJsonStr
	];

%GENERATED from file:LS2User.h => U2LS_Login_Normal
encode(#pk_U2LS_Login_Normal{} = P) ->
	Bin_platformAccount = write_string( P#pk_U2LS_Login_Normal.platformAccount ),
	Bin_platformName = write_string( P#pk_U2LS_Login_Normal.platformName ),
	Bin_platformNickName = write_string( P#pk_U2LS_Login_Normal.platformNickName ),
	Bin_time = write_int64( P#pk_U2LS_Login_Normal.time ),
	Bin_sign = write_string( P#pk_U2LS_Login_Normal.sign ),
	Bin_deviceId = write_string( P#pk_U2LS_Login_Normal.deviceId ),
	Bin_imei = write_string( P#pk_U2LS_Login_Normal.imei ),
	Bin_idfa = write_string( P#pk_U2LS_Login_Normal.idfa ),
	Bin_mac = write_string( P#pk_U2LS_Login_Normal.mac ),
	Bin_extParam = write_string( P#pk_U2LS_Login_Normal.extParam ),
	Bin_versionRes = write_int32( P#pk_U2LS_Login_Normal.versionRes ),
	Bin_versionExe = write_int32( P#pk_U2LS_Login_Normal.versionExe ),
	Bin_versionGame = write_int32( P#pk_U2LS_Login_Normal.versionGame ),
	Bin_versionPro = write_int32( P#pk_U2LS_Login_Normal.versionPro ),
	Bin_versionPackageHash = write_int32( P#pk_U2LS_Login_Normal.versionPackageHash ),
	[
		<<?U2LS_Login_Normal:?U16>>,
		Bin_platformAccount,
		Bin_platformName,
		Bin_platformNickName,
		Bin_time,
		Bin_sign,
		Bin_deviceId,
		Bin_imei,
		Bin_idfa,
		Bin_mac,
		Bin_extParam,
		Bin_versionRes,
		Bin_versionExe,
		Bin_versionGame,
		Bin_versionPro,
		Bin_versionPackageHash
	];

%GENERATED from file:LS2User.h => U2LS_RequestGSLine
encode(#pk_U2LS_RequestGSLine{}) ->
	[
		<<?U2LS_RequestGSLine:?U16>>

	];

%GENERATED from file:LS2User.h => Web2LS_Crypto
encode(#pk_Web2LS_Crypto{} = P) ->
	Bin_bodyJsonStr = write_string( P#pk_Web2LS_Crypto.bodyJsonStr ),
	[
		<<?Web2LS_Crypto:?U16>>,
		Bin_bodyJsonStr
	];

%GENERATED from file:LS2User.h => Web2LS_Normal
encode(#pk_Web2LS_Normal{} = P) ->
	Bin_bodyJsonStr = write_string( P#pk_Web2LS_Normal.bodyJsonStr ),
	[
		<<?Web2LS_Normal:?U16>>,
		Bin_bodyJsonStr
	];

%GENERATED from file:achieve.h => GS2U_AchieveSchedule
encode(#pk_GS2U_AchieveSchedule{} = P) ->
	Bin_achieveID = write_uint16( P#pk_GS2U_AchieveSchedule.achieveID ),
	Bin_scheduleRewardID = write_uint8( P#pk_GS2U_AchieveSchedule.scheduleRewardID ),
	Bin_scheduleCompleteNum = write_uint32( P#pk_GS2U_AchieveSchedule.scheduleCompleteNum ),
	Bin_scheduleCompleteID = write_uint8( P#pk_GS2U_AchieveSchedule.scheduleCompleteID ),
	[
		<<?GS2U_AchieveSchedule:?U16>>,
		Bin_achieveID,
		Bin_scheduleRewardID,
		Bin_scheduleCompleteNum,
		Bin_scheduleCompleteID
	];

%GENERATED from file:achieve.h => GS2U_AchieveScheduleList
encode(#pk_GS2U_AchieveScheduleList{} = P) ->
	Bin_scheduleList = write_array(P#pk_GS2U_AchieveScheduleList.scheduleList, fun(X) -> encode_AchieveSchedule( X ) end),
	[
		<<?GS2U_AchieveScheduleList:?U16>>,
		Bin_scheduleList
	];

%GENERATED from file:achieve.h => GS2U_AddTitle
encode(#pk_GS2U_AddTitle{} = P) ->
	Bin_titleID = write_uint16( P#pk_GS2U_AddTitle.titleID ),
	Bin_endTime = write_uint32( P#pk_GS2U_AddTitle.endTime ),
	[
		<<?GS2U_AddTitle:?U16>>,
		Bin_titleID,
		Bin_endTime
	];

%GENERATED from file:achieve.h => GS2U_BadgeInfo
encode(#pk_GS2U_BadgeInfo{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_BadgeInfo.mapID ),
	Bin_itemID = write_uint32( P#pk_GS2U_BadgeInfo.itemID ),
	[
		<<?GS2U_BadgeInfo:?U16>>,
		Bin_mapID,
		Bin_itemID
	];

%GENERATED from file:achieve.h => GS2U_BadgeInfoList
encode(#pk_GS2U_BadgeInfoList{} = P) ->
	Bin_badgeInfoList = write_array(P#pk_GS2U_BadgeInfoList.badgeInfoList, fun(X) -> encode_BadgeInfo( X ) end),
	[
		<<?GS2U_BadgeInfoList:?U16>>,
		Bin_badgeInfoList
	];

%GENERATED from file:achieve.h => GS2U_DelTitle
encode(#pk_GS2U_DelTitle{} = P) ->
	Bin_titleID = write_uint16( P#pk_GS2U_DelTitle.titleID ),
	[
		<<?GS2U_DelTitle:?U16>>,
		Bin_titleID
	];

%GENERATED from file:achieve.h => GS2U_InitDailyActiveInfo
encode(#pk_GS2U_InitDailyActiveInfo{} = P) ->
	Bin_dailyActiveInfoList = write_array(P#pk_GS2U_InitDailyActiveInfo.dailyActiveInfoList, fun(X) -> encode_DailyActiveInfo( X ) end),
	Bin_receivedAwardList = write_array(P#pk_GS2U_InitDailyActiveInfo.receivedAwardList, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_InitDailyActiveInfo:?U16>>,
		Bin_dailyActiveInfoList,
		Bin_receivedAwardList
	];

%GENERATED from file:achieve.h => GS2U_OwnTitleList
encode(#pk_GS2U_OwnTitleList{} = P) ->
	Bin_titleInfoList = write_array(P#pk_GS2U_OwnTitleList.titleInfoList, fun(X) -> encode_TitleInfo( X ) end),
	[
		<<?GS2U_OwnTitleList:?U16>>,
		Bin_titleInfoList
	];

%GENERATED from file:achieve.h => GS2U_ReceiveDailyActiveAwardResult
encode(#pk_GS2U_ReceiveDailyActiveAwardResult{} = P) ->
	Bin_dailyActivityValue = write_uint16( P#pk_GS2U_ReceiveDailyActiveAwardResult.dailyActivityValue ),
	[
		<<?GS2U_ReceiveDailyActiveAwardResult:?U16>>,
		Bin_dailyActivityValue
	];

%GENERATED from file:achieve.h => GS2U_UpdateDailyActiveInfo
encode(#pk_GS2U_UpdateDailyActiveInfo{} = P) ->
	Bin_dailyActiveInfo = encode_DailyActiveInfo( P#pk_GS2U_UpdateDailyActiveInfo.dailyActiveInfo ),
	[
		<<?GS2U_UpdateDailyActiveInfo:?U16>>,
		Bin_dailyActiveInfo
	];

%GENERATED from file:achieve.h => U2GS_ChangeCustomTitleText
encode(#pk_U2GS_ChangeCustomTitleText{} = P) ->
	Bin_titleID = write_uint16( P#pk_U2GS_ChangeCustomTitleText.titleID ),
	Bin_type = write_uint16( P#pk_U2GS_ChangeCustomTitleText.type ),
	Bin_text = write_string( P#pk_U2GS_ChangeCustomTitleText.text ),
	[
		<<?U2GS_ChangeCustomTitleText:?U16>>,
		Bin_titleID,
		Bin_type,
		Bin_text
	];

%GENERATED from file:achieve.h => U2GS_ChangeLimiteTitleState
encode(#pk_U2GS_ChangeLimiteTitleState{} = P) ->
	Bin_titleID = write_uint16( P#pk_U2GS_ChangeLimiteTitleState.titleID ),
	[
		<<?U2GS_ChangeLimiteTitleState:?U16>>,
		Bin_titleID
	];

%GENERATED from file:achieve.h => U2GS_ChangeTitleState
encode(#pk_U2GS_ChangeTitleState{} = P) ->
	Bin_titleSlot1 = write_uint16( P#pk_U2GS_ChangeTitleState.titleSlot1 ),
	Bin_titleSlot2 = write_uint16( P#pk_U2GS_ChangeTitleState.titleSlot2 ),
	Bin_titleSlot3 = write_uint16( P#pk_U2GS_ChangeTitleState.titleSlot3 ),
	Bin_colorSlot = write_uint16( P#pk_U2GS_ChangeTitleState.colorSlot ),
	Bin_floorSlot = write_uint16( P#pk_U2GS_ChangeTitleState.floorSlot ),
	[
		<<?U2GS_ChangeTitleState:?U16>>,
		Bin_titleSlot1,
		Bin_titleSlot2,
		Bin_titleSlot3,
		Bin_colorSlot,
		Bin_floorSlot
	];

%GENERATED from file:achieve.h => U2GS_ReceiveAchieveValue
encode(#pk_U2GS_ReceiveAchieveValue{} = P) ->
	Bin_achieveID = write_uint16( P#pk_U2GS_ReceiveAchieveValue.achieveID ),
	[
		<<?U2GS_ReceiveAchieveValue:?U16>>,
		Bin_achieveID
	];

%GENERATED from file:achieve.h => U2GS_ReceiveDailyActiveAward
encode(#pk_U2GS_ReceiveDailyActiveAward{} = P) ->
	Bin_dailyActivityValue = write_uint16( P#pk_U2GS_ReceiveDailyActiveAward.dailyActivityValue ),
	[
		<<?U2GS_ReceiveDailyActiveAward:?U16>>,
		Bin_dailyActivityValue
	];

%GENERATED from file:activity.h => ArenaTeamMemberPrepare
encode(#pk_ArenaTeamMemberPrepare{} = P) ->
	Bin_id = write_uint64( P#pk_ArenaTeamMemberPrepare.id ),
	Bin_isPrepare = write_bool( P#pk_ArenaTeamMemberPrepare.isPrepare ),
	[
		<<?ArenaTeamMemberPrepare:?U16>>,
		Bin_id,
		Bin_isPrepare
	];

%GENERATED from file:activity.h => CrosArenaMatch
encode(#pk_CrosArenaMatch{} = P) ->
	Bin_isMatch = write_bool( P#pk_CrosArenaMatch.isMatch ),
	[
		<<?CrosArenaMatch:?U16>>,
		Bin_isMatch
	];

%GENERATED from file:activity.h => DeleteArenaTeamMember
encode(#pk_DeleteArenaTeamMember{} = P) ->
	Bin_isMyself = write_bool( P#pk_DeleteArenaTeamMember.isMyself ),
	Bin_id = write_uint64( P#pk_DeleteArenaTeamMember.id ),
	[
		<<?DeleteArenaTeamMember:?U16>>,
		Bin_isMyself,
		Bin_id
	];

%GENERATED from file:activity.h => GS2U_ACCityMonsterSurplusTime
encode(#pk_GS2U_ACCityMonsterSurplusTime{} = P) ->
	Bin_surplusTime = write_int32( P#pk_GS2U_ACCityMonsterSurplusTime.surplusTime ),
	[
		<<?GS2U_ACCityMonsterSurplusTime:?U16>>,
		Bin_surplusTime
	];

%GENERATED from file:activity.h => GS2U_ActionList
encode(#pk_GS2U_ActionList{} = P) ->
	Bin_correctID = write_uint32( P#pk_GS2U_ActionList.correctID ),
	Bin_danceIDs = write_array(P#pk_GS2U_ActionList.danceIDs, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_ActionList:?U16>>,
		Bin_correctID,
		Bin_danceIDs
	];

%GENERATED from file:activity.h => GS2U_ActivityEnd
encode(#pk_GS2U_ActivityEnd{}) ->
	[
		<<?GS2U_ActivityEnd:?U16>>

	];

%GENERATED from file:activity.h => GS2U_ActivityState
encode(#pk_GS2U_ActivityState{} = P) ->
	Bin_activityID = write_uint16( P#pk_GS2U_ActivityState.activityID ),
	Bin_mapID = write_uint32( P#pk_GS2U_ActivityState.mapID ),
	Bin_phase = write_int16( P#pk_GS2U_ActivityState.phase ),
	[
		<<?GS2U_ActivityState:?U16>>,
		Bin_activityID,
		Bin_mapID,
		Bin_phase
	];

%GENERATED from file:activity.h => GS2U_ActivityStateInfo
encode(#pk_GS2U_ActivityStateInfo{} = P) ->
	Bin_infos = encode_ActivityState( P#pk_GS2U_ActivityStateInfo.infos ),
	[
		<<?GS2U_ActivityStateInfo:?U16>>,
		Bin_infos
	];

%GENERATED from file:activity.h => GS2U_ActivityStateInit
encode(#pk_GS2U_ActivityStateInit{} = P) ->
	Bin_infos = write_array(P#pk_GS2U_ActivityStateInit.infos, fun(X) -> encode_ActivityState( X ) end),
	[
		<<?GS2U_ActivityStateInit:?U16>>,
		Bin_infos
	];

%GENERATED from file:activity.h => GS2U_AddArenaTeamMemberRequest
encode(#pk_GS2U_AddArenaTeamMemberRequest{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_AddArenaTeamMemberRequest.roleID ),
	Bin_name = write_string( P#pk_GS2U_AddArenaTeamMemberRequest.name ),
	[
		<<?GS2U_AddArenaTeamMemberRequest:?U16>>,
		Bin_roleID,
		Bin_name
	];

%GENERATED from file:activity.h => GS2U_AllAnswerQuestion
encode(#pk_GS2U_AllAnswerQuestion{} = P) ->
	Bin_questionID = write_uint32( P#pk_GS2U_AllAnswerQuestion.questionID ),
	Bin_startTime = write_uint64( P#pk_GS2U_AllAnswerQuestion.startTime ),
	Bin_currentAnswer = write_uint32( P#pk_GS2U_AllAnswerQuestion.currentAnswer ),
	[
		<<?GS2U_AllAnswerQuestion:?U16>>,
		Bin_questionID,
		Bin_startTime,
		Bin_currentAnswer
	];

%GENERATED from file:activity.h => GS2U_AngelInvestmentList
encode(#pk_GS2U_AngelInvestmentList{} = P) ->
	Bin_lists = write_array(P#pk_GS2U_AngelInvestmentList.lists, fun(X) -> encode_AngelInvestmentData( X ) end),
	[
		<<?GS2U_AngelInvestmentList:?U16>>,
		Bin_lists
	];

%GENERATED from file:activity.h => GS2U_AnswerFirstAndLuckyPlayer
encode(#pk_GS2U_AnswerFirstAndLuckyPlayer{} = P) ->
	Bin_playerName = write_array(P#pk_GS2U_AnswerFirstAndLuckyPlayer.playerName, fun(X) -> write_string( X ) end),
	[
		<<?GS2U_AnswerFirstAndLuckyPlayer:?U16>>,
		Bin_playerName
	];

%GENERATED from file:activity.h => GS2U_AnswerQuestion
encode(#pk_GS2U_AnswerQuestion{} = P) ->
	Bin_startTime = write_uint64( P#pk_GS2U_AnswerQuestion.startTime ),
	Bin_answerNum = write_uint8( P#pk_GS2U_AnswerQuestion.answerNum ),
	Bin_questionList = write_array(P#pk_GS2U_AnswerQuestion.questionList, fun(X) -> encode_Question( X ) end),
	[
		<<?GS2U_AnswerQuestion:?U16>>,
		Bin_startTime,
		Bin_answerNum,
		Bin_questionList
	];

%GENERATED from file:activity.h => GS2U_AnswerRank
encode(#pk_GS2U_AnswerRank{} = P) ->
	Bin_data = write_array(P#pk_GS2U_AnswerRank.data, fun(X) -> encode_ActivityAnswerRankData( X ) end),
	Bin_isover = write_bool( P#pk_GS2U_AnswerRank.isover ),
	[
		<<?GS2U_AnswerRank:?U16>>,
		Bin_data,
		Bin_isover
	];

%GENERATED from file:activity.h => GS2U_ApplyAnswerResult
encode(#pk_GS2U_ApplyAnswerResult{} = P) ->
	Bin_result = write_uint8( P#pk_GS2U_ApplyAnswerResult.result ),
	Bin_endTime = write_uint64( P#pk_GS2U_ApplyAnswerResult.endTime ),
	Bin_roomID = write_uint32( P#pk_GS2U_ApplyAnswerResult.roomID ),
	[
		<<?GS2U_ApplyAnswerResult:?U16>>,
		Bin_result,
		Bin_endTime,
		Bin_roomID
	];

%GENERATED from file:activity.h => GS2U_ArenaBattleList
encode(#pk_GS2U_ArenaBattleList{} = P) ->
	Bin_res = write_uint8( P#pk_GS2U_ArenaBattleList.res ),
	Bin_bList = write_array(P#pk_GS2U_ArenaBattleList.bList, fun(X) -> encode_ArenaBattle( X ) end),
	[
		<<?GS2U_ArenaBattleList:?U16>>,
		Bin_res,
		Bin_bList
	];

%GENERATED from file:activity.h => GS2U_ArenaRoleDead
encode(#pk_GS2U_ArenaRoleDead{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_ArenaRoleDead.id ),
	[
		<<?GS2U_ArenaRoleDead:?U16>>,
		Bin_id
	];

%GENERATED from file:activity.h => GS2U_ArenaRoleList
encode(#pk_GS2U_ArenaRoleList{} = P) ->
	Bin_time = write_uint16( P#pk_GS2U_ArenaRoleList.time ),
	Bin_roleList = write_array(P#pk_GS2U_ArenaRoleList.roleList, fun(X) -> encode_ArenaRole( X ) end),
	[
		<<?GS2U_ArenaRoleList:?U16>>,
		Bin_time,
		Bin_roleList
	];

%GENERATED from file:activity.h => GS2U_AttackerDefenderQuotaNumberAck
encode(#pk_GS2U_AttackerDefenderQuotaNumberAck{} = P) ->
	Bin_activityID = write_uint16( P#pk_GS2U_AttackerDefenderQuotaNumberAck.activityID ),
	Bin_mapID = write_uint32( P#pk_GS2U_AttackerDefenderQuotaNumberAck.mapID ),
	Bin_acctackerQuotaNum = write_uint16( P#pk_GS2U_AttackerDefenderQuotaNumberAck.acctackerQuotaNum ),
	[
		<<?GS2U_AttackerDefenderQuotaNumberAck:?U16>>,
		Bin_activityID,
		Bin_mapID,
		Bin_acctackerQuotaNum
	];

%GENERATED from file:activity.h => GS2U_BreakDance
encode(#pk_GS2U_BreakDance{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_BreakDance.roleID ),
	[
		<<?GS2U_BreakDance:?U16>>,
		Bin_roleID
	];

%GENERATED from file:activity.h => GS2U_ChangeGuardianDeclaration
encode(#pk_GS2U_ChangeGuardianDeclaration{} = P) ->
	Bin_isChange = write_bool( P#pk_GS2U_ChangeGuardianDeclaration.isChange ),
	[
		<<?GS2U_ChangeGuardianDeclaration:?U16>>,
		Bin_isChange
	];

%GENERATED from file:activity.h => GS2U_CollectionWords_Sync
encode(#pk_GS2U_CollectionWords_Sync{} = P) ->
	Bin_state = encode_collectionWords_State( P#pk_GS2U_CollectionWords_Sync.state ),
	Bin_listRewardCfg = write_array(P#pk_GS2U_CollectionWords_Sync.listRewardCfg, fun(X) -> encode_collectionWords_RewardCfg( X ) end),
	[
		<<?GS2U_CollectionWords_Sync:?U16>>,
		Bin_state,
		Bin_listRewardCfg
	];

%GENERATED from file:activity.h => GS2U_CrosArenaBattleHighRanks
encode(#pk_GS2U_CrosArenaBattleHighRanks{} = P) ->
	Bin_ranks = write_array(P#pk_GS2U_CrosArenaBattleHighRanks.ranks, fun(X) -> encode_CrosArenaBattleHighRank( X ) end),
	[
		<<?GS2U_CrosArenaBattleHighRanks:?U16>>,
		Bin_ranks
	];

%GENERATED from file:activity.h => GS2U_CrosArenaBattleRanks
encode(#pk_GS2U_CrosArenaBattleRanks{} = P) ->
	Bin_ranks = write_array(P#pk_GS2U_CrosArenaBattleRanks.ranks, fun(X) -> encode_CrosArenaBattleRank( X ) end),
	[
		<<?GS2U_CrosArenaBattleRanks:?U16>>,
		Bin_ranks
	];

%GENERATED from file:activity.h => GS2U_CrosBattleExploits
encode(#pk_GS2U_CrosBattleExploits{} = P) ->
	Bin_ranks = write_array(P#pk_GS2U_CrosBattleExploits.ranks, fun(X) -> encode_CrosBattleExploit( X ) end),
	[
		<<?GS2U_CrosBattleExploits:?U16>>,
		Bin_ranks
	];

%GENERATED from file:activity.h => GS2U_CurEscortType
encode(#pk_GS2U_CurEscortType{} = P) ->
	Bin_escortType = write_uint16( P#pk_GS2U_CurEscortType.escortType ),
	[
		<<?GS2U_CurEscortType:?U16>>,
		Bin_escortType
	];

%GENERATED from file:activity.h => GS2U_DarknessCamp
encode(#pk_GS2U_DarknessCamp{} = P) ->
	Bin_camp = write_uint8( P#pk_GS2U_DarknessCamp.camp ),
	Bin_integral = write_uint32( P#pk_GS2U_DarknessCamp.integral ),
	[
		<<?GS2U_DarknessCamp:?U16>>,
		Bin_camp,
		Bin_integral
	];

%GENERATED from file:activity.h => GS2U_DarknessInfo
encode(#pk_GS2U_DarknessInfo{} = P) ->
	Bin_state = encode_DarknessState( P#pk_GS2U_DarknessInfo.state ),
	Bin_buyMoneyType = write_uint8( P#pk_GS2U_DarknessInfo.buyMoneyType ),
	Bin_buyMoney = write_int32( P#pk_GS2U_DarknessInfo.buyMoney ),
	[
		<<?GS2U_DarknessInfo:?U16>>,
		Bin_state,
		Bin_buyMoneyType,
		Bin_buyMoney
	];

%GENERATED from file:activity.h => GS2U_DarknessKillOrBeKill
encode(#pk_GS2U_DarknessKillOrBeKill{} = P) ->
	Bin_targetName = write_string( P#pk_GS2U_DarknessKillOrBeKill.targetName ),
	Bin_isSuccess = write_bool( P#pk_GS2U_DarknessKillOrBeKill.isSuccess ),
	Bin_changePebble = write_int32( P#pk_GS2U_DarknessKillOrBeKill.changePebble ),
	[
		<<?GS2U_DarknessKillOrBeKill:?U16>>,
		Bin_targetName,
		Bin_isSuccess,
		Bin_changePebble
	];

%GENERATED from file:activity.h => GS2U_DarknessQuenenState
encode(#pk_GS2U_DarknessQuenenState{} = P) ->
	Bin_entrance = write_uint8( P#pk_GS2U_DarknessQuenenState.entrance ),
	Bin_floor = write_uint8( P#pk_GS2U_DarknessQuenenState.floor ),
	[
		<<?GS2U_DarknessQuenenState:?U16>>,
		Bin_entrance,
		Bin_floor
	];

%GENERATED from file:activity.h => GS2U_DarknessRank
encode(#pk_GS2U_DarknessRank{} = P) ->
	Bin_camp1 = write_array(P#pk_GS2U_DarknessRank.camp1, fun(X) -> encode_DarknessPlayerRank( X ) end),
	Bin_camp2 = write_array(P#pk_GS2U_DarknessRank.camp2, fun(X) -> encode_DarknessPlayerRank( X ) end),
	[
		<<?GS2U_DarknessRank:?U16>>,
		Bin_camp1,
		Bin_camp2
	];

%GENERATED from file:activity.h => GS2U_DarknessState
encode(#pk_GS2U_DarknessState{} = P) ->
	Bin_state = encode_DarknessState( P#pk_GS2U_DarknessState.state ),
	[
		<<?GS2U_DarknessState:?U16>>,
		Bin_state
	];

%GENERATED from file:activity.h => GS2U_DeadLineGiftList
encode(#pk_GS2U_DeadLineGiftList{} = P) ->
	Bin_code = write_uint16( P#pk_GS2U_DeadLineGiftList.code ),
	Bin_msg = write_array(P#pk_GS2U_DeadLineGiftList.msg, fun(X) -> encode_DeadlineGift( X ) end),
	[
		<<?GS2U_DeadLineGiftList:?U16>>,
		Bin_code,
		Bin_msg
	];

%GENERATED from file:activity.h => GS2U_DestinyStar
encode(#pk_GS2U_DestinyStar{} = P) ->
	Bin_stars = write_array(P#pk_GS2U_DestinyStar.stars, fun(X) -> encode_LotteryItem( X ) end),
	[
		<<?GS2U_DestinyStar:?U16>>,
		Bin_stars
	];

%GENERATED from file:activity.h => GS2U_EnterDarkness
encode(#pk_GS2U_EnterDarkness{} = P) ->
	Bin_entrances = write_array(P#pk_GS2U_EnterDarkness.entrances, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_EnterDarkness:?U16>>,
		Bin_entrances
	];

%GENERATED from file:activity.h => GS2U_EscortResult
encode(#pk_GS2U_EscortResult{} = P) ->
	Bin_escortType = write_uint16( P#pk_GS2U_EscortResult.escortType ),
	Bin_endReason = write_uint8( P#pk_GS2U_EscortResult.endReason ),
	Bin_isSuccess = write_bool( P#pk_GS2U_EscortResult.isSuccess ),
	Bin_rewards = write_array(P#pk_GS2U_EscortResult.rewards, fun(X) -> encode_EscortResultReward( X ) end),
	Bin_plunder = write_array(P#pk_GS2U_EscortResult.plunder, fun(X) -> encode_EscortPlunderMoney( X ) end),
	[
		<<?GS2U_EscortResult:?U16>>,
		Bin_escortType,
		Bin_endReason,
		Bin_isSuccess,
		Bin_rewards,
		Bin_plunder
	];

%GENERATED from file:activity.h => GS2U_GBList
encode(#pk_GS2U_GBList{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_GBList.mapID ),
	Bin_lineList = write_array(P#pk_GS2U_GBList.lineList, fun(X) -> encode_GBMapLineInfo( X ) end),
	Bin_info = encode_PlayerGBInfo( P#pk_GS2U_GBList.info ),
	[
		<<?GS2U_GBList:?U16>>,
		Bin_mapID,
		Bin_lineList,
		Bin_info
	];

%GENERATED from file:activity.h => GS2U_GetChargeOrUseGiftAck
encode(#pk_GS2U_GetChargeOrUseGiftAck{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_GetChargeOrUseGiftAck.type ),
	Bin_ruleID = write_uint8( P#pk_GS2U_GetChargeOrUseGiftAck.ruleID ),
	Bin_success = write_bool( P#pk_GS2U_GetChargeOrUseGiftAck.success ),
	[
		<<?GS2U_GetChargeOrUseGiftAck:?U16>>,
		Bin_type,
		Bin_ruleID,
		Bin_success
	];

%GENERATED from file:activity.h => GS2U_Goblin_Open_State
encode(#pk_GS2U_Goblin_Open_State{} = P) ->
	Bin_isOpen = write_bool( P#pk_GS2U_Goblin_Open_State.isOpen ),
	Bin_mapID = write_uint32( P#pk_GS2U_Goblin_Open_State.mapID ),
	[
		<<?GS2U_Goblin_Open_State:?U16>>,
		Bin_isOpen,
		Bin_mapID
	];

%GENERATED from file:activity.h => GS2U_HDBattleCD
encode(#pk_GS2U_HDBattleCD{} = P) ->
	Bin_time = write_uint16( P#pk_GS2U_HDBattleCD.time ),
	[
		<<?GS2U_HDBattleCD:?U16>>,
		Bin_time
	];

%GENERATED from file:activity.h => GS2U_HDBattleExploits
encode(#pk_GS2U_HDBattleExploits{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_HDBattleExploits.type ),
	Bin_exploits = write_array(P#pk_GS2U_HDBattleExploits.exploits, fun(X) -> encode_HDBattleExploit( X ) end),
	[
		<<?GS2U_HDBattleExploits:?U16>>,
		Bin_type,
		Bin_exploits
	];

%GENERATED from file:activity.h => GS2U_HDBattleOpenSurplusTime
encode(#pk_GS2U_HDBattleOpenSurplusTime{} = P) ->
	Bin_surplusTime = write_int16( P#pk_GS2U_HDBattleOpenSurplusTime.surplusTime ),
	[
		<<?GS2U_HDBattleOpenSurplusTime:?U16>>,
		Bin_surplusTime
	];

%GENERATED from file:activity.h => GS2U_HDBattlePhase
encode(#pk_GS2U_HDBattlePhase{} = P) ->
	Bin_phase = write_uint8( P#pk_GS2U_HDBattlePhase.phase ),
	Bin_param1 = write_uint16( P#pk_GS2U_HDBattlePhase.param1 ),
	Bin_param2 = write_uint16( P#pk_GS2U_HDBattlePhase.param2 ),
	[
		<<?GS2U_HDBattlePhase:?U16>>,
		Bin_phase,
		Bin_param1,
		Bin_param2
	];

%GENERATED from file:activity.h => GS2U_HDGatherSuccess
encode(#pk_GS2U_HDGatherSuccess{} = P) ->
	Bin_gatherID = write_uint32( P#pk_GS2U_HDGatherSuccess.gatherID ),
	[
		<<?GS2U_HDGatherSuccess:?U16>>,
		Bin_gatherID
	];

%GENERATED from file:activity.h => GS2U_IconLight
encode(#pk_GS2U_IconLight{} = P) ->
	Bin_id = write_uint8( P#pk_GS2U_IconLight.id ),
	Bin_light = write_bool( P#pk_GS2U_IconLight.light ),
	[
		<<?GS2U_IconLight:?U16>>,
		Bin_id,
		Bin_light
	];

%GENERATED from file:activity.h => GS2U_InitWildBossInfo
encode(#pk_GS2U_InitWildBossInfo{} = P) ->
	Bin_infos = write_array(P#pk_GS2U_InitWildBossInfo.infos, fun(X) -> encode_WildBossInfo( X ) end),
	[
		<<?GS2U_InitWildBossInfo:?U16>>,
		Bin_infos
	];

%GENERATED from file:activity.h => GS2U_JoinHDBattle
encode(#pk_GS2U_JoinHDBattle{}) ->
	[
		<<?GS2U_JoinHDBattle:?U16>>

	];

%GENERATED from file:activity.h => GS2U_KillMonsterReward
encode(#pk_GS2U_KillMonsterReward{} = P) ->
	Bin_rewardItemList = write_array(P#pk_GS2U_KillMonsterReward.rewardItemList, fun(X) -> encode_RewardItem( X ) end),
	[
		<<?GS2U_KillMonsterReward:?U16>>,
		Bin_rewardItemList
	];

%GENERATED from file:activity.h => GS2U_KillPlayerNumber
encode(#pk_GS2U_KillPlayerNumber{} = P) ->
	Bin_sortNumber = write_uint32( P#pk_GS2U_KillPlayerNumber.sortNumber ),
	Bin_killNumber = write_uint32( P#pk_GS2U_KillPlayerNumber.killNumber ),
	Bin_lxKillNumber = write_uint32( P#pk_GS2U_KillPlayerNumber.lxKillNumber ),
	Bin_needKill = write_uint32( P#pk_GS2U_KillPlayerNumber.needKill ),
	Bin_remainSecond = write_uint32( P#pk_GS2U_KillPlayerNumber.remainSecond ),
	Bin_gatherNumber = write_uint32( P#pk_GS2U_KillPlayerNumber.gatherNumber ),
	Bin_needGatherNumber = write_uint32( P#pk_GS2U_KillPlayerNumber.needGatherNumber ),
	[
		<<?GS2U_KillPlayerNumber:?U16>>,
		Bin_sortNumber,
		Bin_killNumber,
		Bin_lxKillNumber,
		Bin_needKill,
		Bin_remainSecond,
		Bin_gatherNumber,
		Bin_needGatherNumber
	];

%GENERATED from file:activity.h => GS2U_KillRank
encode(#pk_GS2U_KillRank{} = P) ->
	Bin_rank = write_array(P#pk_GS2U_KillRank.rank, fun(X) -> encode_KillRank( X ) end),
	[
		<<?GS2U_KillRank:?U16>>,
		Bin_rank
	];

%GENERATED from file:activity.h => GS2U_KingBattleBuffInfo
encode(#pk_GS2U_KingBattleBuffInfo{} = P) ->
	Bin_mirrorBuffcfgID = write_uint64( P#pk_GS2U_KingBattleBuffInfo.mirrorBuffcfgID ),
	Bin_defenderBuffcfgID = write_uint64( P#pk_GS2U_KingBattleBuffInfo.defenderBuffcfgID ),
	Bin_attackerBuffcfgID = write_uint64( P#pk_GS2U_KingBattleBuffInfo.attackerBuffcfgID ),
	[
		<<?GS2U_KingBattleBuffInfo:?U16>>,
		Bin_mirrorBuffcfgID,
		Bin_defenderBuffcfgID,
		Bin_attackerBuffcfgID
	];

%GENERATED from file:activity.h => GS2U_KingBattleRepairMirror
encode(#pk_GS2U_KingBattleRepairMirror{} = P) ->
	Bin_mirrorMaxHp = write_uint64( P#pk_GS2U_KingBattleRepairMirror.mirrorMaxHp ),
	Bin_mirrorCurrentHp = write_uint64( P#pk_GS2U_KingBattleRepairMirror.mirrorCurrentHp ),
	[
		<<?GS2U_KingBattleRepairMirror:?U16>>,
		Bin_mirrorMaxHp,
		Bin_mirrorCurrentHp
	];

%GENERATED from file:activity.h => GS2U_KingBattleResult
encode(#pk_GS2U_KingBattleResult{} = P) ->
	Bin_isKing = write_bool( P#pk_GS2U_KingBattleResult.isKing ),
	Bin_isNewKing = write_bool( P#pk_GS2U_KingBattleResult.isNewKing ),
	Bin_killNumOrHurt = write_uint64( P#pk_GS2U_KingBattleResult.killNumOrHurt ),
	Bin_days = write_uint8( P#pk_GS2U_KingBattleResult.days ),
	Bin_declaration = write_string( P#pk_GS2U_KingBattleResult.declaration ),
	Bin_name = write_string( P#pk_GS2U_KingBattleResult.name ),
	Bin_roleID = write_uint64( P#pk_GS2U_KingBattleResult.roleID ),
	Bin_career = write_uint32( P#pk_GS2U_KingBattleResult.career ),
	Bin_race = write_int8( P#pk_GS2U_KingBattleResult.race ),
	Bin_sex = write_int8( P#pk_GS2U_KingBattleResult.sex ),
	Bin_head = write_int32( P#pk_GS2U_KingBattleResult.head ),
	Bin_wingLevel = write_int32( P#pk_GS2U_KingBattleResult.wingLevel ),
	Bin_fashionIDs = write_array(P#pk_GS2U_KingBattleResult.fashionIDs, fun(X) -> write_int32( X ) end),
	Bin_equipIDList = write_array(P#pk_GS2U_KingBattleResult.equipIDList, fun(X) -> encode_PlayerKingBattleEquip( X ) end),
	Bin_equipLevelList = write_array(P#pk_GS2U_KingBattleResult.equipLevelList, fun(X) -> encode_PlayerKingBattleEquipLevel( X ) end),
	[
		<<?GS2U_KingBattleResult:?U16>>,
		Bin_isKing,
		Bin_isNewKing,
		Bin_killNumOrHurt,
		Bin_days,
		Bin_declaration,
		Bin_name,
		Bin_roleID,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_wingLevel,
		Bin_fashionIDs,
		Bin_equipIDList,
		Bin_equipLevelList
	];

%GENERATED from file:activity.h => GS2U_LotteryMoney
encode(#pk_GS2U_LotteryMoney{} = P) ->
	Bin_pondGold = write_uint64( P#pk_GS2U_LotteryMoney.pondGold ),
	Bin_pondDiamond = write_uint64( P#pk_GS2U_LotteryMoney.pondDiamond ),
	[
		<<?GS2U_LotteryMoney:?U16>>,
		Bin_pondGold,
		Bin_pondDiamond
	];

%GENERATED from file:activity.h => GS2U_LotteryNote
encode(#pk_GS2U_LotteryNote{} = P) ->
	Bin_notes = write_array(P#pk_GS2U_LotteryNote.notes, fun(X) -> encode_LotteryNote( X ) end),
	[
		<<?GS2U_LotteryNote:?U16>>,
		Bin_notes
	];

%GENERATED from file:activity.h => GS2U_LotteryResetTime
encode(#pk_GS2U_LotteryResetTime{} = P) ->
	Bin_goldFreeRstTime = write_uint64( P#pk_GS2U_LotteryResetTime.goldFreeRstTime ),
	Bin_diamondFreeRstTime = write_uint64( P#pk_GS2U_LotteryResetTime.diamondFreeRstTime ),
	[
		<<?GS2U_LotteryResetTime:?U16>>,
		Bin_goldFreeRstTime,
		Bin_diamondFreeRstTime
	];

%GENERATED from file:activity.h => GS2U_LotteryResult
encode(#pk_GS2U_LotteryResult{} = P) ->
	Bin_item = write_array(P#pk_GS2U_LotteryResult.item, fun(X) -> encode_LotteryItem( X ) end),
	[
		<<?GS2U_LotteryResult:?U16>>,
		Bin_item
	];

%GENERATED from file:activity.h => GS2U_MapBossInfo
encode(#pk_GS2U_MapBossInfo{} = P) ->
	Bin_mapID = write_uint32( P#pk_GS2U_MapBossInfo.mapID ),
	Bin_bossID = write_uint32( P#pk_GS2U_MapBossInfo.bossID ),
	Bin_name = write_string( P#pk_GS2U_MapBossInfo.name ),
	Bin_isTeam = write_bool( P#pk_GS2U_MapBossInfo.isTeam ),
	Bin_refreshTime = write_uint64( P#pk_GS2U_MapBossInfo.refreshTime ),
	Bin_code = write_uint64( P#pk_GS2U_MapBossInfo.code ),
	[
		<<?GS2U_MapBossInfo:?U16>>,
		Bin_mapID,
		Bin_bossID,
		Bin_name,
		Bin_isTeam,
		Bin_refreshTime,
		Bin_code
	];

%GENERATED from file:activity.h => GS2U_MarrorInfoAck
encode(#pk_GS2U_MarrorInfoAck{} = P) ->
	Bin_nickName = write_string( P#pk_GS2U_MarrorInfoAck.nickName ),
	Bin_playerLevel = write_uint16( P#pk_GS2U_MarrorInfoAck.playerLevel ),
	Bin_playerForce = write_uint32( P#pk_GS2U_MarrorInfoAck.playerForce ),
	Bin_roleID = write_uint64( P#pk_GS2U_MarrorInfoAck.roleID ),
	Bin_playerCode = write_uint64( P#pk_GS2U_MarrorInfoAck.playerCode ),
	Bin_career = write_uint32( P#pk_GS2U_MarrorInfoAck.career ),
	Bin_race = write_int8( P#pk_GS2U_MarrorInfoAck.race ),
	Bin_sex = write_int8( P#pk_GS2U_MarrorInfoAck.sex ),
	Bin_head = write_int32( P#pk_GS2U_MarrorInfoAck.head ),
	Bin_wingLevel = write_int32( P#pk_GS2U_MarrorInfoAck.wingLevel ),
	Bin_clique = write_string( P#pk_GS2U_MarrorInfoAck.clique ),
	Bin_defendDays = write_uint32( P#pk_GS2U_MarrorInfoAck.defendDays ),
	Bin_mirrorMaxHp = write_uint64( P#pk_GS2U_MarrorInfoAck.mirrorMaxHp ),
	Bin_mirrorLastHp = write_uint64( P#pk_GS2U_MarrorInfoAck.mirrorLastHp ),
	Bin_fashionIDs = write_array(P#pk_GS2U_MarrorInfoAck.fashionIDs, fun(X) -> write_int32( X ) end),
	Bin_equipIDList = write_array(P#pk_GS2U_MarrorInfoAck.equipIDList, fun(X) -> encode_PlayerKingBattleEquip( X ) end),
	Bin_equipLevelList = write_array(P#pk_GS2U_MarrorInfoAck.equipLevelList, fun(X) -> encode_PlayerKingBattleEquipLevel( X ) end),
	Bin_declaration = write_string( P#pk_GS2U_MarrorInfoAck.declaration ),
	[
		<<?GS2U_MarrorInfoAck:?U16>>,
		Bin_nickName,
		Bin_playerLevel,
		Bin_playerForce,
		Bin_roleID,
		Bin_playerCode,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_wingLevel,
		Bin_clique,
		Bin_defendDays,
		Bin_mirrorMaxHp,
		Bin_mirrorLastHp,
		Bin_fashionIDs,
		Bin_equipIDList,
		Bin_equipLevelList,
		Bin_declaration
	];

%GENERATED from file:activity.h => GS2U_MyAnswerRank
encode(#pk_GS2U_MyAnswerRank{} = P) ->
	Bin_ranking = write_uint16( P#pk_GS2U_MyAnswerRank.ranking ),
	Bin_value = write_uint32( P#pk_GS2U_MyAnswerRank.value ),
	[
		<<?GS2U_MyAnswerRank:?U16>>,
		Bin_ranking,
		Bin_value
	];

%GENERATED from file:activity.h => GS2U_NoticeWildBossDead
encode(#pk_GS2U_NoticeWildBossDead{} = P) ->
	Bin_info = encode_WildBossInfo( P#pk_GS2U_NoticeWildBossDead.info ),
	[
		<<?GS2U_NoticeWildBossDead:?U16>>,
		Bin_info
	];

%GENERATED from file:activity.h => GS2U_NoticeWildBossTarget
encode(#pk_GS2U_NoticeWildBossTarget{} = P) ->
	Bin_targetCode = write_uint64( P#pk_GS2U_NoticeWildBossTarget.targetCode ),
	Bin_name = write_string( P#pk_GS2U_NoticeWildBossTarget.name ),
	Bin_isTeam = write_bool( P#pk_GS2U_NoticeWildBossTarget.isTeam ),
	Bin_isShow = write_bool( P#pk_GS2U_NoticeWildBossTarget.isShow ),
	[
		<<?GS2U_NoticeWildBossTarget:?U16>>,
		Bin_targetCode,
		Bin_name,
		Bin_isTeam,
		Bin_isShow
	];

%GENERATED from file:activity.h => GS2U_OperateAct_Exchange
encode(#pk_GS2U_OperateAct_Exchange{} = P) ->
	Bin_exchangeID = write_uint32( P#pk_GS2U_OperateAct_Exchange.exchangeID ),
	Bin_exchangeType = write_uint8( P#pk_GS2U_OperateAct_Exchange.exchangeType ),
	Bin_roleExchangedNum = write_uint8( P#pk_GS2U_OperateAct_Exchange.roleExchangedNum ),
	Bin_roleMaxExchangeNum = write_uint8( P#pk_GS2U_OperateAct_Exchange.roleMaxExchangeNum ),
	Bin_exchangeArg = write_uint16( P#pk_GS2U_OperateAct_Exchange.exchangeArg ),
	Bin_exchangeNum = write_uint16( P#pk_GS2U_OperateAct_Exchange.exchangeNum ),
	Bin_startTime = write_uint32( P#pk_GS2U_OperateAct_Exchange.startTime ),
	Bin_endTime = write_uint32( P#pk_GS2U_OperateAct_Exchange.endTime ),
	Bin_name = write_string( P#pk_GS2U_OperateAct_Exchange.name ),
	Bin_title = write_string( P#pk_GS2U_OperateAct_Exchange.title ),
	Bin_content = write_string( P#pk_GS2U_OperateAct_Exchange.content ),
	Bin_requireList = write_array(P#pk_GS2U_OperateAct_Exchange.requireList, fun(X) -> encode_OperateActExchangeRequire( X ) end),
	[
		<<?GS2U_OperateAct_Exchange:?U16>>,
		Bin_exchangeID,
		Bin_exchangeType,
		Bin_roleExchangedNum,
		Bin_roleMaxExchangeNum,
		Bin_exchangeArg,
		Bin_exchangeNum,
		Bin_startTime,
		Bin_endTime,
		Bin_name,
		Bin_title,
		Bin_content,
		Bin_requireList
	];

%GENERATED from file:activity.h => GS2U_OperateExchangeAck
encode(#pk_GS2U_OperateExchangeAck{} = P) ->
	Bin_exchangeID = write_uint32( P#pk_GS2U_OperateExchangeAck.exchangeID ),
	[
		<<?GS2U_OperateExchangeAck:?U16>>,
		Bin_exchangeID
	];

%GENERATED from file:activity.h => GS2U_PlayerAnswer
encode(#pk_GS2U_PlayerAnswer{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_PlayerAnswer.roleID ),
	Bin_questionID = write_uint32( P#pk_GS2U_PlayerAnswer.questionID ),
	Bin_isright = write_bool( P#pk_GS2U_PlayerAnswer.isright ),
	Bin_answers = write_string( P#pk_GS2U_PlayerAnswer.answers ),
	Bin_isFirstAnser = write_uint32( P#pk_GS2U_PlayerAnswer.isFirstAnser ),
	Bin_roleName = write_string( P#pk_GS2U_PlayerAnswer.roleName ),
	Bin_level = write_uint8( P#pk_GS2U_PlayerAnswer.level ),
	Bin_career = write_uint32( P#pk_GS2U_PlayerAnswer.career ),
	Bin_sex = write_uint8( P#pk_GS2U_PlayerAnswer.sex ),
	Bin_race = write_uint8( P#pk_GS2U_PlayerAnswer.race ),
	Bin_head = write_int32( P#pk_GS2U_PlayerAnswer.head ),
	Bin_frameID = write_uint16( P#pk_GS2U_PlayerAnswer.frameID ),
	Bin_isVoice = write_bool( P#pk_GS2U_PlayerAnswer.isVoice ),
	[
		<<?GS2U_PlayerAnswer:?U16>>,
		Bin_roleID,
		Bin_questionID,
		Bin_isright,
		Bin_answers,
		Bin_isFirstAnser,
		Bin_roleName,
		Bin_level,
		Bin_career,
		Bin_sex,
		Bin_race,
		Bin_head,
		Bin_frameID,
		Bin_isVoice
	];

%GENERATED from file:activity.h => GS2U_PlayerAnswerInfo
encode(#pk_GS2U_PlayerAnswerInfo{} = P) ->
	Bin_trueNum = write_uint32( P#pk_GS2U_PlayerAnswerInfo.trueNum ),
	Bin_totalExp = write_uint32( P#pk_GS2U_PlayerAnswerInfo.totalExp ),
	Bin_totalCoin = write_uint32( P#pk_GS2U_PlayerAnswerInfo.totalCoin ),
	[
		<<?GS2U_PlayerAnswerInfo:?U16>>,
		Bin_trueNum,
		Bin_totalExp,
		Bin_totalCoin
	];

%GENERATED from file:activity.h => GS2U_PlayerAnswerResult
encode(#pk_GS2U_PlayerAnswerResult{} = P) ->
	Bin_result = write_int32( P#pk_GS2U_PlayerAnswerResult.result ),
	Bin_trueAnswer = write_uint8( P#pk_GS2U_PlayerAnswerResult.trueAnswer ),
	[
		<<?GS2U_PlayerAnswerResult:?U16>>,
		Bin_result,
		Bin_trueAnswer
	];

%GENERATED from file:activity.h => GS2U_QueueNumber
encode(#pk_GS2U_QueueNumber{} = P) ->
	Bin_queueNumber = write_uint32( P#pk_GS2U_QueueNumber.queueNumber ),
	Bin_isStart = write_bool( P#pk_GS2U_QueueNumber.isStart ),
	Bin_isIMApply = write_bool( P#pk_GS2U_QueueNumber.isIMApply ),
	[
		<<?GS2U_QueueNumber:?U16>>,
		Bin_queueNumber,
		Bin_isStart,
		Bin_isIMApply
	];

%GENERATED from file:activity.h => GS2U_RequestChargeOrUseListAck
encode(#pk_GS2U_RequestChargeOrUseListAck{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_RequestChargeOrUseListAck.type ),
	Bin_activityName = write_string( P#pk_GS2U_RequestChargeOrUseListAck.activityName ),
	Bin_activityDesc = write_string( P#pk_GS2U_RequestChargeOrUseListAck.activityDesc ),
	Bin_beginTime = write_uint32( P#pk_GS2U_RequestChargeOrUseListAck.beginTime ),
	Bin_endTime = write_uint32( P#pk_GS2U_RequestChargeOrUseListAck.endTime ),
	Bin_amountInTime = write_uint32( P#pk_GS2U_RequestChargeOrUseListAck.amountInTime ),
	Bin_ruleInfoList = write_array(P#pk_GS2U_RequestChargeOrUseListAck.ruleInfoList, fun(X) -> encode_ChargeOrUseRuleInfo( X ) end),
	[
		<<?GS2U_RequestChargeOrUseListAck:?U16>>,
		Bin_type,
		Bin_activityName,
		Bin_activityDesc,
		Bin_beginTime,
		Bin_endTime,
		Bin_amountInTime,
		Bin_ruleInfoList
	];

%GENERATED from file:activity.h => GS2U_RequestCollectionWordsAwardAck
encode(#pk_GS2U_RequestCollectionWordsAwardAck{} = P) ->
	Bin_requestAwardID = write_uint32( P#pk_GS2U_RequestCollectionWordsAwardAck.requestAwardID ),
	Bin_isSuccess = write_bool( P#pk_GS2U_RequestCollectionWordsAwardAck.isSuccess ),
	[
		<<?GS2U_RequestCollectionWordsAwardAck:?U16>>,
		Bin_requestAwardID,
		Bin_isSuccess
	];

%GENERATED from file:activity.h => GS2U_RequestPictureNoticeAck
encode(#pk_GS2U_RequestPictureNoticeAck{} = P) ->
	Bin_data = write_array(P#pk_GS2U_RequestPictureNoticeAck.data, fun(X) -> encode_Picture_notice( X ) end),
	[
		<<?GS2U_RequestPictureNoticeAck:?U16>>,
		Bin_data
	];

%GENERATED from file:activity.h => GS2U_ReturnEscortList
encode(#pk_GS2U_ReturnEscortList{} = P) ->
	Bin_etlist = write_array(P#pk_GS2U_ReturnEscortList.etlist, fun(X) -> encode_EscortTeam( X ) end),
	[
		<<?GS2U_ReturnEscortList:?U16>>,
		Bin_etlist
	];

%GENERATED from file:activity.h => GS2U_RobitAutoAnswer
encode(#pk_GS2U_RobitAutoAnswer{} = P) ->
	Bin_answerList = write_array(P#pk_GS2U_RobitAutoAnswer.answerList, fun(X) -> encode_RobitAnswer( X ) end),
	[
		<<?GS2U_RobitAutoAnswer:?U16>>,
		Bin_answerList
	];

%GENERATED from file:activity.h => GS2U_SelectCamp
encode(#pk_GS2U_SelectCamp{} = P) ->
	Bin_camp1 = write_array(P#pk_GS2U_SelectCamp.camp1, fun(X) -> encode_DarknessPlayerRank( X ) end),
	Bin_cam1Num = write_uint32( P#pk_GS2U_SelectCamp.cam1Num ),
	Bin_camp2 = write_array(P#pk_GS2U_SelectCamp.camp2, fun(X) -> encode_DarknessPlayerRank( X ) end),
	Bin_cam2Num = write_uint32( P#pk_GS2U_SelectCamp.cam2Num ),
	[
		<<?GS2U_SelectCamp:?U16>>,
		Bin_camp1,
		Bin_cam1Num,
		Bin_camp2,
		Bin_cam2Num
	];

%GENERATED from file:activity.h => GS2U_SelectDanceID
encode(#pk_GS2U_SelectDanceID{} = P) ->
	Bin_danceID = write_uint32( P#pk_GS2U_SelectDanceID.danceID ),
	Bin_correct = write_bool( P#pk_GS2U_SelectDanceID.correct ),
	[
		<<?GS2U_SelectDanceID:?U16>>,
		Bin_danceID,
		Bin_correct
	];

%GENERATED from file:activity.h => GS2U_SelfDarkness
encode(#pk_GS2U_SelfDarkness{} = P) ->
	Bin_self = encode_DarknessPlayerRank( P#pk_GS2U_SelfDarkness.self ),
	Bin_isNeedSelectCamp = write_bool( P#pk_GS2U_SelfDarkness.isNeedSelectCamp ),
	Bin_bossID = write_uint32( P#pk_GS2U_SelfDarkness.bossID ),
	Bin_syFreshTime = write_uint32( P#pk_GS2U_SelfDarkness.syFreshTime ),
	[
		<<?GS2U_SelfDarkness:?U16>>,
		Bin_self,
		Bin_isNeedSelectCamp,
		Bin_bossID,
		Bin_syFreshTime
	];

%GENERATED from file:activity.h => GS2U_SendAnswerData
encode(#pk_GS2U_SendAnswerData{} = P) ->
	Bin_questionID = write_uint32( P#pk_GS2U_SendAnswerData.questionID ),
	Bin_endTime = write_uint64( P#pk_GS2U_SendAnswerData.endTime ),
	Bin_currentAnswer = write_uint32( P#pk_GS2U_SendAnswerData.currentAnswer ),
	Bin_data = write_array(P#pk_GS2U_SendAnswerData.data, fun(X) -> encode_ActivityAnswerRankData( X ) end),
	[
		<<?GS2U_SendAnswerData:?U16>>,
		Bin_questionID,
		Bin_endTime,
		Bin_currentAnswer,
		Bin_data
	];

%GENERATED from file:activity.h => GS2U_SevenMissionDataList
encode(#pk_GS2U_SevenMissionDataList{} = P) ->
	Bin_days = write_uint8( P#pk_GS2U_SevenMissionDataList.days ),
	Bin_timeoutSeconds = write_uint32( P#pk_GS2U_SevenMissionDataList.timeoutSeconds ),
	Bin_lists = write_array(P#pk_GS2U_SevenMissionDataList.lists, fun(X) -> encode_SevenDayMissionData( X ) end),
	[
		<<?GS2U_SevenMissionDataList:?U16>>,
		Bin_days,
		Bin_timeoutSeconds,
		Bin_lists
	];

%GENERATED from file:activity.h => GS2U_SevenMissionDataUpdate
encode(#pk_GS2U_SevenMissionDataUpdate{} = P) ->
	Bin_isFinish = write_bool( P#pk_GS2U_SevenMissionDataUpdate.isFinish ),
	Bin_number = write_uint16( P#pk_GS2U_SevenMissionDataUpdate.number ),
	Bin_max = write_uint16( P#pk_GS2U_SevenMissionDataUpdate.max ),
	Bin_missionid = write_uint16( P#pk_GS2U_SevenMissionDataUpdate.missionid ),
	[
		<<?GS2U_SevenMissionDataUpdate:?U16>>,
		Bin_isFinish,
		Bin_number,
		Bin_max,
		Bin_missionid
	];

%GENERATED from file:activity.h => GS2U_SwitchDance
encode(#pk_GS2U_SwitchDance{} = P) ->
	Bin_second = write_uint8( P#pk_GS2U_SwitchDance.second ),
	[
		<<?GS2U_SwitchDance:?U16>>,
		Bin_second
	];

%GENERATED from file:activity.h => GS2U_SyncGBInfo
encode(#pk_GS2U_SyncGBInfo{} = P) ->
	Bin_info = encode_PlayerGBInfo( P#pk_GS2U_SyncGBInfo.info ),
	[
		<<?GS2U_SyncGBInfo:?U16>>,
		Bin_info
	];

%GENERATED from file:activity.h => GS2U_TriggerEvent
encode(#pk_GS2U_TriggerEvent{}) ->
	[
		<<?GS2U_TriggerEvent:?U16>>

	];

%GENERATED from file:activity.h => GS2U_TriggerEventResult
encode(#pk_GS2U_TriggerEventResult{} = P) ->
	Bin_eventID = write_uint16( P#pk_GS2U_TriggerEventResult.eventID ),
	[
		<<?GS2U_TriggerEventResult:?U16>>,
		Bin_eventID
	];

%GENERATED from file:activity.h => GS2U_UneedleaveOutMap
encode(#pk_GS2U_UneedleaveOutMap{} = P) ->
	Bin_type = write_uint32( P#pk_GS2U_UneedleaveOutMap.type ),
	[
		<<?GS2U_UneedleaveOutMap:?U16>>,
		Bin_type
	];

%GENERATED from file:activity.h => GS2U_UpdateArenaTeamMember
encode(#pk_GS2U_UpdateArenaTeamMember{} = P) ->
	Bin_teamMemberInfos = write_array(P#pk_GS2U_UpdateArenaTeamMember.teamMemberInfos, fun(X) -> encode_ArenaTeamMemberInfo( X ) end),
	[
		<<?GS2U_UpdateArenaTeamMember:?U16>>,
		Bin_teamMemberInfos
	];

%GENERATED from file:activity.h => GS2U_WorldLevel
encode(#pk_GS2U_WorldLevel{} = P) ->
	Bin_worldLevel = write_uint8( P#pk_GS2U_WorldLevel.worldLevel ),
	[
		<<?GS2U_WorldLevel:?U16>>,
		Bin_worldLevel
	];

%GENERATED from file:activity.h => U2GS_AddArenaTeamMember
encode(#pk_U2GS_AddArenaTeamMember{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_AddArenaTeamMember.id ),
	[
		<<?U2GS_AddArenaTeamMember:?U16>>,
		Bin_id
	];

%GENERATED from file:activity.h => U2GS_AddArenaTeamMemberAck
encode(#pk_U2GS_AddArenaTeamMemberAck{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_AddArenaTeamMemberAck.roleID ),
	Bin_result = write_uint8( P#pk_U2GS_AddArenaTeamMemberAck.result ),
	[
		<<?U2GS_AddArenaTeamMemberAck:?U16>>,
		Bin_roleID,
		Bin_result
	];

%GENERATED from file:activity.h => U2GS_AngelInvestment
encode(#pk_U2GS_AngelInvestment{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_AngelInvestment.id ),
	[
		<<?U2GS_AngelInvestment:?U16>>,
		Bin_id
	];

%GENERATED from file:activity.h => U2GS_AngelInvestmentGet
encode(#pk_U2GS_AngelInvestmentGet{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_AngelInvestmentGet.id ),
	[
		<<?U2GS_AngelInvestmentGet:?U16>>,
		Bin_id
	];

%GENERATED from file:activity.h => U2GS_ApplyAnswer
encode(#pk_U2GS_ApplyAnswer{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_ApplyAnswer.type ),
	[
		<<?U2GS_ApplyAnswer:?U16>>,
		Bin_type
	];

%GENERATED from file:activity.h => U2GS_ApplyDance
encode(#pk_U2GS_ApplyDance{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_ApplyDance.type ),
	[
		<<?U2GS_ApplyDance:?U16>>,
		Bin_type
	];

%GENERATED from file:activity.h => U2GS_AttackDefenderQuotaNumber
encode(#pk_U2GS_AttackDefenderQuotaNumber{} = P) ->
	Bin_activityID = write_uint16( P#pk_U2GS_AttackDefenderQuotaNumber.activityID ),
	Bin_mapID = write_uint32( P#pk_U2GS_AttackDefenderQuotaNumber.mapID ),
	[
		<<?U2GS_AttackDefenderQuotaNumber:?U16>>,
		Bin_activityID,
		Bin_mapID
	];

%GENERATED from file:activity.h => U2GS_BreakDance
encode(#pk_U2GS_BreakDance{}) ->
	[
		<<?U2GS_BreakDance:?U16>>

	];

%GENERATED from file:activity.h => U2GS_BuyTime
encode(#pk_U2GS_BuyTime{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_BuyTime.id ),
	[
		<<?U2GS_BuyTime:?U16>>,
		Bin_id
	];

%GENERATED from file:activity.h => U2GS_CancelApply
encode(#pk_U2GS_CancelApply{}) ->
	[
		<<?U2GS_CancelApply:?U16>>

	];

%GENERATED from file:activity.h => U2GS_DanceArea
encode(#pk_U2GS_DanceArea{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_DanceArea.type ),
	[
		<<?U2GS_DanceArea:?U16>>,
		Bin_type
	];

%GENERATED from file:activity.h => U2GS_DarknessRank
encode(#pk_U2GS_DarknessRank{}) ->
	[
		<<?U2GS_DarknessRank:?U16>>

	];

%GENERATED from file:activity.h => U2GS_DeadLineGiftBuy
encode(#pk_U2GS_DeadLineGiftBuy{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_DeadLineGiftBuy.id ),
	Bin_giftID = write_uint16( P#pk_U2GS_DeadLineGiftBuy.giftID ),
	Bin_itemBuyNum = write_uint16( P#pk_U2GS_DeadLineGiftBuy.itemBuyNum ),
	[
		<<?U2GS_DeadLineGiftBuy:?U16>>,
		Bin_id,
		Bin_giftID,
		Bin_itemBuyNum
	];

%GENERATED from file:activity.h => U2GS_DeadLineGiftOpen
encode(#pk_U2GS_DeadLineGiftOpen{}) ->
	[
		<<?U2GS_DeadLineGiftOpen:?U16>>

	];

%GENERATED from file:activity.h => U2GS_GBLeaveRange
encode(#pk_U2GS_GBLeaveRange{}) ->
	[
		<<?U2GS_GBLeaveRange:?U16>>

	];

%GENERATED from file:activity.h => U2GS_GBLockGather
encode(#pk_U2GS_GBLockGather{} = P) ->
	Bin_gatherCode = write_uint64( P#pk_U2GS_GBLockGather.gatherCode ),
	[
		<<?U2GS_GBLockGather:?U16>>,
		Bin_gatherCode
	];

%GENERATED from file:activity.h => U2GS_GBRequestEnterMapLine
encode(#pk_U2GS_GBRequestEnterMapLine{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_GBRequestEnterMapLine.mapID ),
	Bin_lineID = write_uint32( P#pk_U2GS_GBRequestEnterMapLine.lineID ),
	[
		<<?U2GS_GBRequestEnterMapLine:?U16>>,
		Bin_mapID,
		Bin_lineID
	];

%GENERATED from file:activity.h => U2GS_GetAnswerScore
encode(#pk_U2GS_GetAnswerScore{}) ->
	[
		<<?U2GS_GetAnswerScore:?U16>>

	];

%GENERATED from file:activity.h => U2GS_GetChargeOrUseGift
encode(#pk_U2GS_GetChargeOrUseGift{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_GetChargeOrUseGift.type ),
	Bin_ruleID = write_uint8( P#pk_U2GS_GetChargeOrUseGift.ruleID ),
	[
		<<?U2GS_GetChargeOrUseGift:?U16>>,
		Bin_type,
		Bin_ruleID
	];

%GENERATED from file:activity.h => U2GS_GiveMarrorFlower
encode(#pk_U2GS_GiveMarrorFlower{}) ->
	[
		<<?U2GS_GiveMarrorFlower:?U16>>

	];

%GENERATED from file:activity.h => U2GS_GuardianDeclaration
encode(#pk_U2GS_GuardianDeclaration{} = P) ->
	Bin_declaration = write_string( P#pk_U2GS_GuardianDeclaration.declaration ),
	[
		<<?U2GS_GuardianDeclaration:?U16>>,
		Bin_declaration
	];

%GENERATED from file:activity.h => U2GS_KillRank
encode(#pk_U2GS_KillRank{}) ->
	[
		<<?U2GS_KillRank:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleBuyAttackerBuff
encode(#pk_U2GS_KingBattleBuyAttackerBuff{}) ->
	[
		<<?U2GS_KingBattleBuyAttackerBuff:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleBuyAttackerBuffOneKey
encode(#pk_U2GS_KingBattleBuyAttackerBuffOneKey{}) ->
	[
		<<?U2GS_KingBattleBuyAttackerBuffOneKey:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleBuyDeffenderBuff
encode(#pk_U2GS_KingBattleBuyDeffenderBuff{}) ->
	[
		<<?U2GS_KingBattleBuyDeffenderBuff:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleBuyDeffenderBuffOneKey
encode(#pk_U2GS_KingBattleBuyDeffenderBuffOneKey{}) ->
	[
		<<?U2GS_KingBattleBuyDeffenderBuffOneKey:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleBuyMirrorBuff
encode(#pk_U2GS_KingBattleBuyMirrorBuff{}) ->
	[
		<<?U2GS_KingBattleBuyMirrorBuff:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleBuyMirrorBuffOneKey
encode(#pk_U2GS_KingBattleBuyMirrorBuffOneKey{}) ->
	[
		<<?U2GS_KingBattleBuyMirrorBuffOneKey:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleGetBuffInfo
encode(#pk_U2GS_KingBattleGetBuffInfo{}) ->
	[
		<<?U2GS_KingBattleGetBuffInfo:?U16>>

	];

%GENERATED from file:activity.h => U2GS_KingBattleRepairMirror
encode(#pk_U2GS_KingBattleRepairMirror{} = P) ->
	Bin_isRepairAll = write_bool( P#pk_U2GS_KingBattleRepairMirror.isRepairAll ),
	[
		<<?U2GS_KingBattleRepairMirror:?U16>>,
		Bin_isRepairAll
	];

%GENERATED from file:activity.h => U2GS_OpenLotteryForm
encode(#pk_U2GS_OpenLotteryForm{}) ->
	[
		<<?U2GS_OpenLotteryForm:?U16>>

	];

%GENERATED from file:activity.h => U2GS_OpenSelectCamp
encode(#pk_U2GS_OpenSelectCamp{}) ->
	[
		<<?U2GS_OpenSelectCamp:?U16>>

	];

%GENERATED from file:activity.h => U2GS_OperateExchange
encode(#pk_U2GS_OperateExchange{} = P) ->
	Bin_exchangeID = write_uint32( P#pk_U2GS_OperateExchange.exchangeID ),
	[
		<<?U2GS_OperateExchange:?U16>>,
		Bin_exchangeID
	];

%GENERATED from file:activity.h => U2GS_OperateExchangeRefresh
encode(#pk_U2GS_OperateExchangeRefresh{}) ->
	[
		<<?U2GS_OperateExchangeRefresh:?U16>>

	];

%GENERATED from file:activity.h => U2GS_PlayerAnswer
encode(#pk_U2GS_PlayerAnswer{} = P) ->
	Bin_questionID = write_uint32( P#pk_U2GS_PlayerAnswer.questionID ),
	Bin_isright = write_bool( P#pk_U2GS_PlayerAnswer.isright ),
	Bin_isVoice = write_bool( P#pk_U2GS_PlayerAnswer.isVoice ),
	Bin_answers = write_string( P#pk_U2GS_PlayerAnswer.answers ),
	[
		<<?U2GS_PlayerAnswer:?U16>>,
		Bin_questionID,
		Bin_isright,
		Bin_isVoice,
		Bin_answers
	];

%GENERATED from file:activity.h => U2GS_PlayerAnswerQuestion
encode(#pk_U2GS_PlayerAnswerQuestion{} = P) ->
	Bin_questionID = write_uint32( P#pk_U2GS_PlayerAnswerQuestion.questionID ),
	Bin_answers = write_uint8( P#pk_U2GS_PlayerAnswerQuestion.answers ),
	[
		<<?U2GS_PlayerAnswerQuestion:?U16>>,
		Bin_questionID,
		Bin_answers
	];

%GENERATED from file:activity.h => U2GS_QueryActivityState
encode(#pk_U2GS_QueryActivityState{} = P) ->
	Bin_activityID = write_uint16( P#pk_U2GS_QueryActivityState.activityID ),
	[
		<<?U2GS_QueryActivityState:?U16>>,
		Bin_activityID
	];

%GENERATED from file:activity.h => U2GS_QueryAngelInvestment
encode(#pk_U2GS_QueryAngelInvestment{}) ->
	[
		<<?U2GS_QueryAngelInvestment:?U16>>

	];

%GENERATED from file:activity.h => U2GS_QueryMapBossInfo
encode(#pk_U2GS_QueryMapBossInfo{} = P) ->
	Bin_targetCode = write_uint64( P#pk_U2GS_QueryMapBossInfo.targetCode ),
	[
		<<?U2GS_QueryMapBossInfo:?U16>>,
		Bin_targetCode
	];

%GENERATED from file:activity.h => U2GS_QuerySevenMissionData
encode(#pk_U2GS_QuerySevenMissionData{}) ->
	[
		<<?U2GS_QuerySevenMissionData:?U16>>

	];

%GENERATED from file:activity.h => U2GS_ReadyArena
encode(#pk_U2GS_ReadyArena{}) ->
	[
		<<?U2GS_ReadyArena:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestCollectionWordsAward
encode(#pk_U2GS_RequestCollectionWordsAward{} = P) ->
	Bin_requestAwardID = write_uint32( P#pk_U2GS_RequestCollectionWordsAward.requestAwardID ),
	[
		<<?U2GS_RequestCollectionWordsAward:?U16>>,
		Bin_requestAwardID
	];

%GENERATED from file:activity.h => U2GS_RequestCrosArenaRanks
encode(#pk_U2GS_RequestCrosArenaRanks{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequestCrosArenaRanks.type ),
	[
		<<?U2GS_RequestCrosArenaRanks:?U16>>,
		Bin_type
	];

%GENERATED from file:activity.h => U2GS_RequestCrosRanks
encode(#pk_U2GS_RequestCrosRanks{}) ->
	[
		<<?U2GS_RequestCrosRanks:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestDarknessInfo
encode(#pk_U2GS_RequestDarknessInfo{}) ->
	[
		<<?U2GS_RequestDarknessInfo:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestEnterDarkness
encode(#pk_U2GS_RequestEnterDarkness{} = P) ->
	Bin_entrance = write_uint8( P#pk_U2GS_RequestEnterDarkness.entrance ),
	[
		<<?U2GS_RequestEnterDarkness:?U16>>,
		Bin_entrance
	];

%GENERATED from file:activity.h => U2GS_RequestEnterNvasionMap
encode(#pk_U2GS_RequestEnterNvasionMap{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_RequestEnterNvasionMap.mapID ),
	[
		<<?U2GS_RequestEnterNvasionMap:?U16>>,
		Bin_mapID
	];

%GENERATED from file:activity.h => U2GS_RequestEntrance
encode(#pk_U2GS_RequestEntrance{}) ->
	[
		<<?U2GS_RequestEntrance:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestEscortList
encode(#pk_U2GS_RequestEscortList{}) ->
	[
		<<?U2GS_RequestEscortList:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestEscortRob
encode(#pk_U2GS_RequestEscortRob{} = P) ->
	Bin_sequenceNumber = write_uint16( P#pk_U2GS_RequestEscortRob.sequenceNumber ),
	[
		<<?U2GS_RequestEscortRob:?U16>>,
		Bin_sequenceNumber
	];

%GENERATED from file:activity.h => U2GS_RequestEscortSolo
encode(#pk_U2GS_RequestEscortSolo{}) ->
	[
		<<?U2GS_RequestEscortSolo:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestEscortTeam
encode(#pk_U2GS_RequestEscortTeam{}) ->
	[
		<<?U2GS_RequestEscortTeam:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestGBList
encode(#pk_U2GS_RequestGBList{}) ->
	[
		<<?U2GS_RequestGBList:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestHDBattle
encode(#pk_U2GS_RequestHDBattle{}) ->
	[
		<<?U2GS_RequestHDBattle:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestHDBattleCD
encode(#pk_U2GS_RequestHDBattleCD{}) ->
	[
		<<?U2GS_RequestHDBattleCD:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestHDBattleExploits
encode(#pk_U2GS_RequestHDBattleExploits{}) ->
	[
		<<?U2GS_RequestHDBattleExploits:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestInActivity
encode(#pk_U2GS_RequestInActivity{} = P) ->
	Bin_activityID = write_uint16( P#pk_U2GS_RequestInActivity.activityID ),
	Bin_mapID = write_uint32( P#pk_U2GS_RequestInActivity.mapID ),
	[
		<<?U2GS_RequestInActivity:?U16>>,
		Bin_activityID,
		Bin_mapID
	];

%GENERATED from file:activity.h => U2GS_RequestJoinHDBattle
encode(#pk_U2GS_RequestJoinHDBattle{}) ->
	[
		<<?U2GS_RequestJoinHDBattle:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestLottery
encode(#pk_U2GS_RequestLottery{} = P) ->
	Bin_isGold = write_bool( P#pk_U2GS_RequestLottery.isGold ),
	Bin_isFree = write_bool( P#pk_U2GS_RequestLottery.isFree ),
	Bin_number = write_uint8( P#pk_U2GS_RequestLottery.number ),
	[
		<<?U2GS_RequestLottery:?U16>>,
		Bin_isGold,
		Bin_isFree,
		Bin_number
	];

%GENERATED from file:activity.h => U2GS_RequestLotteryResetTime
encode(#pk_U2GS_RequestLotteryResetTime{}) ->
	[
		<<?U2GS_RequestLotteryResetTime:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestMarrorInfo
encode(#pk_U2GS_RequestMarrorInfo{}) ->
	[
		<<?U2GS_RequestMarrorInfo:?U16>>

	];

%GENERATED from file:activity.h => U2GS_RequestOPActivityConfList
encode(#pk_U2GS_RequestOPActivityConfList{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequestOPActivityConfList.type ),
	[
		<<?U2GS_RequestOPActivityConfList:?U16>>,
		Bin_type
	];

%GENERATED from file:activity.h => U2GS_RequestQueueNumber
encode(#pk_U2GS_RequestQueueNumber{}) ->
	[
		<<?U2GS_RequestQueueNumber:?U16>>

	];

%GENERATED from file:activity.h => U2GS_SelectCamp
encode(#pk_U2GS_SelectCamp{} = P) ->
	Bin_camp = write_uint8( P#pk_U2GS_SelectCamp.camp ),
	[
		<<?U2GS_SelectCamp:?U16>>,
		Bin_camp
	];

%GENERATED from file:activity.h => U2GS_SelectDanceID
encode(#pk_U2GS_SelectDanceID{} = P) ->
	Bin_danceID = write_uint32( P#pk_U2GS_SelectDanceID.danceID ),
	[
		<<?U2GS_SelectDanceID:?U16>>,
		Bin_danceID
	];

%GENERATED from file:activity.h => U2GS_SelfDarkness
encode(#pk_U2GS_SelfDarkness{}) ->
	[
		<<?U2GS_SelfDarkness:?U16>>

	];

%GENERATED from file:activity.h => U2GS_SevenMissionCompletion
encode(#pk_U2GS_SevenMissionCompletion{} = P) ->
	Bin_missionid = write_uint16( P#pk_U2GS_SevenMissionCompletion.missionid ),
	[
		<<?U2GS_SevenMissionCompletion:?U16>>,
		Bin_missionid
	];

%GENERATED from file:activity.h => U2GS_StartArena
encode(#pk_U2GS_StartArena{}) ->
	[
		<<?U2GS_StartArena:?U16>>

	];

%GENERATED from file:arena.h => GS2U_BattleNotes
encode(#pk_GS2U_BattleNotes{} = P) ->
	Bin_lsInfo = write_array(P#pk_GS2U_BattleNotes.lsInfo, fun(X) -> encode_LadderLS( X ) end),
	Bin_selfInfo = write_array(P#pk_GS2U_BattleNotes.selfInfo, fun(X) -> encode_LadderMatchInfo( X ) end),
	[
		<<?GS2U_BattleNotes:?U16>>,
		Bin_lsInfo,
		Bin_selfInfo
	];

%GENERATED from file:arena.h => GS2U_BattleStartSec
encode(#pk_GS2U_BattleStartSec{} = P) ->
	Bin_second = write_uint32( P#pk_GS2U_BattleStartSec.second ),
	[
		<<?GS2U_BattleStartSec:?U16>>,
		Bin_second
	];

%GENERATED from file:arena.h => GS2U_Ladder1v1BattleEnd
encode(#pk_GS2U_Ladder1v1BattleEnd{} = P) ->
	Bin_result = write_uint8( P#pk_GS2U_Ladder1v1BattleEnd.result ),
	Bin_exploit = write_uint32( P#pk_GS2U_Ladder1v1BattleEnd.exploit ),
	Bin_rank = write_uint32( P#pk_GS2U_Ladder1v1BattleEnd.rank ),
	[
		<<?GS2U_Ladder1v1BattleEnd:?U16>>,
		Bin_result,
		Bin_exploit,
		Bin_rank
	];

%GENERATED from file:arena.h => GS2U_LadderTargetList
encode(#pk_GS2U_LadderTargetList{} = P) ->
	Bin_targets = write_array(P#pk_GS2U_LadderTargetList.targets, fun(X) -> encode_LadderTargetInfo( X ) end),
	Bin_selfInfo = encode_SelfBattleInfo( P#pk_GS2U_LadderTargetList.selfInfo ),
	[
		<<?GS2U_LadderTargetList:?U16>>,
		Bin_targets,
		Bin_selfInfo
	];

%GENERATED from file:arena.h => GS2U_PrepareSec
encode(#pk_GS2U_PrepareSec{} = P) ->
	Bin_second = write_uint8( P#pk_GS2U_PrepareSec.second ),
	[
		<<?GS2U_PrepareSec:?U16>>,
		Bin_second
	];

%GENERATED from file:arena.h => GS2U_ReturnKingList
encode(#pk_GS2U_ReturnKingList{} = P) ->
	Bin_kings = write_array(P#pk_GS2U_ReturnKingList.kings, fun(X) -> encode_KingRole( X ) end),
	[
		<<?GS2U_ReturnKingList:?U16>>,
		Bin_kings
	];

%GENERATED from file:arena.h => U2GS_AtuoSubmitTask
encode(#pk_U2GS_AtuoSubmitTask{}) ->
	[
		<<?U2GS_AtuoSubmitTask:?U16>>

	];

%GENERATED from file:arena.h => U2GS_ChallengeTargetByRank
encode(#pk_U2GS_ChallengeTargetByRank{} = P) ->
	Bin_ranksort = write_uint32( P#pk_U2GS_ChallengeTargetByRank.ranksort ),
	Bin_name = write_string( P#pk_U2GS_ChallengeTargetByRank.name ),
	[
		<<?U2GS_ChallengeTargetByRank:?U16>>,
		Bin_ranksort,
		Bin_name
	];

%GENERATED from file:arena.h => U2GS_ChallengeTargetByRoleID
encode(#pk_U2GS_ChallengeTargetByRoleID{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_ChallengeTargetByRoleID.roleID ),
	[
		<<?U2GS_ChallengeTargetByRoleID:?U16>>,
		Bin_roleID
	];

%GENERATED from file:arena.h => U2GS_FreshLadderTargetList
encode(#pk_U2GS_FreshLadderTargetList{}) ->
	[
		<<?U2GS_FreshLadderTargetList:?U16>>

	];

%GENERATED from file:arena.h => U2GS_GiveUpChallenge
encode(#pk_U2GS_GiveUpChallenge{}) ->
	[
		<<?U2GS_GiveUpChallenge:?U16>>

	];

%GENERATED from file:arena.h => U2GS_OpenLadder1v1
encode(#pk_U2GS_OpenLadder1v1{}) ->
	[
		<<?U2GS_OpenLadder1v1:?U16>>

	];

%GENERATED from file:arena.h => U2GS_RequestBattleNotes
encode(#pk_U2GS_RequestBattleNotes{}) ->
	[
		<<?U2GS_RequestBattleNotes:?U16>>

	];

%GENERATED from file:arena.h => U2GS_RequestKingList
encode(#pk_U2GS_RequestKingList{}) ->
	[
		<<?U2GS_RequestKingList:?U16>>

	];

%GENERATED from file:arena.h => U2GS_RequestPlayerInfo
encode(#pk_U2GS_RequestPlayerInfo{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_RequestPlayerInfo.roleID ),
	[
		<<?U2GS_RequestPlayerInfo:?U16>>,
		Bin_roleID
	];

%GENERATED from file:arena.h => U2GS_WorshipTarget
encode(#pk_U2GS_WorshipTarget{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_WorshipTarget.roleID ),
	Bin_roleName = write_string( P#pk_U2GS_WorshipTarget.roleName ),
	[
		<<?U2GS_WorshipTarget:?U16>>,
		Bin_roleID,
		Bin_roleName
	];

%GENERATED from file:aruna.h => GS2U_FreshWWFormData
encode(#pk_GS2U_FreshWWFormData{} = P) ->
	Bin_data = encode_WWFormData( P#pk_GS2U_FreshWWFormData.data ),
	[
		<<?GS2U_FreshWWFormData:?U16>>,
		Bin_data
	];

%GENERATED from file:aruna.h => GS2U_WWEscortResult
encode(#pk_GS2U_WWEscortResult{} = P) ->
	Bin_old_phase = write_uint16( P#pk_GS2U_WWEscortResult.old_phase ),
	Bin_old_schedule = write_uint32( P#pk_GS2U_WWEscortResult.old_schedule ),
	Bin_new_phase = write_uint16( P#pk_GS2U_WWEscortResult.new_phase ),
	Bin_new_schedule = write_uint32( P#pk_GS2U_WWEscortResult.new_schedule ),
	Bin_sample_point = write_uint32( P#pk_GS2U_WWEscortResult.sample_point ),
	Bin_success = write_bool( P#pk_GS2U_WWEscortResult.success ),
	[
		<<?GS2U_WWEscortResult:?U16>>,
		Bin_old_phase,
		Bin_old_schedule,
		Bin_new_phase,
		Bin_new_schedule,
		Bin_sample_point,
		Bin_success
	];

%GENERATED from file:aruna.h => GS2U_WWFormData
encode(#pk_GS2U_WWFormData{} = P) ->
	Bin_isFreshRank = write_bool( P#pk_GS2U_WWFormData.isFreshRank ),
	Bin_isInit = write_bool( P#pk_GS2U_WWFormData.isInit ),
	Bin_rankList = write_array(P#pk_GS2U_WWFormData.rankList, fun(X) -> encode_WWRank( X ) end),
	Bin_data = encode_WWFormData( P#pk_GS2U_WWFormData.data ),
	[
		<<?GS2U_WWFormData:?U16>>,
		Bin_isFreshRank,
		Bin_isInit,
		Bin_rankList,
		Bin_data
	];

%GENERATED from file:aruna.h => GS2U_WWList
encode(#pk_GS2U_WWList{} = P) ->
	Bin_lineList = write_array(P#pk_GS2U_WWList.lineList, fun(X) -> encode_WWMapLineInfo( X ) end),
	[
		<<?GS2U_WWList:?U16>>,
		Bin_lineList
	];

%GENERATED from file:aruna.h => GS2U_WWPlayerInfo
encode(#pk_GS2U_WWPlayerInfo{} = P) ->
	Bin_contribution = write_uint32( P#pk_GS2U_WWPlayerInfo.contribution ),
	Bin_sample_point = write_uint32( P#pk_GS2U_WWPlayerInfo.sample_point ),
	[
		<<?GS2U_WWPlayerInfo:?U16>>,
		Bin_contribution,
		Bin_sample_point
	];

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfo
encode(#pk_GS2U_WWSyncMapInfo{} = P) ->
	Bin_phase = write_uint16( P#pk_GS2U_WWSyncMapInfo.phase ),
	Bin_schedule = write_uint32( P#pk_GS2U_WWSyncMapInfo.schedule ),
	Bin_acPhase = write_uint8( P#pk_GS2U_WWSyncMapInfo.acPhase ),
	Bin_upper = write_uint32( P#pk_GS2U_WWSyncMapInfo.upper ),
	[
		<<?GS2U_WWSyncMapInfo:?U16>>,
		Bin_phase,
		Bin_schedule,
		Bin_acPhase,
		Bin_upper
	];

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfoOne
encode(#pk_GS2U_WWSyncMapInfoOne{} = P) ->
	Bin_residueSec = write_uint32( P#pk_GS2U_WWSyncMapInfoOne.residueSec ),
	[
		<<?GS2U_WWSyncMapInfoOne:?U16>>,
		Bin_residueSec
	];

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfoThree
encode(#pk_GS2U_WWSyncMapInfoThree{} = P) ->
	Bin_selfServerName = write_string( P#pk_GS2U_WWSyncMapInfoThree.selfServerName ),
	Bin_selfPoint = write_uint32( P#pk_GS2U_WWSyncMapInfoThree.selfPoint ),
	Bin_targetServerName = write_string( P#pk_GS2U_WWSyncMapInfoThree.targetServerName ),
	Bin_targetPoint = write_uint32( P#pk_GS2U_WWSyncMapInfoThree.targetPoint ),
	Bin_distance = write_uint32( P#pk_GS2U_WWSyncMapInfoThree.distance ),
	[
		<<?GS2U_WWSyncMapInfoThree:?U16>>,
		Bin_selfServerName,
		Bin_selfPoint,
		Bin_targetServerName,
		Bin_targetPoint,
		Bin_distance
	];

%GENERATED from file:aruna.h => GS2U_WWSyncMapInfoTwo
encode(#pk_GS2U_WWSyncMapInfoTwo{} = P) ->
	Bin_curTimes = write_uint8( P#pk_GS2U_WWSyncMapInfoTwo.curTimes ),
	Bin_maxTimes = write_uint8( P#pk_GS2U_WWSyncMapInfoTwo.maxTimes ),
	Bin_targets = write_array(P#pk_GS2U_WWSyncMapInfoTwo.targets, fun(X) -> encode_WWSyncMapPhaseTwo( X ) end),
	[
		<<?GS2U_WWSyncMapInfoTwo:?U16>>,
		Bin_curTimes,
		Bin_maxTimes,
		Bin_targets
	];

%GENERATED from file:aruna.h => U2GS_GetLastReward
encode(#pk_U2GS_GetLastReward{}) ->
	[
		<<?U2GS_GetLastReward:?U16>>

	];

%GENERATED from file:aruna.h => U2GS_GetPhaseReward
encode(#pk_U2GS_GetPhaseReward{}) ->
	[
		<<?U2GS_GetPhaseReward:?U16>>

	];

%GENERATED from file:aruna.h => U2GS_RequestWWForm
encode(#pk_U2GS_RequestWWForm{} = P) ->
	Bin_isFreshRank = write_bool( P#pk_U2GS_RequestWWForm.isFreshRank ),
	[
		<<?U2GS_RequestWWForm:?U16>>,
		Bin_isFreshRank
	];

%GENERATED from file:aruna.h => U2GS_RequestWWLineList
encode(#pk_U2GS_RequestWWLineList{}) ->
	[
		<<?U2GS_RequestWWLineList:?U16>>

	];

%GENERATED from file:aruna.h => U2GS_RequestWWPlayerInfo
encode(#pk_U2GS_RequestWWPlayerInfo{}) ->
	[
		<<?U2GS_RequestWWPlayerInfo:?U16>>

	];

%GENERATED from file:aruna.h => U2GS_SubmitSamplePoint
encode(#pk_U2GS_SubmitSamplePoint{} = P) ->
	Bin_configID = write_uint16( P#pk_U2GS_SubmitSamplePoint.configID ),
	[
		<<?U2GS_SubmitSamplePoint:?U16>>,
		Bin_configID
	];

%GENERATED from file:aruna.h => U2GS_WWRequestEnterMapLine
encode(#pk_U2GS_WWRequestEnterMapLine{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_WWRequestEnterMapLine.mapID ),
	Bin_lineID = write_uint32( P#pk_U2GS_WWRequestEnterMapLine.lineID ),
	[
		<<?U2GS_WWRequestEnterMapLine:?U16>>,
		Bin_mapID,
		Bin_lineID
	];

%GENERATED from file:bag.h => DelImpression
encode(#pk_DelImpression{} = P) ->
	Bin_uid = write_uint16( P#pk_DelImpression.uid ),
	[
		<<?DelImpression:?U16>>,
		Bin_uid
	];

%GENERATED from file:bag.h => DelTag
encode(#pk_DelTag{} = P) ->
	Bin_index = write_uint8( P#pk_DelTag.index ),
	[
		<<?DelTag:?U16>>,
		Bin_index
	];

%GENERATED from file:bag.h => GS2U_AddEquipItemToBag
encode(#pk_GS2U_AddEquipItemToBag{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_AddEquipItemToBag.type ),
	Bin_code = write_uint64( P#pk_GS2U_AddEquipItemToBag.code ),
	Bin_items = write_array(P#pk_GS2U_AddEquipItemToBag.items, fun(X) -> encode_EquipItemInfo( X ) end),
	[
		<<?GS2U_AddEquipItemToBag:?U16>>,
		Bin_type,
		Bin_code,
		Bin_items
	];

%GENERATED from file:bag.h => GS2U_AddImpressionResult
encode(#pk_GS2U_AddImpressionResult{} = P) ->
	Bin_result = write_bool( P#pk_GS2U_AddImpressionResult.result ),
	[
		<<?GS2U_AddImpressionResult:?U16>>,
		Bin_result
	];

%GENERATED from file:bag.h => GS2U_AddNormalItemToBag
encode(#pk_GS2U_AddNormalItemToBag{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_AddNormalItemToBag.type ),
	Bin_code = write_uint64( P#pk_GS2U_AddNormalItemToBag.code ),
	Bin_addNum = write_uint32( P#pk_GS2U_AddNormalItemToBag.addNum ),
	Bin_items = write_array(P#pk_GS2U_AddNormalItemToBag.items, fun(X) -> encode_NormalItemInfo( X ) end),
	[
		<<?GS2U_AddNormalItemToBag:?U16>>,
		Bin_type,
		Bin_code,
		Bin_addNum,
		Bin_items
	];

%GENERATED from file:bag.h => GS2U_AddPraise
encode(#pk_GS2U_AddPraise{}) ->
	[
		<<?GS2U_AddPraise:?U16>>

	];

%GENERATED from file:bag.h => GS2U_AddTagResult
encode(#pk_GS2U_AddTagResult{} = P) ->
	Bin_result = write_bool( P#pk_GS2U_AddTagResult.result ),
	[
		<<?GS2U_AddTagResult:?U16>>,
		Bin_result
	];

%GENERATED from file:bag.h => GS2U_DeleteGoods
encode(#pk_GS2U_DeleteGoods{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_DeleteGoods.type ),
	Bin_goodsUIDs = write_array(P#pk_GS2U_DeleteGoods.goodsUIDs, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_DeleteGoods:?U16>>,
		Bin_type,
		Bin_goodsUIDs
	];

%GENERATED from file:bag.h => GS2U_EquipEnhancedProp
encode(#pk_GS2U_EquipEnhancedProp{} = P) ->
	Bin_equipUID = write_uint64( P#pk_GS2U_EquipEnhancedProp.equipUID ),
	Bin_enProps = write_array(P#pk_GS2U_EquipEnhancedProp.enProps, fun(X) -> encode_EquipEnhancedProp( X ) end),
	Bin_price = write_uint32( P#pk_GS2U_EquipEnhancedProp.price ),
	[
		<<?GS2U_EquipEnhancedProp:?U16>>,
		Bin_equipUID,
		Bin_enProps,
		Bin_price
	];

%GENERATED from file:bag.h => GS2U_EquipGemInfoUpdate
encode(#pk_GS2U_EquipGemInfoUpdate{} = P) ->
	Bin_equipGemInfo = encode_EquipGemInfo( P#pk_GS2U_EquipGemInfoUpdate.equipGemInfo ),
	[
		<<?GS2U_EquipGemInfoUpdate:?U16>>,
		Bin_equipGemInfo
	];

%GENERATED from file:bag.h => GS2U_EquipGemInfos
encode(#pk_GS2U_EquipGemInfos{} = P) ->
	Bin_equipGemInfos = write_array(P#pk_GS2U_EquipGemInfos.equipGemInfos, fun(X) -> encode_EquipGemInfo( X ) end),
	[
		<<?GS2U_EquipGemInfos:?U16>>,
		Bin_equipGemInfos
	];

%GENERATED from file:bag.h => GS2U_EquipRecastInfo
encode(#pk_GS2U_EquipRecastInfo{} = P) ->
	Bin_recastType = write_uint16( P#pk_GS2U_EquipRecastInfo.recastType ),
	Bin_score = write_uint16( P#pk_GS2U_EquipRecastInfo.score ),
	Bin_recastInfo = encode_RecastPosInfo( P#pk_GS2U_EquipRecastInfo.recastInfo ),
	[
		<<?GS2U_EquipRecastInfo:?U16>>,
		Bin_recastType,
		Bin_score,
		Bin_recastInfo
	];

%GENERATED from file:bag.h => GS2U_EquipRecastInfoInit
encode(#pk_GS2U_EquipRecastInfoInit{} = P) ->
	Bin_recastInfoList = write_array(P#pk_GS2U_EquipRecastInfoInit.recastInfoList, fun(X) -> encode_RecastPosInfo( X ) end),
	[
		<<?GS2U_EquipRecastInfoInit:?U16>>,
		Bin_recastInfoList
	];

%GENERATED from file:bag.h => GS2U_EquipRefineLevel
encode(#pk_GS2U_EquipRefineLevel{} = P) ->
	Bin_equipRefines = write_array(P#pk_GS2U_EquipRefineLevel.equipRefines, fun(X) -> encode_EquipRefineLevel( X ) end),
	[
		<<?GS2U_EquipRefineLevel:?U16>>,
		Bin_equipRefines
	];

%GENERATED from file:bag.h => GS2U_EquipRefineResult
encode(#pk_GS2U_EquipRefineResult{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_EquipRefineResult.code ),
	Bin_type = write_uint8( P#pk_GS2U_EquipRefineResult.type ),
	Bin_bless = write_uint16( P#pk_GS2U_EquipRefineResult.bless ),
	Bin_level = write_uint8( P#pk_GS2U_EquipRefineResult.level ),
	[
		<<?GS2U_EquipRefineResult:?U16>>,
		Bin_code,
		Bin_type,
		Bin_bless,
		Bin_level
	];

%GENERATED from file:bag.h => GS2U_EquipRefineResultOneKey
encode(#pk_GS2U_EquipRefineResultOneKey{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_EquipRefineResultOneKey.code ),
	Bin_levelOld = write_uint8( P#pk_GS2U_EquipRefineResultOneKey.levelOld ),
	Bin_levelNew = write_uint8( P#pk_GS2U_EquipRefineResultOneKey.levelNew ),
	Bin_typeList = write_array(P#pk_GS2U_EquipRefineResultOneKey.typeList, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_EquipRefineResultOneKey:?U16>>,
		Bin_code,
		Bin_levelOld,
		Bin_levelNew,
		Bin_typeList
	];

%GENERATED from file:bag.h => GS2U_EquipUpStarInfoList
encode(#pk_GS2U_EquipUpStarInfoList{} = P) ->
	Bin_equipUpStars = write_array(P#pk_GS2U_EquipUpStarInfoList.equipUpStars, fun(X) -> encode_EquipUpStarInfo( X ) end),
	[
		<<?GS2U_EquipUpStarInfoList:?U16>>,
		Bin_equipUpStars
	];

%GENERATED from file:bag.h => GS2U_EquipUpStarRes
encode(#pk_GS2U_EquipUpStarRes{} = P) ->
	Bin_equipUpStarInfo = encode_EquipUpStarInfo( P#pk_GS2U_EquipUpStarRes.equipUpStarInfo ),
	Bin_type = write_uint8( P#pk_GS2U_EquipUpStarRes.type ),
	Bin_index = write_uint16( P#pk_GS2U_EquipUpStarRes.index ),
	Bin_costList = write_array(P#pk_GS2U_EquipUpStarRes.costList, fun(X) -> encode_starCostItem( X ) end),
	Bin_coin = write_uint32( P#pk_GS2U_EquipUpStarRes.coin ),
	Bin_res = write_uint8( P#pk_GS2U_EquipUpStarRes.res ),
	[
		<<?GS2U_EquipUpStarRes:?U16>>,
		Bin_equipUpStarInfo,
		Bin_type,
		Bin_index,
		Bin_costList,
		Bin_coin,
		Bin_res
	];

%GENERATED from file:bag.h => GS2U_EqupmentCombinAck
encode(#pk_GS2U_EqupmentCombinAck{} = P) ->
	Bin_combinID = write_uint32( P#pk_GS2U_EqupmentCombinAck.combinID ),
	Bin_success = write_bool( P#pk_GS2U_EqupmentCombinAck.success ),
	Bin_items = write_array(P#pk_GS2U_EqupmentCombinAck.items, fun(X) -> encode_EquipItemInfo( X ) end),
	[
		<<?GS2U_EqupmentCombinAck:?U16>>,
		Bin_combinID,
		Bin_success,
		Bin_items
	];

%GENERATED from file:bag.h => GS2U_ExchangeResult
encode(#pk_GS2U_ExchangeResult{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_ExchangeResult.id ),
	Bin_itemCount = write_uint16( P#pk_GS2U_ExchangeResult.itemCount ),
	[
		<<?GS2U_ExchangeResult:?U16>>,
		Bin_id,
		Bin_itemCount
	];

%GENERATED from file:bag.h => GS2U_Forbidden_Load_Photo
encode(#pk_GS2U_Forbidden_Load_Photo{} = P) ->
	Bin_forbiddenTime = write_uint64( P#pk_GS2U_Forbidden_Load_Photo.forbiddenTime ),
	[
		<<?GS2U_Forbidden_Load_Photo:?U16>>,
		Bin_forbiddenTime
	];

%GENERATED from file:bag.h => GS2U_GainPraise
encode(#pk_GS2U_GainPraise{}) ->
	[
		<<?GS2U_GainPraise:?U16>>

	];

%GENERATED from file:bag.h => GS2U_GemEmbedAdd
encode(#pk_GS2U_GemEmbedAdd{} = P) ->
	Bin_gemEmbedInfo = encode_GemEmbedInfo( P#pk_GS2U_GemEmbedAdd.gemEmbedInfo ),
	[
		<<?GS2U_GemEmbedAdd:?U16>>,
		Bin_gemEmbedInfo
	];

%GENERATED from file:bag.h => GS2U_GemEmbedDelete
encode(#pk_GS2U_GemEmbedDelete{} = P) ->
	Bin_gemUIDs = write_array(P#pk_GS2U_GemEmbedDelete.gemUIDs, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_GemEmbedDelete:?U16>>,
		Bin_gemUIDs
	];

%GENERATED from file:bag.h => GS2U_GemEmbedInit
encode(#pk_GS2U_GemEmbedInit{} = P) ->
	Bin_gemEmbedInfos = write_array(P#pk_GS2U_GemEmbedInit.gemEmbedInfos, fun(X) -> encode_GemEmbedInfo( X ) end),
	[
		<<?GS2U_GemEmbedInit:?U16>>,
		Bin_gemEmbedInfos
	];

%GENERATED from file:bag.h => GS2U_GemEmbedMakeResult
encode(#pk_GS2U_GemEmbedMakeResult{} = P) ->
	Bin_gemUID = write_uint64( P#pk_GS2U_GemEmbedMakeResult.gemUID ),
	[
		<<?GS2U_GemEmbedMakeResult:?U16>>,
		Bin_gemUID
	];

%GENERATED from file:bag.h => GS2U_GetEssenceNum
encode(#pk_GS2U_GetEssenceNum{} = P) ->
	Bin_purpleEssence = write_uint32( P#pk_GS2U_GetEssenceNum.purpleEssence ),
	Bin_goldenEssence = write_uint32( P#pk_GS2U_GetEssenceNum.goldenEssence ),
	Bin_itemList = write_array(P#pk_GS2U_GetEssenceNum.itemList, fun(X) -> encode_washReturnItemInfo( X ) end),
	[
		<<?GS2U_GetEssenceNum:?U16>>,
		Bin_purpleEssence,
		Bin_goldenEssence,
		Bin_itemList
	];

%GENERATED from file:bag.h => GS2U_InitEquip
encode(#pk_GS2U_InitEquip{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_InitEquip.type ),
	Bin_items = write_array(P#pk_GS2U_InitEquip.items, fun(X) -> encode_EquipItemInfo( X ) end),
	[
		<<?GS2U_InitEquip:?U16>>,
		Bin_type,
		Bin_items
	];

%GENERATED from file:bag.h => GS2U_InitItem
encode(#pk_GS2U_InitItem{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_InitItem.type ),
	Bin_items = write_array(P#pk_GS2U_InitItem.items, fun(X) -> encode_NormalItemInfo( X ) end),
	[
		<<?GS2U_InitItem:?U16>>,
		Bin_type,
		Bin_items
	];

%GENERATED from file:bag.h => GS2U_InitRecycle
encode(#pk_GS2U_InitRecycle{} = P) ->
	Bin_items = write_array(P#pk_GS2U_InitRecycle.items, fun(X) -> encode_RecycleItem( X ) end),
	Bin_equips = write_array(P#pk_GS2U_InitRecycle.equips, fun(X) -> encode_RecycleEquip( X ) end),
	[
		<<?GS2U_InitRecycle:?U16>>,
		Bin_items,
		Bin_equips
	];

%GENERATED from file:bag.h => GS2U_InitSlot
encode(#pk_GS2U_InitSlot{} = P) ->
	Bin_slots = write_array(P#pk_GS2U_InitSlot.slots, fun(X) -> encode_BagSlot( X ) end),
	[
		<<?GS2U_InitSlot:?U16>>,
		Bin_slots
	];

%GENERATED from file:bag.h => GS2U_LockGoods
encode(#pk_GS2U_LockGoods{} = P) ->
	Bin_goodsUID = write_uint64( P#pk_GS2U_LockGoods.goodsUID ),
	Bin_bagType = write_uint8( P#pk_GS2U_LockGoods.bagType ),
	Bin_isLocked = write_bool( P#pk_GS2U_LockGoods.isLocked ),
	[
		<<?GS2U_LockGoods:?U16>>,
		Bin_goodsUID,
		Bin_bagType,
		Bin_isLocked
	];

%GENERATED from file:bag.h => GS2U_LookRPInfo_Fashion
encode(#pk_GS2U_LookRPInfo_Fashion{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_LookRPInfo_Fashion.roleID ),
	Bin_datas = write_array(P#pk_GS2U_LookRPInfo_Fashion.datas, fun(X) -> encode_RPView_FashionInfo( X ) end),
	Bin_activeFashionSuitList = write_array(P#pk_GS2U_LookRPInfo_Fashion.activeFashionSuitList, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_LookRPInfo_Fashion:?U16>>,
		Bin_roleID,
		Bin_datas,
		Bin_activeFashionSuitList
	];

%GENERATED from file:bag.h => GS2U_LookRPInfo_Marriage
encode(#pk_GS2U_LookRPInfo_Marriage{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_LookRPInfo_Marriage.roleID ),
	Bin_id = write_uint64( P#pk_GS2U_LookRPInfo_Marriage.id ),
	Bin_name = write_string( P#pk_GS2U_LookRPInfo_Marriage.name ),
	Bin_sex = write_uint8( P#pk_GS2U_LookRPInfo_Marriage.sex ),
	Bin_weddingDay = write_uint32( P#pk_GS2U_LookRPInfo_Marriage.weddingDay ),
	Bin_closeness = write_uint32( P#pk_GS2U_LookRPInfo_Marriage.closeness ),
	[
		<<?GS2U_LookRPInfo_Marriage:?U16>>,
		Bin_roleID,
		Bin_id,
		Bin_name,
		Bin_sex,
		Bin_weddingDay,
		Bin_closeness
	];

%GENERATED from file:bag.h => GS2U_LookRPInfo_Pet
encode(#pk_GS2U_LookRPInfo_Pet{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_LookRPInfo_Pet.roleID ),
	Bin_petInfoList = write_array(P#pk_GS2U_LookRPInfo_Pet.petInfoList, fun(X) -> encode_RPView_PetBaseInfo( X ) end),
	Bin_infoList = write_array(P#pk_GS2U_LookRPInfo_Pet.infoList, fun(X) -> encode_RPView_AssistBattleInfo( X ) end),
	[
		<<?GS2U_LookRPInfo_Pet:?U16>>,
		Bin_roleID,
		Bin_petInfoList,
		Bin_infoList
	];

%GENERATED from file:bag.h => GS2U_LookRPInfo_Result
encode(#pk_GS2U_LookRPInfo_Result{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_LookRPInfo_Result.roleID ),
	Bin_roleName = write_string( P#pk_GS2U_LookRPInfo_Result.roleName ),
	Bin_career = write_uint32( P#pk_GS2U_LookRPInfo_Result.career ),
	Bin_race = write_int8( P#pk_GS2U_LookRPInfo_Result.race ),
	Bin_sex = write_int8( P#pk_GS2U_LookRPInfo_Result.sex ),
	Bin_head = write_uint32( P#pk_GS2U_LookRPInfo_Result.head ),
	Bin_frameID = write_uint16( P#pk_GS2U_LookRPInfo_Result.frameID ),
	Bin_level = write_uint8( P#pk_GS2U_LookRPInfo_Result.level ),
	Bin_roleForce = write_uint32( P#pk_GS2U_LookRPInfo_Result.roleForce ),
	Bin_equipHonorLevel = write_uint8( P#pk_GS2U_LookRPInfo_Result.equipHonorLevel ),
	Bin_guildName = write_string( P#pk_GS2U_LookRPInfo_Result.guildName ),
	Bin_playerKillValue = write_int32( P#pk_GS2U_LookRPInfo_Result.playerKillValue ),
	Bin_wingLevel = write_int32( P#pk_GS2U_LookRPInfo_Result.wingLevel ),
	Bin_propValues = write_array(P#pk_GS2U_LookRPInfo_Result.propValues, fun(X) -> write_float( X ) end),
	Bin_equips = write_array(P#pk_GS2U_LookRPInfo_Result.equips, fun(X) -> encode_EquipItemInfo( X ) end),
	Bin_fashionList = write_array(P#pk_GS2U_LookRPInfo_Result.fashionList, fun(X) -> write_uint32( X ) end),
	Bin_equipRefines = write_array(P#pk_GS2U_LookRPInfo_Result.equipRefines, fun(X) -> encode_EquipRefineLevel( X ) end),
	Bin_equipStar = write_array(P#pk_GS2U_LookRPInfo_Result.equipStar, fun(X) -> encode_EquipStarLevel( X ) end),
	Bin_equipGemInfos = write_array(P#pk_GS2U_LookRPInfo_Result.equipGemInfos, fun(X) -> encode_EquipGemInfo( X ) end),
	Bin_recastInfoList = write_array(P#pk_GS2U_LookRPInfo_Result.recastInfoList, fun(X) -> encode_RecastPosInfo( X ) end),
	[
		<<?GS2U_LookRPInfo_Result:?U16>>,
		Bin_roleID,
		Bin_roleName,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_level,
		Bin_roleForce,
		Bin_equipHonorLevel,
		Bin_guildName,
		Bin_playerKillValue,
		Bin_wingLevel,
		Bin_propValues,
		Bin_equips,
		Bin_fashionList,
		Bin_equipRefines,
		Bin_equipStar,
		Bin_equipGemInfos,
		Bin_recastInfoList
	];

%GENERATED from file:bag.h => GS2U_PlayerExtenInfo
encode(#pk_GS2U_PlayerExtenInfo{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_PlayerExtenInfo.type ),
	[
		<<?GS2U_PlayerExtenInfo:?U16>>,
		Bin_type
	];

%GENERATED from file:bag.h => GS2U_QueryEquipResult
encode(#pk_GS2U_QueryEquipResult{} = P) ->
	Bin_equipInfo = encode_EquipItemInfo( P#pk_GS2U_QueryEquipResult.equipInfo ),
	[
		<<?GS2U_QueryEquipResult:?U16>>,
		Bin_equipInfo
	];

%GENERATED from file:bag.h => GS2U_QueryItemResult
encode(#pk_GS2U_QueryItemResult{} = P) ->
	Bin_itemInfo = encode_NormalItemInfo( P#pk_GS2U_QueryItemResult.itemInfo ),
	[
		<<?GS2U_QueryItemResult:?U16>>,
		Bin_itemInfo
	];

%GENERATED from file:bag.h => GS2U_Report
encode(#pk_GS2U_Report{}) ->
	[
		<<?GS2U_Report:?U16>>

	];

%GENERATED from file:bag.h => GS2U_Report_Max
encode(#pk_GS2U_Report_Max{}) ->
	[
		<<?GS2U_Report_Max:?U16>>

	];

%GENERATED from file:bag.h => GS2U_RequesBuyIDAck
encode(#pk_GS2U_RequesBuyIDAck{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_RequesBuyIDAck.type ),
	Bin_id = write_uint32( P#pk_GS2U_RequesBuyIDAck.id ),
	Bin_succ = write_bool( P#pk_GS2U_RequesBuyIDAck.succ ),
	[
		<<?GS2U_RequesBuyIDAck:?U16>>,
		Bin_type,
		Bin_id,
		Bin_succ
	];

%GENERATED from file:bag.h => GS2U_RequestExchangeResourceForeverLimitIDAck
encode(#pk_GS2U_RequestExchangeResourceForeverLimitIDAck{} = P) ->
	Bin_iDList = write_array(P#pk_GS2U_RequestExchangeResourceForeverLimitIDAck.iDList, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_RequestExchangeResourceForeverLimitIDAck:?U16>>,
		Bin_iDList
	];

%GENERATED from file:bag.h => GS2U_RequestForeverLimitIDAck
encode(#pk_GS2U_RequestForeverLimitIDAck{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_RequestForeverLimitIDAck.type ),
	Bin_iDList = write_array(P#pk_GS2U_RequestForeverLimitIDAck.iDList, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_RequestForeverLimitIDAck:?U16>>,
		Bin_type,
		Bin_iDList
	];

%GENERATED from file:bag.h => GS2U_ResourceExchangeList
encode(#pk_GS2U_ResourceExchangeList{} = P) ->
	Bin_resources = write_array(P#pk_GS2U_ResourceExchangeList.resources, fun(X) -> encode_ExchangeResource( X ) end),
	[
		<<?GS2U_ResourceExchangeList:?U16>>,
		Bin_resources
	];

%GENERATED from file:bag.h => GS2U_UpLoadingPhotoResult
encode(#pk_GS2U_UpLoadingPhotoResult{} = P) ->
	Bin_result = write_bool( P#pk_GS2U_UpLoadingPhotoResult.result ),
	[
		<<?GS2U_UpLoadingPhotoResult:?U16>>,
		Bin_result
	];

%GENERATED from file:bag.h => GS2U_UpdateEquipItem
encode(#pk_GS2U_UpdateEquipItem{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_UpdateEquipItem.type ),
	Bin_operate = write_uint8( P#pk_GS2U_UpdateEquipItem.operate ),
	Bin_items = write_array(P#pk_GS2U_UpdateEquipItem.items, fun(X) -> encode_EquipItemInfo( X ) end),
	[
		<<?GS2U_UpdateEquipItem:?U16>>,
		Bin_type,
		Bin_operate,
		Bin_items
	];

%GENERATED from file:bag.h => GS2U_UpdateFurnitureStorageSlot
encode(#pk_GS2U_UpdateFurnitureStorageSlot{} = P) ->
	Bin_slotNum = write_uint8( P#pk_GS2U_UpdateFurnitureStorageSlot.slotNum ),
	[
		<<?GS2U_UpdateFurnitureStorageSlot:?U16>>,
		Bin_slotNum
	];

%GENERATED from file:bag.h => GS2U_UpdateNormalItem
encode(#pk_GS2U_UpdateNormalItem{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_UpdateNormalItem.type ),
	Bin_items = write_array(P#pk_GS2U_UpdateNormalItem.items, fun(X) -> encode_NormalItemInfo( X ) end),
	[
		<<?GS2U_UpdateNormalItem:?U16>>,
		Bin_type,
		Bin_items
	];

%GENERATED from file:bag.h => GS2U_UseItemFireWorksNotice
encode(#pk_GS2U_UseItemFireWorksNotice{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_UseItemFireWorksNotice.roleID ),
	[
		<<?GS2U_UseItemFireWorksNotice:?U16>>,
		Bin_roleID
	];

%GENERATED from file:bag.h => GS2U_WashEquip
encode(#pk_GS2U_WashEquip{} = P) ->
	Bin_equipPos = write_uint16( P#pk_GS2U_WashEquip.equipPos ),
	Bin_index = write_uint16( P#pk_GS2U_WashEquip.index ),
	Bin_propInfo = encode_EquipPropInfo( P#pk_GS2U_WashEquip.propInfo ),
	[
		<<?GS2U_WashEquip:?U16>>,
		Bin_equipPos,
		Bin_index,
		Bin_propInfo
	];

%GENERATED from file:bag.h => GS2u_OwnPortraitFrame
encode(#pk_GS2u_OwnPortraitFrame{} = P) ->
	Bin_state = write_uint8( P#pk_GS2u_OwnPortraitFrame.state ),
	Bin_portraitFrameList = write_array(P#pk_GS2u_OwnPortraitFrame.portraitFrameList, fun(X) -> encode_PortraitFrame( X ) end),
	[
		<<?GS2u_OwnPortraitFrame:?U16>>,
		Bin_state,
		Bin_portraitFrameList
	];

%GENERATED from file:bag.h => MoveGoods
encode(#pk_MoveGoods{} = P) ->
	Bin_itemUID = write_uint64( P#pk_MoveGoods.itemUID ),
	Bin_source = write_uint8( P#pk_MoveGoods.source ),
	Bin_target = write_uint8( P#pk_MoveGoods.target ),
	[
		<<?MoveGoods:?U16>>,
		Bin_itemUID,
		Bin_source,
		Bin_target
	];

%GENERATED from file:bag.h => OpenNewBagSlot
encode(#pk_OpenNewBagSlot{} = P) ->
	Bin_bagType = write_uint8( P#pk_OpenNewBagSlot.bagType ),
	Bin_openNum = write_uint8( P#pk_OpenNewBagSlot.openNum ),
	[
		<<?OpenNewBagSlot:?U16>>,
		Bin_bagType,
		Bin_openNum
	];

%GENERATED from file:bag.h => U2GS_AddImpression
encode(#pk_U2GS_AddImpression{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_AddImpression.roleID ),
	Bin_impression = write_string( P#pk_U2GS_AddImpression.impression ),
	[
		<<?U2GS_AddImpression:?U16>>,
		Bin_roleID,
		Bin_impression
	];

%GENERATED from file:bag.h => U2GS_AddPraise
encode(#pk_U2GS_AddPraise{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_AddPraise.roleID ),
	[
		<<?U2GS_AddPraise:?U16>>,
		Bin_roleID
	];

%GENERATED from file:bag.h => U2GS_AddTag
encode(#pk_U2GS_AddTag{} = P) ->
	Bin_tag = write_string( P#pk_U2GS_AddTag.tag ),
	[
		<<?U2GS_AddTag:?U16>>,
		Bin_tag
	];

%GENERATED from file:bag.h => U2GS_EquipEnhanced
encode(#pk_U2GS_EquipEnhanced{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_EquipEnhanced.type ),
	Bin_equipUID = write_uint64( P#pk_U2GS_EquipEnhanced.equipUID ),
	[
		<<?U2GS_EquipEnhanced:?U16>>,
		Bin_type,
		Bin_equipUID
	];

%GENERATED from file:bag.h => U2GS_EquipRecast
encode(#pk_U2GS_EquipRecast{} = P) ->
	Bin_equipPos = write_uint16( P#pk_U2GS_EquipRecast.equipPos ),
	[
		<<?U2GS_EquipRecast:?U16>>,
		Bin_equipPos
	];

%GENERATED from file:bag.h => U2GS_EquipRecastAdvance
encode(#pk_U2GS_EquipRecastAdvance{} = P) ->
	Bin_equipPos = write_uint16( P#pk_U2GS_EquipRecastAdvance.equipPos ),
	Bin_pos = write_uint16( P#pk_U2GS_EquipRecastAdvance.pos ),
	[
		<<?U2GS_EquipRecastAdvance:?U16>>,
		Bin_equipPos,
		Bin_pos
	];

%GENERATED from file:bag.h => U2GS_EquipRefine
encode(#pk_U2GS_EquipRefine{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_EquipRefine.type ),
	Bin_goodluckCharmId = write_uint16( P#pk_U2GS_EquipRefine.goodluckCharmId ),
	[
		<<?U2GS_EquipRefine:?U16>>,
		Bin_type,
		Bin_goodluckCharmId
	];

%GENERATED from file:bag.h => U2GS_EquipRefineOneKey
encode(#pk_U2GS_EquipRefineOneKey{}) ->
	[
		<<?U2GS_EquipRefineOneKey:?U16>>

	];

%GENERATED from file:bag.h => U2GS_EquipResolve
encode(#pk_U2GS_EquipResolve{} = P) ->
	Bin_equipUIDs = write_array(P#pk_U2GS_EquipResolve.equipUIDs, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_EquipResolve:?U16>>,
		Bin_equipUIDs
	];

%GENERATED from file:bag.h => U2GS_EquipUpStar
encode(#pk_U2GS_EquipUpStar{} = P) ->
	Bin_pos = write_uint8( P#pk_U2GS_EquipUpStar.pos ),
	Bin_type = write_uint8( P#pk_U2GS_EquipUpStar.type ),
	[
		<<?U2GS_EquipUpStar:?U16>>,
		Bin_pos,
		Bin_type
	];

%GENERATED from file:bag.h => U2GS_EquipUpStarOneKey
encode(#pk_U2GS_EquipUpStarOneKey{}) ->
	[
		<<?U2GS_EquipUpStarOneKey:?U16>>

	];

%GENERATED from file:bag.h => U2GS_GemEmbedMake
encode(#pk_U2GS_GemEmbedMake{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_GemEmbedMake.id ),
	Bin_count = write_uint32( P#pk_U2GS_GemEmbedMake.count ),
	Bin_flag = write_uint8( P#pk_U2GS_GemEmbedMake.flag ),
	[
		<<?U2GS_GemEmbedMake:?U16>>,
		Bin_id,
		Bin_count,
		Bin_flag
	];

%GENERATED from file:bag.h => U2GS_GemEmbedMakeOnce
encode(#pk_U2GS_GemEmbedMakeOnce{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_GemEmbedMakeOnce.id ),
	Bin_bindCount = write_uint32( P#pk_U2GS_GemEmbedMakeOnce.bindCount ),
	Bin_unBindCount = write_uint32( P#pk_U2GS_GemEmbedMakeOnce.unBindCount ),
	[
		<<?U2GS_GemEmbedMakeOnce:?U16>>,
		Bin_id,
		Bin_bindCount,
		Bin_unBindCount
	];

%GENERATED from file:bag.h => U2GS_GemEmbedOff
encode(#pk_U2GS_GemEmbedOff{} = P) ->
	Bin_gemUIDs = write_array(P#pk_U2GS_GemEmbedOff.gemUIDs, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_GemEmbedOff:?U16>>,
		Bin_gemUIDs
	];

%GENERATED from file:bag.h => U2GS_GemEmbedOn
encode(#pk_U2GS_GemEmbedOn{} = P) ->
	Bin_gemEmbedInfoList = write_array(P#pk_U2GS_GemEmbedOn.gemEmbedInfoList, fun(X) -> encode_GemEmbedInfo( X ) end),
	[
		<<?U2GS_GemEmbedOn:?U16>>,
		Bin_gemEmbedInfoList
	];

%GENERATED from file:bag.h => U2GS_GemOperate
encode(#pk_U2GS_GemOperate{} = P) ->
	Bin_opType = write_uint16( P#pk_U2GS_GemOperate.opType ),
	Bin_equipPos = write_uint16( P#pk_U2GS_GemOperate.equipPos ),
	Bin_gemPos = write_uint8( P#pk_U2GS_GemOperate.gemPos ),
	Bin_params = write_uint64( P#pk_U2GS_GemOperate.params ),
	[
		<<?U2GS_GemOperate:?U16>>,
		Bin_opType,
		Bin_equipPos,
		Bin_gemPos,
		Bin_params
	];

%GENERATED from file:bag.h => U2GS_GetPortraitFrameList
encode(#pk_U2GS_GetPortraitFrameList{}) ->
	[
		<<?U2GS_GetPortraitFrameList:?U16>>

	];

%GENERATED from file:bag.h => U2GS_HonorLevel
encode(#pk_U2GS_HonorLevel{}) ->
	[
		<<?U2GS_HonorLevel:?U16>>

	];

%GENERATED from file:bag.h => U2GS_LockGoods
encode(#pk_U2GS_LockGoods{} = P) ->
	Bin_goodsUID = write_uint64( P#pk_U2GS_LockGoods.goodsUID ),
	Bin_bagType = write_uint8( P#pk_U2GS_LockGoods.bagType ),
	[
		<<?U2GS_LockGoods:?U16>>,
		Bin_goodsUID,
		Bin_bagType
	];

%GENERATED from file:bag.h => U2GS_LookRPInfo_Request
encode(#pk_U2GS_LookRPInfo_Request{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_LookRPInfo_Request.roleID ),
	Bin_view_type = write_uint8( P#pk_U2GS_LookRPInfo_Request.view_type ),
	[
		<<?U2GS_LookRPInfo_Request:?U16>>,
		Bin_roleID,
		Bin_view_type
	];

%GENERATED from file:bag.h => U2GS_OperatePortraitFrame
encode(#pk_U2GS_OperatePortraitFrame{} = P) ->
	Bin_state = write_uint8( P#pk_U2GS_OperatePortraitFrame.state ),
	Bin_id = write_uint16( P#pk_U2GS_OperatePortraitFrame.id ),
	[
		<<?U2GS_OperatePortraitFrame:?U16>>,
		Bin_state,
		Bin_id
	];

%GENERATED from file:bag.h => U2GS_PlayerExtenInfo
encode(#pk_U2GS_PlayerExtenInfo{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_PlayerExtenInfo.type ),
	Bin_info = write_string( P#pk_U2GS_PlayerExtenInfo.info ),
	[
		<<?U2GS_PlayerExtenInfo:?U16>>,
		Bin_type,
		Bin_info
	];

%GENERATED from file:bag.h => U2GS_QueryEquipByUID
encode(#pk_U2GS_QueryEquipByUID{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_QueryEquipByUID.roleID ),
	Bin_equipUID = write_uint64( P#pk_U2GS_QueryEquipByUID.equipUID ),
	[
		<<?U2GS_QueryEquipByUID:?U16>>,
		Bin_roleID,
		Bin_equipUID
	];

%GENERATED from file:bag.h => U2GS_Report
encode(#pk_U2GS_Report{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_Report.roleID ),
	[
		<<?U2GS_Report:?U16>>,
		Bin_roleID
	];

%GENERATED from file:bag.h => U2GS_RequesBuyID
encode(#pk_U2GS_RequesBuyID{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequesBuyID.type ),
	Bin_id = write_uint32( P#pk_U2GS_RequesBuyID.id ),
	[
		<<?U2GS_RequesBuyID:?U16>>,
		Bin_type,
		Bin_id
	];

%GENERATED from file:bag.h => U2GS_RequesForeverLimitID
encode(#pk_U2GS_RequesForeverLimitID{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequesForeverLimitID.type ),
	[
		<<?U2GS_RequesForeverLimitID:?U16>>,
		Bin_type
	];

%GENERATED from file:bag.h => U2GS_RequestExchangeResource
encode(#pk_U2GS_RequestExchangeResource{}) ->
	[
		<<?U2GS_RequestExchangeResource:?U16>>

	];

%GENERATED from file:bag.h => U2GS_RequestExchangeResourceForeverLimitID
encode(#pk_U2GS_RequestExchangeResourceForeverLimitID{}) ->
	[
		<<?U2GS_RequestExchangeResourceForeverLimitID:?U16>>

	];

%GENERATED from file:bag.h => U2GS_ResourceExchange
encode(#pk_U2GS_ResourceExchange{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_ResourceExchange.id ),
	Bin_itemCount = write_uint16( P#pk_U2GS_ResourceExchange.itemCount ),
	Bin_opType = write_uint16( P#pk_U2GS_ResourceExchange.opType ),
	[
		<<?U2GS_ResourceExchange:?U16>>,
		Bin_id,
		Bin_itemCount,
		Bin_opType
	];

%GENERATED from file:bag.h => U2GS_SellAllEquip
encode(#pk_U2GS_SellAllEquip{}) ->
	[
		<<?U2GS_SellAllEquip:?U16>>

	];

%GENERATED from file:bag.h => U2GS_SharedEquip
encode(#pk_U2GS_SharedEquip{} = P) ->
	Bin_equipUIDs = write_array(P#pk_U2GS_SharedEquip.equipUIDs, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_SharedEquip:?U16>>,
		Bin_equipUIDs
	];

%GENERATED from file:bag.h => U2GS_SortItem
encode(#pk_U2GS_SortItem{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_SortItem.type ),
	[
		<<?U2GS_SortItem:?U16>>,
		Bin_type
	];

%GENERATED from file:bag.h => U2GS_UseItem
encode(#pk_U2GS_UseItem{} = P) ->
	Bin_itemUID = write_uint64( P#pk_U2GS_UseItem.itemUID ),
	Bin_useNum = write_uint16( P#pk_U2GS_UseItem.useNum ),
	[
		<<?U2GS_UseItem:?U16>>,
		Bin_itemUID,
		Bin_useNum
	];

%GENERATED from file:bag.h => U2GS_UseMarriageTitleItem
encode(#pk_U2GS_UseMarriageTitleItem{} = P) ->
	Bin_itemUID = write_uint64( P#pk_U2GS_UseMarriageTitleItem.itemUID ),
	Bin_useNum = write_uint16( P#pk_U2GS_UseMarriageTitleItem.useNum ),
	Bin_text = write_string( P#pk_U2GS_UseMarriageTitleItem.text ),
	[
		<<?U2GS_UseMarriageTitleItem:?U16>>,
		Bin_itemUID,
		Bin_useNum,
		Bin_text
	];

%GENERATED from file:bag.h => U2GS_WashEquip
encode(#pk_U2GS_WashEquip{} = P) ->
	Bin_equipPos = write_uint16( P#pk_U2GS_WashEquip.equipPos ),
	Bin_propID = write_uint16( P#pk_U2GS_WashEquip.propID ),
	Bin_propValue = write_float( P#pk_U2GS_WashEquip.propValue ),
	Bin_index = write_uint16( P#pk_U2GS_WashEquip.index ),
	[
		<<?U2GS_WashEquip:?U16>>,
		Bin_equipPos,
		Bin_propID,
		Bin_propValue,
		Bin_index
	];

%GENERATED from file:bag.h => UpLoadingPhoto
encode(#pk_UpLoadingPhoto{} = P) ->
	Bin_type = write_uint8( P#pk_UpLoadingPhoto.type ),
	Bin_roleID = write_uint64( P#pk_UpLoadingPhoto.roleID ),
	Bin_sectionNum = write_uint8( P#pk_UpLoadingPhoto.sectionNum ),
	Bin_sectionIndex = write_uint8( P#pk_UpLoadingPhoto.sectionIndex ),
	Bin_data = write_array(P#pk_UpLoadingPhoto.data, fun(X) -> write_uint8( X ) end),
	[
		<<?UpLoadingPhoto:?U16>>,
		Bin_type,
		Bin_roleID,
		Bin_sectionNum,
		Bin_sectionIndex,
		Bin_data
	];

%GENERATED from file:battle.h => C2S_PlayerUseShiftSkill
encode(#pk_C2S_PlayerUseShiftSkill{} = P) ->
	Bin_code = write_uint64( P#pk_C2S_PlayerUseShiftSkill.code ),
	Bin_skillId = write_uint32( P#pk_C2S_PlayerUseShiftSkill.skillId ),
	Bin_serial = write_uint32( P#pk_C2S_PlayerUseShiftSkill.serial ),
	Bin_targetCodeList = write_array(P#pk_C2S_PlayerUseShiftSkill.targetCodeList, fun(X) -> write_uint64( X ) end),
	Bin_x = write_float( P#pk_C2S_PlayerUseShiftSkill.x ),
	Bin_y = write_float( P#pk_C2S_PlayerUseShiftSkill.y ),
	[
		<<?C2S_PlayerUseShiftSkill:?U16>>,
		Bin_code,
		Bin_skillId,
		Bin_serial,
		Bin_targetCodeList,
		Bin_x,
		Bin_y
	];

%GENERATED from file:battle.h => C2S_PlayerUseSkill
encode(#pk_C2S_PlayerUseSkill{} = P) ->
	Bin_code = write_uint64( P#pk_C2S_PlayerUseSkill.code ),
	Bin_skillId = write_uint64( P#pk_C2S_PlayerUseSkill.skillId ),
	Bin_serial = write_uint32( P#pk_C2S_PlayerUseSkill.serial ),
	Bin_targetCodeList = write_array(P#pk_C2S_PlayerUseSkill.targetCodeList, fun(X) -> write_uint64( X ) end),
	[
		<<?C2S_PlayerUseSkill:?U16>>,
		Bin_code,
		Bin_skillId,
		Bin_serial,
		Bin_targetCodeList
	];

%GENERATED from file:battle.h => GS2U_AttackOffsetEffect
encode(#pk_GS2U_AttackOffsetEffect{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_AttackOffsetEffect.userCode ),
	Bin_targetCode = write_uint64( P#pk_GS2U_AttackOffsetEffect.targetCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_AttackOffsetEffect.skillId ),
	Bin_serial = write_uint32( P#pk_GS2U_AttackOffsetEffect.serial ),
	Bin_code = write_uint64( P#pk_GS2U_AttackOffsetEffect.code ),
	Bin_x = write_float( P#pk_GS2U_AttackOffsetEffect.x ),
	Bin_y = write_float( P#pk_GS2U_AttackOffsetEffect.y ),
	[
		<<?GS2U_AttackOffsetEffect:?U16>>,
		Bin_userCode,
		Bin_targetCode,
		Bin_skillId,
		Bin_serial,
		Bin_code,
		Bin_x,
		Bin_y
	];

%GENERATED from file:battle.h => GS2U_AttackResult
encode(#pk_GS2U_AttackResult{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_AttackResult.userCode ),
	Bin_targetCode = write_uint64( P#pk_GS2U_AttackResult.targetCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_AttackResult.skillId ),
	Bin_serial = write_uint32( P#pk_GS2U_AttackResult.serial ),
	Bin_result = write_array(P#pk_GS2U_AttackResult.result, fun(X) -> write_uint32( X ) end),
	Bin_bhp_per = write_uint8( P#pk_GS2U_AttackResult.bhp_per ),
	Bin_ahp_per = write_uint8( P#pk_GS2U_AttackResult.ahp_per ),
	Bin_diffHp = write_int32( P#pk_GS2U_AttackResult.diffHp ),
	Bin_damageHp = write_array(P#pk_GS2U_AttackResult.damageHp, fun(X) -> write_int32( X ) end),
	Bin_arList = write_array(P#pk_GS2U_AttackResult.arList, fun(X) -> encode_AttackResultList( X ) end),
	[
		<<?GS2U_AttackResult:?U16>>,
		Bin_userCode,
		Bin_targetCode,
		Bin_skillId,
		Bin_serial,
		Bin_result,
		Bin_bhp_per,
		Bin_ahp_per,
		Bin_diffHp,
		Bin_damageHp,
		Bin_arList
	];

%GENERATED from file:battle.h => GS2U_AttackSpeed
encode(#pk_GS2U_AttackSpeed{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_AttackSpeed.code ),
	Bin_speed = write_float( P#pk_GS2U_AttackSpeed.speed ),
	[
		<<?GS2U_AttackSpeed:?U16>>,
		Bin_code,
		Bin_speed
	];

%GENERATED from file:battle.h => GS2U_BattleLearnRequest
encode(#pk_GS2U_BattleLearnRequest{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BattleLearnRequest.code ),
	Bin_name = write_string( P#pk_GS2U_BattleLearnRequest.name ),
	[
		<<?GS2U_BattleLearnRequest:?U16>>,
		Bin_code,
		Bin_name
	];

%GENERATED from file:battle.h => GS2U_BattleLearnResult
encode(#pk_GS2U_BattleLearnResult{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BattleLearnResult.code ),
	Bin_targetCode = write_uint64( P#pk_GS2U_BattleLearnResult.targetCode ),
	Bin_name = write_string( P#pk_GS2U_BattleLearnResult.name ),
	Bin_targetName = write_string( P#pk_GS2U_BattleLearnResult.targetName ),
	Bin_result = write_uint8( P#pk_GS2U_BattleLearnResult.result ),
	[
		<<?GS2U_BattleLearnResult:?U16>>,
		Bin_code,
		Bin_targetCode,
		Bin_name,
		Bin_targetName,
		Bin_result
	];

%GENERATED from file:battle.h => GS2U_BreakSkill
encode(#pk_GS2U_BreakSkill{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_BreakSkill.userCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_BreakSkill.skillId ),
	Bin_serial = write_uint32( P#pk_GS2U_BreakSkill.serial ),
	[
		<<?GS2U_BreakSkill:?U16>>,
		Bin_userCode,
		Bin_skillId,
		Bin_serial
	];

%GENERATED from file:battle.h => GS2U_CallSkill
encode(#pk_GS2U_CallSkill{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_CallSkill.userCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_CallSkill.skillId ),
	[
		<<?GS2U_CallSkill:?U16>>,
		Bin_userCode,
		Bin_skillId
	];

%GENERATED from file:battle.h => GS2U_CarrierUseSkillToObject
encode(#pk_GS2U_CarrierUseSkillToObject{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_CarrierUseSkillToObject.userCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_CarrierUseSkillToObject.skillId ),
	Bin_serial = write_uint32( P#pk_GS2U_CarrierUseSkillToObject.serial ),
	Bin_targetCodeList = write_array(P#pk_GS2U_CarrierUseSkillToObject.targetCodeList, fun(X) -> write_uint64( X ) end),
	Bin_time = write_uint32( P#pk_GS2U_CarrierUseSkillToObject.time ),
	[
		<<?GS2U_CarrierUseSkillToObject:?U16>>,
		Bin_userCode,
		Bin_skillId,
		Bin_serial,
		Bin_targetCodeList,
		Bin_time
	];

%GENERATED from file:battle.h => GS2U_Dead
encode(#pk_GS2U_Dead{} = P) ->
	Bin_deadActorCode = write_uint64( P#pk_GS2U_Dead.deadActorCode ),
	Bin_killerCode = write_uint64( P#pk_GS2U_Dead.killerCode ),
	Bin_killerName = write_string( P#pk_GS2U_Dead.killerName ),
	Bin_skillID = write_uint32( P#pk_GS2U_Dead.skillID ),
	Bin_monsterID = write_uint16( P#pk_GS2U_Dead.monsterID ),
	Bin_serverstringsID = write_uint32( P#pk_GS2U_Dead.serverstringsID ),
	[
		<<?GS2U_Dead:?U16>>,
		Bin_deadActorCode,
		Bin_killerCode,
		Bin_killerName,
		Bin_skillID,
		Bin_monsterID,
		Bin_serverstringsID
	];

%GENERATED from file:battle.h => GS2U_DeadToTeam
encode(#pk_GS2U_DeadToTeam{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_DeadToTeam.roleID ),
	Bin_killerCode = write_uint64( P#pk_GS2U_DeadToTeam.killerCode ),
	Bin_killerName = write_string( P#pk_GS2U_DeadToTeam.killerName ),
	Bin_monsterID = write_uint16( P#pk_GS2U_DeadToTeam.monsterID ),
	Bin_serverstringsID = write_uint32( P#pk_GS2U_DeadToTeam.serverstringsID ),
	[
		<<?GS2U_DeadToTeam:?U16>>,
		Bin_roleID,
		Bin_killerCode,
		Bin_killerName,
		Bin_monsterID,
		Bin_serverstringsID
	];

%GENERATED from file:battle.h => GS2U_ForceDeadNow
encode(#pk_GS2U_ForceDeadNow{} = P) ->
	Bin_deadActorCode = write_uint64( P#pk_GS2U_ForceDeadNow.deadActorCode ),
	Bin_killerCode = write_uint64( P#pk_GS2U_ForceDeadNow.killerCode ),
	Bin_killerName = write_string( P#pk_GS2U_ForceDeadNow.killerName ),
	Bin_skillID = write_uint32( P#pk_GS2U_ForceDeadNow.skillID ),
	Bin_monsterID = write_uint16( P#pk_GS2U_ForceDeadNow.monsterID ),
	Bin_serverstringsID = write_uint32( P#pk_GS2U_ForceDeadNow.serverstringsID ),
	[
		<<?GS2U_ForceDeadNow:?U16>>,
		Bin_deadActorCode,
		Bin_killerCode,
		Bin_killerName,
		Bin_skillID,
		Bin_monsterID,
		Bin_serverstringsID
	];

%GENERATED from file:battle.h => GS2U_IsTriggerCountDown
encode(#pk_GS2U_IsTriggerCountDown{} = P) ->
	Bin_flag = write_uint8( P#pk_GS2U_IsTriggerCountDown.flag ),
	Bin_isTrigger = write_uint8( P#pk_GS2U_IsTriggerCountDown.isTrigger ),
	[
		<<?GS2U_IsTriggerCountDown:?U16>>,
		Bin_flag,
		Bin_isTrigger
	];

%GENERATED from file:battle.h => GS2U_MonsterSpeed
encode(#pk_GS2U_MonsterSpeed{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_MonsterSpeed.code ),
	Bin_speed = write_float( P#pk_GS2U_MonsterSpeed.speed ),
	Bin_moveStatus = write_uint8( P#pk_GS2U_MonsterSpeed.moveStatus ),
	[
		<<?GS2U_MonsterSpeed:?U16>>,
		Bin_code,
		Bin_speed,
		Bin_moveStatus
	];

%GENERATED from file:battle.h => GS2U_ResponseBattleAck
encode(#pk_GS2U_ResponseBattleAck{}) ->
	[
		<<?GS2U_ResponseBattleAck:?U16>>

	];

%GENERATED from file:battle.h => GS2U_ResponseChangePKMode
encode(#pk_GS2U_ResponseChangePKMode{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_ResponseChangePKMode.code ),
	Bin_pkMode = write_int32( P#pk_GS2U_ResponseChangePKMode.pkMode ),
	[
		<<?GS2U_ResponseChangePKMode:?U16>>,
		Bin_code,
		Bin_pkMode
	];

%GENERATED from file:battle.h => GS2U_TriggerSkill
encode(#pk_GS2U_TriggerSkill{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_TriggerSkill.userCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_TriggerSkill.skillId ),
	Bin_targetCode = write_uint64( P#pk_GS2U_TriggerSkill.targetCode ),
	[
		<<?GS2U_TriggerSkill:?U16>>,
		Bin_userCode,
		Bin_skillId,
		Bin_targetCode
	];

%GENERATED from file:battle.h => GS2U_TrunBattleInitList
encode(#pk_GS2U_TrunBattleInitList{} = P) ->
	Bin_il = write_array(P#pk_GS2U_TrunBattleInitList.il, fun(X) -> encode_TurnBattleInit( X ) end),
	[
		<<?GS2U_TrunBattleInitList:?U16>>,
		Bin_il
	];

%GENERATED from file:battle.h => GS2U_TrunBattleResultList
encode(#pk_GS2U_TrunBattleResultList{} = P) ->
	Bin_rl = write_array(P#pk_GS2U_TrunBattleResultList.rl, fun(X) -> encode_TrunBattleResult( X ) end),
	[
		<<?GS2U_TrunBattleResultList:?U16>>,
		Bin_rl
	];

%GENERATED from file:battle.h => GS2U_UseSkillToObject
encode(#pk_GS2U_UseSkillToObject{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_UseSkillToObject.userCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_UseSkillToObject.skillId ),
	Bin_serial = write_uint32( P#pk_GS2U_UseSkillToObject.serial ),
	Bin_targetCodeList = write_array(P#pk_GS2U_UseSkillToObject.targetCodeList, fun(X) -> write_uint64( X ) end),
	Bin_time = write_uint32( P#pk_GS2U_UseSkillToObject.time ),
	[
		<<?GS2U_UseSkillToObject:?U16>>,
		Bin_userCode,
		Bin_skillId,
		Bin_serial,
		Bin_targetCodeList,
		Bin_time
	];

%GENERATED from file:battle.h => GS2U_UseSkillToPos
encode(#pk_GS2U_UseSkillToPos{} = P) ->
	Bin_userCode = write_uint64( P#pk_GS2U_UseSkillToPos.userCode ),
	Bin_skillId = write_uint32( P#pk_GS2U_UseSkillToPos.skillId ),
	Bin_serial = write_uint32( P#pk_GS2U_UseSkillToPos.serial ),
	Bin_targetCodeList = write_array(P#pk_GS2U_UseSkillToPos.targetCodeList, fun(X) -> write_uint64( X ) end),
	Bin_x = write_float( P#pk_GS2U_UseSkillToPos.x ),
	Bin_y = write_float( P#pk_GS2U_UseSkillToPos.y ),
	[
		<<?GS2U_UseSkillToPos:?U16>>,
		Bin_userCode,
		Bin_skillId,
		Bin_serial,
		Bin_targetCodeList,
		Bin_x,
		Bin_y
	];

%GENERATED from file:battle.h => U2GS_BattleLearn
encode(#pk_U2GS_BattleLearn{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_BattleLearn.code ),
	[
		<<?U2GS_BattleLearn:?U16>>,
		Bin_code
	];

%GENERATED from file:battle.h => U2GS_BattleLearnAck
encode(#pk_U2GS_BattleLearnAck{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_BattleLearnAck.code ),
	Bin_result = write_uint8( P#pk_U2GS_BattleLearnAck.result ),
	[
		<<?U2GS_BattleLearnAck:?U16>>,
		Bin_code,
		Bin_result
	];

%GENERATED from file:battle.h => U2GS_RequestBattleAck
encode(#pk_U2GS_RequestBattleAck{} = P) ->
	Bin_num = write_uint8( P#pk_U2GS_RequestBattleAck.num ),
	[
		<<?U2GS_RequestBattleAck:?U16>>,
		Bin_num
	];

%GENERATED from file:battle.h => U2GS_RequestBattleEnd
encode(#pk_U2GS_RequestBattleEnd{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequestBattleEnd.type ),
	[
		<<?U2GS_RequestBattleEnd:?U16>>,
		Bin_type
	];

%GENERATED from file:battle.h => U2GS_RequestChangePKMode
encode(#pk_U2GS_RequestChangePKMode{} = P) ->
	Bin_pkMode = write_int32( P#pk_U2GS_RequestChangePKMode.pkMode ),
	[
		<<?U2GS_RequestChangePKMode:?U16>>,
		Bin_pkMode
	];

%GENERATED from file:buff.h => GS2U_BuffHurt
encode(#pk_GS2U_BuffHurt{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BuffHurt.code ),
	Bin_buffUID = write_uint64( P#pk_GS2U_BuffHurt.buffUID ),
	Bin_buffID = write_uint32( P#pk_GS2U_BuffHurt.buffID ),
	Bin_damageHp = write_int32( P#pk_GS2U_BuffHurt.damageHp ),
	Bin_hp_per = write_uint8( P#pk_GS2U_BuffHurt.hp_per ),
	[
		<<?GS2U_BuffHurt:?U16>>,
		Bin_code,
		Bin_buffUID,
		Bin_buffID,
		Bin_damageHp,
		Bin_hp_per
	];

%GENERATED from file:buff.h => GS2U_BuffInfo
encode(#pk_GS2U_BuffInfo{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BuffInfo.code ),
	Bin_buffUID = write_uint64( P#pk_GS2U_BuffInfo.buffUID ),
	Bin_buffID = write_uint32( P#pk_GS2U_BuffInfo.buffID ),
	Bin_skillID = write_uint32( P#pk_GS2U_BuffInfo.skillID ),
	Bin_level = write_uint32( P#pk_GS2U_BuffInfo.level ),
	Bin_flag = write_uint8( P#pk_GS2U_BuffInfo.flag ),
	Bin_serial = write_uint32( P#pk_GS2U_BuffInfo.serial ),
	Bin_endTime = write_int32( P#pk_GS2U_BuffInfo.endTime ),
	[
		<<?GS2U_BuffInfo:?U16>>,
		Bin_code,
		Bin_buffUID,
		Bin_buffID,
		Bin_skillID,
		Bin_level,
		Bin_flag,
		Bin_serial,
		Bin_endTime
	];

%GENERATED from file:buff.h => GS2U_BuyBuffSuccess
encode(#pk_GS2U_BuyBuffSuccess{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_BuyBuffSuccess.id ),
	[
		<<?GS2U_BuyBuffSuccess:?U16>>,
		Bin_id
	];

%GENERATED from file:buff.h => U2GS_BuyBuff
encode(#pk_U2GS_BuyBuff{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_BuyBuff.id ),
	[
		<<?U2GS_BuyBuff:?U16>>,
		Bin_id
	];

%GENERATED from file:buff.h => U2GS_DelBuff
encode(#pk_U2GS_DelBuff{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_DelBuff.code ),
	Bin_buffID = write_uint32( P#pk_U2GS_DelBuff.buffID ),
	[
		<<?U2GS_DelBuff:?U16>>,
		Bin_code,
		Bin_buffID
	];

%GENERATED from file:business.h => GS2U_BusinessCAInfo
encode(#pk_GS2U_BusinessCAInfo{} = P) ->
	Bin_cas = write_array(P#pk_GS2U_BusinessCAInfo.cas, fun(X) -> encode_BusinessCAInfo( X ) end),
	[
		<<?GS2U_BusinessCAInfo:?U16>>,
		Bin_cas
	];

%GENERATED from file:business.h => GS2U_BusinessInfo
encode(#pk_GS2U_BusinessInfo{} = P) ->
	Bin_lists = write_array(P#pk_GS2U_BusinessInfo.lists, fun(X) -> encode_Business( X ) end),
	[
		<<?GS2U_BusinessInfo:?U16>>,
		Bin_lists
	];

%GENERATED from file:business.h => GS2U_BusinessPlayerInfo
encode(#pk_GS2U_BusinessPlayerInfo{} = P) ->
	Bin_activityType = write_uint8( P#pk_GS2U_BusinessPlayerInfo.activityType ),
	Bin_claimMoney = write_float( P#pk_GS2U_BusinessPlayerInfo.claimMoney ),
	Bin_claimGold = write_uint32( P#pk_GS2U_BusinessPlayerInfo.claimGold ),
	Bin_claimIsBuy = write_uint8( P#pk_GS2U_BusinessPlayerInfo.claimIsBuy ),
	Bin_claimConsume = write_array(P#pk_GS2U_BusinessPlayerInfo.claimConsume, fun(X) -> encode_CoinConsume( X ) end),
	Bin_claimNum = write_array(P#pk_GS2U_BusinessPlayerInfo.claimNum, fun(X) -> encode_ActivityNum( X ) end),
	[
		<<?GS2U_BusinessPlayerInfo:?U16>>,
		Bin_activityType,
		Bin_claimMoney,
		Bin_claimGold,
		Bin_claimIsBuy,
		Bin_claimConsume,
		Bin_claimNum
	];

%GENERATED from file:business.h => GS2U_DialCostList
encode(#pk_GS2U_DialCostList{} = P) ->
	Bin_costs = write_array(P#pk_GS2U_DialCostList.costs, fun(X) -> encode_DialCost( X ) end),
	[
		<<?GS2U_DialCostList:?U16>>,
		Bin_costs
	];

%GENERATED from file:business.h => GS2U_DialItemList
encode(#pk_GS2U_DialItemList{} = P) ->
	Bin_items = write_array(P#pk_GS2U_DialItemList.items, fun(X) -> encode_DialItem( X ) end),
	[
		<<?GS2U_DialItemList:?U16>>,
		Bin_items
	];

%GENERATED from file:business.h => GS2U_DialRewardList
encode(#pk_GS2U_DialRewardList{} = P) ->
	Bin_rewards = write_array(P#pk_GS2U_DialRewardList.rewards, fun(X) -> encode_DialReward( X ) end),
	[
		<<?GS2U_DialRewardList:?U16>>,
		Bin_rewards
	];

%GENERATED from file:business.h => GS2U_JqueryrotateResult
encode(#pk_GS2U_JqueryrotateResult{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_JqueryrotateResult.type ),
	Bin_info = encode_SelfDialInfo( P#pk_GS2U_JqueryrotateResult.info ),
	Bin_results = write_array(P#pk_GS2U_JqueryrotateResult.results, fun(X) -> encode_DialItem( X ) end),
	[
		<<?GS2U_JqueryrotateResult:?U16>>,
		Bin_type,
		Bin_info,
		Bin_results
	];

%GENERATED from file:business.h => GS2U_RechargeSuccess
encode(#pk_GS2U_RechargeSuccess{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_RechargeSuccess.id ),
	Bin_activityType = write_uint8( P#pk_GS2U_RechargeSuccess.activityType ),
	Bin_claimGold = write_uint32( P#pk_GS2U_RechargeSuccess.claimGold ),
	Bin_claimMoney = write_float( P#pk_GS2U_RechargeSuccess.claimMoney ),
	Bin_coins = write_array(P#pk_GS2U_RechargeSuccess.coins, fun(X) -> encode_CoinConsume( X ) end),
	Bin_items = write_array(P#pk_GS2U_RechargeSuccess.items, fun(X) -> encode_ActivitySuccessItem( X ) end),
	[
		<<?GS2U_RechargeSuccess:?U16>>,
		Bin_id,
		Bin_activityType,
		Bin_claimGold,
		Bin_claimMoney,
		Bin_coins,
		Bin_items
	];

%GENERATED from file:business.h => GS2U_SelfDialInfo
encode(#pk_GS2U_SelfDialInfo{} = P) ->
	Bin_infos = write_array(P#pk_GS2U_SelfDialInfo.infos, fun(X) -> encode_SelfDialInfo( X ) end),
	[
		<<?GS2U_SelfDialInfo:?U16>>,
		Bin_infos
	];

%GENERATED from file:business.h => U2GS_RequestBusinessInfo
encode(#pk_U2GS_RequestBusinessInfo{} = P) ->
	Bin_activityType = write_uint8( P#pk_U2GS_RequestBusinessInfo.activityType ),
	[
		<<?U2GS_RequestBusinessInfo:?U16>>,
		Bin_activityType
	];

%GENERATED from file:business.h => U2GS_RequestGetBox
encode(#pk_U2GS_RequestGetBox{} = P) ->
	Bin_boxType = write_uint8( P#pk_U2GS_RequestGetBox.boxType ),
	Bin_getTimes = write_uint16( P#pk_U2GS_RequestGetBox.getTimes ),
	[
		<<?U2GS_RequestGetBox:?U16>>,
		Bin_boxType,
		Bin_getTimes
	];

%GENERATED from file:business.h => U2GS_RequestGetGift
encode(#pk_U2GS_RequestGetGift{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_RequestGetGift.id ),
	[
		<<?U2GS_RequestGetGift:?U16>>,
		Bin_id
	];

%GENERATED from file:business.h => U2GS_RequestJqueryrotate
encode(#pk_U2GS_RequestJqueryrotate{} = P) ->
	Bin_boxType = write_uint8( P#pk_U2GS_RequestJqueryrotate.boxType ),
	Bin_id = write_uint32( P#pk_U2GS_RequestJqueryrotate.id ),
	[
		<<?U2GS_RequestJqueryrotate:?U16>>,
		Bin_boxType,
		Bin_id
	];

%GENERATED from file:business.h => U2GS_RequestSelfDialInfo
encode(#pk_U2GS_RequestSelfDialInfo{}) ->
	[
		<<?U2GS_RequestSelfDialInfo:?U16>>

	];

%GENERATED from file:companion.h => GS2U_InviteFriendToMe
encode(#pk_GS2U_InviteFriendToMe{} = P) ->
	Bin_inviteRoleID = write_uint64( P#pk_GS2U_InviteFriendToMe.inviteRoleID ),
	Bin_inviteName = write_string( P#pk_GS2U_InviteFriendToMe.inviteName ),
	Bin_mapID = write_uint32( P#pk_GS2U_InviteFriendToMe.mapID ),
	Bin_x = write_float( P#pk_GS2U_InviteFriendToMe.x ),
	Bin_y = write_float( P#pk_GS2U_InviteFriendToMe.y ),
	[
		<<?GS2U_InviteFriendToMe:?U16>>,
		Bin_inviteRoleID,
		Bin_inviteName,
		Bin_mapID,
		Bin_x,
		Bin_y
	];

%GENERATED from file:companion.h => GS2U_RecvInviteFriend
encode(#pk_GS2U_RecvInviteFriend{} = P) ->
	Bin_name = write_string( P#pk_GS2U_RecvInviteFriend.name ),
	Bin_companionID = write_uint64( P#pk_GS2U_RecvInviteFriend.companionID ),
	[
		<<?GS2U_RecvInviteFriend:?U16>>,
		Bin_name,
		Bin_companionID
	];

%GENERATED from file:companion.h => GS2U_RequestCompanion
encode(#pk_GS2U_RequestCompanion{} = P) ->
	Bin_members = write_array(P#pk_GS2U_RequestCompanion.members, fun(X) -> encode_CompanionMember( X ) end),
	Bin_max_member = write_uint16( P#pk_GS2U_RequestCompanion.max_member ),
	Bin_profileLevel = write_uint16( P#pk_GS2U_RequestCompanion.profileLevel ),
	[
		<<?GS2U_RequestCompanion:?U16>>,
		Bin_members,
		Bin_max_member,
		Bin_profileLevel
	];

%GENERATED from file:companion.h => GS2U_ToTargetFriendAck
encode(#pk_GS2U_ToTargetFriendAck{} = P) ->
	Bin_mapID = write_uint32( P#pk_GS2U_ToTargetFriendAck.mapID ),
	Bin_x = write_float( P#pk_GS2U_ToTargetFriendAck.x ),
	Bin_y = write_float( P#pk_GS2U_ToTargetFriendAck.y ),
	[
		<<?GS2U_ToTargetFriendAck:?U16>>,
		Bin_mapID,
		Bin_x,
		Bin_y
	];

%GENERATED from file:companion.h => U2GS_AgreeInvite
encode(#pk_U2GS_AgreeInvite{} = P) ->
	Bin_companionID = write_uint64( P#pk_U2GS_AgreeInvite.companionID ),
	Bin_isAgree = write_bool( P#pk_U2GS_AgreeInvite.isAgree ),
	[
		<<?U2GS_AgreeInvite:?U16>>,
		Bin_companionID,
		Bin_isAgree
	];

%GENERATED from file:companion.h => U2GS_ChangePoseID
encode(#pk_U2GS_ChangePoseID{} = P) ->
	Bin_poseID = write_uint16( P#pk_U2GS_ChangePoseID.poseID ),
	[
		<<?U2GS_ChangePoseID:?U16>>,
		Bin_poseID
	];

%GENERATED from file:companion.h => U2GS_CreateCompanion
encode(#pk_U2GS_CreateCompanion{}) ->
	[
		<<?U2GS_CreateCompanion:?U16>>

	];

%GENERATED from file:companion.h => U2GS_ExitCompanion
encode(#pk_U2GS_ExitCompanion{}) ->
	[
		<<?U2GS_ExitCompanion:?U16>>

	];

%GENERATED from file:companion.h => U2GS_InviteFriend
encode(#pk_U2GS_InviteFriend{} = P) ->
	Bin_target_roleid = write_uint64( P#pk_U2GS_InviteFriend.target_roleid ),
	[
		<<?U2GS_InviteFriend:?U16>>,
		Bin_target_roleid
	];

%GENERATED from file:companion.h => U2GS_InviteToMe
encode(#pk_U2GS_InviteToMe{}) ->
	[
		<<?U2GS_InviteToMe:?U16>>

	];

%GENERATED from file:companion.h => U2GS_KickCompanion
encode(#pk_U2GS_KickCompanion{} = P) ->
	Bin_target_roleid = write_uint64( P#pk_U2GS_KickCompanion.target_roleid ),
	[
		<<?U2GS_KickCompanion:?U16>>,
		Bin_target_roleid
	];

%GENERATED from file:companion.h => U2GS_RequestCompanion
encode(#pk_U2GS_RequestCompanion{}) ->
	[
		<<?U2GS_RequestCompanion:?U16>>

	];

%GENERATED from file:companion.h => U2GS_ToTargetFriend
encode(#pk_U2GS_ToTargetFriend{} = P) ->
	Bin_target_roleid = write_uint64( P#pk_U2GS_ToTargetFriend.target_roleid ),
	[
		<<?U2GS_ToTargetFriend:?U16>>,
		Bin_target_roleid
	];

%GENERATED from file:companion.h => U2GS_ToTargetFriendResult
encode(#pk_U2GS_ToTargetFriendResult{} = P) ->
	Bin_inviteRoleID = write_uint64( P#pk_U2GS_ToTargetFriendResult.inviteRoleID ),
	Bin_comming = write_bool( P#pk_U2GS_ToTargetFriendResult.comming ),
	[
		<<?U2GS_ToTargetFriendResult:?U16>>,
		Bin_inviteRoleID,
		Bin_comming
	];

%GENERATED from file:copy.h => ActiveGuildCopy
encode(#pk_ActiveGuildCopy{} = P) ->
	Bin_mapID = write_uint32( P#pk_ActiveGuildCopy.mapID ),
	[
		<<?ActiveGuildCopy:?U16>>,
		Bin_mapID
	];

%GENERATED from file:copy.h => GS2U_BossBattleRankResult
encode(#pk_GS2U_BossBattleRankResult{} = P) ->
	Bin_curBossID = write_uint32( P#pk_GS2U_BossBattleRankResult.curBossID ),
	Bin_curPLeftTime = write_uint32( P#pk_GS2U_BossBattleRankResult.curPLeftTime ),
	Bin_curGLeftTime = write_uint32( P#pk_GS2U_BossBattleRankResult.curGLeftTime ),
	Bin_curRankNum = write_uint32( P#pk_GS2U_BossBattleRankResult.curRankNum ),
	Bin_curGuildRankNum = write_uint32( P#pk_GS2U_BossBattleRankResult.curGuildRankNum ),
	Bin_rankList = write_array(P#pk_GS2U_BossBattleRankResult.rankList, fun(X) -> encode_BossRankInfo( X ) end),
	Bin_guildrankList = write_array(P#pk_GS2U_BossBattleRankResult.guildrankList, fun(X) -> encode_BossRankInfo( X ) end),
	[
		<<?GS2U_BossBattleRankResult:?U16>>,
		Bin_curBossID,
		Bin_curPLeftTime,
		Bin_curGLeftTime,
		Bin_curRankNum,
		Bin_curGuildRankNum,
		Bin_rankList,
		Bin_guildrankList
	];

%GENERATED from file:copy.h => GS2U_BossBattleState
encode(#pk_GS2U_BossBattleState{} = P) ->
	Bin_flag = write_uint8( P#pk_GS2U_BossBattleState.flag ),
	Bin_mapID = write_uint32( P#pk_GS2U_BossBattleState.mapID ),
	[
		<<?GS2U_BossBattleState:?U16>>,
		Bin_flag,
		Bin_mapID
	];

%GENERATED from file:copy.h => GS2U_ChapterInfo
encode(#pk_GS2U_ChapterInfo{} = P) ->
	Bin_chapter = encode_chapterInfo( P#pk_GS2U_ChapterInfo.chapter ),
	[
		<<?GS2U_ChapterInfo:?U16>>,
		Bin_chapter
	];

%GENERATED from file:copy.h => GS2U_CopyMapLeftTime
encode(#pk_GS2U_CopyMapLeftTime{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_CopyMapLeftTime.mapID ),
	Bin_leftTimeMs = write_uint32( P#pk_GS2U_CopyMapLeftTime.leftTimeMs ),
	[
		<<?GS2U_CopyMapLeftTime:?U16>>,
		Bin_mapID,
		Bin_leftTimeMs
	];

%GENERATED from file:copy.h => GS2U_CopyMapSchedulePlayAnimation
encode(#pk_GS2U_CopyMapSchedulePlayAnimation{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_CopyMapSchedulePlayAnimation.mapID ),
	Bin_schedule = write_uint32( P#pk_GS2U_CopyMapSchedulePlayAnimation.schedule ),
	Bin_animationID = write_uint32( P#pk_GS2U_CopyMapSchedulePlayAnimation.animationID ),
	[
		<<?GS2U_CopyMapSchedulePlayAnimation:?U16>>,
		Bin_mapID,
		Bin_schedule,
		Bin_animationID
	];

%GENERATED from file:copy.h => GS2U_CopyMapSchedulePlayCharacter
encode(#pk_GS2U_CopyMapSchedulePlayCharacter{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_CopyMapSchedulePlayCharacter.mapID ),
	Bin_schedule = write_uint32( P#pk_GS2U_CopyMapSchedulePlayCharacter.schedule ),
	Bin_characterIDs = write_array(P#pk_GS2U_CopyMapSchedulePlayCharacter.characterIDs, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_CopyMapSchedulePlayCharacter:?U16>>,
		Bin_mapID,
		Bin_schedule,
		Bin_characterIDs
	];

%GENERATED from file:copy.h => GS2U_CopySpecialSchedule
encode(#pk_GS2U_CopySpecialSchedule{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_CopySpecialSchedule.mapID ),
	Bin_schedule = write_uint16( P#pk_GS2U_CopySpecialSchedule.schedule ),
	Bin_code = write_uint64( P#pk_GS2U_CopySpecialSchedule.code ),
	[
		<<?GS2U_CopySpecialSchedule:?U16>>,
		Bin_mapID,
		Bin_schedule,
		Bin_code
	];

%GENERATED from file:copy.h => GS2U_DevilCopyMapRankList
encode(#pk_GS2U_DevilCopyMapRankList{} = P) ->
	Bin_instanceGroup = write_uint32( P#pk_GS2U_DevilCopyMapRankList.instanceGroup ),
	Bin_rankList = write_array(P#pk_GS2U_DevilCopyMapRankList.rankList, fun(X) -> encode_CopyMapRankInfo( X ) end),
	[
		<<?GS2U_DevilCopyMapRankList:?U16>>,
		Bin_instanceGroup,
		Bin_rankList
	];

%GENERATED from file:copy.h => GS2U_DevilCopyMapStarList
encode(#pk_GS2U_DevilCopyMapStarList{} = P) ->
	Bin_starList = write_array(P#pk_GS2U_DevilCopyMapStarList.starList, fun(X) -> encode_DevilCopyMapStarInfo( X ) end),
	[
		<<?GS2U_DevilCopyMapStarList:?U16>>,
		Bin_starList
	];

%GENERATED from file:copy.h => GS2U_FestivalTimeInfo
encode(#pk_GS2U_FestivalTimeInfo{} = P) ->
	Bin_timeinfo = write_array(P#pk_GS2U_FestivalTimeInfo.timeinfo, fun(X) -> encode_OneFestivalTimeInfo( X ) end),
	[
		<<?GS2U_FestivalTimeInfo:?U16>>,
		Bin_timeinfo
	];

%GENERATED from file:copy.h => GS2U_IsGuildCopyOpen
encode(#pk_GS2U_IsGuildCopyOpen{} = P) ->
	Bin_flag = write_bool( P#pk_GS2U_IsGuildCopyOpen.flag ),
	Bin_time = write_uint64( P#pk_GS2U_IsGuildCopyOpen.time ),
	[
		<<?GS2U_IsGuildCopyOpen:?U16>>,
		Bin_flag,
		Bin_time
	];

%GENERATED from file:copy.h => GS2U_MaterialInfo
encode(#pk_GS2U_MaterialInfo{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_MaterialInfo.mapID ),
	Bin_leftSeconds = write_uint32( P#pk_GS2U_MaterialInfo.leftSeconds ),
	Bin_chapter = encode_chapterInfo( P#pk_GS2U_MaterialInfo.chapter ),
	Bin_towerList = write_array(P#pk_GS2U_MaterialInfo.towerList, fun(X) -> encode_towerInfo( X ) end),
	[
		<<?GS2U_MaterialInfo:?U16>>,
		Bin_mapID,
		Bin_leftSeconds,
		Bin_chapter,
		Bin_towerList
	];

%GENERATED from file:copy.h => GS2U_MoneyDungeonInfo
encode(#pk_GS2U_MoneyDungeonInfo{} = P) ->
	Bin_leftSeconds = write_uint32( P#pk_GS2U_MoneyDungeonInfo.leftSeconds ),
	Bin_maxChapter = write_uint16( P#pk_GS2U_MoneyDungeonInfo.maxChapter ),
	Bin_curChapter = write_uint16( P#pk_GS2U_MoneyDungeonInfo.curChapter ),
	Bin_listMonsterID = write_array(P#pk_GS2U_MoneyDungeonInfo.listMonsterID, fun(X) -> write_uint16( X ) end),
	Bin_listMonsterCountMax = write_array(P#pk_GS2U_MoneyDungeonInfo.listMonsterCountMax, fun(X) -> write_uint8( X ) end),
	Bin_listMonsterCountKill = write_array(P#pk_GS2U_MoneyDungeonInfo.listMonsterCountKill, fun(X) -> write_uint8( X ) end),
	Bin_curLeftCount = write_uint8( P#pk_GS2U_MoneyDungeonInfo.curLeftCount ),
	[
		<<?GS2U_MoneyDungeonInfo:?U16>>,
		Bin_leftSeconds,
		Bin_maxChapter,
		Bin_curChapter,
		Bin_listMonsterID,
		Bin_listMonsterCountMax,
		Bin_listMonsterCountKill,
		Bin_curLeftCount
	];

%GENERATED from file:copy.h => GS2U_SendGuildCopyOpenTime
encode(#pk_GS2U_SendGuildCopyOpenTime{} = P) ->
	Bin_time = write_uint64( P#pk_GS2U_SendGuildCopyOpenTime.time ),
	[
		<<?GS2U_SendGuildCopyOpenTime:?U16>>,
		Bin_time
	];

%GENERATED from file:copy.h => GS2U_SpiritArea_Tick_Sync
encode(#pk_GS2U_SpiritArea_Tick_Sync{} = P) ->
	Bin_time = write_uint32( P#pk_GS2U_SpiritArea_Tick_Sync.time ),
	Bin_timeAll = write_uint32( P#pk_GS2U_SpiritArea_Tick_Sync.timeAll ),
	Bin_wave = write_uint8( P#pk_GS2U_SpiritArea_Tick_Sync.wave ),
	Bin_state = write_uint8( P#pk_GS2U_SpiritArea_Tick_Sync.state ),
	Bin_isAssist = write_bool( P#pk_GS2U_SpiritArea_Tick_Sync.isAssist ),
	[
		<<?GS2U_SpiritArea_Tick_Sync:?U16>>,
		Bin_time,
		Bin_timeAll,
		Bin_wave,
		Bin_state,
		Bin_isAssist
	];

%GENERATED from file:copy.h => GS2U_SpiritArea_Wake_Sync
encode(#pk_GS2U_SpiritArea_Wake_Sync{} = P) ->
	Bin_skillID = write_uint32( P#pk_GS2U_SpiritArea_Wake_Sync.skillID ),
	[
		<<?GS2U_SpiritArea_Wake_Sync:?U16>>,
		Bin_skillID
	];

%GENERATED from file:copy.h => GS2U_TowerInfo
encode(#pk_GS2U_TowerInfo{} = P) ->
	Bin_info = encode_towerInfo( P#pk_GS2U_TowerInfo.info ),
	[
		<<?GS2U_TowerInfo:?U16>>,
		Bin_info
	];

%GENERATED from file:copy.h => GS2U_UpdateDevilCopyMapStar
encode(#pk_GS2U_UpdateDevilCopyMapStar{} = P) ->
	Bin_starInfo = encode_DevilCopyMapStarInfo( P#pk_GS2U_UpdateDevilCopyMapStar.starInfo ),
	[
		<<?GS2U_UpdateDevilCopyMapStar:?U16>>,
		Bin_starInfo
	];

%GENERATED from file:copy.h => U2GS2U_BuyCopyReward
encode(#pk_U2GS2U_BuyCopyReward{} = P) ->
	Bin_mapSubType = write_uint32( P#pk_U2GS2U_BuyCopyReward.mapSubType ),
	[
		<<?U2GS2U_BuyCopyReward:?U16>>,
		Bin_mapSubType
	];

%GENERATED from file:copy.h => U2GS2U_CopyMapScheduleShow2
encode(#pk_U2GS2U_CopyMapScheduleShow2{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS2U_CopyMapScheduleShow2.mapID ),
	Bin_show2ID = write_uint16( P#pk_U2GS2U_CopyMapScheduleShow2.show2ID ),
	Bin_groupID = write_uint64( P#pk_U2GS2U_CopyMapScheduleShow2.groupID ),
	Bin_scheduleID = write_uint32( P#pk_U2GS2U_CopyMapScheduleShow2.scheduleID ),
	Bin_isInit = write_bool( P#pk_U2GS2U_CopyMapScheduleShow2.isInit ),
	[
		<<?U2GS2U_CopyMapScheduleShow2:?U16>>,
		Bin_mapID,
		Bin_show2ID,
		Bin_groupID,
		Bin_scheduleID,
		Bin_isInit
	];

%GENERATED from file:copy.h => U2GS_BuyFestivalPacket
encode(#pk_U2GS_BuyFestivalPacket{} = P) ->
	Bin_festivalID = write_uint32( P#pk_U2GS_BuyFestivalPacket.festivalID ),
	Bin_packetID = write_uint32( P#pk_U2GS_BuyFestivalPacket.packetID ),
	Bin_buynum = write_uint32( P#pk_U2GS_BuyFestivalPacket.buynum ),
	[
		<<?U2GS_BuyFestivalPacket:?U16>>,
		Bin_festivalID,
		Bin_packetID,
		Bin_buynum
	];

%GENERATED from file:copy.h => U2GS_CopyMapSchedulePlayAnimationOver
encode(#pk_U2GS_CopyMapSchedulePlayAnimationOver{} = P) ->
	Bin_animationID = write_uint32( P#pk_U2GS_CopyMapSchedulePlayAnimationOver.animationID ),
	[
		<<?U2GS_CopyMapSchedulePlayAnimationOver:?U16>>,
		Bin_animationID
	];

%GENERATED from file:copy.h => U2GS_CopyMapSchedulePlayCharacterOver
encode(#pk_U2GS_CopyMapSchedulePlayCharacterOver{} = P) ->
	Bin_schedule = write_uint32( P#pk_U2GS_CopyMapSchedulePlayCharacterOver.schedule ),
	[
		<<?U2GS_CopyMapSchedulePlayCharacterOver:?U16>>,
		Bin_schedule
	];

%GENERATED from file:copy.h => U2GS_EnterBossBattle
encode(#pk_U2GS_EnterBossBattle{}) ->
	[
		<<?U2GS_EnterBossBattle:?U16>>

	];

%GENERATED from file:copy.h => U2GS_EnterFestivalCopy
encode(#pk_U2GS_EnterFestivalCopy{} = P) ->
	Bin_festivalID = write_uint32( P#pk_U2GS_EnterFestivalCopy.festivalID ),
	Bin_type = write_uint8( P#pk_U2GS_EnterFestivalCopy.type ),
	[
		<<?U2GS_EnterFestivalCopy:?U16>>,
		Bin_festivalID,
		Bin_type
	];

%GENERATED from file:copy.h => U2GS_EnterGuildCopy
encode(#pk_U2GS_EnterGuildCopy{} = P) ->
	Bin_mapID = write_uint32( P#pk_U2GS_EnterGuildCopy.mapID ),
	[
		<<?U2GS_EnterGuildCopy:?U16>>,
		Bin_mapID
	];

%GENERATED from file:copy.h => U2GS_GoonCopyMap
encode(#pk_U2GS_GoonCopyMap{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_GoonCopyMap.mapID ),
	[
		<<?U2GS_GoonCopyMap:?U16>>,
		Bin_mapID
	];

%GENERATED from file:copy.h => U2GS_MoneyDungeonGiveup
encode(#pk_U2GS_MoneyDungeonGiveup{}) ->
	[
		<<?U2GS_MoneyDungeonGiveup:?U16>>

	];

%GENERATED from file:copy.h => U2GS_MoneyDungeonNext
encode(#pk_U2GS_MoneyDungeonNext{}) ->
	[
		<<?U2GS_MoneyDungeonNext:?U16>>

	];

%GENERATED from file:copy.h => U2GS_QueryDevilCopyMapRankList
encode(#pk_U2GS_QueryDevilCopyMapRankList{} = P) ->
	Bin_instanceGroup = write_uint32( P#pk_U2GS_QueryDevilCopyMapRankList.instanceGroup ),
	[
		<<?U2GS_QueryDevilCopyMapRankList:?U16>>,
		Bin_instanceGroup
	];

%GENERATED from file:copy.h => U2GS_QueryDevilCopyMapStarList
encode(#pk_U2GS_QueryDevilCopyMapStarList{}) ->
	[
		<<?U2GS_QueryDevilCopyMapStarList:?U16>>

	];

%GENERATED from file:copy.h => U2GS_RequestAutoDeal
encode(#pk_U2GS_RequestAutoDeal{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_RequestAutoDeal.mapID ),
	[
		<<?U2GS_RequestAutoDeal:?U16>>,
		Bin_mapID
	];

%GENERATED from file:copy.h => U2GS_RequestMaterialInfo
encode(#pk_U2GS_RequestMaterialInfo{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_RequestMaterialInfo.mapID ),
	[
		<<?U2GS_RequestMaterialInfo:?U16>>,
		Bin_mapID
	];

%GENERATED from file:copy.h => U2GS_UpTower
encode(#pk_U2GS_UpTower{} = P) ->
	Bin_dataID = write_uint32( P#pk_U2GS_UpTower.dataID ),
	Bin_type = write_uint32( P#pk_U2GS_UpTower.type ),
	[
		<<?U2GS_UpTower:?U16>>,
		Bin_dataID,
		Bin_type
	];

%GENERATED from file:copy.h => U2GS_startNextChapter
encode(#pk_U2GS_startNextChapter{}) ->
	[
		<<?U2GS_startNextChapter:?U16>>

	];

%GENERATED from file:copy.h => UpdataGuildHurtToBoss
encode(#pk_UpdataGuildHurtToBoss{} = P) ->
	Bin_hurt = write_uint64( P#pk_UpdataGuildHurtToBoss.hurt ),
	[
		<<?UpdataGuildHurtToBoss:?U16>>,
		Bin_hurt
	];

%GENERATED from file:copy.h => UpdataHurtToBoss
encode(#pk_UpdataHurtToBoss{} = P) ->
	Bin_hurt = write_uint64( P#pk_UpdataHurtToBoss.hurt ),
	[
		<<?UpdataHurtToBoss:?U16>>,
		Bin_hurt
	];

%GENERATED from file:fashion.h => GS2U_ActiveFashionSuitList
encode(#pk_GS2U_ActiveFashionSuitList{} = P) ->
	Bin_activeFashionSuitList = write_array(P#pk_GS2U_ActiveFashionSuitList.activeFashionSuitList, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_ActiveFashionSuitList:?U16>>,
		Bin_activeFashionSuitList
	];

%GENERATED from file:fashion.h => GS2U_FashionGiftAck
encode(#pk_GS2U_FashionGiftAck{} = P) ->
	Bin_getFashionGiftAckList = write_array(P#pk_GS2U_FashionGiftAck.getFashionGiftAckList, fun(X) -> encode_getFashionGiftAck( X ) end),
	[
		<<?GS2U_FashionGiftAck:?U16>>,
		Bin_getFashionGiftAckList
	];

%GENERATED from file:fashion.h => GS2U_FashionList
encode(#pk_GS2U_FashionList{} = P) ->
	Bin_datas = write_array(P#pk_GS2U_FashionList.datas, fun(X) -> encode_FashionInfo( X ) end),
	[
		<<?GS2U_FashionList:?U16>>,
		Bin_datas
	];

%GENERATED from file:fashion.h => GS2U_FashionResult
encode(#pk_GS2U_FashionResult{} = P) ->
	Bin_fashionID = write_uint32( P#pk_GS2U_FashionResult.fashionID ),
	Bin_type = write_uint8( P#pk_GS2U_FashionResult.type ),
	Bin_value = write_uint32( P#pk_GS2U_FashionResult.value ),
	[
		<<?GS2U_FashionResult:?U16>>,
		Bin_fashionID,
		Bin_type,
		Bin_value
	];

%GENERATED from file:fashion.h => GS2U_FashionRoomLevelUp
encode(#pk_GS2U_FashionRoomLevelUp{} = P) ->
	Bin_roomLevel = write_uint32( P#pk_GS2U_FashionRoomLevelUp.roomLevel ),
	[
		<<?GS2U_FashionRoomLevelUp:?U16>>,
		Bin_roomLevel
	];

%GENERATED from file:fashion.h => U2GS_ActiveFashionSuit
encode(#pk_U2GS_ActiveFashionSuit{} = P) ->
	Bin_flag = write_bool( P#pk_U2GS_ActiveFashionSuit.flag ),
	Bin_fashionSuitID = write_uint32( P#pk_U2GS_ActiveFashionSuit.fashionSuitID ),
	[
		<<?U2GS_ActiveFashionSuit:?U16>>,
		Bin_flag,
		Bin_fashionSuitID
	];

%GENERATED from file:fashion.h => U2GS_BuyFashion
encode(#pk_U2GS_BuyFashion{} = P) ->
	Bin_itemID = write_uint16( P#pk_U2GS_BuyFashion.itemID ),
	Bin_fashionID = write_uint32( P#pk_U2GS_BuyFashion.fashionID ),
	Bin_time = write_uint32( P#pk_U2GS_BuyFashion.time ),
	Bin_type = write_uint8( P#pk_U2GS_BuyFashion.type ),
	[
		<<?U2GS_BuyFashion:?U16>>,
		Bin_itemID,
		Bin_fashionID,
		Bin_time,
		Bin_type
	];

%GENERATED from file:fashion.h => U2GS_FashionBuyRequest
encode(#pk_U2GS_FashionBuyRequest{} = P) ->
	Bin_id = write_int32( P#pk_U2GS_FashionBuyRequest.id ),
	Bin_sex = write_int32( P#pk_U2GS_FashionBuyRequest.sex ),
	Bin_itemid = write_uint32( P#pk_U2GS_FashionBuyRequest.itemid ),
	Bin_tarRoleID = write_uint64( P#pk_U2GS_FashionBuyRequest.tarRoleID ),
	Bin_give = write_string( P#pk_U2GS_FashionBuyRequest.give ),
	[
		<<?U2GS_FashionBuyRequest:?U16>>,
		Bin_id,
		Bin_sex,
		Bin_itemid,
		Bin_tarRoleID,
		Bin_give
	];

%GENERATED from file:fashion.h => U2GS_FashionRoomLevelUp
encode(#pk_U2GS_FashionRoomLevelUp{}) ->
	[
		<<?U2GS_FashionRoomLevelUp:?U16>>

	];

%GENERATED from file:fashion.h => U2GS_FashionThanksMail
encode(#pk_U2GS_FashionThanksMail{} = P) ->
	Bin_beGiveName = write_string( P#pk_U2GS_FashionThanksMail.beGiveName ),
	Bin_giveName = write_string( P#pk_U2GS_FashionThanksMail.giveName ),
	Bin_giveRole = write_uint64( P#pk_U2GS_FashionThanksMail.giveRole ),
	[
		<<?U2GS_FashionThanksMail:?U16>>,
		Bin_beGiveName,
		Bin_giveName,
		Bin_giveRole
	];

%GENERATED from file:fashion.h => U2GS_IsDisplayFashion
encode(#pk_U2GS_IsDisplayFashion{} = P) ->
	Bin_flag = write_int8( P#pk_U2GS_IsDisplayFashion.flag ),
	[
		<<?U2GS_IsDisplayFashion:?U16>>,
		Bin_flag
	];

%GENERATED from file:fashion.h => U2GS_OperateFashion
encode(#pk_U2GS_OperateFashion{} = P) ->
	Bin_fashionID = write_uint32( P#pk_U2GS_OperateFashion.fashionID ),
	Bin_flag = write_bool( P#pk_U2GS_OperateFashion.flag ),
	[
		<<?U2GS_OperateFashion:?U16>>,
		Bin_fashionID,
		Bin_flag
	];

%GENERATED from file:floating.h => GS2U_FloatingAward
encode(#pk_GS2U_FloatingAward{} = P) ->
	Bin_rewardList = write_array(P#pk_GS2U_FloatingAward.rewardList, fun(X) -> encode_FloatingAward( X ) end),
	[
		<<?GS2U_FloatingAward:?U16>>,
		Bin_rewardList
	];

%GENERATED from file:floating.h => GS2U_FloatingSchedule
encode(#pk_GS2U_FloatingSchedule{} = P) ->
	Bin_lastcluesID = write_uint32( P#pk_GS2U_FloatingSchedule.lastcluesID ),
	Bin_isInit = write_bool( P#pk_GS2U_FloatingSchedule.isInit ),
	Bin_condList = write_array(P#pk_GS2U_FloatingSchedule.condList, fun(X) -> encode_Conditions( X ) end),
	[
		<<?GS2U_FloatingSchedule:?U16>>,
		Bin_lastcluesID,
		Bin_isInit,
		Bin_condList
	];

%GENERATED from file:floating.h => GS2U_ReceiveFloatingAward
encode(#pk_GS2U_ReceiveFloatingAward{} = P) ->
	Bin_isSuccss = write_bool( P#pk_GS2U_ReceiveFloatingAward.isSuccss ),
	Bin_reward = encode_FloatingAward( P#pk_GS2U_ReceiveFloatingAward.reward ),
	[
		<<?GS2U_ReceiveFloatingAward:?U16>>,
		Bin_isSuccss,
		Bin_reward
	];

%GENERATED from file:floating.h => U2GS_RequestFloatingAward
encode(#pk_U2GS_RequestFloatingAward{} = P) ->
	Bin_pieceID = write_uint32( P#pk_U2GS_RequestFloatingAward.pieceID ),
	[
		<<?U2GS_RequestFloatingAward:?U16>>,
		Bin_pieceID
	];

%GENERATED from file:friend.h => GS2U_Friend2AddFromBlack_Ask
encode(#pk_GS2U_Friend2AddFromBlack_Ask{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2AddFromBlack_Ask.id ),
	Bin_name = write_string( P#pk_GS2U_Friend2AddFromBlack_Ask.name ),
	[
		<<?GS2U_Friend2AddFromBlack_Ask:?U16>>,
		Bin_id,
		Bin_name
	];

%GENERATED from file:friend.h => GS2U_Friend2ApplicantReset_Sync
encode(#pk_GS2U_Friend2ApplicantReset_Sync{} = P) ->
	Bin_count = write_uint16( P#pk_GS2U_Friend2ApplicantReset_Sync.count ),
	Bin_page = write_uint8( P#pk_GS2U_Friend2ApplicantReset_Sync.page ),
	Bin_listInfo = write_array(P#pk_GS2U_Friend2ApplicantReset_Sync.listInfo, fun(X) -> encode_Friend2InfoBase( X ) end),
	[
		<<?GS2U_Friend2ApplicantReset_Sync:?U16>>,
		Bin_count,
		Bin_page,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2U_Friend2BanFromFormal_Ask
encode(#pk_GS2U_Friend2BanFromFormal_Ask{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2BanFromFormal_Ask.id ),
	Bin_name = write_string( P#pk_GS2U_Friend2BanFromFormal_Ask.name ),
	[
		<<?GS2U_Friend2BanFromFormal_Ask:?U16>>,
		Bin_id,
		Bin_name
	];

%GENERATED from file:friend.h => GS2U_Friend2BanWithUnbanAndDel_Ask
encode(#pk_GS2U_Friend2BanWithUnbanAndDel_Ask{} = P) ->
	Bin_idUnban = write_uint64( P#pk_GS2U_Friend2BanWithUnbanAndDel_Ask.idUnban ),
	Bin_nameUnban = write_string( P#pk_GS2U_Friend2BanWithUnbanAndDel_Ask.nameUnban ),
	Bin_idDel = write_uint64( P#pk_GS2U_Friend2BanWithUnbanAndDel_Ask.idDel ),
	Bin_nameDel = write_string( P#pk_GS2U_Friend2BanWithUnbanAndDel_Ask.nameDel ),
	[
		<<?GS2U_Friend2BanWithUnbanAndDel_Ask:?U16>>,
		Bin_idUnban,
		Bin_nameUnban,
		Bin_idDel,
		Bin_nameDel
	];

%GENERATED from file:friend.h => GS2U_Friend2BanWithUnban_Ask
encode(#pk_GS2U_Friend2BanWithUnban_Ask{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2BanWithUnban_Ask.id ),
	Bin_name = write_string( P#pk_GS2U_Friend2BanWithUnban_Ask.name ),
	[
		<<?GS2U_Friend2BanWithUnban_Ask:?U16>>,
		Bin_id,
		Bin_name
	];

%GENERATED from file:friend.h => GS2U_Friend2BlackReset_Sync
encode(#pk_GS2U_Friend2BlackReset_Sync{} = P) ->
	Bin_count = write_uint16( P#pk_GS2U_Friend2BlackReset_Sync.count ),
	Bin_page = write_uint8( P#pk_GS2U_Friend2BlackReset_Sync.page ),
	Bin_listInfo = write_array(P#pk_GS2U_Friend2BlackReset_Sync.listInfo, fun(X) -> encode_Friend2InfoBase( X ) end),
	[
		<<?GS2U_Friend2BlackReset_Sync:?U16>>,
		Bin_count,
		Bin_page,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2U_Friend2ClosenessChange_Sync
encode(#pk_GS2U_Friend2ClosenessChange_Sync{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2ClosenessChange_Sync.id ),
	Bin_closeness = write_uint32( P#pk_GS2U_Friend2ClosenessChange_Sync.closeness ),
	[
		<<?GS2U_Friend2ClosenessChange_Sync:?U16>>,
		Bin_id,
		Bin_closeness
	];

%GENERATED from file:friend.h => GS2U_Friend2CrossAdd2Failed_Ack
encode(#pk_GS2U_Friend2CrossAdd2Failed_Ack{} = P) ->
	Bin_reason = write_uint32( P#pk_GS2U_Friend2CrossAdd2Failed_Ack.reason ),
	Bin_listDel = write_array(P#pk_GS2U_Friend2CrossAdd2Failed_Ack.listDel, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_Friend2CrossAdd2Failed_Ack:?U16>>,
		Bin_reason,
		Bin_listDel
	];

%GENERATED from file:friend.h => GS2U_Friend2CrossAdd2_Ack
encode(#pk_GS2U_Friend2CrossAdd2_Ack{} = P) ->
	Bin_info = encode_Friend2InfoCross( P#pk_GS2U_Friend2CrossAdd2_Ack.info ),
	[
		<<?GS2U_Friend2CrossAdd2_Ack:?U16>>,
		Bin_info
	];

%GENERATED from file:friend.h => GS2U_Friend2CrossAdd_Sync
encode(#pk_GS2U_Friend2CrossAdd_Sync{} = P) ->
	Bin_info = encode_Friend2InfoCross( P#pk_GS2U_Friend2CrossAdd_Sync.info ),
	Bin_listDel = write_array(P#pk_GS2U_Friend2CrossAdd_Sync.listDel, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_Friend2CrossAdd_Sync:?U16>>,
		Bin_info,
		Bin_listDel
	];

%GENERATED from file:friend.h => GS2U_Friend2CrossAll_Sync
encode(#pk_GS2U_Friend2CrossAll_Sync{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_Friend2CrossAll_Sync.type ),
	Bin_listAll = write_array(P#pk_GS2U_Friend2CrossAll_Sync.listAll, fun(X) -> encode_Friend2InfoCross( X ) end),
	[
		<<?GS2U_Friend2CrossAll_Sync:?U16>>,
		Bin_type,
		Bin_listAll
	];

%GENERATED from file:friend.h => GS2U_Friend2CrossDel_Ack
encode(#pk_GS2U_Friend2CrossDel_Ack{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2CrossDel_Ack.id ),
	Bin_isFix = write_bool( P#pk_GS2U_Friend2CrossDel_Ack.isFix ),
	[
		<<?GS2U_Friend2CrossDel_Ack:?U16>>,
		Bin_id,
		Bin_isFix
	];

%GENERATED from file:friend.h => GS2U_Friend2CrossInit_Sync
encode(#pk_GS2U_Friend2CrossInit_Sync{} = P) ->
	Bin_listCross = write_array(P#pk_GS2U_Friend2CrossInit_Sync.listCross, fun(X) -> encode_Friend2InfoCross( X ) end),
	Bin_listApply = write_array(P#pk_GS2U_Friend2CrossInit_Sync.listApply, fun(X) -> encode_Friend2InfoCross( X ) end),
	[
		<<?GS2U_Friend2CrossInit_Sync:?U16>>,
		Bin_listCross,
		Bin_listApply
	];

%GENERATED from file:friend.h => GS2U_Friend2ForLook_Ack
encode(#pk_GS2U_Friend2ForLook_Ack{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2ForLook_Ack.id ),
	Bin_name = write_string( P#pk_GS2U_Friend2ForLook_Ack.name ),
	Bin_relation = write_uint8( P#pk_GS2U_Friend2ForLook_Ack.relation ),
	Bin_like = write_uint32( P#pk_GS2U_Friend2ForLook_Ack.like ),
	Bin_isGiveLike = write_bool( P#pk_GS2U_Friend2ForLook_Ack.isGiveLike ),
	Bin_level = write_uint16( P#pk_GS2U_Friend2ForLook_Ack.level ),
	Bin_charm = write_uint32( P#pk_GS2U_Friend2ForLook_Ack.charm ),
	[
		<<?GS2U_Friend2ForLook_Ack:?U16>>,
		Bin_id,
		Bin_name,
		Bin_relation,
		Bin_like,
		Bin_isGiveLike,
		Bin_level,
		Bin_charm
	];

%GENERATED from file:friend.h => GS2U_Friend2FormalChatVoice_AckR
encode(#pk_GS2U_Friend2FormalChatVoice_AckR{} = P) ->
	Bin_senderID = write_uint64( P#pk_GS2U_Friend2FormalChatVoice_AckR.senderID ),
	Bin_receiverID = write_uint64( P#pk_GS2U_Friend2FormalChatVoice_AckR.receiverID ),
	Bin_time = write_uint32( P#pk_GS2U_Friend2FormalChatVoice_AckR.time ),
	Bin_duration = write_float( P#pk_GS2U_Friend2FormalChatVoice_AckR.duration ),
	Bin_count = write_uint8( P#pk_GS2U_Friend2FormalChatVoice_AckR.count ),
	Bin_index = write_uint8( P#pk_GS2U_Friend2FormalChatVoice_AckR.index ),
	Bin_data = write_array(P#pk_GS2U_Friend2FormalChatVoice_AckR.data, fun(X) -> write_uint8( X ) end),
	Bin_relation = write_uint8( P#pk_GS2U_Friend2FormalChatVoice_AckR.relation ),
	[
		<<?GS2U_Friend2FormalChatVoice_AckR:?U16>>,
		Bin_senderID,
		Bin_receiverID,
		Bin_time,
		Bin_duration,
		Bin_count,
		Bin_index,
		Bin_data,
		Bin_relation
	];

%GENERATED from file:friend.h => GS2U_Friend2FormalChatVoice_AckS
encode(#pk_GS2U_Friend2FormalChatVoice_AckS{} = P) ->
	Bin_senderID = write_uint64( P#pk_GS2U_Friend2FormalChatVoice_AckS.senderID ),
	Bin_receiverID = write_uint64( P#pk_GS2U_Friend2FormalChatVoice_AckS.receiverID ),
	Bin_time = write_uint32( P#pk_GS2U_Friend2FormalChatVoice_AckS.time ),
	[
		<<?GS2U_Friend2FormalChatVoice_AckS:?U16>>,
		Bin_senderID,
		Bin_receiverID,
		Bin_time
	];

%GENERATED from file:friend.h => GS2U_Friend2FormalChat_Ack
encode(#pk_GS2U_Friend2FormalChat_Ack{} = P) ->
	Bin_senderID = write_uint64( P#pk_GS2U_Friend2FormalChat_Ack.senderID ),
	Bin_receiverID = write_uint64( P#pk_GS2U_Friend2FormalChat_Ack.receiverID ),
	Bin_time = write_uint32( P#pk_GS2U_Friend2FormalChat_Ack.time ),
	Bin_content = write_string( P#pk_GS2U_Friend2FormalChat_Ack.content ),
	Bin_relation = write_uint8( P#pk_GS2U_Friend2FormalChat_Ack.relation ),
	[
		<<?GS2U_Friend2FormalChat_Ack:?U16>>,
		Bin_senderID,
		Bin_receiverID,
		Bin_time,
		Bin_content,
		Bin_relation
	];

%GENERATED from file:friend.h => GS2U_Friend2FormalForMarriage_Sync
encode(#pk_GS2U_Friend2FormalForMarriage_Sync{} = P) ->
	Bin_count = write_uint16( P#pk_GS2U_Friend2FormalForMarriage_Sync.count ),
	Bin_hasAP = write_bool( P#pk_GS2U_Friend2FormalForMarriage_Sync.hasAP ),
	Bin_page = write_uint8( P#pk_GS2U_Friend2FormalForMarriage_Sync.page ),
	Bin_listInfo = write_array(P#pk_GS2U_Friend2FormalForMarriage_Sync.listInfo, fun(X) -> encode_Friend2InfoFormal( X ) end),
	[
		<<?GS2U_Friend2FormalForMarriage_Sync:?U16>>,
		Bin_count,
		Bin_hasAP,
		Bin_page,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2U_Friend2FormalReset_Sync
encode(#pk_GS2U_Friend2FormalReset_Sync{} = P) ->
	Bin_count = write_uint16( P#pk_GS2U_Friend2FormalReset_Sync.count ),
	Bin_hasAP = write_bool( P#pk_GS2U_Friend2FormalReset_Sync.hasAP ),
	Bin_page = write_uint8( P#pk_GS2U_Friend2FormalReset_Sync.page ),
	Bin_listInfo = write_array(P#pk_GS2U_Friend2FormalReset_Sync.listInfo, fun(X) -> encode_Friend2InfoFormal( X ) end),
	[
		<<?GS2U_Friend2FormalReset_Sync:?U16>>,
		Bin_count,
		Bin_hasAP,
		Bin_page,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2U_Friend2GetBack_AddRet
encode(#pk_GS2U_Friend2GetBack_AddRet{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2GetBack_AddRet.id ),
	[
		<<?GS2U_Friend2GetBack_AddRet:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => GS2U_Friend2GetBack_IgnoreRet
encode(#pk_GS2U_Friend2GetBack_IgnoreRet{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2GetBack_IgnoreRet.id ),
	[
		<<?GS2U_Friend2GetBack_IgnoreRet:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => GS2U_Friend2GetBack_SyncInfo
encode(#pk_GS2U_Friend2GetBack_SyncInfo{} = P) ->
	Bin_getBackList = write_array(P#pk_GS2U_Friend2GetBack_SyncInfo.getBackList, fun(X) -> encode_Friend2GetBackInfo( X ) end),
	[
		<<?GS2U_Friend2GetBack_SyncInfo:?U16>>,
		Bin_getBackList
	];

%GENERATED from file:friend.h => GS2U_Friend2MakeFormal_Sync
encode(#pk_GS2U_Friend2MakeFormal_Sync{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2MakeFormal_Sync.id ),
	[
		<<?GS2U_Friend2MakeFormal_Sync:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => GS2U_Friend2Recommend_Ack
encode(#pk_GS2U_Friend2Recommend_Ack{} = P) ->
	Bin_listInfo = write_array(P#pk_GS2U_Friend2Recommend_Ack.listInfo, fun(X) -> encode_Friend2InfoBase( X ) end),
	Bin_isPush = write_bool( P#pk_GS2U_Friend2Recommend_Ack.isPush ),
	[
		<<?GS2U_Friend2Recommend_Ack:?U16>>,
		Bin_listInfo,
		Bin_isPush
	];

%GENERATED from file:friend.h => GS2U_Friend2Search_Ack
encode(#pk_GS2U_Friend2Search_Ack{} = P) ->
	Bin_listInfo = write_array(P#pk_GS2U_Friend2Search_Ack.listInfo, fun(X) -> encode_Friend2InfoBase( X ) end),
	[
		<<?GS2U_Friend2Search_Ack:?U16>>,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2U_Friend2SimpleList_Ack
encode(#pk_GS2U_Friend2SimpleList_Ack{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_Friend2SimpleList_Ack.type ),
	Bin_count = write_uint16( P#pk_GS2U_Friend2SimpleList_Ack.count ),
	Bin_index = write_uint16( P#pk_GS2U_Friend2SimpleList_Ack.index ),
	Bin_listInfo = write_array(P#pk_GS2U_Friend2SimpleList_Ack.listInfo, fun(X) -> encode_Friend2InfoSimple( X ) end),
	[
		<<?GS2U_Friend2SimpleList_Ack:?U16>>,
		Bin_type,
		Bin_count,
		Bin_index,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2U_Friend2TempReset_Sync
encode(#pk_GS2U_Friend2TempReset_Sync{} = P) ->
	Bin_count = write_uint16( P#pk_GS2U_Friend2TempReset_Sync.count ),
	Bin_page = write_uint8( P#pk_GS2U_Friend2TempReset_Sync.page ),
	Bin_listInfo = write_array(P#pk_GS2U_Friend2TempReset_Sync.listInfo, fun(X) -> encode_Friend2InfoBase( X ) end),
	[
		<<?GS2U_Friend2TempReset_Sync:?U16>>,
		Bin_count,
		Bin_page,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2U_Friend2WantChat_Ack
encode(#pk_GS2U_Friend2WantChat_Ack{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Friend2WantChat_Ack.id ),
	Bin_info = encode_Friend2InfoBase( P#pk_GS2U_Friend2WantChat_Ack.info ),
	Bin_relation = write_uint8( P#pk_GS2U_Friend2WantChat_Ack.relation ),
	Bin_count = write_uint16( P#pk_GS2U_Friend2WantChat_Ack.count ),
	Bin_hasAP = write_bool( P#pk_GS2U_Friend2WantChat_Ack.hasAP ),
	Bin_page = write_uint8( P#pk_GS2U_Friend2WantChat_Ack.page ),
	Bin_listInfo = write_array(P#pk_GS2U_Friend2WantChat_Ack.listInfo, fun(X) -> encode_Friend2InfoFormal( X ) end),
	[
		<<?GS2U_Friend2WantChat_Ack:?U16>>,
		Bin_id,
		Bin_info,
		Bin_relation,
		Bin_count,
		Bin_hasAP,
		Bin_page,
		Bin_listInfo
	];

%GENERATED from file:friend.h => GS2u_Friend2Like_Ack
encode(#pk_GS2u_Friend2Like_Ack{} = P) ->
	Bin_id = write_uint64( P#pk_GS2u_Friend2Like_Ack.id ),
	Bin_name = write_string( P#pk_GS2u_Friend2Like_Ack.name ),
	Bin_like = write_uint32( P#pk_GS2u_Friend2Like_Ack.like ),
	[
		<<?GS2u_Friend2Like_Ack:?U16>>,
		Bin_id,
		Bin_name,
		Bin_like
	];

%GENERATED from file:friend.h => U2GS_Friend2AddFromBlack_Reply
encode(#pk_U2GS_Friend2AddFromBlack_Reply{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2AddFromBlack_Reply.id ),
	Bin_isAgreed = write_bool( P#pk_U2GS_Friend2AddFromBlack_Reply.isAgreed ),
	[
		<<?U2GS_Friend2AddFromBlack_Reply:?U16>>,
		Bin_id,
		Bin_isAgreed
	];

%GENERATED from file:friend.h => U2GS_Friend2Add_Request
encode(#pk_U2GS_Friend2Add_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2Add_Request.id ),
	[
		<<?U2GS_Friend2Add_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2ApplicantUseOneKey_Request
encode(#pk_U2GS_Friend2ApplicantUseOneKey_Request{} = P) ->
	Bin_isAgreed = write_bool( P#pk_U2GS_Friend2ApplicantUseOneKey_Request.isAgreed ),
	[
		<<?U2GS_Friend2ApplicantUseOneKey_Request:?U16>>,
		Bin_isAgreed
	];

%GENERATED from file:friend.h => U2GS_Friend2ApplicantUse_Request
encode(#pk_U2GS_Friend2ApplicantUse_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2ApplicantUse_Request.id ),
	Bin_isAgreed = write_bool( P#pk_U2GS_Friend2ApplicantUse_Request.isAgreed ),
	[
		<<?U2GS_Friend2ApplicantUse_Request:?U16>>,
		Bin_id,
		Bin_isAgreed
	];

%GENERATED from file:friend.h => U2GS_Friend2Applicant_Request
encode(#pk_U2GS_Friend2Applicant_Request{} = P) ->
	Bin_page = write_uint8( P#pk_U2GS_Friend2Applicant_Request.page ),
	[
		<<?U2GS_Friend2Applicant_Request:?U16>>,
		Bin_page
	];

%GENERATED from file:friend.h => U2GS_Friend2BanWithDel_Reply
encode(#pk_U2GS_Friend2BanWithDel_Reply{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2BanWithDel_Reply.id ),
	Bin_isAgreed = write_bool( P#pk_U2GS_Friend2BanWithDel_Reply.isAgreed ),
	[
		<<?U2GS_Friend2BanWithDel_Reply:?U16>>,
		Bin_id,
		Bin_isAgreed
	];

%GENERATED from file:friend.h => U2GS_Friend2BanWithUnbanAndDel_Reply
encode(#pk_U2GS_Friend2BanWithUnbanAndDel_Reply{} = P) ->
	Bin_idUnban = write_uint64( P#pk_U2GS_Friend2BanWithUnbanAndDel_Reply.idUnban ),
	Bin_idDel = write_uint64( P#pk_U2GS_Friend2BanWithUnbanAndDel_Reply.idDel ),
	Bin_isAgreed = write_bool( P#pk_U2GS_Friend2BanWithUnbanAndDel_Reply.isAgreed ),
	[
		<<?U2GS_Friend2BanWithUnbanAndDel_Reply:?U16>>,
		Bin_idUnban,
		Bin_idDel,
		Bin_isAgreed
	];

%GENERATED from file:friend.h => U2GS_Friend2BanWithUnban_Reply
encode(#pk_U2GS_Friend2BanWithUnban_Reply{} = P) ->
	Bin_idUnban = write_uint64( P#pk_U2GS_Friend2BanWithUnban_Reply.idUnban ),
	Bin_idBan = write_uint64( P#pk_U2GS_Friend2BanWithUnban_Reply.idBan ),
	Bin_isAgreed = write_bool( P#pk_U2GS_Friend2BanWithUnban_Reply.isAgreed ),
	[
		<<?U2GS_Friend2BanWithUnban_Reply:?U16>>,
		Bin_idUnban,
		Bin_idBan,
		Bin_isAgreed
	];

%GENERATED from file:friend.h => U2GS_Friend2Ban_Request
encode(#pk_U2GS_Friend2Ban_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2Ban_Request.id ),
	[
		<<?U2GS_Friend2Ban_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2Black_Request
encode(#pk_U2GS_Friend2Black_Request{} = P) ->
	Bin_page = write_uint8( P#pk_U2GS_Friend2Black_Request.page ),
	[
		<<?U2GS_Friend2Black_Request:?U16>>,
		Bin_page
	];

%GENERATED from file:friend.h => U2GS_Friend2CrossAdd2_Request
encode(#pk_U2GS_Friend2CrossAdd2_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2CrossAdd2_Request.id ),
	Bin_isAgreed = write_bool( P#pk_U2GS_Friend2CrossAdd2_Request.isAgreed ),
	[
		<<?U2GS_Friend2CrossAdd2_Request:?U16>>,
		Bin_id,
		Bin_isAgreed
	];

%GENERATED from file:friend.h => U2GS_Friend2CrossAdd_Request
encode(#pk_U2GS_Friend2CrossAdd_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2CrossAdd_Request.id ),
	[
		<<?U2GS_Friend2CrossAdd_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2CrossAll_Request
encode(#pk_U2GS_Friend2CrossAll_Request{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_Friend2CrossAll_Request.type ),
	[
		<<?U2GS_Friend2CrossAll_Request:?U16>>,
		Bin_type
	];

%GENERATED from file:friend.h => U2GS_Friend2CrossDel_Request
encode(#pk_U2GS_Friend2CrossDel_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2CrossDel_Request.id ),
	[
		<<?U2GS_Friend2CrossDel_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2Del_Request
encode(#pk_U2GS_Friend2Del_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2Del_Request.id ),
	[
		<<?U2GS_Friend2Del_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2ForLook_Request
encode(#pk_U2GS_Friend2ForLook_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2ForLook_Request.id ),
	[
		<<?U2GS_Friend2ForLook_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2FormalChatVoice_Request
encode(#pk_U2GS_Friend2FormalChatVoice_Request{} = P) ->
	Bin_receiverID = write_uint64( P#pk_U2GS_Friend2FormalChatVoice_Request.receiverID ),
	Bin_time = write_uint32( P#pk_U2GS_Friend2FormalChatVoice_Request.time ),
	Bin_duration = write_float( P#pk_U2GS_Friend2FormalChatVoice_Request.duration ),
	Bin_count = write_uint8( P#pk_U2GS_Friend2FormalChatVoice_Request.count ),
	Bin_index = write_uint8( P#pk_U2GS_Friend2FormalChatVoice_Request.index ),
	Bin_data = write_array(P#pk_U2GS_Friend2FormalChatVoice_Request.data, fun(X) -> write_uint8( X ) end),
	[
		<<?U2GS_Friend2FormalChatVoice_Request:?U16>>,
		Bin_receiverID,
		Bin_time,
		Bin_duration,
		Bin_count,
		Bin_index,
		Bin_data
	];

%GENERATED from file:friend.h => U2GS_Friend2FormalChat_Request
encode(#pk_U2GS_Friend2FormalChat_Request{} = P) ->
	Bin_receiverID = write_uint64( P#pk_U2GS_Friend2FormalChat_Request.receiverID ),
	Bin_content = write_string( P#pk_U2GS_Friend2FormalChat_Request.content ),
	Bin_time = write_uint32( P#pk_U2GS_Friend2FormalChat_Request.time ),
	[
		<<?U2GS_Friend2FormalChat_Request:?U16>>,
		Bin_receiverID,
		Bin_content,
		Bin_time
	];

%GENERATED from file:friend.h => U2GS_Friend2FormalForMarriage_Request
encode(#pk_U2GS_Friend2FormalForMarriage_Request{} = P) ->
	Bin_page = write_uint8( P#pk_U2GS_Friend2FormalForMarriage_Request.page ),
	[
		<<?U2GS_Friend2FormalForMarriage_Request:?U16>>,
		Bin_page
	];

%GENERATED from file:friend.h => U2GS_Friend2FormalOP_Request
encode(#pk_U2GS_Friend2FormalOP_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2FormalOP_Request.id ),
	Bin_opType = write_uint8( P#pk_U2GS_Friend2FormalOP_Request.opType ),
	[
		<<?U2GS_Friend2FormalOP_Request:?U16>>,
		Bin_id,
		Bin_opType
	];

%GENERATED from file:friend.h => U2GS_Friend2Formal_Request
encode(#pk_U2GS_Friend2Formal_Request{} = P) ->
	Bin_page = write_uint8( P#pk_U2GS_Friend2Formal_Request.page ),
	[
		<<?U2GS_Friend2Formal_Request:?U16>>,
		Bin_page
	];

%GENERATED from file:friend.h => U2GS_Friend2GetBack_Add
encode(#pk_U2GS_Friend2GetBack_Add{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2GetBack_Add.id ),
	[
		<<?U2GS_Friend2GetBack_Add:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2GetBack_Ignore
encode(#pk_U2GS_Friend2GetBack_Ignore{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2GetBack_Ignore.id ),
	[
		<<?U2GS_Friend2GetBack_Ignore:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2GetBack_OneKeyToAdd
encode(#pk_U2GS_Friend2GetBack_OneKeyToAdd{}) ->
	[
		<<?U2GS_Friend2GetBack_OneKeyToAdd:?U16>>

	];

%GENERATED from file:friend.h => U2GS_Friend2LimitSearch_Request
encode(#pk_U2GS_Friend2LimitSearch_Request{} = P) ->
	Bin_name = write_string( P#pk_U2GS_Friend2LimitSearch_Request.name ),
	[
		<<?U2GS_Friend2LimitSearch_Request:?U16>>,
		Bin_name
	];

%GENERATED from file:friend.h => U2GS_Friend2Recommend_Request
encode(#pk_U2GS_Friend2Recommend_Request{} = P) ->
	Bin_sex = write_uint8( P#pk_U2GS_Friend2Recommend_Request.sex ),
	Bin_isNear = write_bool( P#pk_U2GS_Friend2Recommend_Request.isNear ),
	Bin_isPush = write_bool( P#pk_U2GS_Friend2Recommend_Request.isPush ),
	[
		<<?U2GS_Friend2Recommend_Request:?U16>>,
		Bin_sex,
		Bin_isNear,
		Bin_isPush
	];

%GENERATED from file:friend.h => U2GS_Friend2Search_Request
encode(#pk_U2GS_Friend2Search_Request{} = P) ->
	Bin_name = write_string( P#pk_U2GS_Friend2Search_Request.name ),
	[
		<<?U2GS_Friend2Search_Request:?U16>>,
		Bin_name
	];

%GENERATED from file:friend.h => U2GS_Friend2SimpleList_Requets
encode(#pk_U2GS_Friend2SimpleList_Requets{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_Friend2SimpleList_Requets.type ),
	[
		<<?U2GS_Friend2SimpleList_Requets:?U16>>,
		Bin_type
	];

%GENERATED from file:friend.h => U2GS_Friend2Temp_Request
encode(#pk_U2GS_Friend2Temp_Request{} = P) ->
	Bin_page = write_uint8( P#pk_U2GS_Friend2Temp_Request.page ),
	[
		<<?U2GS_Friend2Temp_Request:?U16>>,
		Bin_page
	];

%GENERATED from file:friend.h => U2GS_Friend2Unban_Request
encode(#pk_U2GS_Friend2Unban_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2Unban_Request.id ),
	[
		<<?U2GS_Friend2Unban_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:friend.h => U2GS_Friend2WantChat_Request
encode(#pk_U2GS_Friend2WantChat_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Friend2WantChat_Request.id ),
	[
		<<?U2GS_Friend2WantChat_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:godweapon.h => GS2U_InitGodWeapon
encode(#pk_GS2U_InitGodWeapon{} = P) ->
	Bin_infos = write_array(P#pk_GS2U_InitGodWeapon.infos, fun(X) -> encode_GodWeaponInfo( X ) end),
	[
		<<?GS2U_InitGodWeapon:?U16>>,
		Bin_infos
	];

%GENERATED from file:godweapon.h => GS2U_LevelUpGodWeaponResult
encode(#pk_GS2U_LevelUpGodWeaponResult{} = P) ->
	Bin_weaponID = write_uint8( P#pk_GS2U_LevelUpGodWeaponResult.weaponID ),
	Bin_weaponLevel = write_uint16( P#pk_GS2U_LevelUpGodWeaponResult.weaponLevel ),
	Bin_exp = write_uint32( P#pk_GS2U_LevelUpGodWeaponResult.exp ),
	Bin_wakeSkillLv = write_uint16( P#pk_GS2U_LevelUpGodWeaponResult.wakeSkillLv ),
	[
		<<?GS2U_LevelUpGodWeaponResult:?U16>>,
		Bin_weaponID,
		Bin_weaponLevel,
		Bin_exp,
		Bin_wakeSkillLv
	];

%GENERATED from file:godweapon.h => GS2U_LevelUpGodWeaponSkillResult
encode(#pk_GS2U_LevelUpGodWeaponSkillResult{} = P) ->
	Bin_weaponID = write_uint8( P#pk_GS2U_LevelUpGodWeaponSkillResult.weaponID ),
	Bin_skillLevel = write_uint16( P#pk_GS2U_LevelUpGodWeaponSkillResult.skillLevel ),
	[
		<<?GS2U_LevelUpGodWeaponSkillResult:?U16>>,
		Bin_weaponID,
		Bin_skillLevel
	];

%GENERATED from file:godweapon.h => U2GS_LevelUpGodWeapon
encode(#pk_U2GS_LevelUpGodWeapon{} = P) ->
	Bin_weaponID = write_uint8( P#pk_U2GS_LevelUpGodWeapon.weaponID ),
	[
		<<?U2GS_LevelUpGodWeapon:?U16>>,
		Bin_weaponID
	];

%GENERATED from file:godweapon.h => U2GS_LevelUpGodWeaponSkill
encode(#pk_U2GS_LevelUpGodWeaponSkill{} = P) ->
	Bin_weaponID = write_uint8( P#pk_U2GS_LevelUpGodWeaponSkill.weaponID ),
	[
		<<?U2GS_LevelUpGodWeaponSkill:?U16>>,
		Bin_weaponID
	];

%GENERATED from file:guild.h => GS2U_BiddingGuildMsg
encode(#pk_GS2U_BiddingGuildMsg{} = P) ->
	Bin_list = write_array(P#pk_GS2U_BiddingGuildMsg.list, fun(X) -> encode_BiddingGuild( X ) end),
	Bin_resorce = write_uint32( P#pk_GS2U_BiddingGuildMsg.resorce ),
	[
		<<?GS2U_BiddingGuildMsg:?U16>>,
		Bin_list,
		Bin_resorce
	];

%GENERATED from file:guild.h => GS2U_ChangeDenoter
encode(#pk_GS2U_ChangeDenoter{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_ChangeDenoter.guildID ),
	Bin_denoter = write_uint8( P#pk_GS2U_ChangeDenoter.denoter ),
	[
		<<?GS2U_ChangeDenoter:?U16>>,
		Bin_guildID,
		Bin_denoter
	];

%GENERATED from file:guild.h => GS2U_ChangeGuildName
encode(#pk_GS2U_ChangeGuildName{} = P) ->
	Bin_newGuildName = write_string( P#pk_GS2U_ChangeGuildName.newGuildName ),
	[
		<<?GS2U_ChangeGuildName:?U16>>,
		Bin_newGuildName
	];

%GENERATED from file:guild.h => GS2U_ChangeNotice
encode(#pk_GS2U_ChangeNotice{} = P) ->
	Bin_guildNotice = write_string( P#pk_GS2U_ChangeNotice.guildNotice ),
	[
		<<?GS2U_ChangeNotice:?U16>>,
		Bin_guildNotice
	];

%GENERATED from file:guild.h => GS2U_DonateSuccess
encode(#pk_GS2U_DonateSuccess{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_DonateSuccess.guildID ),
	Bin_guildLevel = write_uint8( P#pk_GS2U_DonateSuccess.guildLevel ),
	Bin_nowExp = write_uint32( P#pk_GS2U_DonateSuccess.nowExp ),
	Bin_roleID = write_uint64( P#pk_GS2U_DonateSuccess.roleID ),
	Bin_contribute = write_uint32( P#pk_GS2U_DonateSuccess.contribute ),
	[
		<<?GS2U_DonateSuccess:?U16>>,
		Bin_guildID,
		Bin_guildLevel,
		Bin_nowExp,
		Bin_roleID,
		Bin_contribute
	];

%GENERATED from file:guild.h => GS2U_ExpeditionBroadcastPos
encode(#pk_GS2U_ExpeditionBroadcastPos{} = P) ->
	Bin_type = write_uint16( P#pk_GS2U_ExpeditionBroadcastPos.type ),
	Bin_broadcasterName = write_string( P#pk_GS2U_ExpeditionBroadcastPos.broadcasterName ),
	Bin_x = write_float( P#pk_GS2U_ExpeditionBroadcastPos.x ),
	Bin_y = write_float( P#pk_GS2U_ExpeditionBroadcastPos.y ),
	[
		<<?GS2U_ExpeditionBroadcastPos:?U16>>,
		Bin_type,
		Bin_broadcasterName,
		Bin_x,
		Bin_y
	];

%GENERATED from file:guild.h => GS2U_ExpeditionFinalInfo
encode(#pk_GS2U_ExpeditionFinalInfo{} = P) ->
	Bin_selfTotalScore = write_uint64( P#pk_GS2U_ExpeditionFinalInfo.selfTotalScore ),
	Bin_finalInfoList = write_array(P#pk_GS2U_ExpeditionFinalInfo.finalInfoList, fun(X) -> encode_ExpeditionFinalInfo( X ) end),
	[
		<<?GS2U_ExpeditionFinalInfo:?U16>>,
		Bin_selfTotalScore,
		Bin_finalInfoList
	];

%GENERATED from file:guild.h => GS2U_ExpeditionGlobalMapInfoList
encode(#pk_GS2U_ExpeditionGlobalMapInfoList{} = P) ->
	Bin_leftSeconds = write_uint32( P#pk_GS2U_ExpeditionGlobalMapInfoList.leftSeconds ),
	Bin_mapInfoList = write_array(P#pk_GS2U_ExpeditionGlobalMapInfoList.mapInfoList, fun(X) -> encode_ExpeditionGlobalMapInfo( X ) end),
	[
		<<?GS2U_ExpeditionGlobalMapInfoList:?U16>>,
		Bin_leftSeconds,
		Bin_mapInfoList
	];

%GENERATED from file:guild.h => GS2U_ExpeditionMapBattleInfoList
encode(#pk_GS2U_ExpeditionMapBattleInfoList{} = P) ->
	Bin_mapid = write_uint32( P#pk_GS2U_ExpeditionMapBattleInfoList.mapid ),
	Bin_selfScore = write_uint64( P#pk_GS2U_ExpeditionMapBattleInfoList.selfScore ),
	Bin_selfGuildBattleInfo = encode_ExpeditionGuildBattleInfo( P#pk_GS2U_ExpeditionMapBattleInfoList.selfGuildBattleInfo ),
	Bin_pointInfoList = write_array(P#pk_GS2U_ExpeditionMapBattleInfoList.pointInfoList, fun(X) -> encode_ExpeditionPointInfo( X ) end),
	Bin_topGuildInfoList = write_array(P#pk_GS2U_ExpeditionMapBattleInfoList.topGuildInfoList, fun(X) -> encode_ExpeditionGuildBattleInfo( X ) end),
	[
		<<?GS2U_ExpeditionMapBattleInfoList:?U16>>,
		Bin_mapid,
		Bin_selfScore,
		Bin_selfGuildBattleInfo,
		Bin_pointInfoList,
		Bin_topGuildInfoList
	];

%GENERATED from file:guild.h => GS2U_ExpeditionMapInfoList
encode(#pk_GS2U_ExpeditionMapInfoList{} = P) ->
	Bin_mapInfoList = write_array(P#pk_GS2U_ExpeditionMapInfoList.mapInfoList, fun(X) -> encode_ExpeditionMapInfo( X ) end),
	[
		<<?GS2U_ExpeditionMapInfoList:?U16>>,
		Bin_mapInfoList
	];

%GENERATED from file:guild.h => GS2U_ExpeditionQuenenState
encode(#pk_GS2U_ExpeditionQuenenState{} = P) ->
	Bin_mapid = write_uint32( P#pk_GS2U_ExpeditionQuenenState.mapid ),
	[
		<<?GS2U_ExpeditionQuenenState:?U16>>,
		Bin_mapid
	];

%GENERATED from file:guild.h => GS2U_GivePower
encode(#pk_GS2U_GivePower{} = P) ->
	Bin_targetRoleID = write_uint64( P#pk_GS2U_GivePower.targetRoleID ),
	Bin_guileLevel = write_uint8( P#pk_GS2U_GivePower.guileLevel ),
	[
		<<?GS2U_GivePower:?U16>>,
		Bin_targetRoleID,
		Bin_guileLevel
	];

%GENERATED from file:guild.h => GS2U_GuildBattleApply
encode(#pk_GS2U_GuildBattleApply{} = P) ->
	Bin_list = write_array(P#pk_GS2U_GuildBattleApply.list, fun(X) -> encode_GuildBattleInfo( X ) end),
	Bin_selfGuildID = write_uint64( P#pk_GS2U_GuildBattleApply.selfGuildID ),
	Bin_targetGuildID = write_uint64( P#pk_GS2U_GuildBattleApply.targetGuildID ),
	[
		<<?GS2U_GuildBattleApply:?U16>>,
		Bin_list,
		Bin_selfGuildID,
		Bin_targetGuildID
	];

%GENERATED from file:guild.h => GS2U_GuildBattleResult
encode(#pk_GS2U_GuildBattleResult{} = P) ->
	Bin_isEnd = write_uint8( P#pk_GS2U_GuildBattleResult.isEnd ),
	Bin_win = encode_GuildBattleResultInfo( P#pk_GS2U_GuildBattleResult.win ),
	Bin_lose = encode_GuildBattleResultInfo( P#pk_GS2U_GuildBattleResult.lose ),
	[
		<<?GS2U_GuildBattleResult:?U16>>,
		Bin_isEnd,
		Bin_win,
		Bin_lose
	];

%GENERATED from file:guild.h => GS2U_GuildBossRank
encode(#pk_GS2U_GuildBossRank{} = P) ->
	Bin_buffLevel = write_uint8( P#pk_GS2U_GuildBossRank.buffLevel ),
	Bin_listHurtList = write_array(P#pk_GS2U_GuildBossRank.listHurtList, fun(X) -> encode_GuildHurtList( X ) end),
	[
		<<?GS2U_GuildBossRank:?U16>>,
		Bin_buffLevel,
		Bin_listHurtList
	];

%GENERATED from file:guild.h => GS2U_GuildBossResoult
encode(#pk_GS2U_GuildBossResoult{} = P) ->
	Bin_isChallengeSucceeds = write_bool( P#pk_GS2U_GuildBossResoult.isChallengeSucceeds ),
	Bin_guildBosslevel = write_uint8( P#pk_GS2U_GuildBossResoult.guildBosslevel ),
	Bin_isMyFirstKill = write_bool( P#pk_GS2U_GuildBossResoult.isMyFirstKill ),
	Bin_isMyKill = write_bool( P#pk_GS2U_GuildBossResoult.isMyKill ),
	[
		<<?GS2U_GuildBossResoult:?U16>>,
		Bin_isChallengeSucceeds,
		Bin_guildBosslevel,
		Bin_isMyFirstKill,
		Bin_isMyKill
	];

%GENERATED from file:guild.h => GS2U_GuildBuff
encode(#pk_GS2U_GuildBuff{} = P) ->
	Bin_buff = write_array(P#pk_GS2U_GuildBuff.buff, fun(X) -> encode_GuildBuff( X ) end),
	[
		<<?GS2U_GuildBuff:?U16>>,
		Bin_buff
	];

%GENERATED from file:guild.h => GS2U_GuildBuffRole
encode(#pk_GS2U_GuildBuffRole{} = P) ->
	Bin_bgrs = write_array(P#pk_GS2U_GuildBuffRole.bgrs, fun(X) -> encode_GuildBuffRole( X ) end),
	[
		<<?GS2U_GuildBuffRole:?U16>>,
		Bin_bgrs
	];

%GENERATED from file:guild.h => GS2U_GuildIDList
encode(#pk_GS2U_GuildIDList{} = P) ->
	Bin_list = write_array(P#pk_GS2U_GuildIDList.list, fun(X) -> encode_GuildIDList( X ) end),
	[
		<<?GS2U_GuildIDList:?U16>>,
		Bin_list
	];

%GENERATED from file:guild.h => GS2U_GuildList
encode(#pk_GS2U_GuildList{} = P) ->
	Bin_nowPage = write_uint32( P#pk_GS2U_GuildList.nowPage ),
	Bin_maxPage = write_uint32( P#pk_GS2U_GuildList.maxPage ),
	Bin_guildInfoList = write_array(P#pk_GS2U_GuildList.guildInfoList, fun(X) -> encode_GuildInfo( X ) end),
	[
		<<?GS2U_GuildList:?U16>>,
		Bin_nowPage,
		Bin_maxPage,
		Bin_guildInfoList
	];

%GENERATED from file:guild.h => GS2U_GuildLoopTask_Give_Ack
encode(#pk_GS2U_GuildLoopTask_Give_Ack{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_GuildLoopTask_Give_Ack.type ),
	Bin_roleID = write_uint64( P#pk_GS2U_GuildLoopTask_Give_Ack.roleID ),
	Bin_taskID = write_uint16( P#pk_GS2U_GuildLoopTask_Give_Ack.taskID ),
	Bin_listData = write_array(P#pk_GS2U_GuildLoopTask_Give_Ack.listData, fun(X) -> encode_GuildLoopTask_Get( X ) end),
	Bin_count = write_uint32( P#pk_GS2U_GuildLoopTask_Give_Ack.count ),
	[
		<<?GS2U_GuildLoopTask_Give_Ack:?U16>>,
		Bin_type,
		Bin_roleID,
		Bin_taskID,
		Bin_listData,
		Bin_count
	];

%GENERATED from file:guild.h => GS2U_GuildLoopTask_History_Ack
encode(#pk_GS2U_GuildLoopTask_History_Ack{} = P) ->
	Bin_listHistory = write_array(P#pk_GS2U_GuildLoopTask_History_Ack.listHistory, fun(X) -> encode_GuildLoopTaskGiveHistory2( X ) end),
	Bin_nameTables = write_array(P#pk_GS2U_GuildLoopTask_History_Ack.nameTables, fun(X) -> encode_NameTable2( X ) end),
	[
		<<?GS2U_GuildLoopTask_History_Ack:?U16>>,
		Bin_listHistory,
		Bin_nameTables
	];

%GENERATED from file:guild.h => GS2U_GuildLoopTask_MyGet_Sync
encode(#pk_GS2U_GuildLoopTask_MyGet_Sync{} = P) ->
	Bin_state = write_uint8( P#pk_GS2U_GuildLoopTask_MyGet_Sync.state ),
	Bin_myGet = write_array(P#pk_GS2U_GuildLoopTask_MyGet_Sync.myGet, fun(X) -> encode_GuildLoopTask_Get( X ) end),
	[
		<<?GS2U_GuildLoopTask_MyGet_Sync:?U16>>,
		Bin_state,
		Bin_myGet
	];

%GENERATED from file:guild.h => GS2U_GuildLoopTask_OpenUI_Ack
encode(#pk_GS2U_GuildLoopTask_OpenUI_Ack{} = P) ->
	Bin_listData = write_array(P#pk_GS2U_GuildLoopTask_OpenUI_Ack.listData, fun(X) -> encode_GuildLoopTask_Get( X ) end),
	[
		<<?GS2U_GuildLoopTask_OpenUI_Ack:?U16>>,
		Bin_listData
	];

%GENERATED from file:guild.h => GS2U_GuildLoopTask_WantGive_Ack
encode(#pk_GS2U_GuildLoopTask_WantGive_Ack{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_GuildLoopTask_WantGive_Ack.type ),
	Bin_roleID = write_uint64( P#pk_GS2U_GuildLoopTask_WantGive_Ack.roleID ),
	Bin_listData = write_array(P#pk_GS2U_GuildLoopTask_WantGive_Ack.listData, fun(X) -> encode_GuildLoopTask_Get( X ) end),
	[
		<<?GS2U_GuildLoopTask_WantGive_Ack:?U16>>,
		Bin_type,
		Bin_roleID,
		Bin_listData
	];

%GENERATED from file:guild.h => GS2U_GuildOpResult
encode(#pk_GS2U_GuildOpResult{} = P) ->
	Bin_roleCode = write_uint64( P#pk_GS2U_GuildOpResult.roleCode ),
	Bin_opType = write_uint8( P#pk_GS2U_GuildOpResult.opType ),
	Bin_opResult = write_bool( P#pk_GS2U_GuildOpResult.opResult ),
	[
		<<?GS2U_GuildOpResult:?U16>>,
		Bin_roleCode,
		Bin_opType,
		Bin_opResult
	];

%GENERATED from file:guild.h => GS2U_GuildSkill
encode(#pk_GS2U_GuildSkill{} = P) ->
	Bin_skill = write_array(P#pk_GS2U_GuildSkill.skill, fun(X) -> encode_GuildSkill( X ) end),
	Bin_selfskill = write_array(P#pk_GS2U_GuildSkill.selfskill, fun(X) -> encode_GuildSkill( X ) end),
	[
		<<?GS2U_GuildSkill:?U16>>,
		Bin_skill,
		Bin_selfskill
	];

%GENERATED from file:guild.h => GS2U_GuildTask
encode(#pk_GS2U_GuildTask{} = P) ->
	Bin_tasks = write_array(P#pk_GS2U_GuildTask.tasks, fun(X) -> encode_GuildTask( X ) end),
	[
		<<?GS2U_GuildTask:?U16>>,
		Bin_tasks
	];

%GENERATED from file:guild.h => GS2U_GuildWar
encode(#pk_GS2U_GuildWar{} = P) ->
	Bin_list = write_array(P#pk_GS2U_GuildWar.list, fun(X) -> encode_GuildWar( X ) end),
	[
		<<?GS2U_GuildWar:?U16>>,
		Bin_list
	];

%GENERATED from file:guild.h => GS2U_GuildWarCannonHit
encode(#pk_GS2U_GuildWarCannonHit{} = P) ->
	Bin_hits = write_array(P#pk_GS2U_GuildWarCannonHit.hits, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_GuildWarCannonHit:?U16>>,
		Bin_hits
	];

%GENERATED from file:guild.h => GS2U_GuildWarData
encode(#pk_GS2U_GuildWarData{} = P) ->
	Bin_ranks = write_array(P#pk_GS2U_GuildWarData.ranks, fun(X) -> encode_GuildWarRank( X ) end),
	Bin_pebbles = write_array(P#pk_GS2U_GuildWarData.pebbles, fun(X) -> encode_PebbleState( X ) end),
	Bin_cannons = write_array(P#pk_GS2U_GuildWarData.cannons, fun(X) -> encode_CannonState( X ) end),
	Bin_infos = write_array(P#pk_GS2U_GuildWarData.infos, fun(X) -> encode_GuildWarInfo( X ) end),
	Bin_syTime = write_uint32( P#pk_GS2U_GuildWarData.syTime ),
	[
		<<?GS2U_GuildWarData:?U16>>,
		Bin_ranks,
		Bin_pebbles,
		Bin_cannons,
		Bin_infos,
		Bin_syTime
	];

%GENERATED from file:guild.h => GS2U_GuildWarEnd
encode(#pk_GS2U_GuildWarEnd{} = P) ->
	Bin_isGradeToJS = write_bool( P#pk_GS2U_GuildWarEnd.isGradeToJS ),
	Bin_infos = write_array(P#pk_GS2U_GuildWarEnd.infos, fun(X) -> encode_GuildWarInfo( X ) end),
	Bin_items = write_array(P#pk_GS2U_GuildWarEnd.items, fun(X) -> encode_GuildWarReward_item( X ) end),
	Bin_coins = write_array(P#pk_GS2U_GuildWarEnd.coins, fun(X) -> encode_GuildWarReward_coin( X ) end),
	[
		<<?GS2U_GuildWarEnd:?U16>>,
		Bin_isGradeToJS,
		Bin_infos,
		Bin_items,
		Bin_coins
	];

%GENERATED from file:guild.h => GS2U_GuildWarRankForHud
encode(#pk_GS2U_GuildWarRankForHud{} = P) ->
	Bin_ranks = write_array(P#pk_GS2U_GuildWarRankForHud.ranks, fun(X) -> encode_GuildWarRankInfo( X ) end),
	[
		<<?GS2U_GuildWarRankForHud:?U16>>,
		Bin_ranks
	];

%GENERATED from file:guild.h => GS2U_Guild_ExchangeAll_Sync
encode(#pk_GS2U_Guild_ExchangeAll_Sync{} = P) ->
	Bin_listID = write_array(P#pk_GS2U_Guild_ExchangeAll_Sync.listID, fun(X) -> write_uint32( X ) end),
	Bin_listLevel = write_array(P#pk_GS2U_Guild_ExchangeAll_Sync.listLevel, fun(X) -> write_uint32( X ) end),
	Bin_listLevelCur = write_array(P#pk_GS2U_Guild_ExchangeAll_Sync.listLevelCur, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_Guild_ExchangeAll_Sync:?U16>>,
		Bin_listID,
		Bin_listLevel,
		Bin_listLevelCur
	];

%GENERATED from file:guild.h => GS2U_Guild_Exchange_Ack
encode(#pk_GS2U_Guild_Exchange_Ack{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_Guild_Exchange_Ack.id ),
	Bin_level = write_uint32( P#pk_GS2U_Guild_Exchange_Ack.level ),
	Bin_errorCode = write_uint32( P#pk_GS2U_Guild_Exchange_Ack.errorCode ),
	[
		<<?GS2U_Guild_Exchange_Ack:?U16>>,
		Bin_id,
		Bin_level,
		Bin_errorCode
	];

%GENERATED from file:guild.h => GS2U_Guild_FairgroundEnter_Ack
encode(#pk_GS2U_Guild_FairgroundEnter_Ack{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_Guild_FairgroundEnter_Ack.guildID ),
	Bin_listRide = write_array(P#pk_GS2U_Guild_FairgroundEnter_Ack.listRide, fun(X) -> encode_Ride( X ) end),
	Bin_listRole = write_array(P#pk_GS2U_Guild_FairgroundEnter_Ack.listRole, fun(X) -> encode_RideRole( X ) end),
	[
		<<?GS2U_Guild_FairgroundEnter_Ack:?U16>>,
		Bin_guildID,
		Bin_listRide,
		Bin_listRole
	];

%GENERATED from file:guild.h => GS2U_Guild_FairgroundRide_Sync
encode(#pk_GS2U_Guild_FairgroundRide_Sync{} = P) ->
	Bin_ride = encode_Ride( P#pk_GS2U_Guild_FairgroundRide_Sync.ride ),
	Bin_role = encode_RideRole( P#pk_GS2U_Guild_FairgroundRide_Sync.role ),
	Bin_type = write_uint8( P#pk_GS2U_Guild_FairgroundRide_Sync.type ),
	[
		<<?GS2U_Guild_FairgroundRide_Sync:?U16>>,
		Bin_ride,
		Bin_role,
		Bin_type
	];

%GENERATED from file:guild.h => GS2U_Guild_FastJoin_Ack
encode(#pk_GS2U_Guild_FastJoin_Ack{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_Guild_FastJoin_Ack.guildID ),
	[
		<<?GS2U_Guild_FastJoin_Ack:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => GS2U_Guild_FastJoin_Get_Ack
encode(#pk_GS2U_Guild_FastJoin_Get_Ack{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_Guild_FastJoin_Get_Ack.guildID ),
	Bin_force = write_uint64( P#pk_GS2U_Guild_FastJoin_Get_Ack.force ),
	[
		<<?GS2U_Guild_FastJoin_Get_Ack:?U16>>,
		Bin_guildID,
		Bin_force
	];

%GENERATED from file:guild.h => GS2U_Guild_FastJoin_Set_Ack
encode(#pk_GS2U_Guild_FastJoin_Set_Ack{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_Guild_FastJoin_Set_Ack.guildID ),
	Bin_force = write_uint64( P#pk_GS2U_Guild_FastJoin_Set_Ack.force ),
	[
		<<?GS2U_Guild_FastJoin_Set_Ack:?U16>>,
		Bin_guildID,
		Bin_force
	];

%GENERATED from file:guild.h => GS2U_Guild_GodBless_Ack
encode(#pk_GS2U_Guild_GodBless_Ack{} = P) ->
	Bin_time = write_uint32( P#pk_GS2U_Guild_GodBless_Ack.time ),
	Bin_count = write_uint8( P#pk_GS2U_Guild_GodBless_Ack.count ),
	[
		<<?GS2U_Guild_GodBless_Ack:?U16>>,
		Bin_time,
		Bin_count
	];

%GENERATED from file:guild.h => GS2U_Guild_GodBless_Schedule_Reward_Ack
encode(#pk_GS2U_Guild_GodBless_Schedule_Reward_Ack{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_Guild_GodBless_Schedule_Reward_Ack.id ),
	[
		<<?GS2U_Guild_GodBless_Schedule_Reward_Ack:?U16>>,
		Bin_id
	];

%GENERATED from file:guild.h => GS2U_Guild_GodBless_Schedule_Sync
encode(#pk_GS2U_Guild_GodBless_Schedule_Sync{} = P) ->
	Bin_schedule = write_uint32( P#pk_GS2U_Guild_GodBless_Schedule_Sync.schedule ),
	Bin_listID = write_array(P#pk_GS2U_Guild_GodBless_Schedule_Sync.listID, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_Guild_GodBless_Schedule_Sync:?U16>>,
		Bin_schedule,
		Bin_listID
	];

%GENERATED from file:guild.h => GS2U_Guild_OpenSupplication_Ack
encode(#pk_GS2U_Guild_OpenSupplication_Ack{} = P) ->
	Bin_listInfo = write_array(P#pk_GS2U_Guild_OpenSupplication_Ack.listInfo, fun(X) -> encode_Supplication( X ) end),
	[
		<<?GS2U_Guild_OpenSupplication_Ack:?U16>>,
		Bin_listInfo
	];

%GENERATED from file:guild.h => GS2U_Guild_ShopBuy_Ack
encode(#pk_GS2U_Guild_ShopBuy_Ack{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_Guild_ShopBuy_Ack.id ),
	Bin_count = write_uint32( P#pk_GS2U_Guild_ShopBuy_Ack.count ),
	Bin_errorCode = write_uint32( P#pk_GS2U_Guild_ShopBuy_Ack.errorCode ),
	[
		<<?GS2U_Guild_ShopBuy_Ack:?U16>>,
		Bin_id,
		Bin_count,
		Bin_errorCode
	];

%GENERATED from file:guild.h => GS2U_Guild_SnowmanAll_Sync
encode(#pk_GS2U_Guild_SnowmanAll_Sync{} = P) ->
	Bin_count = write_uint32( P#pk_GS2U_Guild_SnowmanAll_Sync.count ),
	Bin_countMax = write_uint32( P#pk_GS2U_Guild_SnowmanAll_Sync.countMax ),
	Bin_subState = write_uint32( P#pk_GS2U_Guild_SnowmanAll_Sync.subState ),
	Bin_listResSnowman = write_array(P#pk_GS2U_Guild_SnowmanAll_Sync.listResSnowman, fun(X) -> write_uint32( X ) end),
	Bin_listResPlayer = write_array(P#pk_GS2U_Guild_SnowmanAll_Sync.listResPlayer, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_Guild_SnowmanAll_Sync:?U16>>,
		Bin_count,
		Bin_countMax,
		Bin_subState,
		Bin_listResSnowman,
		Bin_listResPlayer
	];

%GENERATED from file:guild.h => GS2U_Guild_SnowmanBegin_Sync
encode(#pk_GS2U_Guild_SnowmanBegin_Sync{}) ->
	[
		<<?GS2U_Guild_SnowmanBegin_Sync:?U16>>

	];

%GENERATED from file:guild.h => GS2U_Guild_SnowmanCompleteCount_Sync
encode(#pk_GS2U_Guild_SnowmanCompleteCount_Sync{} = P) ->
	Bin_count = write_uint32( P#pk_GS2U_Guild_SnowmanCompleteCount_Sync.count ),
	Bin_listMark = write_array(P#pk_GS2U_Guild_SnowmanCompleteCount_Sync.listMark, fun(X) -> write_bool( X ) end),
	[
		<<?GS2U_Guild_SnowmanCompleteCount_Sync:?U16>>,
		Bin_count,
		Bin_listMark
	];

%GENERATED from file:guild.h => GS2U_Guild_SnowmanExtraRes_Sync
encode(#pk_GS2U_Guild_SnowmanExtraRes_Sync{} = P) ->
	Bin_count = write_uint32( P#pk_GS2U_Guild_SnowmanExtraRes_Sync.count ),
	[
		<<?GS2U_Guild_SnowmanExtraRes_Sync:?U16>>,
		Bin_count
	];

%GENERATED from file:guild.h => GS2U_Guild_SnowmanPlayer_Sync
encode(#pk_GS2U_Guild_SnowmanPlayer_Sync{} = P) ->
	Bin_listResPlayer = write_array(P#pk_GS2U_Guild_SnowmanPlayer_Sync.listResPlayer, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_Guild_SnowmanPlayer_Sync:?U16>>,
		Bin_listResPlayer
	];

%GENERATED from file:guild.h => GS2U_Guild_SnowmanSettle_Sync
encode(#pk_GS2U_Guild_SnowmanSettle_Sync{} = P) ->
	Bin_count = write_uint32( P#pk_GS2U_Guild_SnowmanSettle_Sync.count ),
	Bin_level = write_uint32( P#pk_GS2U_Guild_SnowmanSettle_Sync.level ),
	Bin_guildName = write_string( P#pk_GS2U_Guild_SnowmanSettle_Sync.guildName ),
	[
		<<?GS2U_Guild_SnowmanSettle_Sync:?U16>>,
		Bin_count,
		Bin_level,
		Bin_guildName
	];

%GENERATED from file:guild.h => GS2U_Guild_SnowmanSnowman_Sync
encode(#pk_GS2U_Guild_SnowmanSnowman_Sync{} = P) ->
	Bin_count = write_uint32( P#pk_GS2U_Guild_SnowmanSnowman_Sync.count ),
	Bin_countMax = write_uint32( P#pk_GS2U_Guild_SnowmanSnowman_Sync.countMax ),
	Bin_subState = write_uint32( P#pk_GS2U_Guild_SnowmanSnowman_Sync.subState ),
	Bin_listResSnowman = write_array(P#pk_GS2U_Guild_SnowmanSnowman_Sync.listResSnowman, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_Guild_SnowmanSnowman_Sync:?U16>>,
		Bin_count,
		Bin_countMax,
		Bin_subState,
		Bin_listResSnowman
	];

%GENERATED from file:guild.h => GS2U_Guild_SupplicateGiveF_Ack
encode(#pk_GS2U_Guild_SupplicateGiveF_Ack{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_Guild_SupplicateGiveF_Ack.type ),
	Bin_tarRoleID = write_uint64( P#pk_GS2U_Guild_SupplicateGiveF_Ack.tarRoleID ),
	[
		<<?GS2U_Guild_SupplicateGiveF_Ack:?U16>>,
		Bin_type,
		Bin_tarRoleID
	];

%GENERATED from file:guild.h => GS2U_Guild_SupplicateGive_Ack
encode(#pk_GS2U_Guild_SupplicateGive_Ack{} = P) ->
	Bin_history = encode_SuppHistory2( P#pk_GS2U_Guild_SupplicateGive_Ack.history ),
	Bin_nameTables = write_array(P#pk_GS2U_Guild_SupplicateGive_Ack.nameTables, fun(X) -> encode_NameTable2( X ) end),
	[
		<<?GS2U_Guild_SupplicateGive_Ack:?U16>>,
		Bin_history,
		Bin_nameTables
	];

%GENERATED from file:guild.h => GS2U_Guild_SupplicateGive_Sync
encode(#pk_GS2U_Guild_SupplicateGive_Sync{} = P) ->
	Bin_listHistory = write_array(P#pk_GS2U_Guild_SupplicateGive_Sync.listHistory, fun(X) -> encode_SuppHistory2( X ) end),
	Bin_nameTables = write_array(P#pk_GS2U_Guild_SupplicateGive_Sync.nameTables, fun(X) -> encode_NameTable2( X ) end),
	[
		<<?GS2U_Guild_SupplicateGive_Sync:?U16>>,
		Bin_listHistory,
		Bin_nameTables
	];

%GENERATED from file:guild.h => GS2U_Guild_Supplicate_Ack
encode(#pk_GS2U_Guild_Supplicate_Ack{} = P) ->
	Bin_itemID = write_uint16( P#pk_GS2U_Guild_Supplicate_Ack.itemID ),
	[
		<<?GS2U_Guild_Supplicate_Ack:?U16>>,
		Bin_itemID
	];

%GENERATED from file:guild.h => GS2U_ISInApplyInfo
encode(#pk_GS2U_ISInApplyInfo{} = P) ->
	Bin_isInApply = write_bool( P#pk_GS2U_ISInApplyInfo.isInApply ),
	Bin_isInBattleList = write_bool( P#pk_GS2U_ISInApplyInfo.isInBattleList ),
	Bin_leftTime = write_uint32( P#pk_GS2U_ISInApplyInfo.leftTime ),
	[
		<<?GS2U_ISInApplyInfo:?U16>>,
		Bin_isInApply,
		Bin_isInBattleList,
		Bin_leftTime
	];

%GENERATED from file:guild.h => GS2U_ImpeachInfo
encode(#pk_GS2U_ImpeachInfo{} = P) ->
	Bin_canImpeach = write_uint8( P#pk_GS2U_ImpeachInfo.canImpeach ),
	Bin_supportNumber = write_uint8( P#pk_GS2U_ImpeachInfo.supportNumber ),
	Bin_impeacherID = write_uint64( P#pk_GS2U_ImpeachInfo.impeacherID ),
	Bin_impeacherName = write_string( P#pk_GS2U_ImpeachInfo.impeacherName ),
	Bin_impeacheLeftTime = write_uint64( P#pk_GS2U_ImpeachInfo.impeacheLeftTime ),
	[
		<<?GS2U_ImpeachInfo:?U16>>,
		Bin_canImpeach,
		Bin_supportNumber,
		Bin_impeacherID,
		Bin_impeacherName,
		Bin_impeacheLeftTime
	];

%GENERATED from file:guild.h => GS2U_JoinGuild_Sync
encode(#pk_GS2U_JoinGuild_Sync{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_JoinGuild_Sync.guildID ),
	[
		<<?GS2U_JoinGuild_Sync:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => GS2U_MyGuildBossRank
encode(#pk_GS2U_MyGuildBossRank{} = P) ->
	Bin_rank = write_uint16( P#pk_GS2U_MyGuildBossRank.rank ),
	Bin_myhurt = write_uint64( P#pk_GS2U_MyGuildBossRank.myhurt ),
	[
		<<?GS2U_MyGuildBossRank:?U16>>,
		Bin_rank,
		Bin_myhurt
	];

%GENERATED from file:guild.h => GS2U_MyGuildKillBossRank
encode(#pk_GS2U_MyGuildKillBossRank{} = P) ->
	Bin_rank = write_uint16( P#pk_GS2U_MyGuildKillBossRank.rank ),
	Bin_ustime = write_uint16( P#pk_GS2U_MyGuildKillBossRank.ustime ),
	Bin_listTopTenGuildList = write_array(P#pk_GS2U_MyGuildKillBossRank.listTopTenGuildList, fun(X) -> encode_GuildFastrecord( X ) end),
	[
		<<?GS2U_MyGuildKillBossRank:?U16>>,
		Bin_rank,
		Bin_ustime,
		Bin_listTopTenGuildList
	];

%GENERATED from file:guild.h => GS2U_OccupyOwnerChange
encode(#pk_GS2U_OccupyOwnerChange{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_OccupyOwnerChange.type ),
	Bin_remainSec = write_uint32( P#pk_GS2U_OccupyOwnerChange.remainSec ),
	Bin_owner = encode_OccupyGuildInfo( P#pk_GS2U_OccupyOwnerChange.owner ),
	Bin_target = encode_OccupyGuildInfo( P#pk_GS2U_OccupyOwnerChange.target ),
	Bin_playerInfos = write_array(P#pk_GS2U_OccupyOwnerChange.playerInfos, fun(X) -> encode_GuildBattlePlayerInfo( X ) end),
	[
		<<?GS2U_OccupyOwnerChange:?U16>>,
		Bin_type,
		Bin_remainSec,
		Bin_owner,
		Bin_target,
		Bin_playerInfos
	];

%GENERATED from file:guild.h => GS2U_OneKeyRecruit_Ack
encode(#pk_GS2U_OneKeyRecruit_Ack{} = P) ->
	Bin_cd = write_uint32( P#pk_GS2U_OneKeyRecruit_Ack.cd ),
	Bin_ret = write_uint32( P#pk_GS2U_OneKeyRecruit_Ack.ret ),
	[
		<<?GS2U_OneKeyRecruit_Ack:?U16>>,
		Bin_cd,
		Bin_ret
	];

%GENERATED from file:guild.h => GS2U_OpenGuildForm
encode(#pk_GS2U_OpenGuildForm{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_OpenGuildForm.guildID ),
	Bin_guildName = write_string( P#pk_GS2U_OpenGuildForm.guildName ),
	Bin_guildLevel = write_uint8( P#pk_GS2U_OpenGuildForm.guildLevel ),
	Bin_fightForce = write_uint32( P#pk_GS2U_OpenGuildForm.fightForce ),
	Bin_memberNumber = write_uint32( P#pk_GS2U_OpenGuildForm.memberNumber ),
	Bin_maxMemberNumber = write_uint32( P#pk_GS2U_OpenGuildForm.maxMemberNumber ),
	Bin_resource = write_uint32( P#pk_GS2U_OpenGuildForm.resource ),
	Bin_liveness = write_uint32( P#pk_GS2U_OpenGuildForm.liveness ),
	Bin_notice = write_string( P#pk_GS2U_OpenGuildForm.notice ),
	Bin_denoter = write_uint8( P#pk_GS2U_OpenGuildForm.denoter ),
	Bin_shopLevel = write_uint8( P#pk_GS2U_OpenGuildForm.shopLevel ),
	Bin_requestJoinNum = write_uint32( P#pk_GS2U_OpenGuildForm.requestJoinNum ),
	Bin_selfContribute = write_uint32( P#pk_GS2U_OpenGuildForm.selfContribute ),
	Bin_selfGuildLevel = write_uint8( P#pk_GS2U_OpenGuildForm.selfGuildLevel ),
	Bin_cd = write_uint32( P#pk_GS2U_OpenGuildForm.cd ),
	Bin_canRename = write_bool( P#pk_GS2U_OpenGuildForm.canRename ),
	Bin_isInit = write_bool( P#pk_GS2U_OpenGuildForm.isInit ),
	[
		<<?GS2U_OpenGuildForm:?U16>>,
		Bin_guildID,
		Bin_guildName,
		Bin_guildLevel,
		Bin_fightForce,
		Bin_memberNumber,
		Bin_maxMemberNumber,
		Bin_resource,
		Bin_liveness,
		Bin_notice,
		Bin_denoter,
		Bin_shopLevel,
		Bin_requestJoinNum,
		Bin_selfContribute,
		Bin_selfGuildLevel,
		Bin_cd,
		Bin_canRename,
		Bin_isInit
	];

%GENERATED from file:guild.h => GS2U_QueryGuildInfoByRoleID_Ack
encode(#pk_GS2U_QueryGuildInfoByRoleID_Ack{} = P) ->
	Bin_guildInfo = encode_GuildInfo( P#pk_GS2U_QueryGuildInfoByRoleID_Ack.guildInfo ),
	[
		<<?GS2U_QueryGuildInfoByRoleID_Ack:?U16>>,
		Bin_guildInfo
	];

%GENERATED from file:guild.h => GS2U_QueryImpeachInfo
encode(#pk_GS2U_QueryImpeachInfo{}) ->
	[
		<<?GS2U_QueryImpeachInfo:?U16>>

	];

%GENERATED from file:guild.h => GS2U_Recruit
encode(#pk_GS2U_Recruit{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_Recruit.roleID ),
	Bin_roleName = write_string( P#pk_GS2U_Recruit.roleName ),
	Bin_guildInfo = encode_GuildInfo( P#pk_GS2U_Recruit.guildInfo ),
	[
		<<?GS2U_Recruit:?U16>>,
		Bin_roleID,
		Bin_roleName,
		Bin_guildInfo
	];

%GENERATED from file:guild.h => GS2U_RefreshGuildProp
encode(#pk_GS2U_RefreshGuildProp{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_RefreshGuildProp.guildID ),
	Bin_resource = write_uint32( P#pk_GS2U_RefreshGuildProp.resource ),
	Bin_liveness = write_uint32( P#pk_GS2U_RefreshGuildProp.liveness ),
	Bin_selfContribute = write_uint64( P#pk_GS2U_RefreshGuildProp.selfContribute ),
	Bin_selfLiveness = write_uint32( P#pk_GS2U_RefreshGuildProp.selfLiveness ),
	[
		<<?GS2U_RefreshGuildProp:?U16>>,
		Bin_guildID,
		Bin_resource,
		Bin_liveness,
		Bin_selfContribute,
		Bin_selfLiveness
	];

%GENERATED from file:guild.h => GS2U_RequestGuildBossInfo_Sync
encode(#pk_GS2U_RequestGuildBossInfo_Sync{} = P) ->
	Bin_guildBosslevel = write_uint8( P#pk_GS2U_RequestGuildBossInfo_Sync.guildBosslevel ),
	Bin_hurtBosslevel = write_uint8( P#pk_GS2U_RequestGuildBossInfo_Sync.hurtBosslevel ),
	Bin_curGuilBosslevel = write_uint8( P#pk_GS2U_RequestGuildBossInfo_Sync.curGuilBosslevel ),
	Bin_listHurtList = write_array(P#pk_GS2U_RequestGuildBossInfo_Sync.listHurtList, fun(X) -> encode_GuildHurtList( X ) end),
	Bin_listFastrecord = write_array(P#pk_GS2U_RequestGuildBossInfo_Sync.listFastrecord, fun(X) -> encode_GuildFastrecord( X ) end),
	[
		<<?GS2U_RequestGuildBossInfo_Sync:?U16>>,
		Bin_guildBosslevel,
		Bin_hurtBosslevel,
		Bin_curGuilBosslevel,
		Bin_listHurtList,
		Bin_listFastrecord
	];

%GENERATED from file:guild.h => GS2U_RequestJoinGuildList
encode(#pk_GS2U_RequestJoinGuildList{} = P) ->
	Bin_requestList = write_array(P#pk_GS2U_RequestJoinGuildList.requestList, fun(X) -> encode_GuildApplyMemberInfo( X ) end),
	Bin_force = write_uint64( P#pk_GS2U_RequestJoinGuildList.force ),
	[
		<<?GS2U_RequestJoinGuildList:?U16>>,
		Bin_requestList,
		Bin_force
	];

%GENERATED from file:guild.h => GS2U_RequestJoinGuild_Ack
encode(#pk_GS2U_RequestJoinGuild_Ack{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_RequestJoinGuild_Ack.guildID ),
	Bin_cancelID = write_uint64( P#pk_GS2U_RequestJoinGuild_Ack.cancelID ),
	[
		<<?GS2U_RequestJoinGuild_Ack:?U16>>,
		Bin_guildID,
		Bin_cancelID
	];

%GENERATED from file:guild.h => GS2U_RequestLookMemberList
encode(#pk_GS2U_RequestLookMemberList{} = P) ->
	Bin_nowPage = write_uint32( P#pk_GS2U_RequestLookMemberList.nowPage ),
	Bin_maxPage = write_uint32( P#pk_GS2U_RequestLookMemberList.maxPage ),
	Bin_memberList = write_array(P#pk_GS2U_RequestLookMemberList.memberList, fun(X) -> encode_GuildMemberInfo( X ) end),
	[
		<<?GS2U_RequestLookMemberList:?U16>>,
		Bin_nowPage,
		Bin_maxPage,
		Bin_memberList
	];

%GENERATED from file:guild.h => GS2U_ReturnDonateTimes
encode(#pk_GS2U_ReturnDonateTimes{} = P) ->
	Bin_moneyType = write_uint8( P#pk_GS2U_ReturnDonateTimes.moneyType ),
	Bin_times = write_uint16( P#pk_GS2U_ReturnDonateTimes.times ),
	[
		<<?GS2U_ReturnDonateTimes:?U16>>,
		Bin_moneyType,
		Bin_times
	];

%GENERATED from file:guild.h => GS2U_ShopUpgrade
encode(#pk_GS2U_ShopUpgrade{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_ShopUpgrade.guildID ),
	Bin_shopLevel = write_uint8( P#pk_GS2U_ShopUpgrade.shopLevel ),
	[
		<<?GS2U_ShopUpgrade:?U16>>,
		Bin_guildID,
		Bin_shopLevel
	];

%GENERATED from file:guild.h => GS2U_Upgrade_Ack
encode(#pk_GS2U_Upgrade_Ack{} = P) ->
	Bin_guildID = write_uint64( P#pk_GS2U_Upgrade_Ack.guildID ),
	Bin_level = write_uint32( P#pk_GS2U_Upgrade_Ack.level ),
	[
		<<?GS2U_Upgrade_Ack:?U16>>,
		Bin_guildID,
		Bin_level
	];

%GENERATED from file:guild.h => U2GS_AcceptGuildTask
encode(#pk_U2GS_AcceptGuildTask{} = P) ->
	Bin_taskType = write_uint8( P#pk_U2GS_AcceptGuildTask.taskType ),
	[
		<<?U2GS_AcceptGuildTask:?U16>>,
		Bin_taskType
	];

%GENERATED from file:guild.h => U2GS_AgreeRecruit
encode(#pk_U2GS_AgreeRecruit{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_AgreeRecruit.guildID ),
	Bin_roleID = write_uint64( P#pk_U2GS_AgreeRecruit.roleID ),
	Bin_agree = write_uint8( P#pk_U2GS_AgreeRecruit.agree ),
	[
		<<?U2GS_AgreeRecruit:?U16>>,
		Bin_guildID,
		Bin_roleID,
		Bin_agree
	];

%GENERATED from file:guild.h => U2GS_Bidding
encode(#pk_U2GS_Bidding{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_Bidding.guildID ),
	[
		<<?U2GS_Bidding:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => U2GS_BuyGuildBuff
encode(#pk_U2GS_BuyGuildBuff{} = P) ->
	Bin_confId = write_uint32( P#pk_U2GS_BuyGuildBuff.confId ),
	[
		<<?U2GS_BuyGuildBuff:?U16>>,
		Bin_confId
	];

%GENERATED from file:guild.h => U2GS_ChangeDenoter
encode(#pk_U2GS_ChangeDenoter{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_ChangeDenoter.guildID ),
	Bin_denoter = write_uint8( P#pk_U2GS_ChangeDenoter.denoter ),
	[
		<<?U2GS_ChangeDenoter:?U16>>,
		Bin_guildID,
		Bin_denoter
	];

%GENERATED from file:guild.h => U2GS_ChangeGuildName
encode(#pk_U2GS_ChangeGuildName{} = P) ->
	Bin_newGuildName = write_string( P#pk_U2GS_ChangeGuildName.newGuildName ),
	[
		<<?U2GS_ChangeGuildName:?U16>>,
		Bin_newGuildName
	];

%GENERATED from file:guild.h => U2GS_ChangeLeader
encode(#pk_U2GS_ChangeLeader{} = P) ->
	Bin_targetRoleID = write_uint64( P#pk_U2GS_ChangeLeader.targetRoleID ),
	[
		<<?U2GS_ChangeLeader:?U16>>,
		Bin_targetRoleID
	];

%GENERATED from file:guild.h => U2GS_ChangeNotice
encode(#pk_U2GS_ChangeNotice{} = P) ->
	Bin_guildNotice = write_string( P#pk_U2GS_ChangeNotice.guildNotice ),
	[
		<<?U2GS_ChangeNotice:?U16>>,
		Bin_guildNotice
	];

%GENERATED from file:guild.h => U2GS_CreateGuild
encode(#pk_U2GS_CreateGuild{} = P) ->
	Bin_guildName = write_string( P#pk_U2GS_CreateGuild.guildName ),
	Bin_denoter = write_uint8( P#pk_U2GS_CreateGuild.denoter ),
	Bin_guildNotice = write_string( P#pk_U2GS_CreateGuild.guildNotice ),
	[
		<<?U2GS_CreateGuild:?U16>>,
		Bin_guildName,
		Bin_denoter,
		Bin_guildNotice
	];

%GENERATED from file:guild.h => U2GS_DealRequestJoin
encode(#pk_U2GS_DealRequestJoin{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_DealRequestJoin.guildID ),
	Bin_roleIDs = write_array(P#pk_U2GS_DealRequestJoin.roleIDs, fun(X) -> write_uint64( X ) end),
	Bin_agree = write_uint8( P#pk_U2GS_DealRequestJoin.agree ),
	[
		<<?U2GS_DealRequestJoin:?U16>>,
		Bin_guildID,
		Bin_roleIDs,
		Bin_agree
	];

%GENERATED from file:guild.h => U2GS_DeleteGuild
encode(#pk_U2GS_DeleteGuild{}) ->
	[
		<<?U2GS_DeleteGuild:?U16>>

	];

%GENERATED from file:guild.h => U2GS_DonateMoney
encode(#pk_U2GS_DonateMoney{} = P) ->
	Bin_moneyType = write_uint8( P#pk_U2GS_DonateMoney.moneyType ),
	Bin_moneyNumber = write_uint32( P#pk_U2GS_DonateMoney.moneyNumber ),
	[
		<<?U2GS_DonateMoney:?U16>>,
		Bin_moneyType,
		Bin_moneyNumber
	];

%GENERATED from file:guild.h => U2GS_EnterGuildBattle
encode(#pk_U2GS_EnterGuildBattle{}) ->
	[
		<<?U2GS_EnterGuildBattle:?U16>>

	];

%GENERATED from file:guild.h => U2GS_EnterGuildHome
encode(#pk_U2GS_EnterGuildHome{} = P) ->
	Bin_targetGuildID = write_uint64( P#pk_U2GS_EnterGuildHome.targetGuildID ),
	[
		<<?U2GS_EnterGuildHome:?U16>>,
		Bin_targetGuildID
	];

%GENERATED from file:guild.h => U2GS_ExitGuild
encode(#pk_U2GS_ExitGuild{}) ->
	[
		<<?U2GS_ExitGuild:?U16>>

	];

%GENERATED from file:guild.h => U2GS_ExpeditionBroadcastPos
encode(#pk_U2GS_ExpeditionBroadcastPos{} = P) ->
	Bin_type = write_uint16( P#pk_U2GS_ExpeditionBroadcastPos.type ),
	[
		<<?U2GS_ExpeditionBroadcastPos:?U16>>,
		Bin_type
	];

%GENERATED from file:guild.h => U2GS_GetGuildHomeReward
encode(#pk_U2GS_GetGuildHomeReward{} = P) ->
	Bin_taskType = write_uint8( P#pk_U2GS_GetGuildHomeReward.taskType ),
	[
		<<?U2GS_GetGuildHomeReward:?U16>>,
		Bin_taskType
	];

%GENERATED from file:guild.h => U2GS_GetGuildPrize
encode(#pk_U2GS_GetGuildPrize{}) ->
	[
		<<?U2GS_GetGuildPrize:?U16>>

	];

%GENERATED from file:guild.h => U2GS_GiveMeExpeditionRewardEverDay
encode(#pk_U2GS_GiveMeExpeditionRewardEverDay{} = P) ->
	Bin_mapid = write_uint32( P#pk_U2GS_GiveMeExpeditionRewardEverDay.mapid ),
	[
		<<?U2GS_GiveMeExpeditionRewardEverDay:?U16>>,
		Bin_mapid
	];

%GENERATED from file:guild.h => U2GS_GivePower
encode(#pk_U2GS_GivePower{} = P) ->
	Bin_targetRoleID = write_uint64( P#pk_U2GS_GivePower.targetRoleID ),
	Bin_guileLevel = write_uint8( P#pk_U2GS_GivePower.guileLevel ),
	[
		<<?U2GS_GivePower:?U16>>,
		Bin_targetRoleID,
		Bin_guileLevel
	];

%GENERATED from file:guild.h => U2GS_GiveUpGuildTask
encode(#pk_U2GS_GiveUpGuildTask{} = P) ->
	Bin_taskType = write_uint8( P#pk_U2GS_GiveUpGuildTask.taskType ),
	[
		<<?U2GS_GiveUpGuildTask:?U16>>,
		Bin_taskType
	];

%GENERATED from file:guild.h => U2GS_GuildBattleApply
encode(#pk_U2GS_GuildBattleApply{}) ->
	[
		<<?U2GS_GuildBattleApply:?U16>>

	];

%GENERATED from file:guild.h => U2GS_GuildBossBuyBuff
encode(#pk_U2GS_GuildBossBuyBuff{} = P) ->
	Bin_buffID = write_uint32( P#pk_U2GS_GuildBossBuyBuff.buffID ),
	[
		<<?U2GS_GuildBossBuyBuff:?U16>>,
		Bin_buffID
	];

%GENERATED from file:guild.h => U2GS_GuildList
encode(#pk_U2GS_GuildList{} = P) ->
	Bin_requestPageNumber = write_uint32( P#pk_U2GS_GuildList.requestPageNumber ),
	[
		<<?U2GS_GuildList:?U16>>,
		Bin_requestPageNumber
	];

%GENERATED from file:guild.h => U2GS_GuildLoopTask_Give_Request
encode(#pk_U2GS_GuildLoopTask_Give_Request{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_GuildLoopTask_Give_Request.roleID ),
	Bin_itemID = write_uint16( P#pk_U2GS_GuildLoopTask_Give_Request.itemID ),
	Bin_count = write_uint32( P#pk_U2GS_GuildLoopTask_Give_Request.count ),
	[
		<<?U2GS_GuildLoopTask_Give_Request:?U16>>,
		Bin_roleID,
		Bin_itemID,
		Bin_count
	];

%GENERATED from file:guild.h => U2GS_GuildLoopTask_History_Request
encode(#pk_U2GS_GuildLoopTask_History_Request{}) ->
	[
		<<?U2GS_GuildLoopTask_History_Request:?U16>>

	];

%GENERATED from file:guild.h => U2GS_GuildLoopTask_OpenUI_Request
encode(#pk_U2GS_GuildLoopTask_OpenUI_Request{}) ->
	[
		<<?U2GS_GuildLoopTask_OpenUI_Request:?U16>>

	];

%GENERATED from file:guild.h => U2GS_GuildLoopTask_WantGet_Request
encode(#pk_U2GS_GuildLoopTask_WantGet_Request{} = P) ->
	Bin_taskID = write_uint16( P#pk_U2GS_GuildLoopTask_WantGet_Request.taskID ),
	[
		<<?U2GS_GuildLoopTask_WantGet_Request:?U16>>,
		Bin_taskID
	];

%GENERATED from file:guild.h => U2GS_GuildLoopTask_WantGive_Request
encode(#pk_U2GS_GuildLoopTask_WantGive_Request{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_GuildLoopTask_WantGive_Request.roleID ),
	Bin_time = write_uint32( P#pk_U2GS_GuildLoopTask_WantGive_Request.time ),
	[
		<<?U2GS_GuildLoopTask_WantGive_Request:?U16>>,
		Bin_roleID,
		Bin_time
	];

%GENERATED from file:guild.h => U2GS_GuildReward
encode(#pk_U2GS_GuildReward{}) ->
	[
		<<?U2GS_GuildReward:?U16>>

	];

%GENERATED from file:guild.h => U2GS_Guild_Exchange_Request
encode(#pk_U2GS_Guild_Exchange_Request{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_Guild_Exchange_Request.id ),
	Bin_level = write_uint32( P#pk_U2GS_Guild_Exchange_Request.level ),
	[
		<<?U2GS_Guild_Exchange_Request:?U16>>,
		Bin_id,
		Bin_level
	];

%GENERATED from file:guild.h => U2GS_Guild_FairgroundEnter_Request
encode(#pk_U2GS_Guild_FairgroundEnter_Request{} = P) ->
	Bin_targetGuildID = write_uint64( P#pk_U2GS_Guild_FairgroundEnter_Request.targetGuildID ),
	[
		<<?U2GS_Guild_FairgroundEnter_Request:?U16>>,
		Bin_targetGuildID
	];

%GENERATED from file:guild.h => U2GS_Guild_FairgroundRide_Request
encode(#pk_U2GS_Guild_FairgroundRide_Request{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_Guild_FairgroundRide_Request.id ),
	Bin_type = write_uint8( P#pk_U2GS_Guild_FairgroundRide_Request.type ),
	[
		<<?U2GS_Guild_FairgroundRide_Request:?U16>>,
		Bin_id,
		Bin_type
	];

%GENERATED from file:guild.h => U2GS_Guild_FastJoin_Get_Request
encode(#pk_U2GS_Guild_FastJoin_Get_Request{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_Guild_FastJoin_Get_Request.guildID ),
	[
		<<?U2GS_Guild_FastJoin_Get_Request:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => U2GS_Guild_FastJoin_Request
encode(#pk_U2GS_Guild_FastJoin_Request{}) ->
	[
		<<?U2GS_Guild_FastJoin_Request:?U16>>

	];

%GENERATED from file:guild.h => U2GS_Guild_FastJoin_Set_Request
encode(#pk_U2GS_Guild_FastJoin_Set_Request{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_Guild_FastJoin_Set_Request.guildID ),
	Bin_force = write_uint64( P#pk_U2GS_Guild_FastJoin_Set_Request.force ),
	[
		<<?U2GS_Guild_FastJoin_Set_Request:?U16>>,
		Bin_guildID,
		Bin_force
	];

%GENERATED from file:guild.h => U2GS_Guild_GodBless_Request
encode(#pk_U2GS_Guild_GodBless_Request{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_Guild_GodBless_Request.type ),
	[
		<<?U2GS_Guild_GodBless_Request:?U16>>,
		Bin_type
	];

%GENERATED from file:guild.h => U2GS_Guild_GodBless_Schedule_Request
encode(#pk_U2GS_Guild_GodBless_Schedule_Request{}) ->
	[
		<<?U2GS_Guild_GodBless_Schedule_Request:?U16>>

	];

%GENERATED from file:guild.h => U2GS_Guild_GodBless_Schedule_Reward_Request
encode(#pk_U2GS_Guild_GodBless_Schedule_Reward_Request{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_Guild_GodBless_Schedule_Reward_Request.id ),
	[
		<<?U2GS_Guild_GodBless_Schedule_Reward_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:guild.h => U2GS_Guild_OpenSupplication_Request
encode(#pk_U2GS_Guild_OpenSupplication_Request{}) ->
	[
		<<?U2GS_Guild_OpenSupplication_Request:?U16>>

	];

%GENERATED from file:guild.h => U2GS_Guild_ShopBuy_Request
encode(#pk_U2GS_Guild_ShopBuy_Request{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_Guild_ShopBuy_Request.id ),
	Bin_count = write_uint32( P#pk_U2GS_Guild_ShopBuy_Request.count ),
	[
		<<?U2GS_Guild_ShopBuy_Request:?U16>>,
		Bin_id,
		Bin_count
	];

%GENERATED from file:guild.h => U2GS_Guild_SnowmanCheck_Request
encode(#pk_U2GS_Guild_SnowmanCheck_Request{}) ->
	[
		<<?U2GS_Guild_SnowmanCheck_Request:?U16>>

	];

%GENERATED from file:guild.h => U2GS_Guild_SnowmanDonate_Request
encode(#pk_U2GS_Guild_SnowmanDonate_Request{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_Guild_SnowmanDonate_Request.id ),
	Bin_snowmanID = write_uint32( P#pk_U2GS_Guild_SnowmanDonate_Request.snowmanID ),
	[
		<<?U2GS_Guild_SnowmanDonate_Request:?U16>>,
		Bin_id,
		Bin_snowmanID
	];

%GENERATED from file:guild.h => U2GS_Guild_SnowmanReward_Request
encode(#pk_U2GS_Guild_SnowmanReward_Request{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_Guild_SnowmanReward_Request.id ),
	[
		<<?U2GS_Guild_SnowmanReward_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:guild.h => U2GS_Guild_SupplicateGive_Request
encode(#pk_U2GS_Guild_SupplicateGive_Request{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_Guild_SupplicateGive_Request.roleID ),
	Bin_itemID = write_uint16( P#pk_U2GS_Guild_SupplicateGive_Request.itemID ),
	[
		<<?U2GS_Guild_SupplicateGive_Request:?U16>>,
		Bin_roleID,
		Bin_itemID
	];

%GENERATED from file:guild.h => U2GS_Guild_Supplicate_Request
encode(#pk_U2GS_Guild_Supplicate_Request{} = P) ->
	Bin_itemID = write_uint16( P#pk_U2GS_Guild_Supplicate_Request.itemID ),
	[
		<<?U2GS_Guild_Supplicate_Request:?U16>>,
		Bin_itemID
	];

%GENERATED from file:guild.h => U2GS_ImpeachCreater
encode(#pk_U2GS_ImpeachCreater{}) ->
	[
		<<?U2GS_ImpeachCreater:?U16>>

	];

%GENERATED from file:guild.h => U2GS_KickGuild
encode(#pk_U2GS_KickGuild{} = P) ->
	Bin_targetRoleID = write_uint64( P#pk_U2GS_KickGuild.targetRoleID ),
	[
		<<?U2GS_KickGuild:?U16>>,
		Bin_targetRoleID
	];

%GENERATED from file:guild.h => U2GS_MyGuildKllBossRank
encode(#pk_U2GS_MyGuildKllBossRank{} = P) ->
	Bin_guildLevel = write_uint32( P#pk_U2GS_MyGuildKllBossRank.guildLevel ),
	[
		<<?U2GS_MyGuildKllBossRank:?U16>>,
		Bin_guildLevel
	];

%GENERATED from file:guild.h => U2GS_OneKeyRecruit_Request
encode(#pk_U2GS_OneKeyRecruit_Request{}) ->
	[
		<<?U2GS_OneKeyRecruit_Request:?U16>>

	];

%GENERATED from file:guild.h => U2GS_OpenGuildForm
encode(#pk_U2GS_OpenGuildForm{}) ->
	[
		<<?U2GS_OpenGuildForm:?U16>>

	];

%GENERATED from file:guild.h => U2GS_OpenGuildShop
encode(#pk_U2GS_OpenGuildShop{}) ->
	[
		<<?U2GS_OpenGuildShop:?U16>>

	];

%GENERATED from file:guild.h => U2GS_QueryExpeditionFinalInfo
encode(#pk_U2GS_QueryExpeditionFinalInfo{}) ->
	[
		<<?U2GS_QueryExpeditionFinalInfo:?U16>>

	];

%GENERATED from file:guild.h => U2GS_QueryExpeditionGlobalMapInfo
encode(#pk_U2GS_QueryExpeditionGlobalMapInfo{}) ->
	[
		<<?U2GS_QueryExpeditionGlobalMapInfo:?U16>>

	];

%GENERATED from file:guild.h => U2GS_QueryExpeditionMapBattleInfo
encode(#pk_U2GS_QueryExpeditionMapBattleInfo{} = P) ->
	Bin_mapid = write_uint32( P#pk_U2GS_QueryExpeditionMapBattleInfo.mapid ),
	[
		<<?U2GS_QueryExpeditionMapBattleInfo:?U16>>,
		Bin_mapid
	];

%GENERATED from file:guild.h => U2GS_QueryExpeditionMapInfo
encode(#pk_U2GS_QueryExpeditionMapInfo{}) ->
	[
		<<?U2GS_QueryExpeditionMapInfo:?U16>>

	];

%GENERATED from file:guild.h => U2GS_QueryGuildInfoByRoleID_Request
encode(#pk_U2GS_QueryGuildInfoByRoleID_Request{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_QueryGuildInfoByRoleID_Request.roleID ),
	[
		<<?U2GS_QueryGuildInfoByRoleID_Request:?U16>>,
		Bin_roleID
	];

%GENERATED from file:guild.h => U2GS_Recruit
encode(#pk_U2GS_Recruit{} = P) ->
	Bin_targetCode = write_uint64( P#pk_U2GS_Recruit.targetCode ),
	[
		<<?U2GS_Recruit:?U16>>,
		Bin_targetCode
	];

%GENERATED from file:guild.h => U2GS_RequestDonateTimes
encode(#pk_U2GS_RequestDonateTimes{} = P) ->
	Bin_moneyType = write_uint8( P#pk_U2GS_RequestDonateTimes.moneyType ),
	[
		<<?U2GS_RequestDonateTimes:?U16>>,
		Bin_moneyType
	];

%GENERATED from file:guild.h => U2GS_RequestEnterGuildBoss
encode(#pk_U2GS_RequestEnterGuildBoss{} = P) ->
	Bin_rquestBosslevel = write_uint8( P#pk_U2GS_RequestEnterGuildBoss.rquestBosslevel ),
	[
		<<?U2GS_RequestEnterGuildBoss:?U16>>,
		Bin_rquestBosslevel
	];

%GENERATED from file:guild.h => U2GS_RequestGuildBattleResult
encode(#pk_U2GS_RequestGuildBattleResult{}) ->
	[
		<<?U2GS_RequestGuildBattleResult:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestGuildBossInfo
encode(#pk_U2GS_RequestGuildBossInfo{}) ->
	[
		<<?U2GS_RequestGuildBossInfo:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestGuildBuff
encode(#pk_U2GS_RequestGuildBuff{}) ->
	[
		<<?U2GS_RequestGuildBuff:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestGuildInfo_Request
encode(#pk_U2GS_RequestGuildInfo_Request{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_RequestGuildInfo_Request.guildID ),
	[
		<<?U2GS_RequestGuildInfo_Request:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => U2GS_RequestGuildRank
encode(#pk_U2GS_RequestGuildRank{}) ->
	[
		<<?U2GS_RequestGuildRank:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestGuildSkill
encode(#pk_U2GS_RequestGuildSkill{}) ->
	[
		<<?U2GS_RequestGuildSkill:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestGuildTask
encode(#pk_U2GS_RequestGuildTask{}) ->
	[
		<<?U2GS_RequestGuildTask:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestGuildWar
encode(#pk_U2GS_RequestGuildWar{}) ->
	[
		<<?U2GS_RequestGuildWar:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestJoinGuild
encode(#pk_U2GS_RequestJoinGuild{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_RequestJoinGuild.guildID ),
	[
		<<?U2GS_RequestJoinGuild:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => U2GS_RequestJoinGuildList
encode(#pk_U2GS_RequestJoinGuildList{}) ->
	[
		<<?U2GS_RequestJoinGuildList:?U16>>

	];

%GENERATED from file:guild.h => U2GS_RequestLookMemberList
encode(#pk_U2GS_RequestLookMemberList{} = P) ->
	Bin_requestPageNumber = write_uint32( P#pk_U2GS_RequestLookMemberList.requestPageNumber ),
	[
		<<?U2GS_RequestLookMemberList:?U16>>,
		Bin_requestPageNumber
	];

%GENERATED from file:guild.h => U2GS_ResearchGuildSkill
encode(#pk_U2GS_ResearchGuildSkill{} = P) ->
	Bin_confId = write_uint32( P#pk_U2GS_ResearchGuildSkill.confId ),
	[
		<<?U2GS_ResearchGuildSkill:?U16>>,
		Bin_confId
	];

%GENERATED from file:guild.h => U2GS_ShopUpgrade
encode(#pk_U2GS_ShopUpgrade{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_ShopUpgrade.guildID ),
	[
		<<?U2GS_ShopUpgrade:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => U2GS_StudyGuildSkill
encode(#pk_U2GS_StudyGuildSkill{} = P) ->
	Bin_confId = write_uint32( P#pk_U2GS_StudyGuildSkill.confId ),
	[
		<<?U2GS_StudyGuildSkill:?U16>>,
		Bin_confId
	];

%GENERATED from file:guild.h => U2GS_SummonHX
encode(#pk_U2GS_SummonHX{}) ->
	[
		<<?U2GS_SummonHX:?U16>>

	];

%GENERATED from file:guild.h => U2GS_SummonMonster
encode(#pk_U2GS_SummonMonster{}) ->
	[
		<<?U2GS_SummonMonster:?U16>>

	];

%GENERATED from file:guild.h => U2GS_SupportImpeachCreater
encode(#pk_U2GS_SupportImpeachCreater{}) ->
	[
		<<?U2GS_SupportImpeachCreater:?U16>>

	];

%GENERATED from file:guild.h => U2GS_Upgrade
encode(#pk_U2GS_Upgrade{} = P) ->
	Bin_guildID = write_uint64( P#pk_U2GS_Upgrade.guildID ),
	[
		<<?U2GS_Upgrade:?U16>>,
		Bin_guildID
	];

%GENERATED from file:guild.h => U2GS_UseCannon
encode(#pk_U2GS_UseCannon{} = P) ->
	Bin_targetGuildID = write_uint64( P#pk_U2GS_UseCannon.targetGuildID ),
	Bin_selectCode = write_uint64( P#pk_U2GS_UseCannon.selectCode ),
	[
		<<?U2GS_UseCannon:?U16>>,
		Bin_targetGuildID,
		Bin_selectCode
	];

%GENERATED from file:guild.h => U2GS_getGuildBuff
encode(#pk_U2GS_getGuildBuff{} = P) ->
	Bin_confId = write_uint32( P#pk_U2GS_getGuildBuff.confId ),
	[
		<<?U2GS_getGuildBuff:?U16>>,
		Bin_confId
	];

%GENERATED from file:home.h => GS2U_ChangedecorateModelResult
encode(#pk_GS2U_ChangedecorateModelResult{} = P) ->
	Bin_isSucc = write_bool( P#pk_GS2U_ChangedecorateModelResult.isSucc ),
	[
		<<?GS2U_ChangedecorateModelResult:?U16>>,
		Bin_isSucc
	];

%GENERATED from file:home.h => GS2U_DelSenceTheFurniTrueResult
encode(#pk_GS2U_DelSenceTheFurniTrueResult{} = P) ->
	Bin_isSucc = write_bool( P#pk_GS2U_DelSenceTheFurniTrueResult.isSucc ),
	Bin_uid = write_uint64( P#pk_GS2U_DelSenceTheFurniTrueResult.uid ),
	[
		<<?GS2U_DelSenceTheFurniTrueResult:?U16>>,
		Bin_isSucc,
		Bin_uid
	];

%GENERATED from file:home.h => GS2U_EnterHome
encode(#pk_GS2U_EnterHome{} = P) ->
	Bin_homeID = write_uint64( P#pk_GS2U_EnterHome.homeID ),
	Bin_ownerID = write_uint64( P#pk_GS2U_EnterHome.ownerID ),
	Bin_mapID = write_uint16( P#pk_GS2U_EnterHome.mapID ),
	[
		<<?GS2U_EnterHome:?U16>>,
		Bin_homeID,
		Bin_ownerID,
		Bin_mapID
	];

%GENERATED from file:home.h => GS2U_ExtendAreaResult_Sync
encode(#pk_GS2U_ExtendAreaResult_Sync{} = P) ->
	Bin_isSuccuss = write_bool( P#pk_GS2U_ExtendAreaResult_Sync.isSuccuss ),
	Bin_extendLevel = write_uint8( P#pk_GS2U_ExtendAreaResult_Sync.extendLevel ),
	[
		<<?GS2U_ExtendAreaResult_Sync:?U16>>,
		Bin_isSuccuss,
		Bin_extendLevel
	];

%GENERATED from file:home.h => GS2U_FreshHomeAreaInfo
encode(#pk_GS2U_FreshHomeAreaInfo{} = P) ->
	Bin_homeID = write_uint64( P#pk_GS2U_FreshHomeAreaInfo.homeID ),
	Bin_areas = write_array(P#pk_GS2U_FreshHomeAreaInfo.areas, fun(X) -> encode_HomeArea( X ) end),
	[
		<<?GS2U_FreshHomeAreaInfo:?U16>>,
		Bin_homeID,
		Bin_areas
	];

%GENERATED from file:home.h => GS2U_FreshHomeInfo
encode(#pk_GS2U_FreshHomeInfo{} = P) ->
	Bin_homeID = write_uint64( P#pk_GS2U_FreshHomeInfo.homeID ),
	Bin_homeName = write_string( P#pk_GS2U_FreshHomeInfo.homeName ),
	Bin_stylish = write_uint32( P#pk_GS2U_FreshHomeInfo.stylish ),
	Bin_comfort = write_uint32( P#pk_GS2U_FreshHomeInfo.comfort ),
	Bin_homeLvl = write_uint32( P#pk_GS2U_FreshHomeInfo.homeLvl ),
	Bin_popularity = write_uint32( P#pk_GS2U_FreshHomeInfo.popularity ),
	Bin_upgredeHomeCd = write_uint64( P#pk_GS2U_FreshHomeInfo.upgredeHomeCd ),
	[
		<<?GS2U_FreshHomeInfo:?U16>>,
		Bin_homeID,
		Bin_homeName,
		Bin_stylish,
		Bin_comfort,
		Bin_homeLvl,
		Bin_popularity,
		Bin_upgredeHomeCd
	];

%GENERATED from file:home.h => GS2U_GetPetFoodResults_Sync
encode(#pk_GS2U_GetPetFoodResults_Sync{} = P) ->
	Bin_itemUid = write_uint64( P#pk_GS2U_GetPetFoodResults_Sync.itemUid ),
	Bin_result = write_uint8( P#pk_GS2U_GetPetFoodResults_Sync.result ),
	Bin_petID = write_uint16( P#pk_GS2U_GetPetFoodResults_Sync.petID ),
	Bin_addTime = write_uint16( P#pk_GS2U_GetPetFoodResults_Sync.addTime ),
	[
		<<?GS2U_GetPetFoodResults_Sync:?U16>>,
		Bin_itemUid,
		Bin_result,
		Bin_petID,
		Bin_addTime
	];

%GENERATED from file:home.h => GS2U_GivingFurniTrueForPartnerResult
encode(#pk_GS2U_GivingFurniTrueForPartnerResult{} = P) ->
	Bin_isSucc = write_bool( P#pk_GS2U_GivingFurniTrueForPartnerResult.isSucc ),
	Bin_itemID = write_uint16( P#pk_GS2U_GivingFurniTrueForPartnerResult.itemID ),
	Bin_num = write_uint16( P#pk_GS2U_GivingFurniTrueForPartnerResult.num ),
	[
		<<?GS2U_GivingFurniTrueForPartnerResult:?U16>>,
		Bin_isSucc,
		Bin_itemID,
		Bin_num
	];

%GENERATED from file:home.h => GS2U_HomeBitResult
encode(#pk_GS2U_HomeBitResult{} = P) ->
	Bin_homeID = write_uint64( P#pk_GS2U_HomeBitResult.homeID ),
	Bin_level = write_uint8( P#pk_GS2U_HomeBitResult.level ),
	Bin_phase = write_uint8( P#pk_GS2U_HomeBitResult.phase ),
	[
		<<?GS2U_HomeBitResult:?U16>>,
		Bin_homeID,
		Bin_level,
		Bin_phase
	];

%GENERATED from file:home.h => GS2U_HomeFarming_Sync
encode(#pk_GS2U_HomeFarming_Sync{} = P) ->
	Bin_petList = write_array(P#pk_GS2U_HomeFarming_Sync.petList, fun(X) -> encode_FarmingPet( X ) end),
	[
		<<?GS2U_HomeFarming_Sync:?U16>>,
		Bin_petList
	];

%GENERATED from file:home.h => GS2U_HomeInfo
encode(#pk_GS2U_HomeInfo{} = P) ->
	Bin_homeID = write_uint64( P#pk_GS2U_HomeInfo.homeID ),
	Bin_homeName = write_string( P#pk_GS2U_HomeInfo.homeName ),
	Bin_serverName = write_string( P#pk_GS2U_HomeInfo.serverName ),
	Bin_ownerID = write_uint64( P#pk_GS2U_HomeInfo.ownerID ),
	Bin_ownerName = write_string( P#pk_GS2U_HomeInfo.ownerName ),
	Bin_mateID = write_uint64( P#pk_GS2U_HomeInfo.mateID ),
	Bin_mateName = write_string( P#pk_GS2U_HomeInfo.mateName ),
	Bin_stylish = write_uint32( P#pk_GS2U_HomeInfo.stylish ),
	Bin_comfort = write_uint32( P#pk_GS2U_HomeInfo.comfort ),
	Bin_homeLvl = write_uint32( P#pk_GS2U_HomeInfo.homeLvl ),
	Bin_popularity = write_uint32( P#pk_GS2U_HomeInfo.popularity ),
	Bin_leftID = write_uint64( P#pk_GS2U_HomeInfo.leftID ),
	Bin_leftName = write_string( P#pk_GS2U_HomeInfo.leftName ),
	Bin_rightID = write_uint64( P#pk_GS2U_HomeInfo.rightID ),
	Bin_rightName = write_string( P#pk_GS2U_HomeInfo.rightName ),
	Bin_areas = write_array(P#pk_GS2U_HomeInfo.areas, fun(X) -> encode_HomeArea( X ) end),
	Bin_homeUpCd = write_uint64( P#pk_GS2U_HomeInfo.homeUpCd ),
	[
		<<?GS2U_HomeInfo:?U16>>,
		Bin_homeID,
		Bin_homeName,
		Bin_serverName,
		Bin_ownerID,
		Bin_ownerName,
		Bin_mateID,
		Bin_mateName,
		Bin_stylish,
		Bin_comfort,
		Bin_homeLvl,
		Bin_popularity,
		Bin_leftID,
		Bin_leftName,
		Bin_rightID,
		Bin_rightName,
		Bin_areas,
		Bin_homeUpCd
	];

%GENERATED from file:home.h => GS2U_HomePlantOperate_Ack
encode(#pk_GS2U_HomePlantOperate_Ack{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_HomePlantOperate_Ack.roleID ),
	Bin_operateType = write_uint8( P#pk_GS2U_HomePlantOperate_Ack.operateType ),
	Bin_reason = write_uint32( P#pk_GS2U_HomePlantOperate_Ack.reason ),
	Bin_plant = encode_Plant( P#pk_GS2U_HomePlantOperate_Ack.plant ),
	[
		<<?GS2U_HomePlantOperate_Ack:?U16>>,
		Bin_roleID,
		Bin_operateType,
		Bin_reason,
		Bin_plant
	];

%GENERATED from file:home.h => GS2U_HomePlant_Sync
encode(#pk_GS2U_HomePlant_Sync{} = P) ->
	Bin_listPlant = write_array(P#pk_GS2U_HomePlant_Sync.listPlant, fun(X) -> encode_Plant( X ) end),
	[
		<<?GS2U_HomePlant_Sync:?U16>>,
		Bin_listPlant
	];

%GENERATED from file:home.h => GS2U_HomeVisitList
encode(#pk_GS2U_HomeVisitList{} = P) ->
	Bin_allnumber = write_uint16( P#pk_GS2U_HomeVisitList.allnumber ),
	Bin_paga = write_uint8( P#pk_GS2U_HomeVisitList.paga ),
	Bin_visits = write_array(P#pk_GS2U_HomeVisitList.visits, fun(X) -> encode_HomeVisit( X ) end),
	[
		<<?GS2U_HomeVisitList:?U16>>,
		Bin_allnumber,
		Bin_paga,
		Bin_visits
	];

%GENERATED from file:home.h => GS2U_Invitefriendstobed
encode(#pk_GS2U_Invitefriendstobed{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_Invitefriendstobed.roleID ),
	Bin_homeID = write_uint64( P#pk_GS2U_Invitefriendstobed.homeID ),
	Bin_areaType = write_uint8( P#pk_GS2U_Invitefriendstobed.areaType ),
	Bin_itemUID = write_uint64( P#pk_GS2U_Invitefriendstobed.itemUID ),
	[
		<<?GS2U_Invitefriendstobed:?U16>>,
		Bin_roleID,
		Bin_homeID,
		Bin_areaType,
		Bin_itemUID
	];

%GENERATED from file:home.h => GS2U_LoadFurniTrueResult_Sync
encode(#pk_GS2U_LoadFurniTrueResult_Sync{} = P) ->
	Bin_isSucc = write_bool( P#pk_GS2U_LoadFurniTrueResult_Sync.isSucc ),
	[
		<<?GS2U_LoadFurniTrueResult_Sync:?U16>>,
		Bin_isSucc
	];

%GENERATED from file:home.h => GS2U_PutOutPetFarmingResults_Sync
encode(#pk_GS2U_PutOutPetFarmingResults_Sync{} = P) ->
	Bin_itemUid = write_uint64( P#pk_GS2U_PutOutPetFarmingResults_Sync.itemUid ),
	Bin_result = write_uint8( P#pk_GS2U_PutOutPetFarmingResults_Sync.result ),
	Bin_petID = write_uint16( P#pk_GS2U_PutOutPetFarmingResults_Sync.petID ),
	Bin_exp = write_uint16( P#pk_GS2U_PutOutPetFarmingResults_Sync.exp ),
	Bin_minutes = write_uint16( P#pk_GS2U_PutOutPetFarmingResults_Sync.minutes ),
	[
		<<?GS2U_PutOutPetFarmingResults_Sync:?U16>>,
		Bin_itemUid,
		Bin_result,
		Bin_petID,
		Bin_exp,
		Bin_minutes
	];

%GENERATED from file:home.h => GS2U_PutPetInFarmingResults_Sync
encode(#pk_GS2U_PutPetInFarmingResults_Sync{} = P) ->
	Bin_result = write_uint8( P#pk_GS2U_PutPetInFarmingResults_Sync.result ),
	Bin_petFarming = encode_FarmingPet( P#pk_GS2U_PutPetInFarmingResults_Sync.petFarming ),
	[
		<<?GS2U_PutPetInFarmingResults_Sync:?U16>>,
		Bin_result,
		Bin_petFarming
	];

%GENERATED from file:home.h => GS2U_SaveFurniTrueResult_Sync
encode(#pk_GS2U_SaveFurniTrueResult_Sync{} = P) ->
	Bin_isSucc = write_bool( P#pk_GS2U_SaveFurniTrueResult_Sync.isSucc ),
	Bin_change_wallID = write_uint16( P#pk_GS2U_SaveFurniTrueResult_Sync.change_wallID ),
	Bin_chang_floorID = write_uint16( P#pk_GS2U_SaveFurniTrueResult_Sync.chang_floorID ),
	Bin_add_furnitrueData = write_array(P#pk_GS2U_SaveFurniTrueResult_Sync.add_furnitrueData, fun(X) -> encode_HomeLayoutInfo( X ) end),
	Bin_change_furnitrueData = write_array(P#pk_GS2U_SaveFurniTrueResult_Sync.change_furnitrueData, fun(X) -> encode_HomeLayoutInfo( X ) end),
	[
		<<?GS2U_SaveFurniTrueResult_Sync:?U16>>,
		Bin_isSucc,
		Bin_change_wallID,
		Bin_chang_floorID,
		Bin_add_furnitrueData,
		Bin_change_furnitrueData
	];

%GENERATED from file:home.h => GS2U_SendAllFurniInfo_Sync
encode(#pk_GS2U_SendAllFurniInfo_Sync{} = P) ->
	Bin_greetings = write_string( P#pk_GS2U_SendAllFurniInfo_Sync.greetings ),
	Bin_furniTrueLevel = write_uint8( P#pk_GS2U_SendAllFurniInfo_Sync.furniTrueLevel ),
	Bin_extendLevel = write_uint8( P#pk_GS2U_SendAllFurniInfo_Sync.extendLevel ),
	Bin_wallID = write_uint16( P#pk_GS2U_SendAllFurniInfo_Sync.wallID ),
	Bin_floorID = write_uint16( P#pk_GS2U_SendAllFurniInfo_Sync.floorID ),
	Bin_isdecorate = write_bool( P#pk_GS2U_SendAllFurniInfo_Sync.isdecorate ),
	Bin_betweenExampleData = write_array(P#pk_GS2U_SendAllFurniInfo_Sync.betweenExampleData, fun(X) -> encode_HomeLayoutInfo( X ) end),
	Bin_interactList = write_array(P#pk_GS2U_SendAllFurniInfo_Sync.interactList, fun(X) -> encode_FurniInteractTrueData( X ) end),
	[
		<<?GS2U_SendAllFurniInfo_Sync:?U16>>,
		Bin_greetings,
		Bin_furniTrueLevel,
		Bin_extendLevel,
		Bin_wallID,
		Bin_floorID,
		Bin_isdecorate,
		Bin_betweenExampleData,
		Bin_interactList
	];

%GENERATED from file:home.h => GS2U_SendHomeLetter
encode(#pk_GS2U_SendHomeLetter{} = P) ->
	Bin_letter = encode_HomeLetter( P#pk_GS2U_SendHomeLetter.letter ),
	[
		<<?GS2U_SendHomeLetter:?U16>>,
		Bin_letter
	];

%GENERATED from file:home.h => GS2U_SetGreetingsResult_Sync
encode(#pk_GS2U_SetGreetingsResult_Sync{} = P) ->
	Bin_isSuccuss = write_bool( P#pk_GS2U_SetGreetingsResult_Sync.isSuccuss ),
	Bin_greetings = write_string( P#pk_GS2U_SetGreetingsResult_Sync.greetings ),
	[
		<<?GS2U_SetGreetingsResult_Sync:?U16>>,
		Bin_isSuccuss,
		Bin_greetings
	];

%GENERATED from file:home.h => GS2U_UseFurnitrueResult
encode(#pk_GS2U_UseFurnitrueResult{} = P) ->
	Bin_isUp = write_bool( P#pk_GS2U_UseFurnitrueResult.isUp ),
	Bin_roleID = write_uint64( P#pk_GS2U_UseFurnitrueResult.roleID ),
	Bin_itemUID = write_uint64( P#pk_GS2U_UseFurnitrueResult.itemUID ),
	Bin_seatID = write_uint8( P#pk_GS2U_UseFurnitrueResult.seatID ),
	Bin_isdoubleSleep = write_bool( P#pk_GS2U_UseFurnitrueResult.isdoubleSleep ),
	[
		<<?GS2U_UseFurnitrueResult:?U16>>,
		Bin_isUp,
		Bin_roleID,
		Bin_itemUID,
		Bin_seatID,
		Bin_isdoubleSleep
	];

%GENERATED from file:home.h => GS2U_VisitRecord
encode(#pk_GS2U_VisitRecord{} = P) ->
	Bin_lists = write_array(P#pk_GS2U_VisitRecord.lists, fun(X) -> encode_VisitRecord( X ) end),
	[
		<<?GS2U_VisitRecord:?U16>>,
		Bin_lists
	];

%GENERATED from file:home.h => U2GS_ChangeHomeName
encode(#pk_U2GS_ChangeHomeName{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_ChangeHomeName.homeID ),
	Bin_homeName = write_string( P#pk_U2GS_ChangeHomeName.homeName ),
	[
		<<?U2GS_ChangeHomeName:?U16>>,
		Bin_homeID,
		Bin_homeName
	];

%GENERATED from file:home.h => U2GS_ChangedecorateModel
encode(#pk_U2GS_ChangedecorateModel{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_ChangedecorateModel.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_ChangedecorateModel.areaType ),
	Bin_isDecorate = write_bool( P#pk_U2GS_ChangedecorateModel.isDecorate ),
	[
		<<?U2GS_ChangedecorateModel:?U16>>,
		Bin_homeID,
		Bin_areaType,
		Bin_isDecorate
	];

%GENERATED from file:home.h => U2GS_CreateHome
encode(#pk_U2GS_CreateHome{} = P) ->
	Bin_adminAreaID = write_uint32( P#pk_U2GS_CreateHome.adminAreaID ),
	Bin_homeName = write_string( P#pk_U2GS_CreateHome.homeName ),
	[
		<<?U2GS_CreateHome:?U16>>,
		Bin_adminAreaID,
		Bin_homeName
	];

%GENERATED from file:home.h => U2GS_DelSenceTheFurniTrue
encode(#pk_U2GS_DelSenceTheFurniTrue{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_DelSenceTheFurniTrue.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_DelSenceTheFurniTrue.areaType ),
	Bin_uid = write_uint64( P#pk_U2GS_DelSenceTheFurniTrue.uid ),
	[
		<<?U2GS_DelSenceTheFurniTrue:?U16>>,
		Bin_homeID,
		Bin_areaType,
		Bin_uid
	];

%GENERATED from file:home.h => U2GS_EnterBitHome
encode(#pk_U2GS_EnterBitHome{} = P) ->
	Bin_itemUID = write_uint64( P#pk_U2GS_EnterBitHome.itemUID ),
	[
		<<?U2GS_EnterBitHome:?U16>>,
		Bin_itemUID
	];

%GENERATED from file:home.h => U2GS_EnterHome
encode(#pk_U2GS_EnterHome{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_EnterHome.roleID ),
	Bin_flag = write_uint8( P#pk_U2GS_EnterHome.flag ),
	[
		<<?U2GS_EnterHome:?U16>>,
		Bin_roleID,
		Bin_flag
	];

%GENERATED from file:home.h => U2GS_ExtendArea
encode(#pk_U2GS_ExtendArea{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_ExtendArea.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_ExtendArea.areaType ),
	[
		<<?U2GS_ExtendArea:?U16>>,
		Bin_homeID,
		Bin_areaType
	];

%GENERATED from file:home.h => U2GS_GetPetFood
encode(#pk_U2GS_GetPetFood{} = P) ->
	Bin_itemUid = write_uint64( P#pk_U2GS_GetPetFood.itemUid ),
	Bin_homeID = write_uint64( P#pk_U2GS_GetPetFood.homeID ),
	Bin_petID = write_uint16( P#pk_U2GS_GetPetFood.petID ),
	Bin_itemID = write_uint16( P#pk_U2GS_GetPetFood.itemID ),
	Bin_areaType = write_uint8( P#pk_U2GS_GetPetFood.areaType ),
	[
		<<?U2GS_GetPetFood:?U16>>,
		Bin_itemUid,
		Bin_homeID,
		Bin_petID,
		Bin_itemID,
		Bin_areaType
	];

%GENERATED from file:home.h => U2GS_GivingFurniTrueForPartner
encode(#pk_U2GS_GivingFurniTrueForPartner{} = P) ->
	Bin_partherRoleID = write_uint64( P#pk_U2GS_GivingFurniTrueForPartner.partherRoleID ),
	Bin_homeID = write_uint64( P#pk_U2GS_GivingFurniTrueForPartner.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_GivingFurniTrueForPartner.areaType ),
	Bin_itemID = write_uint16( P#pk_U2GS_GivingFurniTrueForPartner.itemID ),
	Bin_num = write_uint16( P#pk_U2GS_GivingFurniTrueForPartner.num ),
	[
		<<?U2GS_GivingFurniTrueForPartner:?U16>>,
		Bin_partherRoleID,
		Bin_homeID,
		Bin_areaType,
		Bin_itemID,
		Bin_num
	];

%GENERATED from file:home.h => U2GS_HomePlantOperate_Request
encode(#pk_U2GS_HomePlantOperate_Request{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_HomePlantOperate_Request.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_HomePlantOperate_Request.areaType ),
	Bin_itemUid = write_uint64( P#pk_U2GS_HomePlantOperate_Request.itemUid ),
	Bin_operateType = write_uint8( P#pk_U2GS_HomePlantOperate_Request.operateType ),
	Bin_itemID = write_uint16( P#pk_U2GS_HomePlantOperate_Request.itemID ),
	[
		<<?U2GS_HomePlantOperate_Request:?U16>>,
		Bin_homeID,
		Bin_areaType,
		Bin_itemUid,
		Bin_operateType,
		Bin_itemID
	];

%GENERATED from file:home.h => U2GS_HomeVisit
encode(#pk_U2GS_HomeVisit{} = P) ->
	Bin_paga = write_uint8( P#pk_U2GS_HomeVisit.paga ),
	[
		<<?U2GS_HomeVisit:?U16>>,
		Bin_paga
	];

%GENERATED from file:home.h => U2GS_Invitefriendstobed
encode(#pk_U2GS_Invitefriendstobed{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_Invitefriendstobed.roleID ),
	Bin_homeID = write_uint64( P#pk_U2GS_Invitefriendstobed.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_Invitefriendstobed.areaType ),
	Bin_itemUID = write_uint64( P#pk_U2GS_Invitefriendstobed.itemUID ),
	[
		<<?U2GS_Invitefriendstobed:?U16>>,
		Bin_roleID,
		Bin_homeID,
		Bin_areaType,
		Bin_itemUID
	];

%GENERATED from file:home.h => U2GS_LoadFurniTrueScheme
encode(#pk_U2GS_LoadFurniTrueScheme{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_LoadFurniTrueScheme.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_LoadFurniTrueScheme.areaType ),
	[
		<<?U2GS_LoadFurniTrueScheme:?U16>>,
		Bin_homeID,
		Bin_areaType
	];

%GENERATED from file:home.h => U2GS_PutOutPetFarming
encode(#pk_U2GS_PutOutPetFarming{} = P) ->
	Bin_itemUid = write_uint64( P#pk_U2GS_PutOutPetFarming.itemUid ),
	Bin_homeID = write_uint64( P#pk_U2GS_PutOutPetFarming.homeID ),
	Bin_petID = write_uint16( P#pk_U2GS_PutOutPetFarming.petID ),
	Bin_areaType = write_uint8( P#pk_U2GS_PutOutPetFarming.areaType ),
	[
		<<?U2GS_PutOutPetFarming:?U16>>,
		Bin_itemUid,
		Bin_homeID,
		Bin_petID,
		Bin_areaType
	];

%GENERATED from file:home.h => U2GS_PutPetInFarming
encode(#pk_U2GS_PutPetInFarming{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_PutPetInFarming.homeID ),
	Bin_petID = write_uint16( P#pk_U2GS_PutPetInFarming.petID ),
	Bin_areaType = write_uint8( P#pk_U2GS_PutPetInFarming.areaType ),
	Bin_itemUid = write_uint64( P#pk_U2GS_PutPetInFarming.itemUid ),
	[
		<<?U2GS_PutPetInFarming:?U16>>,
		Bin_homeID,
		Bin_petID,
		Bin_areaType,
		Bin_itemUid
	];

%GENERATED from file:home.h => U2GS_RequestHomeInfo
encode(#pk_U2GS_RequestHomeInfo{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_RequestHomeInfo.roleID ),
	Bin_isShowErrCode = write_bool( P#pk_U2GS_RequestHomeInfo.isShowErrCode ),
	[
		<<?U2GS_RequestHomeInfo:?U16>>,
		Bin_roleID,
		Bin_isShowErrCode
	];

%GENERATED from file:home.h => U2GS_RequestVisitRecord
encode(#pk_U2GS_RequestVisitRecord{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_RequestVisitRecord.roleID ),
	[
		<<?U2GS_RequestVisitRecord:?U16>>,
		Bin_roleID
	];

%GENERATED from file:home.h => U2GS_SaveFurniTrueScheme
encode(#pk_U2GS_SaveFurniTrueScheme{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_SaveFurniTrueScheme.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_SaveFurniTrueScheme.areaType ),
	Bin_change_wallID = write_uint16( P#pk_U2GS_SaveFurniTrueScheme.change_wallID ),
	Bin_chang_floorID = write_uint16( P#pk_U2GS_SaveFurniTrueScheme.chang_floorID ),
	Bin_add_furnitrueData = write_array(P#pk_U2GS_SaveFurniTrueScheme.add_furnitrueData, fun(X) -> encode_HomeLayoutInfo( X ) end),
	Bin_change_furnitrueData = write_array(P#pk_U2GS_SaveFurniTrueScheme.change_furnitrueData, fun(X) -> encode_HomeLayoutInfo( X ) end),
	[
		<<?U2GS_SaveFurniTrueScheme:?U16>>,
		Bin_homeID,
		Bin_areaType,
		Bin_change_wallID,
		Bin_chang_floorID,
		Bin_add_furnitrueData,
		Bin_change_furnitrueData
	];

%GENERATED from file:home.h => U2GS_SetGreetings
encode(#pk_U2GS_SetGreetings{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_SetGreetings.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_SetGreetings.areaType ),
	Bin_greetings = write_string( P#pk_U2GS_SetGreetings.greetings ),
	[
		<<?U2GS_SetGreetings:?U16>>,
		Bin_homeID,
		Bin_areaType,
		Bin_greetings
	];

%GENERATED from file:home.h => U2GS_UpgradeHome
encode(#pk_U2GS_UpgradeHome{} = P) ->
	Bin_upgredeDataList = write_array(P#pk_U2GS_UpgradeHome.upgredeDataList, fun(X) -> encode_UpgradeHomeData( X ) end),
	[
		<<?U2GS_UpgradeHome:?U16>>,
		Bin_upgredeDataList
	];

%GENERATED from file:home.h => U2GS_UpgradeHomeArea
encode(#pk_U2GS_UpgradeHomeArea{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_UpgradeHomeArea.homeID ),
	Bin_areaID = write_uint8( P#pk_U2GS_UpgradeHomeArea.areaID ),
	[
		<<?U2GS_UpgradeHomeArea:?U16>>,
		Bin_homeID,
		Bin_areaID
	];

%GENERATED from file:home.h => U2GS_UseFurnitrue
encode(#pk_U2GS_UseFurnitrue{} = P) ->
	Bin_homeID = write_uint64( P#pk_U2GS_UseFurnitrue.homeID ),
	Bin_areaType = write_uint8( P#pk_U2GS_UseFurnitrue.areaType ),
	Bin_itemUID = write_uint64( P#pk_U2GS_UseFurnitrue.itemUID ),
	Bin_isUp = write_bool( P#pk_U2GS_UseFurnitrue.isUp ),
	[
		<<?U2GS_UseFurnitrue:?U16>>,
		Bin_homeID,
		Bin_areaType,
		Bin_itemUID,
		Bin_isUp
	];

%GENERATED from file:identity.h => GS2U_GiftHistory_Sync
encode(#pk_GS2U_GiftHistory_Sync{} = P) ->
	Bin_listHistory = write_array(P#pk_GS2U_GiftHistory_Sync.listHistory, fun(X) -> encode_GiftHistory( X ) end),
	Bin_nameTables = write_array(P#pk_GS2U_GiftHistory_Sync.nameTables, fun(X) -> encode_NameTable( X ) end),
	Bin_listItemID = write_array(P#pk_GS2U_GiftHistory_Sync.listItemID, fun(X) -> write_uint16( X ) end),
	Bin_listItemCount = write_array(P#pk_GS2U_GiftHistory_Sync.listItemCount, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_GiftHistory_Sync:?U16>>,
		Bin_listHistory,
		Bin_nameTables,
		Bin_listItemID,
		Bin_listItemCount
	];

%GENERATED from file:identity.h => GS2U_Gift_Ack
encode(#pk_GS2U_Gift_Ack{} = P) ->
	Bin_history = encode_GiftHistory( P#pk_GS2U_Gift_Ack.history ),
	Bin_nameTables = write_array(P#pk_GS2U_Gift_Ack.nameTables, fun(X) -> encode_NameTable( X ) end),
	[
		<<?GS2U_Gift_Ack:?U16>>,
		Bin_history,
		Bin_nameTables
	];

%GENERATED from file:identity.h => GS2U_IdentityCharm_Sync
encode(#pk_GS2U_IdentityCharm_Sync{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_IdentityCharm_Sync.roleID ),
	Bin_tarRoleID = write_uint64( P#pk_GS2U_IdentityCharm_Sync.tarRoleID ),
	Bin_valueUpdate = write_uint32( P#pk_GS2U_IdentityCharm_Sync.valueUpdate ),
	Bin_valueNew = write_uint32( P#pk_GS2U_IdentityCharm_Sync.valueNew ),
	[
		<<?GS2U_IdentityCharm_Sync:?U16>>,
		Bin_roleID,
		Bin_tarRoleID,
		Bin_valueUpdate,
		Bin_valueNew
	];

%GENERATED from file:identity.h => GS2U_IdentityEditPic_Ack
encode(#pk_GS2U_IdentityEditPic_Ack{} = P) ->
	Bin_idi_listPic = write_array(P#pk_GS2U_IdentityEditPic_Ack.idi_listPic, fun(X) -> encode_MD5( X ) end),
	[
		<<?GS2U_IdentityEditPic_Ack:?U16>>,
		Bin_idi_listPic
	];

%GENERATED from file:identity.h => GS2U_IdentityEditTag_Ack
encode(#pk_GS2U_IdentityEditTag_Ack{} = P) ->
	Bin_idi_listTag = write_array(P#pk_GS2U_IdentityEditTag_Ack.idi_listTag, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_IdentityEditTag_Ack:?U16>>,
		Bin_idi_listTag
	];

%GENERATED from file:identity.h => GS2U_IdentityLike_Sync
encode(#pk_GS2U_IdentityLike_Sync{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_IdentityLike_Sync.roleID ),
	Bin_tarRoleID = write_uint64( P#pk_GS2U_IdentityLike_Sync.tarRoleID ),
	Bin_valueUpdate = write_uint32( P#pk_GS2U_IdentityLike_Sync.valueUpdate ),
	Bin_valueNew = write_uint32( P#pk_GS2U_IdentityLike_Sync.valueNew ),
	[
		<<?GS2U_IdentityLike_Sync:?U16>>,
		Bin_roleID,
		Bin_tarRoleID,
		Bin_valueUpdate,
		Bin_valueNew
	];

%GENERATED from file:identity.h => GS2U_IdentityPicDownloadData_Ack
encode(#pk_GS2U_IdentityPicDownloadData_Ack{} = P) ->
	Bin_md5 = write_array(P#pk_GS2U_IdentityPicDownloadData_Ack.md5, fun(X) -> write_uint8( X ) end),
	Bin_size = write_uint32( P#pk_GS2U_IdentityPicDownloadData_Ack.size ),
	Bin_count = write_uint16( P#pk_GS2U_IdentityPicDownloadData_Ack.count ),
	Bin_index = write_uint16( P#pk_GS2U_IdentityPicDownloadData_Ack.index ),
	Bin_data = write_array(P#pk_GS2U_IdentityPicDownloadData_Ack.data, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_IdentityPicDownloadData_Ack:?U16>>,
		Bin_md5,
		Bin_size,
		Bin_count,
		Bin_index,
		Bin_data
	];

%GENERATED from file:identity.h => GS2U_IdentityPicDownloadData_Sync
encode(#pk_GS2U_IdentityPicDownloadData_Sync{} = P) ->
	Bin_md5 = write_array(P#pk_GS2U_IdentityPicDownloadData_Sync.md5, fun(X) -> write_uint8( X ) end),
	Bin_size = write_uint32( P#pk_GS2U_IdentityPicDownloadData_Sync.size ),
	Bin_count = write_uint16( P#pk_GS2U_IdentityPicDownloadData_Sync.count ),
	Bin_index = write_uint16( P#pk_GS2U_IdentityPicDownloadData_Sync.index ),
	Bin_data = write_array(P#pk_GS2U_IdentityPicDownloadData_Sync.data, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_IdentityPicDownloadData_Sync:?U16>>,
		Bin_md5,
		Bin_size,
		Bin_count,
		Bin_index,
		Bin_data
	];

%GENERATED from file:identity.h => GS2U_IdentityPicDownloadError_Ack
encode(#pk_GS2U_IdentityPicDownloadError_Ack{} = P) ->
	Bin_md5 = write_array(P#pk_GS2U_IdentityPicDownloadError_Ack.md5, fun(X) -> write_uint8( X ) end),
	Bin_error = write_uint8( P#pk_GS2U_IdentityPicDownloadError_Ack.error ),
	[
		<<?GS2U_IdentityPicDownloadError_Ack:?U16>>,
		Bin_md5,
		Bin_error
	];

%GENERATED from file:identity.h => GS2U_IdentityPicUpload_Ack
encode(#pk_GS2U_IdentityPicUpload_Ack{} = P) ->
	Bin_md5 = write_array(P#pk_GS2U_IdentityPicUpload_Ack.md5, fun(X) -> write_uint8( X ) end),
	Bin_isComplete = write_bool( P#pk_GS2U_IdentityPicUpload_Ack.isComplete ),
	[
		<<?GS2U_IdentityPicUpload_Ack:?U16>>,
		Bin_md5,
		Bin_isComplete
	];

%GENERATED from file:identity.h => GS2U_Identity_Ack
encode(#pk_GS2U_Identity_Ack{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_Identity_Ack.id ),
	Bin_code = write_uint64( P#pk_GS2U_Identity_Ack.code ),
	Bin_name = write_string( P#pk_GS2U_Identity_Ack.name ),
	Bin_level = write_uint16( P#pk_GS2U_Identity_Ack.level ),
	Bin_career = write_uint32( P#pk_GS2U_Identity_Ack.career ),
	Bin_race = write_uint8( P#pk_GS2U_Identity_Ack.race ),
	Bin_sex = write_uint8( P#pk_GS2U_Identity_Ack.sex ),
	Bin_vipLv = write_uint8( P#pk_GS2U_Identity_Ack.vipLv ),
	Bin_like = write_uint32( P#pk_GS2U_Identity_Ack.like ),
	Bin_charm = write_uint32( P#pk_GS2U_Identity_Ack.charm ),
	Bin_isGiveLike = write_bool( P#pk_GS2U_Identity_Ack.isGiveLike ),
	Bin_familyName = write_string( P#pk_GS2U_Identity_Ack.familyName ),
	Bin_idi_age = write_uint8( P#pk_GS2U_Identity_Ack.idi_age ),
	Bin_idi_birthmonth = write_uint8( P#pk_GS2U_Identity_Ack.idi_birthmonth ),
	Bin_idi_birthday = write_uint8( P#pk_GS2U_Identity_Ack.idi_birthday ),
	Bin_idi_zodiac = write_uint8( P#pk_GS2U_Identity_Ack.idi_zodiac ),
	Bin_idi_bloodType = write_uint8( P#pk_GS2U_Identity_Ack.idi_bloodType ),
	Bin_idi_hometown1 = write_uint8( P#pk_GS2U_Identity_Ack.idi_hometown1 ),
	Bin_idi_hometown2 = write_uint8( P#pk_GS2U_Identity_Ack.idi_hometown2 ),
	Bin_idi_location1 = write_uint8( P#pk_GS2U_Identity_Ack.idi_location1 ),
	Bin_idi_location2 = write_uint8( P#pk_GS2U_Identity_Ack.idi_location2 ),
	Bin_idi_sign = write_string( P#pk_GS2U_Identity_Ack.idi_sign ),
	Bin_idi_face = write_array(P#pk_GS2U_Identity_Ack.idi_face, fun(X) -> write_uint8( X ) end),
	Bin_idi_listTag = write_array(P#pk_GS2U_Identity_Ack.idi_listTag, fun(X) -> write_uint8( X ) end),
	Bin_idi_listPic = write_array(P#pk_GS2U_Identity_Ack.idi_listPic, fun(X) -> encode_MD5( X ) end),
	[
		<<?GS2U_Identity_Ack:?U16>>,
		Bin_id,
		Bin_code,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_vipLv,
		Bin_like,
		Bin_charm,
		Bin_isGiveLike,
		Bin_familyName,
		Bin_idi_age,
		Bin_idi_birthmonth,
		Bin_idi_birthday,
		Bin_idi_zodiac,
		Bin_idi_bloodType,
		Bin_idi_hometown1,
		Bin_idi_hometown2,
		Bin_idi_location1,
		Bin_idi_location2,
		Bin_idi_sign,
		Bin_idi_face,
		Bin_idi_listTag,
		Bin_idi_listPic
	];

%GENERATED from file:identity.h => GS2U_Report_Ack
encode(#pk_GS2U_Report_Ack{} = P) ->
	Bin_tarRoleID = write_uint64( P#pk_GS2U_Report_Ack.tarRoleID ),
	[
		<<?GS2U_Report_Ack:?U16>>,
		Bin_tarRoleID
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditAge
encode(#pk_U2GS2U_IdentityEditAge{} = P) ->
	Bin_idi_age = write_uint8( P#pk_U2GS2U_IdentityEditAge.idi_age ),
	[
		<<?U2GS2U_IdentityEditAge:?U16>>,
		Bin_idi_age
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditBirth
encode(#pk_U2GS2U_IdentityEditBirth{} = P) ->
	Bin_idi_birthmonth = write_uint8( P#pk_U2GS2U_IdentityEditBirth.idi_birthmonth ),
	Bin_idi_birthday = write_uint8( P#pk_U2GS2U_IdentityEditBirth.idi_birthday ),
	[
		<<?U2GS2U_IdentityEditBirth:?U16>>,
		Bin_idi_birthmonth,
		Bin_idi_birthday
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditBloodType
encode(#pk_U2GS2U_IdentityEditBloodType{} = P) ->
	Bin_idi_bloodType = write_uint8( P#pk_U2GS2U_IdentityEditBloodType.idi_bloodType ),
	[
		<<?U2GS2U_IdentityEditBloodType:?U16>>,
		Bin_idi_bloodType
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditFace
encode(#pk_U2GS2U_IdentityEditFace{} = P) ->
	Bin_idi_face = write_array(P#pk_U2GS2U_IdentityEditFace.idi_face, fun(X) -> write_uint8( X ) end),
	[
		<<?U2GS2U_IdentityEditFace:?U16>>,
		Bin_idi_face
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditHometown
encode(#pk_U2GS2U_IdentityEditHometown{} = P) ->
	Bin_idi_hometown1 = write_uint8( P#pk_U2GS2U_IdentityEditHometown.idi_hometown1 ),
	Bin_idi_hometown2 = write_uint8( P#pk_U2GS2U_IdentityEditHometown.idi_hometown2 ),
	[
		<<?U2GS2U_IdentityEditHometown:?U16>>,
		Bin_idi_hometown1,
		Bin_idi_hometown2
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditLocation
encode(#pk_U2GS2U_IdentityEditLocation{} = P) ->
	Bin_idi_location1 = write_uint8( P#pk_U2GS2U_IdentityEditLocation.idi_location1 ),
	Bin_idi_location2 = write_uint8( P#pk_U2GS2U_IdentityEditLocation.idi_location2 ),
	[
		<<?U2GS2U_IdentityEditLocation:?U16>>,
		Bin_idi_location1,
		Bin_idi_location2
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditSign
encode(#pk_U2GS2U_IdentityEditSign{} = P) ->
	Bin_idi_sign = write_string( P#pk_U2GS2U_IdentityEditSign.idi_sign ),
	[
		<<?U2GS2U_IdentityEditSign:?U16>>,
		Bin_idi_sign
	];

%GENERATED from file:identity.h => U2GS2U_IdentityEditZodiac
encode(#pk_U2GS2U_IdentityEditZodiac{} = P) ->
	Bin_idi_zodiac = write_uint8( P#pk_U2GS2U_IdentityEditZodiac.idi_zodiac ),
	[
		<<?U2GS2U_IdentityEditZodiac:?U16>>,
		Bin_idi_zodiac
	];

%GENERATED from file:identity.h => U2GS2U_RequestRoleHeadPic
encode(#pk_U2GS2U_RequestRoleHeadPic{} = P) ->
	Bin_heads = write_array(P#pk_U2GS2U_RequestRoleHeadPic.heads, fun(X) -> encode_RoleHeadPic( X ) end),
	[
		<<?U2GS2U_RequestRoleHeadPic:?U16>>,
		Bin_heads
	];

%GENERATED from file:identity.h => U2GS_Gift_Request
encode(#pk_U2GS_Gift_Request{} = P) ->
	Bin_tarRoleID = write_uint64( P#pk_U2GS_Gift_Request.tarRoleID ),
	Bin_itemID = write_uint16( P#pk_U2GS_Gift_Request.itemID ),
	Bin_itemCount = write_uint16( P#pk_U2GS_Gift_Request.itemCount ),
	Bin_content = write_string( P#pk_U2GS_Gift_Request.content ),
	[
		<<?U2GS_Gift_Request:?U16>>,
		Bin_tarRoleID,
		Bin_itemID,
		Bin_itemCount,
		Bin_content
	];

%GENERATED from file:identity.h => U2GS_IdentityEditTagAdd_Request
encode(#pk_U2GS_IdentityEditTagAdd_Request{} = P) ->
	Bin_idi_listTag = write_array(P#pk_U2GS_IdentityEditTagAdd_Request.idi_listTag, fun(X) -> write_uint8( X ) end),
	[
		<<?U2GS_IdentityEditTagAdd_Request:?U16>>,
		Bin_idi_listTag
	];

%GENERATED from file:identity.h => U2GS_IdentityEditTagDel_Request
encode(#pk_U2GS_IdentityEditTagDel_Request{} = P) ->
	Bin_idi_tag = write_uint8( P#pk_U2GS_IdentityEditTagDel_Request.idi_tag ),
	[
		<<?U2GS_IdentityEditTagDel_Request:?U16>>,
		Bin_idi_tag
	];

%GENERATED from file:identity.h => U2GS_IdentityPicDownloadBegin_Request
encode(#pk_U2GS_IdentityPicDownloadBegin_Request{} = P) ->
	Bin_md5 = write_array(P#pk_U2GS_IdentityPicDownloadBegin_Request.md5, fun(X) -> write_uint8( X ) end),
	Bin_id = write_uint64( P#pk_U2GS_IdentityPicDownloadBegin_Request.id ),
	[
		<<?U2GS_IdentityPicDownloadBegin_Request:?U16>>,
		Bin_md5,
		Bin_id
	];

%GENERATED from file:identity.h => U2GS_IdentityPicDownloadContinue_Request
encode(#pk_U2GS_IdentityPicDownloadContinue_Request{} = P) ->
	Bin_md5 = write_array(P#pk_U2GS_IdentityPicDownloadContinue_Request.md5, fun(X) -> write_uint8( X ) end),
	[
		<<?U2GS_IdentityPicDownloadContinue_Request:?U16>>,
		Bin_md5
	];

%GENERATED from file:identity.h => U2GS_IdentityPicUploadBegin_Request
encode(#pk_U2GS_IdentityPicUploadBegin_Request{} = P) ->
	Bin_md5 = write_array(P#pk_U2GS_IdentityPicUploadBegin_Request.md5, fun(X) -> write_uint8( X ) end),
	Bin_size = write_uint32( P#pk_U2GS_IdentityPicUploadBegin_Request.size ),
	Bin_opType = write_bool( P#pk_U2GS_IdentityPicUploadBegin_Request.opType ),
	Bin_pos = write_uint8( P#pk_U2GS_IdentityPicUploadBegin_Request.pos ),
	[
		<<?U2GS_IdentityPicUploadBegin_Request:?U16>>,
		Bin_md5,
		Bin_size,
		Bin_opType,
		Bin_pos
	];

%GENERATED from file:identity.h => U2GS_IdentityPicUploadData_Request
encode(#pk_U2GS_IdentityPicUploadData_Request{} = P) ->
	Bin_md5 = write_array(P#pk_U2GS_IdentityPicUploadData_Request.md5, fun(X) -> write_uint8( X ) end),
	Bin_count = write_uint16( P#pk_U2GS_IdentityPicUploadData_Request.count ),
	Bin_index = write_uint16( P#pk_U2GS_IdentityPicUploadData_Request.index ),
	Bin_data = write_array(P#pk_U2GS_IdentityPicUploadData_Request.data, fun(X) -> write_uint8( X ) end),
	[
		<<?U2GS_IdentityPicUploadData_Request:?U16>>,
		Bin_md5,
		Bin_count,
		Bin_index,
		Bin_data
	];

%GENERATED from file:identity.h => U2GS_Identity_Request
encode(#pk_U2GS_Identity_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_Identity_Request.id ),
	[
		<<?U2GS_Identity_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:identity.h => U2GS_Report_Request
encode(#pk_U2GS_Report_Request{} = P) ->
	Bin_tarRoleID = write_uint64( P#pk_U2GS_Report_Request.tarRoleID ),
	[
		<<?U2GS_Report_Request:?U16>>,
		Bin_tarRoleID
	];

%GENERATED from file:item.h => GS2U_BuyItemQuotaNumber
encode(#pk_GS2U_BuyItemQuotaNumber{} = P) ->
	Bin_itemid = write_uint16( P#pk_GS2U_BuyItemQuotaNumber.itemid ),
	Bin_quotaNumber = write_int32( P#pk_GS2U_BuyItemQuotaNumber.quotaNumber ),
	[
		<<?GS2U_BuyItemQuotaNumber:?U16>>,
		Bin_itemid,
		Bin_quotaNumber
	];

%GENERATED from file:item.h => GS2U_LookInfoItemListAtMall
encode(#pk_GS2U_LookInfoItemListAtMall{} = P) ->
	Bin_item_list = write_array(P#pk_GS2U_LookInfoItemListAtMall.item_list, fun(X) -> encode_LookInfoItemAtMall( X ) end),
	[
		<<?GS2U_LookInfoItemListAtMall:?U16>>,
		Bin_item_list
	];

%GENERATED from file:item.h => GS2U_LookInfoItemListAtNpcStore
encode(#pk_GS2U_LookInfoItemListAtNpcStore{} = P) ->
	Bin_storeType = write_uint16( P#pk_GS2U_LookInfoItemListAtNpcStore.storeType ),
	Bin_item_list = write_array(P#pk_GS2U_LookInfoItemListAtNpcStore.item_list, fun(X) -> encode_LookInfoItem( X ) end),
	[
		<<?GS2U_LookInfoItemListAtNpcStore:?U16>>,
		Bin_storeType,
		Bin_item_list
	];

%GENERATED from file:item.h => GS2U_MysteriousShop
encode(#pk_GS2U_MysteriousShop{} = P) ->
	Bin_lvlPhase = write_uint32( P#pk_GS2U_MysteriousShop.lvlPhase ),
	Bin_residueTime = write_uint32( P#pk_GS2U_MysteriousShop.residueTime ),
	Bin_items = write_array(P#pk_GS2U_MysteriousShop.items, fun(X) -> encode_MysteriousShopItem( X ) end),
	Bin_freshMSShopDaimond = write_int32( P#pk_GS2U_MysteriousShop.freshMSShopDaimond ),
	[
		<<?GS2U_MysteriousShop:?U16>>,
		Bin_lvlPhase,
		Bin_residueTime,
		Bin_items,
		Bin_freshMSShopDaimond
	];

%GENERATED from file:item.h => GS2U_ShowGainGoodsOrCoinsInfo
encode(#pk_GS2U_ShowGainGoodsOrCoinsInfo{} = P) ->
	Bin_gainReason = write_string( P#pk_GS2U_ShowGainGoodsOrCoinsInfo.gainReason ),
	Bin_listGoods = write_array(P#pk_GS2U_ShowGainGoodsOrCoinsInfo.listGoods, fun(X) -> encode_OneGoodsInfo( X ) end),
	Bin_listcoins = write_array(P#pk_GS2U_ShowGainGoodsOrCoinsInfo.listcoins, fun(X) -> encode_OneCoinInfo( X ) end),
	[
		<<?GS2U_ShowGainGoodsOrCoinsInfo:?U16>>,
		Bin_gainReason,
		Bin_listGoods,
		Bin_listcoins
	];

%GENERATED from file:item.h => GS2U_SingleUseItem
encode(#pk_GS2U_SingleUseItem{} = P) ->
	Bin_itemID = write_uint16( P#pk_GS2U_SingleUseItem.itemID ),
	[
		<<?GS2U_SingleUseItem:?U16>>,
		Bin_itemID
	];

%GENERATED from file:item.h => GS2U_UseItem
encode(#pk_GS2U_UseItem{} = P) ->
	Bin_vctUseItem = write_array(P#pk_GS2U_UseItem.vctUseItem, fun(X) -> encode_UseItemCD( X ) end),
	[
		<<?GS2U_UseItem:?U16>>,
		Bin_vctUseItem
	];

%GENERATED from file:item.h => GS2U_UseItemExpInDanResult
encode(#pk_GS2U_UseItemExpInDanResult{} = P) ->
	Bin_expInDanType = write_uint32( P#pk_GS2U_UseItemExpInDanResult.expInDanType ),
	Bin_remainTime = write_uint32( P#pk_GS2U_UseItemExpInDanResult.remainTime ),
	[
		<<?GS2U_UseItemExpInDanResult:?U16>>,
		Bin_expInDanType,
		Bin_remainTime
	];

%GENERATED from file:item.h => GS2U_UseItemGainGoodsTips
encode(#pk_GS2U_UseItemGainGoodsTips{} = P) ->
	Bin_listTips = write_array(P#pk_GS2U_UseItemGainGoodsTips.listTips, fun(X) -> encode_UseItemGainGoodsTips( X ) end),
	Bin_coinTips = write_array(P#pk_GS2U_UseItemGainGoodsTips.coinTips, fun(X) -> encode_UseItemGainCoinTips( X ) end),
	[
		<<?GS2U_UseItemGainGoodsTips:?U16>>,
		Bin_listTips,
		Bin_coinTips
	];

%GENERATED from file:item.h => GS2U_UseItemResult
encode(#pk_GS2U_UseItemResult{} = P) ->
	Bin_itemID = write_uint16( P#pk_GS2U_UseItemResult.itemID ),
	Bin_itemNum = write_uint16( P#pk_GS2U_UseItemResult.itemNum ),
	Bin_result = write_int32( P#pk_GS2U_UseItemResult.result ),
	[
		<<?GS2U_UseItemResult:?U16>>,
		Bin_itemID,
		Bin_itemNum,
		Bin_result
	];

%GENERATED from file:item.h => RefindResList
encode(#pk_RefindResList{} = P) ->
	Bin_resList = write_array(P#pk_RefindResList.resList, fun(X) -> encode_RefindResInfo( X ) end),
	[
		<<?RefindResList:?U16>>,
		Bin_resList
	];

%GENERATED from file:item.h => U2GS_BuyItemAtGuildShopRequest
encode(#pk_U2GS_BuyItemAtGuildShopRequest{} = P) ->
	Bin_itemid = write_uint16( P#pk_U2GS_BuyItemAtGuildShopRequest.itemid ),
	Bin_number = write_uint16( P#pk_U2GS_BuyItemAtGuildShopRequest.number ),
	[
		<<?U2GS_BuyItemAtGuildShopRequest:?U16>>,
		Bin_itemid,
		Bin_number
	];

%GENERATED from file:item.h => U2GS_BuyItemAtMallRequest
encode(#pk_U2GS_BuyItemAtMallRequest{} = P) ->
	Bin_itemid = write_uint16( P#pk_U2GS_BuyItemAtMallRequest.itemid ),
	Bin_number = write_uint16( P#pk_U2GS_BuyItemAtMallRequest.number ),
	[
		<<?U2GS_BuyItemAtMallRequest:?U16>>,
		Bin_itemid,
		Bin_number
	];

%GENERATED from file:item.h => U2GS_BuyItemAtNpcStoreRequest
encode(#pk_U2GS_BuyItemAtNpcStoreRequest{} = P) ->
	Bin_npccode = write_uint64( P#pk_U2GS_BuyItemAtNpcStoreRequest.npccode ),
	Bin_itemid = write_uint16( P#pk_U2GS_BuyItemAtNpcStoreRequest.itemid ),
	Bin_number = write_uint16( P#pk_U2GS_BuyItemAtNpcStoreRequest.number ),
	[
		<<?U2GS_BuyItemAtNpcStoreRequest:?U16>>,
		Bin_npccode,
		Bin_itemid,
		Bin_number
	];

%GENERATED from file:item.h => U2GS_BuyItemAtShopIDRequest
encode(#pk_U2GS_BuyItemAtShopIDRequest{} = P) ->
	Bin_shopID = write_uint64( P#pk_U2GS_BuyItemAtShopIDRequest.shopID ),
	Bin_itemid = write_uint16( P#pk_U2GS_BuyItemAtShopIDRequest.itemid ),
	Bin_number = write_uint16( P#pk_U2GS_BuyItemAtShopIDRequest.number ),
	[
		<<?U2GS_BuyItemAtShopIDRequest:?U16>>,
		Bin_shopID,
		Bin_itemid,
		Bin_number
	];

%GENERATED from file:item.h => U2GS_BuyMysteriousShopItem
encode(#pk_U2GS_BuyMysteriousShopItem{} = P) ->
	Bin_lvlPhase = write_uint32( P#pk_U2GS_BuyMysteriousShopItem.lvlPhase ),
	Bin_buynumber = write_uint32( P#pk_U2GS_BuyMysteriousShopItem.buynumber ),
	Bin_only_id = write_uint32( P#pk_U2GS_BuyMysteriousShopItem.only_id ),
	Bin_itemid = write_uint16( P#pk_U2GS_BuyMysteriousShopItem.itemid ),
	[
		<<?U2GS_BuyMysteriousShopItem:?U16>>,
		Bin_lvlPhase,
		Bin_buynumber,
		Bin_only_id,
		Bin_itemid
	];

%GENERATED from file:item.h => U2GS_ConvenientBuyItem
encode(#pk_U2GS_ConvenientBuyItem{} = P) ->
	Bin_itemid = write_uint32( P#pk_U2GS_ConvenientBuyItem.itemid ),
	Bin_buynumber = write_uint32( P#pk_U2GS_ConvenientBuyItem.buynumber ),
	[
		<<?U2GS_ConvenientBuyItem:?U16>>,
		Bin_itemid,
		Bin_buynumber
	];

%GENERATED from file:item.h => U2GS_FreshMSShop
encode(#pk_U2GS_FreshMSShop{}) ->
	[
		<<?U2GS_FreshMSShop:?U16>>

	];

%GENERATED from file:item.h => U2GS_LookInfoItemListAtMall
encode(#pk_U2GS_LookInfoItemListAtMall{}) ->
	[
		<<?U2GS_LookInfoItemListAtMall:?U16>>

	];

%GENERATED from file:item.h => U2GS_LookInfoItemListAtNpcStore
encode(#pk_U2GS_LookInfoItemListAtNpcStore{} = P) ->
	Bin_npccode = write_uint64( P#pk_U2GS_LookInfoItemListAtNpcStore.npccode ),
	[
		<<?U2GS_LookInfoItemListAtNpcStore:?U16>>,
		Bin_npccode
	];

%GENERATED from file:item.h => U2GS_LookInfoItemListAtShopID
encode(#pk_U2GS_LookInfoItemListAtShopID{} = P) ->
	Bin_shopID = write_uint64( P#pk_U2GS_LookInfoItemListAtShopID.shopID ),
	[
		<<?U2GS_LookInfoItemListAtShopID:?U16>>,
		Bin_shopID
	];

%GENERATED from file:item.h => U2GS_RefindResAll
encode(#pk_U2GS_RefindResAll{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RefindResAll.type ),
	[
		<<?U2GS_RefindResAll:?U16>>,
		Bin_type
	];

%GENERATED from file:item.h => U2GS_RefindResOne
encode(#pk_U2GS_RefindResOne{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_RefindResOne.id ),
	Bin_type = write_uint8( P#pk_U2GS_RefindResOne.type ),
	[
		<<?U2GS_RefindResOne:?U16>>,
		Bin_id,
		Bin_type
	];

%GENERATED from file:item.h => U2GS_RequestMysteriousShop
encode(#pk_U2GS_RequestMysteriousShop{}) ->
	[
		<<?U2GS_RequestMysteriousShop:?U16>>

	];

%GENERATED from file:item.h => U2GS_UseStarMoonBox
encode(#pk_U2GS_UseStarMoonBox{} = P) ->
	Bin_itemUID = write_uint64( P#pk_U2GS_UseStarMoonBox.itemUID ),
	Bin_useNum = write_uint16( P#pk_U2GS_UseStarMoonBox.useNum ),
	[
		<<?U2GS_UseStarMoonBox:?U16>>,
		Bin_itemUID,
		Bin_useNum
	];

%GENERATED from file:luckycoin.h => GS2U_GainLuckyCoin
encode(#pk_GS2U_GainLuckyCoin{} = P) ->
	Bin_gainLuckyCoinInfo = encode_GainLuckyCoinInfo( P#pk_GS2U_GainLuckyCoin.gainLuckyCoinInfo ),
	Bin_count = write_int32( P#pk_GS2U_GainLuckyCoin.count ),
	Bin_time = write_uint64( P#pk_GS2U_GainLuckyCoin.time ),
	[
		<<?GS2U_GainLuckyCoin:?U16>>,
		Bin_gainLuckyCoinInfo,
		Bin_count,
		Bin_time
	];

%GENERATED from file:luckycoin.h => GS2U_GiveLuckyCoinResult
encode(#pk_GS2U_GiveLuckyCoinResult{} = P) ->
	Bin_friendID = write_uint64( P#pk_GS2U_GiveLuckyCoinResult.friendID ),
	Bin_result = write_uint8( P#pk_GS2U_GiveLuckyCoinResult.result ),
	[
		<<?GS2U_GiveLuckyCoinResult:?U16>>,
		Bin_friendID,
		Bin_result
	];

%GENERATED from file:luckycoin.h => GS2U_InitGainLuckyCoinInfo
encode(#pk_GS2U_InitGainLuckyCoinInfo{} = P) ->
	Bin_gainLuckyCoinInfoList = write_array(P#pk_GS2U_InitGainLuckyCoinInfo.gainLuckyCoinInfoList, fun(X) -> encode_GainLuckyCoinInfo( X ) end),
	Bin_count = write_int32( P#pk_GS2U_InitGainLuckyCoinInfo.count ),
	Bin_time = write_uint64( P#pk_GS2U_InitGainLuckyCoinInfo.time ),
	[
		<<?GS2U_InitGainLuckyCoinInfo:?U16>>,
		Bin_gainLuckyCoinInfoList,
		Bin_count,
		Bin_time
	];

%GENERATED from file:luckycoin.h => GS2U_LuckyDrawResult
encode(#pk_GS2U_LuckyDrawResult{} = P) ->
	Bin_itemID = write_int32( P#pk_GS2U_LuckyDrawResult.itemID ),
	Bin_count = write_int32( P#pk_GS2U_LuckyDrawResult.count ),
	Bin_time = write_uint64( P#pk_GS2U_LuckyDrawResult.time ),
	[
		<<?GS2U_LuckyDrawResult:?U16>>,
		Bin_itemID,
		Bin_count,
		Bin_time
	];

%GENERATED from file:luckycoin.h => U2GS_GiveLuckyCoin
encode(#pk_U2GS_GiveLuckyCoin{} = P) ->
	Bin_friendID = write_uint64( P#pk_U2GS_GiveLuckyCoin.friendID ),
	[
		<<?U2GS_GiveLuckyCoin:?U16>>,
		Bin_friendID
	];

%GENERATED from file:luckycoin.h => U2GS_LuckyDraw
encode(#pk_U2GS_LuckyDraw{}) ->
	[
		<<?U2GS_LuckyDraw:?U16>>

	];

%GENERATED from file:luckycoin.h => U2GS_LuckyDrawEnd
encode(#pk_U2GS_LuckyDrawEnd{}) ->
	[
		<<?U2GS_LuckyDrawEnd:?U16>>

	];

%GENERATED from file:luckycoin.h => U2GS_OneKeyGiveLucky
encode(#pk_U2GS_OneKeyGiveLucky{}) ->
	[
		<<?U2GS_OneKeyGiveLucky:?U16>>

	];

%GENERATED from file:mail.h => GS2U_DelMailCoin
encode(#pk_GS2U_DelMailCoin{} = P) ->
	Bin_mailID = write_uint64( P#pk_GS2U_DelMailCoin.mailID ),
	[
		<<?GS2U_DelMailCoin:?U16>>,
		Bin_mailID
	];

%GENERATED from file:mail.h => GS2U_DelMailItem
encode(#pk_GS2U_DelMailItem{} = P) ->
	Bin_mailID = write_uint64( P#pk_GS2U_DelMailItem.mailID ),
	Bin_itemUID = write_uint64( P#pk_GS2U_DelMailItem.itemUID ),
	[
		<<?GS2U_DelMailItem:?U16>>,
		Bin_mailID,
		Bin_itemUID
	];

%GENERATED from file:mail.h => GS2U_DeleteMail
encode(#pk_GS2U_DeleteMail{} = P) ->
	Bin_mailID = write_uint64( P#pk_GS2U_DeleteMail.mailID ),
	[
		<<?GS2U_DeleteMail:?U16>>,
		Bin_mailID
	];

%GENERATED from file:mail.h => GS2U_GetMailItemAll
encode(#pk_GS2U_GetMailItemAll{} = P) ->
	Bin_mailIDs = write_array(P#pk_GS2U_GetMailItemAll.mailIDs, fun(X) -> write_uint64( X ) end),
	Bin_number = write_uint16( P#pk_GS2U_GetMailItemAll.number ),
	Bin_items = write_array(P#pk_GS2U_GetMailItemAll.items, fun(X) -> encode_MailItemAll( X ) end),
	Bin_coins = write_array(P#pk_GS2U_GetMailItemAll.coins, fun(X) -> encode_MailCoin( X ) end),
	[
		<<?GS2U_GetMailItemAll:?U16>>,
		Bin_mailIDs,
		Bin_number,
		Bin_items,
		Bin_coins
	];

%GENERATED from file:mail.h => GS2U_LockMail
encode(#pk_GS2U_LockMail{} = P) ->
	Bin_ret = encode_retMailOpt( P#pk_GS2U_LockMail.ret ),
	[
		<<?GS2U_LockMail:?U16>>,
		Bin_ret
	];

%GENERATED from file:mail.h => GS2U_Mail
encode(#pk_GS2U_Mail{} = P) ->
	Bin_detail = encode_MailDetail( P#pk_GS2U_Mail.detail ),
	[
		<<?GS2U_Mail:?U16>>,
		Bin_detail
	];

%GENERATED from file:mail.h => GS2U_MailInfo
encode(#pk_GS2U_MailInfo{} = P) ->
	Bin_mailInfoList = write_array(P#pk_GS2U_MailInfo.mailInfoList, fun(X) -> encode_MailInfo( X ) end),
	[
		<<?GS2U_MailInfo:?U16>>,
		Bin_mailInfoList
	];

%GENERATED from file:mail.h => GS2U_SendMailAck
encode(#pk_GS2U_SendMailAck{} = P) ->
	Bin_toRoleName = write_string( P#pk_GS2U_SendMailAck.toRoleName ),
	Bin_isOK = write_bool( P#pk_GS2U_SendMailAck.isOK ),
	[
		<<?GS2U_SendMailAck:?U16>>,
		Bin_toRoleName,
		Bin_isOK
	];

%GENERATED from file:mail.h => GS2U_UnlockMail
encode(#pk_GS2U_UnlockMail{} = P) ->
	Bin_ret = encode_retMailOpt( P#pk_GS2U_UnlockMail.ret ),
	[
		<<?GS2U_UnlockMail:?U16>>,
		Bin_ret
	];

%GENERATED from file:mail.h => U2GS_DeleteAllReadMail
encode(#pk_U2GS_DeleteAllReadMail{}) ->
	[
		<<?U2GS_DeleteAllReadMail:?U16>>

	];

%GENERATED from file:mail.h => U2GS_DeleteMail
encode(#pk_U2GS_DeleteMail{} = P) ->
	Bin_mailID = write_uint64( P#pk_U2GS_DeleteMail.mailID ),
	[
		<<?U2GS_DeleteMail:?U16>>,
		Bin_mailID
	];

%GENERATED from file:mail.h => U2GS_GetDeleteMails
encode(#pk_U2GS_GetDeleteMails{} = P) ->
	Bin_mailIDs = write_array(P#pk_U2GS_GetDeleteMails.mailIDs, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_GetDeleteMails:?U16>>,
		Bin_mailIDs
	];

%GENERATED from file:mail.h => U2GS_GetMailCoin
encode(#pk_U2GS_GetMailCoin{} = P) ->
	Bin_mailID = write_uint64( P#pk_U2GS_GetMailCoin.mailID ),
	[
		<<?U2GS_GetMailCoin:?U16>>,
		Bin_mailID
	];

%GENERATED from file:mail.h => U2GS_GetMailItem
encode(#pk_U2GS_GetMailItem{} = P) ->
	Bin_mailID = write_uint64( P#pk_U2GS_GetMailItem.mailID ),
	Bin_itemUID = write_uint64( P#pk_U2GS_GetMailItem.itemUID ),
	[
		<<?U2GS_GetMailItem:?U16>>,
		Bin_mailID,
		Bin_itemUID
	];

%GENERATED from file:mail.h => U2GS_GetMailItemAll
encode(#pk_U2GS_GetMailItemAll{}) ->
	[
		<<?U2GS_GetMailItemAll:?U16>>

	];

%GENERATED from file:mail.h => U2GS_LockMail
encode(#pk_U2GS_LockMail{} = P) ->
	Bin_mailID = write_uint64( P#pk_U2GS_LockMail.mailID ),
	[
		<<?U2GS_LockMail:?U16>>,
		Bin_mailID
	];

%GENERATED from file:mail.h => U2GS_ReadMail
encode(#pk_U2GS_ReadMail{} = P) ->
	Bin_mailID = write_uint64( P#pk_U2GS_ReadMail.mailID ),
	[
		<<?U2GS_ReadMail:?U16>>,
		Bin_mailID
	];

%GENERATED from file:mail.h => U2GS_SendMail
encode(#pk_U2GS_SendMail{} = P) ->
	Bin_toRoleName = write_string( P#pk_U2GS_SendMail.toRoleName ),
	Bin_mailTitle = write_string( P#pk_U2GS_SendMail.mailTitle ),
	Bin_mailContent = write_string( P#pk_U2GS_SendMail.mailContent ),
	[
		<<?U2GS_SendMail:?U16>>,
		Bin_toRoleName,
		Bin_mailTitle,
		Bin_mailContent
	];

%GENERATED from file:mail.h => U2GS_UnlockMail
encode(#pk_U2GS_UnlockMail{} = P) ->
	Bin_mailID = write_uint64( P#pk_U2GS_UnlockMail.mailID ),
	[
		<<?U2GS_UnlockMail:?U16>>,
		Bin_mailID
	];

%GENERATED from file:mall.h => GS2U_FashionConfigInfo
encode(#pk_GS2U_FashionConfigInfo{} = P) ->
	Bin_state = write_int32( P#pk_GS2U_FashionConfigInfo.state ),
	Bin_configInfoList = write_array(P#pk_GS2U_FashionConfigInfo.configInfoList, fun(X) -> encode_FashionConfigInfo( X ) end),
	[
		<<?GS2U_FashionConfigInfo:?U16>>,
		Bin_state,
		Bin_configInfoList
	];

%GENERATED from file:mall.h => GS2U_GroupBuyGoodsBuyAck
encode(#pk_GS2U_GroupBuyGoodsBuyAck{} = P) ->
	Bin_buyCode = write_int32( P#pk_GS2U_GroupBuyGoodsBuyAck.buyCode ),
	Bin_id = write_int32( P#pk_GS2U_GroupBuyGoodsBuyAck.id ),
	Bin_goodsNum = write_uint16( P#pk_GS2U_GroupBuyGoodsBuyAck.goodsNum ),
	Bin_scoreAdd = write_uint64( P#pk_GS2U_GroupBuyGoodsBuyAck.scoreAdd ),
	Bin_scoreNew = write_uint64( P#pk_GS2U_GroupBuyGoodsBuyAck.scoreNew ),
	Bin_lockDiamond = write_uint64( P#pk_GS2U_GroupBuyGoodsBuyAck.lockDiamond ),
	Bin_goodsBuyCountListInfo = write_array(P#pk_GS2U_GroupBuyGoodsBuyAck.goodsBuyCountListInfo, fun(X) -> encode_idAndCount( X ) end),
	[
		<<?GS2U_GroupBuyGoodsBuyAck:?U16>>,
		Bin_buyCode,
		Bin_id,
		Bin_goodsNum,
		Bin_scoreAdd,
		Bin_scoreNew,
		Bin_lockDiamond,
		Bin_goodsBuyCountListInfo
	];

%GENERATED from file:mall.h => GS2U_GroupBuyRewardBuyAck
encode(#pk_GS2U_GroupBuyRewardBuyAck{} = P) ->
	Bin_buyCode = write_int32( P#pk_GS2U_GroupBuyRewardBuyAck.buyCode ),
	Bin_id = write_int32( P#pk_GS2U_GroupBuyRewardBuyAck.id ),
	Bin_goodsBuyCountListInfo = write_array(P#pk_GS2U_GroupBuyRewardBuyAck.goodsBuyCountListInfo, fun(X) -> encode_idAndCount( X ) end),
	[
		<<?GS2U_GroupBuyRewardBuyAck:?U16>>,
		Bin_buyCode,
		Bin_id,
		Bin_goodsBuyCountListInfo
	];

%GENERATED from file:mall.h => GS2U_GroupBuyWhenOpen
encode(#pk_GS2U_GroupBuyWhenOpen{} = P) ->
	Bin_state = write_uint8( P#pk_GS2U_GroupBuyWhenOpen.state ),
	Bin_open_time = write_uint32( P#pk_GS2U_GroupBuyWhenOpen.open_time ),
	Bin_limit_time = write_uint16( P#pk_GS2U_GroupBuyWhenOpen.limit_time ),
	Bin_score_add_time = write_uint16( P#pk_GS2U_GroupBuyWhenOpen.score_add_time ),
	Bin_image = write_string( P#pk_GS2U_GroupBuyWhenOpen.image ),
	Bin_goodsListInfo = write_array(P#pk_GS2U_GroupBuyWhenOpen.goodsListInfo, fun(X) -> encode_GroupBuyGoodsInfo( X ) end),
	Bin_rewardListInfo = write_array(P#pk_GS2U_GroupBuyWhenOpen.rewardListInfo, fun(X) -> encode_GroupBuyRewardInfo( X ) end),
	Bin_personalScore = write_uint64( P#pk_GS2U_GroupBuyWhenOpen.personalScore ),
	Bin_rewardPersonalListInfo = write_array(P#pk_GS2U_GroupBuyWhenOpen.rewardPersonalListInfo, fun(X) -> write_int32( X ) end),
	Bin_goodsPersonalListInfo = write_array(P#pk_GS2U_GroupBuyWhenOpen.goodsPersonalListInfo, fun(X) -> encode_idAndCount( X ) end),
	[
		<<?GS2U_GroupBuyWhenOpen:?U16>>,
		Bin_state,
		Bin_open_time,
		Bin_limit_time,
		Bin_score_add_time,
		Bin_image,
		Bin_goodsListInfo,
		Bin_rewardListInfo,
		Bin_personalScore,
		Bin_rewardPersonalListInfo,
		Bin_goodsPersonalListInfo
	];

%GENERATED from file:mall.h => GS2U_KoreaNaverConfigInfo
encode(#pk_GS2U_KoreaNaverConfigInfo{} = P) ->
	Bin_state = write_int32( P#pk_GS2U_KoreaNaverConfigInfo.state ),
	Bin_configInfoList = write_array(P#pk_GS2U_KoreaNaverConfigInfo.configInfoList, fun(X) -> encode_KoreaNaverConfigInfo( X ) end),
	Bin_rewardGetList = write_array(P#pk_GS2U_KoreaNaverConfigInfo.rewardGetList, fun(X) -> encode_KoreaNaverIdAndVer( X ) end),
	[
		<<?GS2U_KoreaNaverConfigInfo:?U16>>,
		Bin_state,
		Bin_configInfoList,
		Bin_rewardGetList
	];

%GENERATED from file:mall.h => GS2U_KoreaNaverRewardGetAck
encode(#pk_GS2U_KoreaNaverRewardGetAck{} = P) ->
	Bin_getCode = write_int32( P#pk_GS2U_KoreaNaverRewardGetAck.getCode ),
	Bin_id = write_int32( P#pk_GS2U_KoreaNaverRewardGetAck.id ),
	Bin_ver = write_int32( P#pk_GS2U_KoreaNaverRewardGetAck.ver ),
	Bin_rewardGetList = write_array(P#pk_GS2U_KoreaNaverRewardGetAck.rewardGetList, fun(X) -> encode_KoreaNaverIdAndVer( X ) end),
	[
		<<?GS2U_KoreaNaverRewardGetAck:?U16>>,
		Bin_getCode,
		Bin_id,
		Bin_ver,
		Bin_rewardGetList
	];

%GENERATED from file:mall.h => GS2U_MallBuyResult
encode(#pk_GS2U_MallBuyResult{} = P) ->
	Bin_db_id = write_uint32( P#pk_GS2U_MallBuyResult.db_id ),
	Bin_buyCount = write_uint32( P#pk_GS2U_MallBuyResult.buyCount ),
	[
		<<?GS2U_MallBuyResult:?U16>>,
		Bin_db_id,
		Bin_buyCount
	];

%GENERATED from file:mall.h => GS2U_MallBuyResult2
encode(#pk_GS2U_MallBuyResult2{} = P) ->
	Bin_db_id = write_uint32( P#pk_GS2U_MallBuyResult2.db_id ),
	Bin_buyCount = write_uint32( P#pk_GS2U_MallBuyResult2.buyCount ),
	[
		<<?GS2U_MallBuyResult2:?U16>>,
		Bin_db_id,
		Bin_buyCount
	];

%GENERATED from file:mall.h => GS2U_MallInfoList
encode(#pk_GS2U_MallInfoList{} = P) ->
	Bin_seed = write_int32( P#pk_GS2U_MallInfoList.seed ),
	Bin_mallinfolist = write_array(P#pk_GS2U_MallInfoList.mallinfolist, fun(X) -> encode_MallInfo( X ) end),
	[
		<<?GS2U_MallInfoList:?U16>>,
		Bin_seed,
		Bin_mallinfolist
	];

%GENERATED from file:mall.h => GS2U_MallInfoList2
encode(#pk_GS2U_MallInfoList2{} = P) ->
	Bin_seed = write_int32( P#pk_GS2U_MallInfoList2.seed ),
	Bin_mallinfolist = write_array(P#pk_GS2U_MallInfoList2.mallinfolist, fun(X) -> encode_MallInfo( X ) end),
	[
		<<?GS2U_MallInfoList2:?U16>>,
		Bin_seed,
		Bin_mallinfolist
	];

%GENERATED from file:mall.h => GS2U_MallPriceList
encode(#pk_GS2U_MallPriceList{} = P) ->
	Bin_mallinfolist = write_array(P#pk_GS2U_MallPriceList.mallinfolist, fun(X) -> encode_MallInfo( X ) end),
	[
		<<?GS2U_MallPriceList:?U16>>,
		Bin_mallinfolist
	];

%GENERATED from file:mall.h => GS2U_MallPriceList2
encode(#pk_GS2U_MallPriceList2{} = P) ->
	Bin_mallinfolist = write_array(P#pk_GS2U_MallPriceList2.mallinfolist, fun(X) -> encode_MallInfo( X ) end),
	[
		<<?GS2U_MallPriceList2:?U16>>,
		Bin_mallinfolist
	];

%GENERATED from file:mall.h => U2GS_GroupBuyGoodsBuyRequest
encode(#pk_U2GS_GroupBuyGoodsBuyRequest{} = P) ->
	Bin_id = write_int32( P#pk_U2GS_GroupBuyGoodsBuyRequest.id ),
	Bin_goodsNum = write_uint16( P#pk_U2GS_GroupBuyGoodsBuyRequest.goodsNum ),
	[
		<<?U2GS_GroupBuyGoodsBuyRequest:?U16>>,
		Bin_id,
		Bin_goodsNum
	];

%GENERATED from file:mall.h => U2GS_GroupBuyRewardBuyRequest
encode(#pk_U2GS_GroupBuyRewardBuyRequest{} = P) ->
	Bin_id = write_int32( P#pk_U2GS_GroupBuyRewardBuyRequest.id ),
	[
		<<?U2GS_GroupBuyRewardBuyRequest:?U16>>,
		Bin_id
	];

%GENERATED from file:mall.h => U2GS_GroupBuyWhenOpen
encode(#pk_U2GS_GroupBuyWhenOpen{}) ->
	[
		<<?U2GS_GroupBuyWhenOpen:?U16>>

	];

%GENERATED from file:mall.h => U2GS_ItemBuyRequest
encode(#pk_U2GS_ItemBuyRequest{} = P) ->
	Bin_db_id = write_uint32( P#pk_U2GS_ItemBuyRequest.db_id ),
	Bin_itemid = write_uint32( P#pk_U2GS_ItemBuyRequest.itemid ),
	Bin_itemnum = write_int32( P#pk_U2GS_ItemBuyRequest.itemnum ),
	Bin_moneytype = write_int8( P#pk_U2GS_ItemBuyRequest.moneytype ),
	Bin_tarRoleID = write_uint64( P#pk_U2GS_ItemBuyRequest.tarRoleID ),
	[
		<<?U2GS_ItemBuyRequest:?U16>>,
		Bin_db_id,
		Bin_itemid,
		Bin_itemnum,
		Bin_moneytype,
		Bin_tarRoleID
	];

%GENERATED from file:mall.h => U2GS_ItemBuyRequest2
encode(#pk_U2GS_ItemBuyRequest2{} = P) ->
	Bin_db_id = write_uint32( P#pk_U2GS_ItemBuyRequest2.db_id ),
	Bin_itemid = write_uint32( P#pk_U2GS_ItemBuyRequest2.itemid ),
	Bin_itemnum = write_int32( P#pk_U2GS_ItemBuyRequest2.itemnum ),
	Bin_moneytype = write_int8( P#pk_U2GS_ItemBuyRequest2.moneytype ),
	[
		<<?U2GS_ItemBuyRequest2:?U16>>,
		Bin_db_id,
		Bin_itemid,
		Bin_itemnum,
		Bin_moneytype
	];

%GENERATED from file:mall.h => U2GS_KoreaNaverRewardGetRequest
encode(#pk_U2GS_KoreaNaverRewardGetRequest{} = P) ->
	Bin_id = write_int32( P#pk_U2GS_KoreaNaverRewardGetRequest.id ),
	Bin_ver = write_int32( P#pk_U2GS_KoreaNaverRewardGetRequest.ver ),
	Bin_naverAccountID = write_string( P#pk_U2GS_KoreaNaverRewardGetRequest.naverAccountID ),
	Bin_menuID = write_int32( P#pk_U2GS_KoreaNaverRewardGetRequest.menuID ),
	Bin_articleID = write_int32( P#pk_U2GS_KoreaNaverRewardGetRequest.articleID ),
	[
		<<?U2GS_KoreaNaverRewardGetRequest:?U16>>,
		Bin_id,
		Bin_ver,
		Bin_naverAccountID,
		Bin_menuID,
		Bin_articleID
	];

%GENERATED from file:mall.h => U2GS_MallInfo
encode(#pk_U2GS_MallInfo{} = P) ->
	Bin_seed = write_int32( P#pk_U2GS_MallInfo.seed ),
	[
		<<?U2GS_MallInfo:?U16>>,
		Bin_seed
	];

%GENERATED from file:mall.h => U2GS_MallInfo2
encode(#pk_U2GS_MallInfo2{} = P) ->
	Bin_seed = write_int32( P#pk_U2GS_MallInfo2.seed ),
	[
		<<?U2GS_MallInfo2:?U16>>,
		Bin_seed
	];

%GENERATED from file:marriage.h => GS2U_AppointmentWeddingResult
encode(#pk_GS2U_AppointmentWeddingResult{} = P) ->
	Bin_result = write_bool( P#pk_GS2U_AppointmentWeddingResult.result ),
	[
		<<?GS2U_AppointmentWeddingResult:?U16>>,
		Bin_result
	];

%GENERATED from file:marriage.h => GS2U_BuyLuckyBagResult
encode(#pk_GS2U_BuyLuckyBagResult{} = P) ->
	Bin_level = write_uint8( P#pk_GS2U_BuyLuckyBagResult.level ),
	Bin_givegifts = write_uint32( P#pk_GS2U_BuyLuckyBagResult.givegifts ),
	Bin_bindGivegifts = write_uint32( P#pk_GS2U_BuyLuckyBagResult.bindGivegifts ),
	Bin_roleName = write_string( P#pk_GS2U_BuyLuckyBagResult.roleName ),
	Bin_rewardItemID = write_uint32( P#pk_GS2U_BuyLuckyBagResult.rewardItemID ),
	Bin_num = write_uint16( P#pk_GS2U_BuyLuckyBagResult.num ),
	[
		<<?GS2U_BuyLuckyBagResult:?U16>>,
		Bin_level,
		Bin_givegifts,
		Bin_bindGivegifts,
		Bin_roleName,
		Bin_rewardItemID,
		Bin_num
	];

%GENERATED from file:marriage.h => GS2U_GivegifsResult
encode(#pk_GS2U_GivegifsResult{} = P) ->
	Bin_sendRoleID = write_uint64( P#pk_GS2U_GivegifsResult.sendRoleID ),
	Bin_result = write_bool( P#pk_GS2U_GivegifsResult.result ),
	Bin_givegifts = write_uint32( P#pk_GS2U_GivegifsResult.givegifts ),
	Bin_bindGivegifts = write_uint32( P#pk_GS2U_GivegifsResult.bindGivegifts ),
	Bin_giveGiftsID = write_uint32( P#pk_GS2U_GivegifsResult.giveGiftsID ),
	Bin_givegiftsData = encode_InvitedPlayerData( P#pk_GS2U_GivegifsResult.givegiftsData ),
	[
		<<?GS2U_GivegifsResult:?U16>>,
		Bin_sendRoleID,
		Bin_result,
		Bin_givegifts,
		Bin_bindGivegifts,
		Bin_giveGiftsID,
		Bin_givegiftsData
	];

%GENERATED from file:marriage.h => GS2U_InvitedPersonResult
encode(#pk_GS2U_InvitedPersonResult{} = P) ->
	Bin_result = write_bool( P#pk_GS2U_InvitedPersonResult.result ),
	Bin_data = encode_InvitedPlayerData( P#pk_GS2U_InvitedPersonResult.data ),
	[
		<<?GS2U_InvitedPersonResult:?U16>>,
		Bin_result,
		Bin_data
	];

%GENERATED from file:marriage.h => GS2U_LoginInitWeddingKetubba
encode(#pk_GS2U_LoginInitWeddingKetubba{} = P) ->
	Bin_ketubbaList = write_array(P#pk_GS2U_LoginInitWeddingKetubba.ketubbaList, fun(X) -> encode_KetubbaData( X ) end),
	[
		<<?GS2U_LoginInitWeddingKetubba:?U16>>,
		Bin_ketubbaList
	];

%GENERATED from file:marriage.h => GS2U_MarriageBaseInfo_Sync
encode(#pk_GS2U_MarriageBaseInfo_Sync{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_MarriageBaseInfo_Sync.id ),
	Bin_name = write_string( P#pk_GS2U_MarriageBaseInfo_Sync.name ),
	Bin_sex = write_uint8( P#pk_GS2U_MarriageBaseInfo_Sync.sex ),
	Bin_weddingDay = write_uint32( P#pk_GS2U_MarriageBaseInfo_Sync.weddingDay ),
	Bin_closeness = write_uint32( P#pk_GS2U_MarriageBaseInfo_Sync.closeness ),
	[
		<<?GS2U_MarriageBaseInfo_Sync:?U16>>,
		Bin_id,
		Bin_name,
		Bin_sex,
		Bin_weddingDay,
		Bin_closeness
	];

%GENERATED from file:marriage.h => GS2U_MarriageBreak_Ack
encode(#pk_GS2U_MarriageBreak_Ack{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_MarriageBreak_Ack.id ),
	Bin_name = write_string( P#pk_GS2U_MarriageBreak_Ack.name ),
	[
		<<?GS2U_MarriageBreak_Ack:?U16>>,
		Bin_id,
		Bin_name
	];

%GENERATED from file:marriage.h => GS2U_MarriageProposeRefresh_Ack
encode(#pk_GS2U_MarriageProposeRefresh_Ack{}) ->
	[
		<<?GS2U_MarriageProposeRefresh_Ack:?U16>>

	];

%GENERATED from file:marriage.h => GS2U_MarriagePropose_Ack
encode(#pk_GS2U_MarriagePropose_Ack{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_MarriagePropose_Ack.id ),
	Bin_name = write_string( P#pk_GS2U_MarriagePropose_Ack.name ),
	Bin_item = write_uint32( P#pk_GS2U_MarriagePropose_Ack.item ),
	Bin_isS = write_bool( P#pk_GS2U_MarriagePropose_Ack.isS ),
	[
		<<?GS2U_MarriagePropose_Ack:?U16>>,
		Bin_id,
		Bin_name,
		Bin_item,
		Bin_isS
	];

%GENERATED from file:marriage.h => GS2U_MarriagePropose_Ask
encode(#pk_GS2U_MarriagePropose_Ask{} = P) ->
	Bin_id = write_uint64( P#pk_GS2U_MarriagePropose_Ask.id ),
	Bin_name = write_string( P#pk_GS2U_MarriagePropose_Ask.name ),
	Bin_item = write_uint32( P#pk_GS2U_MarriagePropose_Ask.item ),
	Bin_manifesto = write_string( P#pk_GS2U_MarriagePropose_Ask.manifesto ),
	[
		<<?GS2U_MarriagePropose_Ask:?U16>>,
		Bin_id,
		Bin_name,
		Bin_item,
		Bin_manifesto
	];

%GENERATED from file:marriage.h => GS2U_MarriageRingUpPartner_Sync
encode(#pk_GS2U_MarriageRingUpPartner_Sync{} = P) ->
	Bin_topOld = write_uint32( P#pk_GS2U_MarriageRingUpPartner_Sync.topOld ),
	Bin_expOld = write_uint32( P#pk_GS2U_MarriageRingUpPartner_Sync.expOld ),
	Bin_lvOld = write_uint32( P#pk_GS2U_MarriageRingUpPartner_Sync.lvOld ),
	Bin_topNew = write_uint32( P#pk_GS2U_MarriageRingUpPartner_Sync.topNew ),
	Bin_expNew = write_uint32( P#pk_GS2U_MarriageRingUpPartner_Sync.expNew ),
	Bin_lvNew = write_uint32( P#pk_GS2U_MarriageRingUpPartner_Sync.lvNew ),
	[
		<<?GS2U_MarriageRingUpPartner_Sync:?U16>>,
		Bin_topOld,
		Bin_expOld,
		Bin_lvOld,
		Bin_topNew,
		Bin_expNew,
		Bin_lvNew
	];

%GENERATED from file:marriage.h => GS2U_MarriageRingUp_Sync
encode(#pk_GS2U_MarriageRingUp_Sync{} = P) ->
	Bin_topOld = write_uint32( P#pk_GS2U_MarriageRingUp_Sync.topOld ),
	Bin_expOld = write_uint32( P#pk_GS2U_MarriageRingUp_Sync.expOld ),
	Bin_lvOld = write_uint32( P#pk_GS2U_MarriageRingUp_Sync.lvOld ),
	Bin_topNew = write_uint32( P#pk_GS2U_MarriageRingUp_Sync.topNew ),
	Bin_expNew = write_uint32( P#pk_GS2U_MarriageRingUp_Sync.expNew ),
	Bin_lvNew = write_uint32( P#pk_GS2U_MarriageRingUp_Sync.lvNew ),
	[
		<<?GS2U_MarriageRingUp_Sync:?U16>>,
		Bin_topOld,
		Bin_expOld,
		Bin_lvOld,
		Bin_topNew,
		Bin_expNew,
		Bin_lvNew
	];

%GENERATED from file:marriage.h => GS2U_MarriageSkillUp_Ack
encode(#pk_GS2U_MarriageSkillUp_Ack{} = P) ->
	Bin_skill = encode_SkillInfoForMarraige( P#pk_GS2U_MarriageSkillUp_Ack.skill ),
	Bin_lvOld = write_uint32( P#pk_GS2U_MarriageSkillUp_Ack.lvOld ),
	Bin_lvNew = write_uint32( P#pk_GS2U_MarriageSkillUp_Ack.lvNew ),
	Bin_expOld = write_uint32( P#pk_GS2U_MarriageSkillUp_Ack.expOld ),
	[
		<<?GS2U_MarriageSkillUp_Ack:?U16>>,
		Bin_skill,
		Bin_lvOld,
		Bin_lvNew,
		Bin_expOld
	];

%GENERATED from file:marriage.h => GS2U_MarriageSkill_Sync
encode(#pk_GS2U_MarriageSkill_Sync{} = P) ->
	Bin_listSkill = write_array(P#pk_GS2U_MarriageSkill_Sync.listSkill, fun(X) -> encode_SkillInfoForMarraige( X ) end),
	[
		<<?GS2U_MarriageSkill_Sync:?U16>>,
		Bin_listSkill
	];

%GENERATED from file:marriage.h => GS2U_MarriageTask_Together_Ask1
encode(#pk_GS2U_MarriageTask_Together_Ask1{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_MarriageTask_Together_Ask1.roleID ),
	Bin_roleName = write_string( P#pk_GS2U_MarriageTask_Together_Ask1.roleName ),
	[
		<<?GS2U_MarriageTask_Together_Ask1:?U16>>,
		Bin_roleID,
		Bin_roleName
	];

%GENERATED from file:marriage.h => GS2U_MarriageTask_Together_Ask2
encode(#pk_GS2U_MarriageTask_Together_Ask2{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_MarriageTask_Together_Ask2.roleID ),
	Bin_roleName = write_string( P#pk_GS2U_MarriageTask_Together_Ask2.roleName ),
	[
		<<?GS2U_MarriageTask_Together_Ask2:?U16>>,
		Bin_roleID,
		Bin_roleName
	];

%GENERATED from file:marriage.h => GS2U_OpenInvitePanelResult
encode(#pk_GS2U_OpenInvitePanelResult{} = P) ->
	Bin_invitedPlayerList = write_array(P#pk_GS2U_OpenInvitePanelResult.invitedPlayerList, fun(X) -> encode_InvitedPlayerData( X ) end),
	[
		<<?GS2U_OpenInvitePanelResult:?U16>>,
		Bin_invitedPlayerList
	];

%GENERATED from file:marriage.h => GS2U_OpenketubbaResult
encode(#pk_GS2U_OpenketubbaResult{} = P) ->
	Bin_roleId = write_uint64( P#pk_GS2U_OpenketubbaResult.roleId ),
	Bin_type = write_uint8( P#pk_GS2U_OpenketubbaResult.type ),
	Bin_givegifts = write_uint32( P#pk_GS2U_OpenketubbaResult.givegifts ),
	Bin_bindGivegifts = write_uint32( P#pk_GS2U_OpenketubbaResult.bindGivegifts ),
	Bin_givegiftsList = write_array(P#pk_GS2U_OpenketubbaResult.givegiftsList, fun(X) -> encode_InvitedPlayerData( X ) end),
	Bin_isGivegifs = write_bool( P#pk_GS2U_OpenketubbaResult.isGivegifs ),
	Bin_level = write_uint8( P#pk_GS2U_OpenketubbaResult.level ),
	[
		<<?GS2U_OpenketubbaResult:?U16>>,
		Bin_roleId,
		Bin_type,
		Bin_givegifts,
		Bin_bindGivegifts,
		Bin_givegiftsList,
		Bin_isGivegifs,
		Bin_level
	];

%GENERATED from file:marriage.h => GS2U_PlayerDeletRoleInWedding
encode(#pk_GS2U_PlayerDeletRoleInWedding{}) ->
	[
		<<?GS2U_PlayerDeletRoleInWedding:?U16>>

	];

%GENERATED from file:marriage.h => GS2U_PlayerEnterMapSucc
encode(#pk_GS2U_PlayerEnterMapSucc{} = P) ->
	Bin_sitNpcDataList = write_array(P#pk_GS2U_PlayerEnterMapSucc.sitNpcDataList, fun(X) -> encode_SitNpcData( X ) end),
	Bin_weddingRoleID = write_uint64( P#pk_GS2U_PlayerEnterMapSucc.weddingRoleID ),
	Bin_lastTime = write_uint32( P#pk_GS2U_PlayerEnterMapSucc.lastTime ),
	[
		<<?GS2U_PlayerEnterMapSucc:?U16>>,
		Bin_sitNpcDataList,
		Bin_weddingRoleID,
		Bin_lastTime
	];

%GENERATED from file:marriage.h => GS2U_RobWeddingRedResult
encode(#pk_GS2U_RobWeddingRedResult{} = P) ->
	Bin_result = write_uint32( P#pk_GS2U_RobWeddingRedResult.result ),
	Bin_roleID = write_uint64( P#pk_GS2U_RobWeddingRedResult.roleID ),
	Bin_robNum = write_uint16( P#pk_GS2U_RobWeddingRedResult.robNum ),
	Bin_listRobRedData = write_array(P#pk_GS2U_RobWeddingRedResult.listRobRedData, fun(X) -> encode_RobRedData( X ) end),
	[
		<<?GS2U_RobWeddingRedResult:?U16>>,
		Bin_result,
		Bin_roleID,
		Bin_robNum,
		Bin_listRobRedData
	];

%GENERATED from file:marriage.h => GS2U_UseNpcInteractiveReuslt
encode(#pk_GS2U_UseNpcInteractiveReuslt{} = P) ->
	Bin_isUp = write_bool( P#pk_GS2U_UseNpcInteractiveReuslt.isUp ),
	Bin_npcSitData = encode_SitNpcData( P#pk_GS2U_UseNpcInteractiveReuslt.npcSitData ),
	[
		<<?GS2U_UseNpcInteractiveReuslt:?U16>>,
		Bin_isUp,
		Bin_npcSitData
	];

%GENERATED from file:marriage.h => GS2U_WeddingLotteryResult
encode(#pk_GS2U_WeddingLotteryResult{} = P) ->
	Bin_lotteryIndex = write_uint8( P#pk_GS2U_WeddingLotteryResult.lotteryIndex ),
	Bin_costType = write_uint8( P#pk_GS2U_WeddingLotteryResult.costType ),
	Bin_givegifts = write_uint32( P#pk_GS2U_WeddingLotteryResult.givegifts ),
	Bin_bindGivegifts = write_uint32( P#pk_GS2U_WeddingLotteryResult.bindGivegifts ),
	Bin_roleName = write_string( P#pk_GS2U_WeddingLotteryResult.roleName ),
	Bin_rewardItemID = write_uint32( P#pk_GS2U_WeddingLotteryResult.rewardItemID ),
	Bin_num = write_uint16( P#pk_GS2U_WeddingLotteryResult.num ),
	[
		<<?GS2U_WeddingLotteryResult:?U16>>,
		Bin_lotteryIndex,
		Bin_costType,
		Bin_givegifts,
		Bin_bindGivegifts,
		Bin_roleName,
		Bin_rewardItemID,
		Bin_num
	];

%GENERATED from file:marriage.h => GS2U_WeddingMapPhase
encode(#pk_GS2U_WeddingMapPhase{} = P) ->
	Bin_phase = write_uint8( P#pk_GS2U_WeddingMapPhase.phase ),
	Bin_phase1Time = write_uint32( P#pk_GS2U_WeddingMapPhase.phase1Time ),
	Bin_sex_1 = write_uint8( P#pk_GS2U_WeddingMapPhase.sex_1 ),
	Bin_sex_2 = write_uint8( P#pk_GS2U_WeddingMapPhase.sex_2 ),
	Bin_weddingLevel = write_uint8( P#pk_GS2U_WeddingMapPhase.weddingLevel ),
	Bin_name_1 = write_string( P#pk_GS2U_WeddingMapPhase.name_1 ),
	Bin_name_2 = write_string( P#pk_GS2U_WeddingMapPhase.name_2 ),
	[
		<<?GS2U_WeddingMapPhase:?U16>>,
		Bin_phase,
		Bin_phase1Time,
		Bin_sex_1,
		Bin_sex_2,
		Bin_weddingLevel,
		Bin_name_1,
		Bin_name_2
	];

%GENERATED from file:marriage.h => GS2U_WeddingRedState
encode(#pk_GS2U_WeddingRedState{} = P) ->
	Bin_isCanRobRed = write_bool( P#pk_GS2U_WeddingRedState.isCanRobRed ),
	Bin_roleID = write_uint64( P#pk_GS2U_WeddingRedState.roleID ),
	[
		<<?GS2U_WeddingRedState:?U16>>,
		Bin_isCanRobRed,
		Bin_roleID
	];

%GENERATED from file:marriage.h => GS2U_WeddingStartInviteAll
encode(#pk_GS2U_WeddingStartInviteAll{} = P) ->
	Bin_targetRoleID = write_uint64( P#pk_GS2U_WeddingStartInviteAll.targetRoleID ),
	Bin_name = write_string( P#pk_GS2U_WeddingStartInviteAll.name ),
	Bin_partnerName = write_string( P#pk_GS2U_WeddingStartInviteAll.partnerName ),
	[
		<<?GS2U_WeddingStartInviteAll:?U16>>,
		Bin_targetRoleID,
		Bin_name,
		Bin_partnerName
	];

%GENERATED from file:marriage.h => GS2U_receivedInvitationCard
encode(#pk_GS2U_receivedInvitationCard{} = P) ->
	Bin_ketubba = encode_KetubbaData( P#pk_GS2U_receivedInvitationCard.ketubba ),
	[
		<<?GS2U_receivedInvitationCard:?U16>>,
		Bin_ketubba
	];

%GENERATED from file:marriage.h => U2GS_BuyLuckyBag
encode(#pk_U2GS_BuyLuckyBag{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_BuyLuckyBag.roleID ),
	Bin_level = write_uint8( P#pk_U2GS_BuyLuckyBag.level ),
	[
		<<?U2GS_BuyLuckyBag:?U16>>,
		Bin_roleID,
		Bin_level
	];

%GENERATED from file:marriage.h => U2GS_EnterWeddingMap
encode(#pk_U2GS_EnterWeddingMap{} = P) ->
	Bin_targetRoleID = write_uint64( P#pk_U2GS_EnterWeddingMap.targetRoleID ),
	[
		<<?U2GS_EnterWeddingMap:?U16>>,
		Bin_targetRoleID
	];

%GENERATED from file:marriage.h => U2GS_Givegifs
encode(#pk_U2GS_Givegifs{} = P) ->
	Bin_roleId = write_uint64( P#pk_U2GS_Givegifs.roleId ),
	Bin_gifts = write_uint16( P#pk_U2GS_Givegifs.gifts ),
	[
		<<?U2GS_Givegifs:?U16>>,
		Bin_roleId,
		Bin_gifts
	];

%GENERATED from file:marriage.h => U2GS_InvitedPerson
encode(#pk_U2GS_InvitedPerson{} = P) ->
	Bin_invitedPerson = write_uint64( P#pk_U2GS_InvitedPerson.invitedPerson ),
	[
		<<?U2GS_InvitedPerson:?U16>>,
		Bin_invitedPerson
	];

%GENERATED from file:marriage.h => U2GS_MarriageAcceptTask_Request
encode(#pk_U2GS_MarriageAcceptTask_Request{}) ->
	[
		<<?U2GS_MarriageAcceptTask_Request:?U16>>

	];

%GENERATED from file:marriage.h => U2GS_MarriageBreak_Request
encode(#pk_U2GS_MarriageBreak_Request{} = P) ->
	Bin_isTeam = write_bool( P#pk_U2GS_MarriageBreak_Request.isTeam ),
	[
		<<?U2GS_MarriageBreak_Request:?U16>>,
		Bin_isTeam
	];

%GENERATED from file:marriage.h => U2GS_MarriagePropose_Reply
encode(#pk_U2GS_MarriagePropose_Reply{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_MarriagePropose_Reply.id ),
	Bin_isAgreed = write_bool( P#pk_U2GS_MarriagePropose_Reply.isAgreed ),
	[
		<<?U2GS_MarriagePropose_Reply:?U16>>,
		Bin_id,
		Bin_isAgreed
	];

%GENERATED from file:marriage.h => U2GS_MarriagePropose_Request
encode(#pk_U2GS_MarriagePropose_Request{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_MarriagePropose_Request.id ),
	Bin_item = write_uint32( P#pk_U2GS_MarriagePropose_Request.item ),
	Bin_manifesto = write_string( P#pk_U2GS_MarriagePropose_Request.manifesto ),
	[
		<<?U2GS_MarriagePropose_Request:?U16>>,
		Bin_id,
		Bin_item,
		Bin_manifesto
	];

%GENERATED from file:marriage.h => U2GS_MarriageRingUp_Request
encode(#pk_U2GS_MarriageRingUp_Request{} = P) ->
	Bin_cost = write_uint32( P#pk_U2GS_MarriageRingUp_Request.cost ),
	[
		<<?U2GS_MarriageRingUp_Request:?U16>>,
		Bin_cost
	];

%GENERATED from file:marriage.h => U2GS_MarriageSkillUp_Request
encode(#pk_U2GS_MarriageSkillUp_Request{} = P) ->
	Bin_cost = write_uint32( P#pk_U2GS_MarriageSkillUp_Request.cost ),
	Bin_id = write_uint32( P#pk_U2GS_MarriageSkillUp_Request.id ),
	[
		<<?U2GS_MarriageSkillUp_Request:?U16>>,
		Bin_cost,
		Bin_id
	];

%GENERATED from file:marriage.h => U2GS_MarriageSubmitTask_Request
encode(#pk_U2GS_MarriageSubmitTask_Request{}) ->
	[
		<<?U2GS_MarriageSubmitTask_Request:?U16>>

	];

%GENERATED from file:marriage.h => U2GS_MarriageTask_Together_Reply1
encode(#pk_U2GS_MarriageTask_Together_Reply1{} = P) ->
	Bin_isAgreed = write_bool( P#pk_U2GS_MarriageTask_Together_Reply1.isAgreed ),
	[
		<<?U2GS_MarriageTask_Together_Reply1:?U16>>,
		Bin_isAgreed
	];

%GENERATED from file:marriage.h => U2GS_MarriageTask_Together_Reply2
encode(#pk_U2GS_MarriageTask_Together_Reply2{} = P) ->
	Bin_isAgreed = write_bool( P#pk_U2GS_MarriageTask_Together_Reply2.isAgreed ),
	[
		<<?U2GS_MarriageTask_Together_Reply2:?U16>>,
		Bin_isAgreed
	];

%GENERATED from file:marriage.h => U2GS_OpenInvitePanel
encode(#pk_U2GS_OpenInvitePanel{}) ->
	[
		<<?U2GS_OpenInvitePanel:?U16>>

	];

%GENERATED from file:marriage.h => U2GS_Openketubba
encode(#pk_U2GS_Openketubba{} = P) ->
	Bin_itemUID = write_uint64( P#pk_U2GS_Openketubba.itemUID ),
	Bin_type = write_uint8( P#pk_U2GS_Openketubba.type ),
	[
		<<?U2GS_Openketubba:?U16>>,
		Bin_itemUID,
		Bin_type
	];

%GENERATED from file:marriage.h => U2GS_RobWeddingRed
encode(#pk_U2GS_RobWeddingRed{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_RobWeddingRed.roleID ),
	[
		<<?U2GS_RobWeddingRed:?U16>>,
		Bin_roleID
	];

%GENERATED from file:marriage.h => U2GS_UseNpcInteractive
encode(#pk_U2GS_UseNpcInteractive{} = P) ->
	Bin_isUp = write_bool( P#pk_U2GS_UseNpcInteractive.isUp ),
	Bin_npcCode = write_uint64( P#pk_U2GS_UseNpcInteractive.npcCode ),
	[
		<<?U2GS_UseNpcInteractive:?U16>>,
		Bin_isUp,
		Bin_npcCode
	];

%GENERATED from file:marriage.h => U2GS_WeddingLottery
encode(#pk_U2GS_WeddingLottery{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_WeddingLottery.roleID ),
	Bin_level = write_uint8( P#pk_U2GS_WeddingLottery.level ),
	[
		<<?U2GS_WeddingLottery:?U16>>,
		Bin_roleID,
		Bin_level
	];

%GENERATED from file:marriage.h => U2GS_appointmentWedding
encode(#pk_U2GS_appointmentWedding{} = P) ->
	Bin_startTime = write_uint64( P#pk_U2GS_appointmentWedding.startTime ),
	Bin_level = write_uint8( P#pk_U2GS_appointmentWedding.level ),
	[
		<<?U2GS_appointmentWedding:?U16>>,
		Bin_startTime,
		Bin_level
	];

%GENERATED from file:mount.h => GS2U_LookMountInfo
encode(#pk_GS2U_LookMountInfo{} = P) ->
	Bin_mountInfo = encode_MountInfo( P#pk_GS2U_LookMountInfo.mountInfo ),
	[
		<<?GS2U_LookMountInfo:?U16>>,
		Bin_mountInfo
	];

%GENERATED from file:mount.h => GS2U_MountAck
encode(#pk_GS2U_MountAck{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_MountAck.code ),
	Bin_shape_id = write_uint16( P#pk_GS2U_MountAck.shape_id ),
	Bin_opreate = write_uint32( P#pk_GS2U_MountAck.opreate ),
	[
		<<?GS2U_MountAck:?U16>>,
		Bin_code,
		Bin_shape_id,
		Bin_opreate
	];

%GENERATED from file:mount.h => GS2U_MountShapeList
encode(#pk_GS2U_MountShapeList{} = P) ->
	Bin_shape_list = write_array(P#pk_GS2U_MountShapeList.shape_list, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_MountShapeList:?U16>>,
		Bin_shape_list
	];

%GENERATED from file:mount.h => GS2U_NewMountShape
encode(#pk_GS2U_NewMountShape{} = P) ->
	Bin_new_shape_id = write_uint16( P#pk_GS2U_NewMountShape.new_shape_id ),
	[
		<<?GS2U_NewMountShape:?U16>>,
		Bin_new_shape_id
	];

%GENERATED from file:mount.h => MountShapeShift
encode(#pk_MountShapeShift{} = P) ->
	Bin_new_shape_id = write_uint16( P#pk_MountShapeShift.new_shape_id ),
	[
		<<?MountShapeShift:?U16>>,
		Bin_new_shape_id
	];

%GENERATED from file:mount.h => U2GS_FeedMount
encode(#pk_U2GS_FeedMount{} = P) ->
	Bin_feedNum = write_uint16( P#pk_U2GS_FeedMount.feedNum ),
	[
		<<?U2GS_FeedMount:?U16>>,
		Bin_feedNum
	];

%GENERATED from file:mount.h => U2GS_OffMount
encode(#pk_U2GS_OffMount{}) ->
	[
		<<?U2GS_OffMount:?U16>>

	];

%GENERATED from file:mount.h => U2GS_OnMount
encode(#pk_U2GS_OnMount{}) ->
	[
		<<?U2GS_OnMount:?U16>>

	];

%GENERATED from file:npc.h => GS2U_NpcMomentMove
encode(#pk_GS2U_NpcMomentMove{} = P) ->
	Bin_npcCode = write_uint64( P#pk_GS2U_NpcMomentMove.npcCode ),
	Bin_npcID = write_uint32( P#pk_GS2U_NpcMomentMove.npcID ),
	Bin_tX = write_float( P#pk_GS2U_NpcMomentMove.tX ),
	Bin_tY = write_float( P#pk_GS2U_NpcMomentMove.tY ),
	[
		<<?GS2U_NpcMomentMove:?U16>>,
		Bin_npcCode,
		Bin_npcID,
		Bin_tX,
		Bin_tY
	];

%GENERATED from file:npc.h => GS2U_NpcTitleChange
encode(#pk_GS2U_NpcTitleChange{} = P) ->
	Bin_npclists = write_array(P#pk_GS2U_NpcTitleChange.npclists, fun(X) -> encode_NpcTitle( X ) end),
	[
		<<?GS2U_NpcTitleChange:?U16>>,
		Bin_npclists
	];

%GENERATED from file:npc.h => GS2U_RequestRiftNpcInfo
encode(#pk_GS2U_RequestRiftNpcInfo{} = P) ->
	Bin_npcCode = write_uint64( P#pk_GS2U_RequestRiftNpcInfo.npcCode ),
	Bin_npcID = write_uint32( P#pk_GS2U_RequestRiftNpcInfo.npcID ),
	Bin_surplusTimes = write_uint32( P#pk_GS2U_RequestRiftNpcInfo.surplusTimes ),
	Bin_disappearTime = write_uint32( P#pk_GS2U_RequestRiftNpcInfo.disappearTime ),
	Bin_groupID = write_uint64( P#pk_GS2U_RequestRiftNpcInfo.groupID ),
	Bin_bitplaneMapID = write_uint32( P#pk_GS2U_RequestRiftNpcInfo.bitplaneMapID ),
	[
		<<?GS2U_RequestRiftNpcInfo:?U16>>,
		Bin_npcCode,
		Bin_npcID,
		Bin_surplusTimes,
		Bin_disappearTime,
		Bin_groupID,
		Bin_bitplaneMapID
	];

%GENERATED from file:npc.h => U2GS_RequestEnterRift
encode(#pk_U2GS_RequestEnterRift{} = P) ->
	Bin_groupID = write_uint64( P#pk_U2GS_RequestEnterRift.groupID ),
	Bin_bitplaneMapID = write_uint32( P#pk_U2GS_RequestEnterRift.bitplaneMapID ),
	[
		<<?U2GS_RequestEnterRift:?U16>>,
		Bin_groupID,
		Bin_bitplaneMapID
	];

%GENERATED from file:npc.h => U2GS_RequestRiftNpcInfo
encode(#pk_U2GS_RequestRiftNpcInfo{} = P) ->
	Bin_npcCode = write_uint64( P#pk_U2GS_RequestRiftNpcInfo.npcCode ),
	[
		<<?U2GS_RequestRiftNpcInfo:?U16>>,
		Bin_npcCode
	];

%GENERATED from file:pet.h => GS2U_AckRewardLevel
encode(#pk_GS2U_AckRewardLevel{} = P) ->
	Bin_rewardLevel = write_uint8( P#pk_GS2U_AckRewardLevel.rewardLevel ),
	[
		<<?GS2U_AckRewardLevel:?U16>>,
		Bin_rewardLevel
	];

%GENERATED from file:pet.h => GS2U_AckStandSort
encode(#pk_GS2U_AckStandSort{} = P) ->
	Bin_petList = write_array(P#pk_GS2U_AckStandSort.petList, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_AckStandSort:?U16>>,
		Bin_petList
	];

%GENERATED from file:pet.h => GS2U_AddTempPet
encode(#pk_GS2U_AddTempPet{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_AddTempPet.petID ),
	[
		<<?GS2U_AddTempPet:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => GS2U_BuyPowerInfo
encode(#pk_GS2U_BuyPowerInfo{} = P) ->
	Bin_money = write_int32( P#pk_GS2U_BuyPowerInfo.money ),
	Bin_allCount = write_int8( P#pk_GS2U_BuyPowerInfo.allCount ),
	Bin_curCount = write_int8( P#pk_GS2U_BuyPowerInfo.curCount ),
	[
		<<?GS2U_BuyPowerInfo:?U16>>,
		Bin_money,
		Bin_allCount,
		Bin_curCount
	];

%GENERATED from file:pet.h => GS2U_DeletePet
encode(#pk_GS2U_DeletePet{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_DeletePet.petID ),
	[
		<<?GS2U_DeletePet:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => GS2U_DoublePetMountInvite
encode(#pk_GS2U_DoublePetMountInvite{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_DoublePetMountInvite.petID ),
	Bin_srcName = write_string( P#pk_GS2U_DoublePetMountInvite.srcName ),
	Bin_srcRoleID = write_uint64( P#pk_GS2U_DoublePetMountInvite.srcRoleID ),
	[
		<<?GS2U_DoublePetMountInvite:?U16>>,
		Bin_petID,
		Bin_srcName,
		Bin_srcRoleID
	];

%GENERATED from file:pet.h => GS2U_FindTerritoryFailed_Ack
encode(#pk_GS2U_FindTerritoryFailed_Ack{} = P) ->
	Bin_errorCode = write_uint32( P#pk_GS2U_FindTerritoryFailed_Ack.errorCode ),
	[
		<<?GS2U_FindTerritoryFailed_Ack:?U16>>,
		Bin_errorCode
	];

%GENERATED from file:pet.h => GS2U_FindTerritory_Ack
encode(#pk_GS2U_FindTerritory_Ack{} = P) ->
	Bin_info = encode_TerritoryInfo( P#pk_GS2U_FindTerritory_Ack.info ),
	Bin_listInfo = write_array(P#pk_GS2U_FindTerritory_Ack.listInfo, fun(X) -> encode_PetTerritoryInfo( X ) end),
	Bin_roleID = write_uint64( P#pk_GS2U_FindTerritory_Ack.roleID ),
	Bin_roleName = write_string( P#pk_GS2U_FindTerritory_Ack.roleName ),
	Bin_count = write_uint32( P#pk_GS2U_FindTerritory_Ack.count ),
	[
		<<?GS2U_FindTerritory_Ack:?U16>>,
		Bin_info,
		Bin_listInfo,
		Bin_roleID,
		Bin_roleName,
		Bin_count
	];

%GENERATED from file:pet.h => GS2U_OffMountPetAck
encode(#pk_GS2U_OffMountPetAck{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_OffMountPetAck.code ),
	Bin_x = write_float( P#pk_GS2U_OffMountPetAck.x ),
	Bin_y = write_float( P#pk_GS2U_OffMountPetAck.y ),
	[
		<<?GS2U_OffMountPetAck:?U16>>,
		Bin_code,
		Bin_x,
		Bin_y
	];

%GENERATED from file:pet.h => GS2U_OnMountPetAck
encode(#pk_GS2U_OnMountPetAck{} = P) ->
	Bin_ownerCode = write_uint64( P#pk_GS2U_OnMountPetAck.ownerCode ),
	Bin_petCode = write_uint64( P#pk_GS2U_OnMountPetAck.petCode ),
	Bin_petId = write_uint16( P#pk_GS2U_OnMountPetAck.petId ),
	Bin_guestCode = write_uint64( P#pk_GS2U_OnMountPetAck.guestCode ),
	[
		<<?GS2U_OnMountPetAck:?U16>>,
		Bin_ownerCode,
		Bin_petCode,
		Bin_petId,
		Bin_guestCode
	];

%GENERATED from file:pet.h => GS2U_PVEBattleResult
encode(#pk_GS2U_PVEBattleResult{} = P) ->
	Bin_res = write_int8( P#pk_GS2U_PVEBattleResult.res ),
	Bin_coin = write_int32( P#pk_GS2U_PVEBattleResult.coin ),
	Bin_exp = write_int32( P#pk_GS2U_PVEBattleResult.exp ),
	Bin_score = write_int8( P#pk_GS2U_PVEBattleResult.score ),
	Bin_itemList = write_array(P#pk_GS2U_PVEBattleResult.itemList, fun(X) -> encode_PveItem( X ) end),
	[
		<<?GS2U_PVEBattleResult:?U16>>,
		Bin_res,
		Bin_coin,
		Bin_exp,
		Bin_score,
		Bin_itemList
	];

%GENERATED from file:pet.h => GS2U_PetAddAttaRes
encode(#pk_GS2U_PetAddAttaRes{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_PetAddAttaRes.petID ),
	Bin_propList = write_array(P#pk_GS2U_PetAddAttaRes.propList, fun(X) -> encode_AddProp( X ) end),
	[
		<<?GS2U_PetAddAttaRes:?U16>>,
		Bin_petID,
		Bin_propList
	];

%GENERATED from file:pet.h => GS2U_PetAssistInit
encode(#pk_GS2U_PetAssistInit{} = P) ->
	Bin_infoList = write_array(P#pk_GS2U_PetAssistInit.infoList, fun(X) -> encode_AssistBattleInfo( X ) end),
	[
		<<?GS2U_PetAssistInit:?U16>>,
		Bin_infoList
	];

%GENERATED from file:pet.h => GS2U_PetAssistUpdateSlot
encode(#pk_GS2U_PetAssistUpdateSlot{} = P) ->
	Bin_slot = write_uint8( P#pk_GS2U_PetAssistUpdateSlot.slot ),
	Bin_petID = write_uint16( P#pk_GS2U_PetAssistUpdateSlot.petID ),
	[
		<<?GS2U_PetAssistUpdateSlot:?U16>>,
		Bin_slot,
		Bin_petID
	];

%GENERATED from file:pet.h => GS2U_PetAttaSaveRes
encode(#pk_GS2U_PetAttaSaveRes{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_PetAttaSaveRes.petID ),
	Bin_propList = write_array(P#pk_GS2U_PetAttaSaveRes.propList, fun(X) -> encode_AddProp( X ) end),
	[
		<<?GS2U_PetAttaSaveRes:?U16>>,
		Bin_petID,
		Bin_propList
	];

%GENERATED from file:pet.h => GS2U_PetBaseInfo
encode(#pk_GS2U_PetBaseInfo{} = P) ->
	Bin_info = encode_PetBaseInfo( P#pk_GS2U_PetBaseInfo.info ),
	[
		<<?GS2U_PetBaseInfo:?U16>>,
		Bin_info
	];

%GENERATED from file:pet.h => GS2U_PetEquipInfoList
encode(#pk_GS2U_PetEquipInfoList{} = P) ->
	Bin_petEquipInfoList = write_array(P#pk_GS2U_PetEquipInfoList.petEquipInfoList, fun(X) -> encode_PetEquipInfo( X ) end),
	[
		<<?GS2U_PetEquipInfoList:?U16>>,
		Bin_petEquipInfoList
	];

%GENERATED from file:pet.h => GS2U_PetFairyInfo
encode(#pk_GS2U_PetFairyInfo{} = P) ->
	Bin_point = write_int32( P#pk_GS2U_PetFairyInfo.point ),
	Bin_level = write_int16( P#pk_GS2U_PetFairyInfo.level ),
	[
		<<?GS2U_PetFairyInfo:?U16>>,
		Bin_point,
		Bin_level
	];

%GENERATED from file:pet.h => GS2U_PetInfoList
encode(#pk_GS2U_PetInfoList{} = P) ->
	Bin_petInfoList = write_array(P#pk_GS2U_PetInfoList.petInfoList, fun(X) -> encode_PetBaseInfo( X ) end),
	[
		<<?GS2U_PetInfoList:?U16>>,
		Bin_petInfoList
	];

%GENERATED from file:pet.h => GS2U_PetLevelUp
encode(#pk_GS2U_PetLevelUp{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_PetLevelUp.petID ),
	Bin_petLevel = write_uint16( P#pk_GS2U_PetLevelUp.petLevel ),
	Bin_petExp = write_uint32( P#pk_GS2U_PetLevelUp.petExp ),
	[
		<<?GS2U_PetLevelUp:?U16>>,
		Bin_petID,
		Bin_petLevel,
		Bin_petExp
	];

%GENERATED from file:pet.h => GS2U_PetPveSweepAck
encode(#pk_GS2U_PetPveSweepAck{} = P) ->
	Bin_sweepList = write_array(P#pk_GS2U_PetPveSweepAck.sweepList, fun(X) -> encode_PveSweep( X ) end),
	[
		<<?GS2U_PetPveSweepAck:?U16>>,
		Bin_sweepList
	];

%GENERATED from file:pet.h => GS2U_PetReName
encode(#pk_GS2U_PetReName{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_PetReName.code ),
	Bin_name = write_string( P#pk_GS2U_PetReName.name ),
	[
		<<?GS2U_PetReName:?U16>>,
		Bin_code,
		Bin_name
	];

%GENERATED from file:pet.h => GS2U_PetSkillCastResult
encode(#pk_GS2U_PetSkillCastResult{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_PetSkillCastResult.petID ),
	Bin_skillList = write_array(P#pk_GS2U_PetSkillCastResult.skillList, fun(X) -> encode_PetSkillCastResult( X ) end),
	[
		<<?GS2U_PetSkillCastResult:?U16>>,
		Bin_petID,
		Bin_skillList
	];

%GENERATED from file:pet.h => GS2U_PetSleep
encode(#pk_GS2U_PetSleep{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_PetSleep.code ),
	[
		<<?GS2U_PetSleep:?U16>>,
		Bin_code
	];

%GENERATED from file:pet.h => GS2U_PetStrAck
encode(#pk_GS2U_PetStrAck{} = P) ->
	Bin_petEquipInfo = encode_PetEquipInfo( P#pk_GS2U_PetStrAck.petEquipInfo ),
	[
		<<?GS2U_PetStrAck:?U16>>,
		Bin_petEquipInfo
	];

%GENERATED from file:pet.h => GS2U_PvpBattleInfoRes
encode(#pk_GS2U_PvpBattleInfoRes{} = P) ->
	Bin_reel = write_uint8( P#pk_GS2U_PvpBattleInfoRes.reel ),
	Bin_pl = write_array(P#pk_GS2U_PvpBattleInfoRes.pl, fun(X) -> write_uint16( X ) end),
	Bin_point = write_uint16( P#pk_GS2U_PvpBattleInfoRes.point ),
	Bin_cl = write_array(P#pk_GS2U_PvpBattleInfoRes.cl, fun(X) -> encode_PvPCityInfo( X ) end),
	Bin_bpl = write_array(P#pk_GS2U_PvpBattleInfoRes.bpl, fun(X) -> encode_PvpBattleReportInfo( X ) end),
	[
		<<?GS2U_PvpBattleInfoRes:?U16>>,
		Bin_reel,
		Bin_pl,
		Bin_point,
		Bin_cl,
		Bin_bpl
	];

%GENERATED from file:pet.h => GS2U_PvpBattleReportTip
encode(#pk_GS2U_PvpBattleReportTip{}) ->
	[
		<<?GS2U_PvpBattleReportTip:?U16>>

	];

%GENERATED from file:pet.h => GS2U_PvpBattleResult
encode(#pk_GS2U_PvpBattleResult{} = P) ->
	Bin_res = write_int8( P#pk_GS2U_PvpBattleResult.res ),
	Bin_coin = write_int32( P#pk_GS2U_PvpBattleResult.coin ),
	Bin_exp = write_int32( P#pk_GS2U_PvpBattleResult.exp ),
	Bin_pi = encode_PvPCityInfo( P#pk_GS2U_PvpBattleResult.pi ),
	[
		<<?GS2U_PvpBattleResult:?U16>>,
		Bin_res,
		Bin_coin,
		Bin_exp,
		Bin_pi
	];

%GENERATED from file:pet.h => GS2U_PvpBattleUpdateReport
encode(#pk_GS2U_PvpBattleUpdateReport{} = P) ->
	Bin_br = encode_PvpBattleReportInfo( P#pk_GS2U_PvpBattleUpdateReport.br ),
	[
		<<?GS2U_PvpBattleUpdateReport:?U16>>,
		Bin_br
	];

%GENERATED from file:pet.h => GS2U_PvpPosSaveAck
encode(#pk_GS2U_PvpPosSaveAck{} = P) ->
	Bin_petList = write_array(P#pk_GS2U_PvpPosSaveAck.petList, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_PvpPosSaveAck:?U16>>,
		Bin_petList
	];

%GENERATED from file:pet.h => GS2U_QueryTerritoryHistory_Ack
encode(#pk_GS2U_QueryTerritoryHistory_Ack{} = P) ->
	Bin_attackOrDefense = write_bool( P#pk_GS2U_QueryTerritoryHistory_Ack.attackOrDefense ),
	Bin_fightCount = write_uint32( P#pk_GS2U_QueryTerritoryHistory_Ack.fightCount ),
	Bin_listInfo = write_array(P#pk_GS2U_QueryTerritoryHistory_Ack.listInfo, fun(X) -> encode_TerritoryHistoryCell( X ) end),
	[
		<<?GS2U_QueryTerritoryHistory_Ack:?U16>>,
		Bin_attackOrDefense,
		Bin_fightCount,
		Bin_listInfo
	];

%GENERATED from file:pet.h => GS2U_QueryTerritoryInfo_Ack
encode(#pk_GS2U_QueryTerritoryInfo_Ack{} = P) ->
	Bin_listTerritory = write_array(P#pk_GS2U_QueryTerritoryInfo_Ack.listTerritory, fun(X) -> encode_TerritoryInfo( X ) end),
	Bin_listPet = write_array(P#pk_GS2U_QueryTerritoryInfo_Ack.listPet, fun(X) -> encode_PetTerritoryInfo( X ) end),
	Bin_isOpenPanel = write_bool( P#pk_GS2U_QueryTerritoryInfo_Ack.isOpenPanel ),
	[
		<<?GS2U_QueryTerritoryInfo_Ack:?U16>>,
		Bin_listTerritory,
		Bin_listPet,
		Bin_isOpenPanel
	];

%GENERATED from file:pet.h => GS2U_RawPetResult
encode(#pk_GS2U_RawPetResult{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_RawPetResult.petID ),
	Bin_curRaw = write_uint8( P#pk_GS2U_RawPetResult.curRaw ),
	[
		<<?GS2U_RawPetResult:?U16>>,
		Bin_petID,
		Bin_curRaw
	];

%GENERATED from file:pet.h => GS2U_ResetPetAck
encode(#pk_GS2U_ResetPetAck{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_ResetPetAck.petID ),
	[
		<<?GS2U_ResetPetAck:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => GS2U_TerritoryBattle_Tick_Sync
encode(#pk_GS2U_TerritoryBattle_Tick_Sync{} = P) ->
	Bin_time = write_uint32( P#pk_GS2U_TerritoryBattle_Tick_Sync.time ),
	Bin_timeAll = write_uint32( P#pk_GS2U_TerritoryBattle_Tick_Sync.timeAll ),
	Bin_state = write_uint8( P#pk_GS2U_TerritoryBattle_Tick_Sync.state ),
	[
		<<?GS2U_TerritoryBattle_Tick_Sync:?U16>>,
		Bin_time,
		Bin_timeAll,
		Bin_state
	];

%GENERATED from file:pet.h => GS2U_TerritoryExploitEnd_Sync
encode(#pk_GS2U_TerritoryExploitEnd_Sync{}) ->
	[
		<<?GS2U_TerritoryExploitEnd_Sync:?U16>>

	];

%GENERATED from file:pet.h => GS2U_TerritoryExploit_Ack
encode(#pk_GS2U_TerritoryExploit_Ack{} = P) ->
	Bin_info = encode_TerritoryInfo( P#pk_GS2U_TerritoryExploit_Ack.info ),
	Bin_listInfo = write_array(P#pk_GS2U_TerritoryExploit_Ack.listInfo, fun(X) -> encode_PetTerritoryInfo( X ) end),
	[
		<<?GS2U_TerritoryExploit_Ack:?U16>>,
		Bin_info,
		Bin_listInfo
	];

%GENERATED from file:pet.h => GS2U_TerritoryPlunder_Ack
encode(#pk_GS2U_TerritoryPlunder_Ack{} = P) ->
	Bin_cfgReward = write_uint32( P#pk_GS2U_TerritoryPlunder_Ack.cfgReward ),
	Bin_count1 = write_uint32( P#pk_GS2U_TerritoryPlunder_Ack.count1 ),
	Bin_count2 = write_uint32( P#pk_GS2U_TerritoryPlunder_Ack.count2 ),
	[
		<<?GS2U_TerritoryPlunder_Ack:?U16>>,
		Bin_cfgReward,
		Bin_count1,
		Bin_count2
	];

%GENERATED from file:pet.h => GS2U_TerritoryVigor_Ack
encode(#pk_GS2U_TerritoryVigor_Ack{} = P) ->
	Bin_vigor = write_uint32( P#pk_GS2U_TerritoryVigor_Ack.vigor ),
	[
		<<?GS2U_TerritoryVigor_Ack:?U16>>,
		Bin_vigor
	];

%GENERATED from file:pet.h => GS2U_UpStartPetResult
encode(#pk_GS2U_UpStartPetResult{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_UpStartPetResult.petID ),
	Bin_curStar = write_uint8( P#pk_GS2U_UpStartPetResult.curStar ),
	Bin_petSkillID = write_uint16( P#pk_GS2U_UpStartPetResult.petSkillID ),
	[
		<<?GS2U_UpStartPetResult:?U16>>,
		Bin_petID,
		Bin_curStar,
		Bin_petSkillID
	];

%GENERATED from file:pet.h => GS2U_UpdateCatalogList
encode(#pk_GS2U_UpdateCatalogList{} = P) ->
	Bin_catalogList = write_array(P#pk_GS2U_UpdateCatalogList.catalogList, fun(X) -> encode_CatalogNode( X ) end),
	[
		<<?GS2U_UpdateCatalogList:?U16>>,
		Bin_catalogList
	];

%GENERATED from file:pet.h => GS2U_UpdatePetSkill
encode(#pk_GS2U_UpdatePetSkill{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_UpdatePetSkill.petID ),
	Bin_skillInfo = encode_PetSkillBaseInfo( P#pk_GS2U_UpdatePetSkill.skillInfo ),
	[
		<<?GS2U_UpdatePetSkill:?U16>>,
		Bin_petID,
		Bin_skillInfo
	];

%GENERATED from file:pet.h => GS2U_UpdatePetStatus
encode(#pk_GS2U_UpdatePetStatus{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_UpdatePetStatus.petID ),
	Bin_status = write_uint8( P#pk_GS2U_UpdatePetStatus.status ),
	[
		<<?GS2U_UpdatePetStatus:?U16>>,
		Bin_petID,
		Bin_status
	];

%GENERATED from file:pet.h => GS2U_UpdatePower
encode(#pk_GS2U_UpdatePower{} = P) ->
	Bin_power = write_int32( P#pk_GS2U_UpdatePower.power ),
	[
		<<?GS2U_UpdatePower:?U16>>,
		Bin_power
	];

%GENERATED from file:pet.h => GS2U_UpdateReel
encode(#pk_GS2U_UpdateReel{} = P) ->
	Bin_reel = write_int8( P#pk_GS2U_UpdateReel.reel ),
	[
		<<?GS2U_UpdateReel:?U16>>,
		Bin_reel
	];

%GENERATED from file:pet.h => GS2U_UsePetSkillBook
encode(#pk_GS2U_UsePetSkillBook{} = P) ->
	Bin_petID = write_uint16( P#pk_GS2U_UsePetSkillBook.petID ),
	Bin_oldSkillId = write_uint16( P#pk_GS2U_UsePetSkillBook.oldSkillId ),
	Bin_newSkillId = write_uint16( P#pk_GS2U_UsePetSkillBook.newSkillId ),
	Bin_newSkillLevel = write_uint16( P#pk_GS2U_UsePetSkillBook.newSkillLevel ),
	[
		<<?GS2U_UsePetSkillBook:?U16>>,
		Bin_petID,
		Bin_oldSkillId,
		Bin_newSkillId,
		Bin_newSkillLevel
	];

%GENERATED from file:pet.h => PetReName
encode(#pk_PetReName{} = P) ->
	Bin_petID = write_uint16( P#pk_PetReName.petID ),
	Bin_name = write_string( P#pk_PetReName.name ),
	[
		<<?PetReName:?U16>>,
		Bin_petID,
		Bin_name
	];

%GENERATED from file:pet.h => PetSkillReplace
encode(#pk_PetSkillReplace{} = P) ->
	Bin_petID = write_uint16( P#pk_PetSkillReplace.petID ),
	[
		<<?PetSkillReplace:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => PetSwitch
encode(#pk_PetSwitch{} = P) ->
	Bin_petId = write_uint16( P#pk_PetSwitch.petId ),
	[
		<<?PetSwitch:?U16>>,
		Bin_petId
	];

%GENERATED from file:pet.h => U2GS_BuyPower
encode(#pk_U2GS_BuyPower{}) ->
	[
		<<?U2GS_BuyPower:?U16>>

	];

%GENERATED from file:pet.h => U2GS_BuyReel
encode(#pk_U2GS_BuyReel{}) ->
	[
		<<?U2GS_BuyReel:?U16>>

	];

%GENERATED from file:pet.h => U2GS_DoublePetMountInvite
encode(#pk_U2GS_DoublePetMountInvite{} = P) ->
	Bin_tarRoleID = write_uint64( P#pk_U2GS_DoublePetMountInvite.tarRoleID ),
	[
		<<?U2GS_DoublePetMountInvite:?U16>>,
		Bin_tarRoleID
	];

%GENERATED from file:pet.h => U2GS_DoublePetMountInviteAck
encode(#pk_U2GS_DoublePetMountInviteAck{} = P) ->
	Bin_agree = write_int8( P#pk_U2GS_DoublePetMountInviteAck.agree ),
	Bin_srcRoleID = write_uint64( P#pk_U2GS_DoublePetMountInviteAck.srcRoleID ),
	[
		<<?U2GS_DoublePetMountInviteAck:?U16>>,
		Bin_agree,
		Bin_srcRoleID
	];

%GENERATED from file:pet.h => U2GS_FindTerritory_Request
encode(#pk_U2GS_FindTerritory_Request{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_FindTerritory_Request.roleID ),
	[
		<<?U2GS_FindTerritory_Request:?U16>>,
		Bin_roleID
	];

%GENERATED from file:pet.h => U2GS_HideMountPet
encode(#pk_U2GS_HideMountPet{}) ->
	[
		<<?U2GS_HideMountPet:?U16>>

	];

%GENERATED from file:pet.h => U2GS_OffMountPet
encode(#pk_U2GS_OffMountPet{}) ->
	[
		<<?U2GS_OffMountPet:?U16>>

	];

%GENERATED from file:pet.h => U2GS_OnMountPet
encode(#pk_U2GS_OnMountPet{}) ->
	[
		<<?U2GS_OnMountPet:?U16>>

	];

%GENERATED from file:pet.h => U2GS_PetAddAtta
encode(#pk_U2GS_PetAddAtta{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_PetAddAtta.petID ),
	Bin_num = write_uint8( P#pk_U2GS_PetAddAtta.num ),
	[
		<<?U2GS_PetAddAtta:?U16>>,
		Bin_petID,
		Bin_num
	];

%GENERATED from file:pet.h => U2GS_PetAssistBattle
encode(#pk_U2GS_PetAssistBattle{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_PetAssistBattle.petID ),
	Bin_slot = write_uint8( P#pk_U2GS_PetAssistBattle.slot ),
	Bin_status = write_uint8( P#pk_U2GS_PetAssistBattle.status ),
	[
		<<?U2GS_PetAssistBattle:?U16>>,
		Bin_petID,
		Bin_slot,
		Bin_status
	];

%GENERATED from file:pet.h => U2GS_PetAttaSave
encode(#pk_U2GS_PetAttaSave{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_PetAttaSave.petID ),
	[
		<<?U2GS_PetAttaSave:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => U2GS_PetDisapear
encode(#pk_U2GS_PetDisapear{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_PetDisapear.code ),
	[
		<<?U2GS_PetDisapear:?U16>>,
		Bin_code
	];

%GENERATED from file:pet.h => U2GS_PetLevelUp
encode(#pk_U2GS_PetLevelUp{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_PetLevelUp.petID ),
	Bin_itemUID = write_uint64( P#pk_U2GS_PetLevelUp.itemUID ),
	Bin_useNum = write_uint16( P#pk_U2GS_PetLevelUp.useNum ),
	[
		<<?U2GS_PetLevelUp:?U16>>,
		Bin_petID,
		Bin_itemUID,
		Bin_useNum
	];

%GENERATED from file:pet.h => U2GS_PetPveSweep
encode(#pk_U2GS_PetPveSweep{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_PetPveSweep.id ),
	[
		<<?U2GS_PetPveSweep:?U16>>,
		Bin_id
	];

%GENERATED from file:pet.h => U2GS_PetSkillCast
encode(#pk_U2GS_PetSkillCast{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_PetSkillCast.petID ),
	Bin_skillIDs = write_array(P#pk_U2GS_PetSkillCast.skillIDs, fun(X) -> write_uint16( X ) end),
	[
		<<?U2GS_PetSkillCast:?U16>>,
		Bin_petID,
		Bin_skillIDs
	];

%GENERATED from file:pet.h => U2GS_PetSkillOperate
encode(#pk_U2GS_PetSkillOperate{} = P) ->
	Bin_operationType = write_uint16( P#pk_U2GS_PetSkillOperate.operationType ),
	Bin_petID = write_uint16( P#pk_U2GS_PetSkillOperate.petID ),
	Bin_petSkillId = write_uint16( P#pk_U2GS_PetSkillOperate.petSkillId ),
	[
		<<?U2GS_PetSkillOperate:?U16>>,
		Bin_operationType,
		Bin_petID,
		Bin_petSkillId
	];

%GENERATED from file:pet.h => U2GS_PetStr
encode(#pk_U2GS_PetStr{} = P) ->
	Bin_equipID = write_uint8( P#pk_U2GS_PetStr.equipID ),
	Bin_type = write_uint8( P#pk_U2GS_PetStr.type ),
	[
		<<?U2GS_PetStr:?U16>>,
		Bin_equipID,
		Bin_type
	];

%GENERATED from file:pet.h => U2GS_PvpBattleInfo
encode(#pk_U2GS_PvpBattleInfo{}) ->
	[
		<<?U2GS_PvpBattleInfo:?U16>>

	];

%GENERATED from file:pet.h => U2GS_PvpPosSave
encode(#pk_U2GS_PvpPosSave{} = P) ->
	Bin_petList = write_array(P#pk_U2GS_PvpPosSave.petList, fun(X) -> write_uint16( X ) end),
	[
		<<?U2GS_PvpPosSave:?U16>>,
		Bin_petList
	];

%GENERATED from file:pet.h => U2GS_QueryPetFairyInfo
encode(#pk_U2GS_QueryPetFairyInfo{}) ->
	[
		<<?U2GS_QueryPetFairyInfo:?U16>>

	];

%GENERATED from file:pet.h => U2GS_QueryTerritoryHistory_Request
encode(#pk_U2GS_QueryTerritoryHistory_Request{} = P) ->
	Bin_attackOrDefense = write_bool( P#pk_U2GS_QueryTerritoryHistory_Request.attackOrDefense ),
	[
		<<?U2GS_QueryTerritoryHistory_Request:?U16>>,
		Bin_attackOrDefense
	];

%GENERATED from file:pet.h => U2GS_QueryTerritoryInfo_Request
encode(#pk_U2GS_QueryTerritoryInfo_Request{} = P) ->
	Bin_isOpenPanel = write_bool( P#pk_U2GS_QueryTerritoryInfo_Request.isOpenPanel ),
	[
		<<?U2GS_QueryTerritoryInfo_Request:?U16>>,
		Bin_isOpenPanel
	];

%GENERATED from file:pet.h => U2GS_RawPet
encode(#pk_U2GS_RawPet{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_RawPet.petID ),
	[
		<<?U2GS_RawPet:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => U2GS_RequestBattle
encode(#pk_U2GS_RequestBattle{} = P) ->
	Bin_id = write_int32( P#pk_U2GS_RequestBattle.id ),
	[
		<<?U2GS_RequestBattle:?U16>>,
		Bin_id
	];

%GENERATED from file:pet.h => U2GS_RequestPvpBattle
encode(#pk_U2GS_RequestPvpBattle{} = P) ->
	Bin_cityID = write_uint8( P#pk_U2GS_RequestPvpBattle.cityID ),
	Bin_roleID = write_uint64( P#pk_U2GS_RequestPvpBattle.roleID ),
	[
		<<?U2GS_RequestPvpBattle:?U16>>,
		Bin_cityID,
		Bin_roleID
	];

%GENERATED from file:pet.h => U2GS_RequstReward
encode(#pk_U2GS_RequstReward{}) ->
	[
		<<?U2GS_RequstReward:?U16>>

	];

%GENERATED from file:pet.h => U2GS_ResetPet
encode(#pk_U2GS_ResetPet{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_ResetPet.petID ),
	[
		<<?U2GS_ResetPet:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => U2GS_ShowMountPet
encode(#pk_U2GS_ShowMountPet{}) ->
	[
		<<?U2GS_ShowMountPet:?U16>>

	];

%GENERATED from file:pet.h => U2GS_StandSort
encode(#pk_U2GS_StandSort{} = P) ->
	Bin_petList = write_array(P#pk_U2GS_StandSort.petList, fun(X) -> write_uint16( X ) end),
	[
		<<?U2GS_StandSort:?U16>>,
		Bin_petList
	];

%GENERATED from file:pet.h => U2GS_TerritoryExploit_Request
encode(#pk_U2GS_TerritoryExploit_Request{} = P) ->
	Bin_territoryID = write_uint32( P#pk_U2GS_TerritoryExploit_Request.territoryID ),
	Bin_listPetID = write_array(P#pk_U2GS_TerritoryExploit_Request.listPetID, fun(X) -> write_uint32( X ) end),
	Bin_cfgTime = write_uint32( P#pk_U2GS_TerritoryExploit_Request.cfgTime ),
	Bin_cfgLevel = write_uint32( P#pk_U2GS_TerritoryExploit_Request.cfgLevel ),
	[
		<<?U2GS_TerritoryExploit_Request:?U16>>,
		Bin_territoryID,
		Bin_listPetID,
		Bin_cfgTime,
		Bin_cfgLevel
	];

%GENERATED from file:pet.h => U2GS_TerritoryPlunder_Request
encode(#pk_U2GS_TerritoryPlunder_Request{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_TerritoryPlunder_Request.roleID ),
	Bin_territoryID = write_uint32( P#pk_U2GS_TerritoryPlunder_Request.territoryID ),
	Bin_listPetID = write_array(P#pk_U2GS_TerritoryPlunder_Request.listPetID, fun(X) -> write_uint32( X ) end),
	[
		<<?U2GS_TerritoryPlunder_Request:?U16>>,
		Bin_roleID,
		Bin_territoryID,
		Bin_listPetID
	];

%GENERATED from file:pet.h => U2GS_TerritoryVigor_Request
encode(#pk_U2GS_TerritoryVigor_Request{}) ->
	[
		<<?U2GS_TerritoryVigor_Request:?U16>>

	];

%GENERATED from file:pet.h => U2GS_UpStartPet
encode(#pk_U2GS_UpStartPet{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_UpStartPet.petID ),
	[
		<<?U2GS_UpStartPet:?U16>>,
		Bin_petID
	];

%GENERATED from file:pet.h => U2GS_UsePetSkillBook
encode(#pk_U2GS_UsePetSkillBook{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_UsePetSkillBook.petID ),
	Bin_petSkillId = write_uint16( P#pk_U2GS_UsePetSkillBook.petSkillId ),
	Bin_itemid = write_uint16( P#pk_U2GS_UsePetSkillBook.itemid ),
	[
		<<?U2GS_UsePetSkillBook:?U16>>,
		Bin_petID,
		Bin_petSkillId,
		Bin_itemid
	];

%GENERATED from file:player.h => Any_ChangeMap
encode(#pk_Any_ChangeMap{} = P) ->
	Bin_mapId = write_uint32( P#pk_Any_ChangeMap.mapId ),
	Bin_lineID = write_uint32( P#pk_Any_ChangeMap.lineID ),
	Bin_x = write_float( P#pk_Any_ChangeMap.x ),
	Bin_y = write_float( P#pk_Any_ChangeMap.y ),
	[
		<<?Any_ChangeMap:?U16>>,
		Bin_mapId,
		Bin_lineID,
		Bin_x,
		Bin_y
	];

%GENERATED from file:player.h => Any_PlayerLogout
encode(#pk_Any_PlayerLogout{} = P) ->
	Bin_code = write_uint64( P#pk_Any_PlayerLogout.code ),
	Bin_reason = write_uint8( P#pk_Any_PlayerLogout.reason ),
	[
		<<?Any_PlayerLogout:?U16>>,
		Bin_code,
		Bin_reason
	];

%GENERATED from file:player.h => C2S_ChangeMap
encode(#pk_C2S_ChangeMap{} = P) ->
	Bin_mapId = write_uint32( P#pk_C2S_ChangeMap.mapId ),
	Bin_waypointName = write_string( P#pk_C2S_ChangeMap.waypointName ),
	[
		<<?C2S_ChangeMap:?U16>>,
		Bin_mapId,
		Bin_waypointName
	];

%GENERATED from file:player.h => GS2S_UseTheAwakeBuffRet
encode(#pk_GS2S_UseTheAwakeBuffRet{}) ->
	[
		<<?GS2S_UseTheAwakeBuffRet:?U16>>

	];

%GENERATED from file:player.h => GS2U_AcceptHolidayTaskSucc
encode(#pk_GS2U_AcceptHolidayTaskSucc{} = P) ->
	Bin_result = write_uint8( P#pk_GS2U_AcceptHolidayTaskSucc.result ),
	[
		<<?GS2U_AcceptHolidayTaskSucc:?U16>>,
		Bin_result
	];

%GENERATED from file:player.h => GS2U_AliveApply_Ack
encode(#pk_GS2U_AliveApply_Ack{} = P) ->
	Bin_applyID = write_uint64( P#pk_GS2U_AliveApply_Ack.applyID ),
	Bin_leaderID = write_uint64( P#pk_GS2U_AliveApply_Ack.leaderID ),
	Bin_members = write_array(P#pk_GS2U_AliveApply_Ack.members, fun(X) -> encode_CrossRoleBase( X ) end),
	[
		<<?GS2U_AliveApply_Ack:?U16>>,
		Bin_applyID,
		Bin_leaderID,
		Bin_members
	];

%GENERATED from file:player.h => GS2U_AliveCancel_Ack
encode(#pk_GS2U_AliveCancel_Ack{} = P) ->
	Bin_role = encode_CrossRoleBase( P#pk_GS2U_AliveCancel_Ack.role ),
	[
		<<?GS2U_AliveCancel_Ack:?U16>>,
		Bin_role
	];

%GENERATED from file:player.h => GS2U_AliveCarrier_Sync
encode(#pk_GS2U_AliveCarrier_Sync{} = P) ->
	Bin_x = write_float( P#pk_GS2U_AliveCarrier_Sync.x ),
	Bin_y = write_float( P#pk_GS2U_AliveCarrier_Sync.y ),
	Bin_time = write_uint32( P#pk_GS2U_AliveCarrier_Sync.time ),
	[
		<<?GS2U_AliveCarrier_Sync:?U16>>,
		Bin_x,
		Bin_y,
		Bin_time
	];

%GENERATED from file:player.h => GS2U_AliveEnterSafeArea_Ack
encode(#pk_GS2U_AliveEnterSafeArea_Ack{}) ->
	[
		<<?GS2U_AliveEnterSafeArea_Ack:?U16>>

	];

%GENERATED from file:player.h => GS2U_AliveMapState_Sync
encode(#pk_GS2U_AliveMapState_Sync{} = P) ->
	Bin_state = write_uint8( P#pk_GS2U_AliveMapState_Sync.state ),
	Bin_sec = write_uint16( P#pk_GS2U_AliveMapState_Sync.sec ),
	Bin_listRole = write_array(P#pk_GS2U_AliveMapState_Sync.listRole, fun(X) -> encode_AliveRole( X ) end),
	Bin_isInvalid = write_bool( P#pk_GS2U_AliveMapState_Sync.isInvalid ),
	[
		<<?GS2U_AliveMapState_Sync:?U16>>,
		Bin_state,
		Bin_sec,
		Bin_listRole,
		Bin_isInvalid
	];

%GENERATED from file:player.h => GS2U_AliveRolePos_Sync
encode(#pk_GS2U_AliveRolePos_Sync{} = P) ->
	Bin_listPos = write_array(P#pk_GS2U_AliveRolePos_Sync.listPos, fun(X) -> encode_AliveRolePos( X ) end),
	[
		<<?GS2U_AliveRolePos_Sync:?U16>>,
		Bin_listPos
	];

%GENERATED from file:player.h => GS2U_AliveRole_Sync
encode(#pk_GS2U_AliveRole_Sync{} = P) ->
	Bin_role = encode_AliveRole( P#pk_GS2U_AliveRole_Sync.role ),
	[
		<<?GS2U_AliveRole_Sync:?U16>>,
		Bin_role
	];

%GENERATED from file:player.h => GS2U_AllBattleProp
encode(#pk_GS2U_AllBattleProp{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_AllBattleProp.code ),
	Bin_battlePropInfo = write_array(P#pk_GS2U_AllBattleProp.battlePropInfo, fun(X) -> write_float( X ) end),
	[
		<<?GS2U_AllBattleProp:?U16>>,
		Bin_code,
		Bin_battlePropInfo
	];

%GENERATED from file:player.h => GS2U_BattlePropList
encode(#pk_GS2U_BattlePropList{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BattlePropList.code ),
	Bin_id = write_uint16( P#pk_GS2U_BattlePropList.id ),
	Bin_battleProp = write_array(P#pk_GS2U_BattlePropList.battleProp, fun(X) -> encode_BattleProp( X ) end),
	[
		<<?GS2U_BattlePropList:?U16>>,
		Bin_code,
		Bin_id,
		Bin_battleProp
	];

%GENERATED from file:player.h => GS2U_BeReportNum
encode(#pk_GS2U_BeReportNum{} = P) ->
	Bin_num = write_uint8( P#pk_GS2U_BeReportNum.num ),
	[
		<<?GS2U_BeReportNum:?U16>>,
		Bin_num
	];

%GENERATED from file:player.h => GS2U_BlockStatusChange
encode(#pk_GS2U_BlockStatusChange{} = P) ->
	Bin_changes = write_array(P#pk_GS2U_BlockStatusChange.changes, fun(X) -> encode_BlockStatusChange( X ) end),
	[
		<<?GS2U_BlockStatusChange:?U16>>,
		Bin_changes
	];

%GENERATED from file:player.h => GS2U_BroadcastDisapear
encode(#pk_GS2U_BroadcastDisapear{} = P) ->
	Bin_code = write_array(P#pk_GS2U_BroadcastDisapear.code, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_BroadcastDisapear:?U16>>,
		Bin_code
	];

%GENERATED from file:player.h => GS2U_BroadcastDisapearFast
encode(#pk_GS2U_BroadcastDisapearFast{} = P) ->
	Bin_code = write_array(P#pk_GS2U_BroadcastDisapearFast.code, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_BroadcastDisapearFast:?U16>>,
		Bin_code
	];

%GENERATED from file:player.h => GS2U_BroadcastPlayerHpPC
encode(#pk_GS2U_BroadcastPlayerHpPC{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BroadcastPlayerHpPC.code ),
	Bin_hpPC = write_uint8( P#pk_GS2U_BroadcastPlayerHpPC.hpPC ),
	[
		<<?GS2U_BroadcastPlayerHpPC:?U16>>,
		Bin_code,
		Bin_hpPC
	];

%GENERATED from file:player.h => GS2U_BroadcastPlayerRevive
encode(#pk_GS2U_BroadcastPlayerRevive{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BroadcastPlayerRevive.code ),
	Bin_mapId = write_uint16( P#pk_GS2U_BroadcastPlayerRevive.mapId ),
	Bin_x = write_float( P#pk_GS2U_BroadcastPlayerRevive.x ),
	Bin_y = write_float( P#pk_GS2U_BroadcastPlayerRevive.y ),
	Bin_hpPC = write_uint8( P#pk_GS2U_BroadcastPlayerRevive.hpPC ),
	[
		<<?GS2U_BroadcastPlayerRevive:?U16>>,
		Bin_code,
		Bin_mapId,
		Bin_x,
		Bin_y,
		Bin_hpPC
	];

%GENERATED from file:player.h => GS2U_BroadcastTeamRevive
encode(#pk_GS2U_BroadcastTeamRevive{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_BroadcastTeamRevive.roleID ),
	Bin_mapId = write_uint16( P#pk_GS2U_BroadcastTeamRevive.mapId ),
	Bin_x = write_float( P#pk_GS2U_BroadcastTeamRevive.x ),
	Bin_y = write_float( P#pk_GS2U_BroadcastTeamRevive.y ),
	Bin_hpPC = write_uint8( P#pk_GS2U_BroadcastTeamRevive.hpPC ),
	[
		<<?GS2U_BroadcastTeamRevive:?U16>>,
		Bin_roleID,
		Bin_mapId,
		Bin_x,
		Bin_y,
		Bin_hpPC
	];

%GENERATED from file:player.h => GS2U_BroadcastVisibleEquipOff
encode(#pk_GS2U_BroadcastVisibleEquipOff{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BroadcastVisibleEquipOff.code ),
	Bin_type = write_uint32( P#pk_GS2U_BroadcastVisibleEquipOff.type ),
	[
		<<?GS2U_BroadcastVisibleEquipOff:?U16>>,
		Bin_code,
		Bin_type
	];

%GENERATED from file:player.h => GS2U_BroadcastVisibleEquipOn
encode(#pk_GS2U_BroadcastVisibleEquipOn{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_BroadcastVisibleEquipOn.code ),
	Bin_equip = encode_visibleEquip( P#pk_GS2U_BroadcastVisibleEquipOn.equip ),
	[
		<<?GS2U_BroadcastVisibleEquipOn:?U16>>,
		Bin_code,
		Bin_equip
	];

%GENERATED from file:player.h => GS2U_BusinessCashDailyGift_Ack
encode(#pk_GS2U_BusinessCashDailyGift_Ack{}) ->
	[
		<<?GS2U_BusinessCashDailyGift_Ack:?U16>>

	];

%GENERATED from file:player.h => GS2U_BusinessSupperGift_Ack
encode(#pk_GS2U_BusinessSupperGift_Ack{}) ->
	[
		<<?GS2U_BusinessSupperGift_Ack:?U16>>

	];

%GENERATED from file:player.h => GS2U_BuyLimitedResult
encode(#pk_GS2U_BuyLimitedResult{} = P) ->
	Bin_result = write_uint8( P#pk_GS2U_BuyLimitedResult.result ),
	[
		<<?GS2U_BuyLimitedResult:?U16>>,
		Bin_result
	];

%GENERATED from file:player.h => GS2U_ChangeCamp
encode(#pk_GS2U_ChangeCamp{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_ChangeCamp.code ),
	Bin_camp = write_uint32( P#pk_GS2U_ChangeCamp.camp ),
	[
		<<?GS2U_ChangeCamp:?U16>>,
		Bin_code,
		Bin_camp
	];

%GENERATED from file:player.h => GS2U_ChangeCarrer
encode(#pk_GS2U_ChangeCarrer{} = P) ->
	Bin_result = write_bool( P#pk_GS2U_ChangeCarrer.result ),
	Bin_newCareer = write_uint32( P#pk_GS2U_ChangeCarrer.newCareer ),
	[
		<<?GS2U_ChangeCarrer:?U16>>,
		Bin_result,
		Bin_newCareer
	];

%GENERATED from file:player.h => GS2U_ChangeNameResult
encode(#pk_GS2U_ChangeNameResult{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_ChangeNameResult.roleID ),
	Bin_name = write_string( P#pk_GS2U_ChangeNameResult.name ),
	Bin_errorCode = write_uint32( P#pk_GS2U_ChangeNameResult.errorCode ),
	[
		<<?GS2U_ChangeNameResult:?U16>>,
		Bin_roleID,
		Bin_name,
		Bin_errorCode
	];

%GENERATED from file:player.h => GS2U_ChatErrorResult
encode(#pk_GS2U_ChatErrorResult{} = P) ->
	Bin_reason = write_int32( P#pk_GS2U_ChatErrorResult.reason ),
	[
		<<?GS2U_ChatErrorResult:?U16>>,
		Bin_reason
	];

%GENERATED from file:player.h => GS2U_Chatinfo
encode(#pk_GS2U_Chatinfo{} = P) ->
	Bin_channel = write_int8( P#pk_GS2U_Chatinfo.channel ),
	Bin_senderID = write_uint64( P#pk_GS2U_Chatinfo.senderID ),
	Bin_senderCode = write_uint64( P#pk_GS2U_Chatinfo.senderCode ),
	Bin_senderName = write_string( P#pk_GS2U_Chatinfo.senderName ),
	Bin_senderRace = write_int8( P#pk_GS2U_Chatinfo.senderRace ),
	Bin_senderCareer = write_uint32( P#pk_GS2U_Chatinfo.senderCareer ),
	Bin_senderSex = write_int8( P#pk_GS2U_Chatinfo.senderSex ),
	Bin_senderHead = write_int32( P#pk_GS2U_Chatinfo.senderHead ),
	Bin_frameID = write_uint16( P#pk_GS2U_Chatinfo.frameID ),
	Bin_senderLevel = write_int16( P#pk_GS2U_Chatinfo.senderLevel ),
	Bin_senderVip = write_int8( P#pk_GS2U_Chatinfo.senderVip ),
	Bin_content = write_string( P#pk_GS2U_Chatinfo.content ),
	[
		<<?GS2U_Chatinfo:?U16>>,
		Bin_channel,
		Bin_senderID,
		Bin_senderCode,
		Bin_senderName,
		Bin_senderRace,
		Bin_senderCareer,
		Bin_senderSex,
		Bin_senderHead,
		Bin_frameID,
		Bin_senderLevel,
		Bin_senderVip,
		Bin_content
	];

%GENERATED from file:player.h => GS2U_ClearFightObject
encode(#pk_GS2U_ClearFightObject{} = P) ->
	Bin_objs = write_array(P#pk_GS2U_ClearFightObject.objs, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_ClearFightObject:?U16>>,
		Bin_objs
	];

%GENERATED from file:player.h => GS2U_CopyMapProcess
encode(#pk_GS2U_CopyMapProcess{} = P) ->
	Bin_curSchedule = write_uint8( P#pk_GS2U_CopyMapProcess.curSchedule ),
	Bin_allSchedule = write_uint8( P#pk_GS2U_CopyMapProcess.allSchedule ),
	Bin_scheduleList = write_array(P#pk_GS2U_CopyMapProcess.scheduleList, fun(X) -> encode_CopyObj( X ) end),
	[
		<<?GS2U_CopyMapProcess:?U16>>,
		Bin_curSchedule,
		Bin_allSchedule,
		Bin_scheduleList
	];

%GENERATED from file:player.h => GS2U_CopyMapProcessCurrentScheduleStatus
encode(#pk_GS2U_CopyMapProcessCurrentScheduleStatus{} = P) ->
	Bin_curSchedule = write_uint8( P#pk_GS2U_CopyMapProcessCurrentScheduleStatus.curSchedule ),
	Bin_status = write_uint8( P#pk_GS2U_CopyMapProcessCurrentScheduleStatus.status ),
	[
		<<?GS2U_CopyMapProcessCurrentScheduleStatus:?U16>>,
		Bin_curSchedule,
		Bin_status
	];

%GENERATED from file:player.h => GS2U_CopyMapProcessCurrentScheduleSurplusSecond
encode(#pk_GS2U_CopyMapProcessCurrentScheduleSurplusSecond{} = P) ->
	Bin_curSchedule = write_uint8( P#pk_GS2U_CopyMapProcessCurrentScheduleSurplusSecond.curSchedule ),
	Bin_type = write_uint8( P#pk_GS2U_CopyMapProcessCurrentScheduleSurplusSecond.type ),
	Bin_surplusSecond = write_uint64( P#pk_GS2U_CopyMapProcessCurrentScheduleSurplusSecond.surplusSecond ),
	[
		<<?GS2U_CopyMapProcessCurrentScheduleSurplusSecond:?U16>>,
		Bin_curSchedule,
		Bin_type,
		Bin_surplusSecond
	];

%GENERATED from file:player.h => GS2U_CopyMapResult
encode(#pk_GS2U_CopyMapResult{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_GS2U_CopyMapResult.copyMapID ),
	Bin_second = write_uint16( P#pk_GS2U_CopyMapResult.second ),
	Bin_goldReward = write_uint32( P#pk_GS2U_CopyMapResult.goldReward ),
	Bin_expReward = write_uint32( P#pk_GS2U_CopyMapResult.expReward ),
	Bin_isAssist = write_bool( P#pk_GS2U_CopyMapResult.isAssist ),
	Bin_dropItems = write_array(P#pk_GS2U_CopyMapResult.dropItems, fun(X) -> encode_CopyMapDropItem( X ) end),
	Bin_festivalDrop = write_array(P#pk_GS2U_CopyMapResult.festivalDrop, fun(X) -> encode_CopyMapDropItem( X ) end),
	[
		<<?GS2U_CopyMapResult:?U16>>,
		Bin_copyMapID,
		Bin_second,
		Bin_goldReward,
		Bin_expReward,
		Bin_isAssist,
		Bin_dropItems,
		Bin_festivalDrop
	];

%GENERATED from file:player.h => GS2U_CopyMapStatHurtList
encode(#pk_GS2U_CopyMapStatHurtList{} = P) ->
	Bin_statList = write_array(P#pk_GS2U_CopyMapStatHurtList.statList, fun(X) -> encode_CopyMapStatHurt( X ) end),
	[
		<<?GS2U_CopyMapStatHurtList:?U16>>,
		Bin_statList
	];

%GENERATED from file:player.h => GS2U_CopymapFailed
encode(#pk_GS2U_CopymapFailed{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_GS2U_CopymapFailed.copyMapID ),
	[
		<<?GS2U_CopymapFailed:?U16>>,
		Bin_copyMapID
	];

%GENERATED from file:player.h => GS2U_CreatePlayerResult
encode(#pk_GS2U_CreatePlayerResult{} = P) ->
	Bin_errorCode = write_int32( P#pk_GS2U_CreatePlayerResult.errorCode ),
	Bin_roleID = write_uint64( P#pk_GS2U_CreatePlayerResult.roleID ),
	[
		<<?GS2U_CreatePlayerResult:?U16>>,
		Bin_errorCode,
		Bin_roleID
	];

%GENERATED from file:player.h => GS2U_CrossNewPlayerCode
encode(#pk_GS2U_CrossNewPlayerCode{} = P) ->
	Bin_uint64 = write_uint32( P#pk_GS2U_CrossNewPlayerCode.uint64 ),
	[
		<<?GS2U_CrossNewPlayerCode:?U16>>,
		Bin_uint64
	];

%GENERATED from file:player.h => GS2U_CrossStep
encode(#pk_GS2U_CrossStep{} = P) ->
	Bin_index = write_uint8( P#pk_GS2U_CrossStep.index ),
	[
		<<?GS2U_CrossStep:?U16>>,
		Bin_index
	];

%GENERATED from file:player.h => GS2U_DashTo
encode(#pk_GS2U_DashTo{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_DashTo.code ),
	Bin_posX = write_float( P#pk_GS2U_DashTo.posX ),
	Bin_posY = write_float( P#pk_GS2U_DashTo.posY ),
	[
		<<?GS2U_DashTo:?U16>>,
		Bin_code,
		Bin_posX,
		Bin_posY
	];

%GENERATED from file:player.h => GS2U_DeletePlayerResult
encode(#pk_GS2U_DeletePlayerResult{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_DeletePlayerResult.roleID ),
	Bin_errorCode = write_int32( P#pk_GS2U_DeletePlayerResult.errorCode ),
	[
		<<?GS2U_DeletePlayerResult:?U16>>,
		Bin_roleID,
		Bin_errorCode
	];

%GENERATED from file:player.h => GS2U_EnterMapFailed
encode(#pk_GS2U_EnterMapFailed{}) ->
	[
		<<?GS2U_EnterMapFailed:?U16>>

	];

%GENERATED from file:player.h => GS2U_Error
encode(#pk_GS2U_Error{} = P) ->
	Bin_errorCode = write_uint32( P#pk_GS2U_Error.errorCode ),
	Bin_params = write_array(P#pk_GS2U_Error.params, fun(X) -> write_string( X ) end),
	[
		<<?GS2U_Error:?U16>>,
		Bin_errorCode,
		Bin_params
	];

%GENERATED from file:player.h => GS2U_EveryDayGetPower_Sync
encode(#pk_GS2U_EveryDayGetPower_Sync{} = P) ->
	Bin_isGetSuc = write_bool( P#pk_GS2U_EveryDayGetPower_Sync.isGetSuc ),
	[
		<<?GS2U_EveryDayGetPower_Sync:?U16>>,
		Bin_isGetSuc
	];

%GENERATED from file:player.h => GS2U_GetRewardUpdateResource
encode(#pk_GS2U_GetRewardUpdateResource{} = P) ->
	Bin_resultList = write_array(P#pk_GS2U_GetRewardUpdateResource.resultList, fun(X) -> encode_RewardUpdateResource( X ) end),
	[
		<<?GS2U_GetRewardUpdateResource:?U16>>,
		Bin_resultList
	];

%GENERATED from file:player.h => GS2U_GiveGiftEfects
encode(#pk_GS2U_GiveGiftEfects{} = P) ->
	Bin_itemID = write_uint32( P#pk_GS2U_GiveGiftEfects.itemID ),
	Bin_itemCount = write_uint32( P#pk_GS2U_GiveGiftEfects.itemCount ),
	[
		<<?GS2U_GiveGiftEfects:?U16>>,
		Bin_itemID,
		Bin_itemCount
	];

%GENERATED from file:player.h => GS2U_HateInfo
encode(#pk_GS2U_HateInfo{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_HateInfo.code ),
	Bin_hateCode = write_uint64( P#pk_GS2U_HateInfo.hateCode ),
	Bin_opreate = write_int8( P#pk_GS2U_HateInfo.opreate ),
	[
		<<?GS2U_HateInfo:?U16>>,
		Bin_code,
		Bin_hateCode,
		Bin_opreate
	];

%GENERATED from file:player.h => GS2U_HaveIconAndActionList
encode(#pk_GS2U_HaveIconAndActionList{} = P) ->
	Bin_icons = write_array(P#pk_GS2U_HaveIconAndActionList.icons, fun(X) -> write_uint32( X ) end),
	Bin_actions = write_array(P#pk_GS2U_HaveIconAndActionList.actions, fun(X) -> write_uint32( X ) end),
	[
		<<?GS2U_HaveIconAndActionList:?U16>>,
		Bin_icons,
		Bin_actions
	];

%GENERATED from file:player.h => GS2U_HeartBeatAck
encode(#pk_GS2U_HeartBeatAck{} = P) ->
	Bin_time = write_uint32( P#pk_GS2U_HeartBeatAck.time ),
	Bin_version = write_uint32( P#pk_GS2U_HeartBeatAck.version ),
	[
		<<?GS2U_HeartBeatAck:?U16>>,
		Bin_time,
		Bin_version
	];

%GENERATED from file:player.h => GS2U_HisoryForce_Ack
encode(#pk_GS2U_HisoryForce_Ack{} = P) ->
	Bin_maxAll = write_uint64( P#pk_GS2U_HisoryForce_Ack.maxAll ),
	Bin_maxNotPet = write_uint64( P#pk_GS2U_HisoryForce_Ack.maxNotPet ),
	[
		<<?GS2U_HisoryForce_Ack:?U16>>,
		Bin_maxAll,
		Bin_maxNotPet
	];

%GENERATED from file:player.h => GS2U_InvateEnterCopyMap
encode(#pk_GS2U_InvateEnterCopyMap{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_GS2U_InvateEnterCopyMap.copyMapID ),
	[
		<<?GS2U_InvateEnterCopyMap:?U16>>,
		Bin_copyMapID
	];

%GENERATED from file:player.h => GS2U_KickOutTip
encode(#pk_GS2U_KickOutTip{} = P) ->
	Bin_type = write_int8( P#pk_GS2U_KickOutTip.type ),
	[
		<<?GS2U_KickOutTip:?U16>>,
		Bin_type
	];

%GENERATED from file:player.h => GS2U_KillPlayerResponse
encode(#pk_GS2U_KillPlayerResponse{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_KillPlayerResponse.code ),
	[
		<<?GS2U_KillPlayerResponse:?U16>>,
		Bin_code
	];

%GENERATED from file:player.h => GS2U_KillValueResponse
encode(#pk_GS2U_KillValueResponse{} = P) ->
	Bin_killValue = write_uint16( P#pk_GS2U_KillValueResponse.killValue ),
	[
		<<?GS2U_KillValueResponse:?U16>>,
		Bin_killValue
	];

%GENERATED from file:player.h => GS2U_LBS_BesideRole_Ack
encode(#pk_GS2U_LBS_BesideRole_Ack{} = P) ->
	Bin_lat = write_float( P#pk_GS2U_LBS_BesideRole_Ack.lat ),
	Bin_lng = write_float( P#pk_GS2U_LBS_BesideRole_Ack.lng ),
	Bin_dist = write_float( P#pk_GS2U_LBS_BesideRole_Ack.dist ),
	Bin_listRole = write_array(P#pk_GS2U_LBS_BesideRole_Ack.listRole, fun(X) -> encode_LBSRole( X ) end),
	[
		<<?GS2U_LBS_BesideRole_Ack:?U16>>,
		Bin_lat,
		Bin_lng,
		Bin_dist,
		Bin_listRole
	];

%GENERATED from file:player.h => GS2U_LoginResult
encode(#pk_GS2U_LoginResult{} = P) ->
	Bin_result = write_int32( P#pk_GS2U_LoginResult.result ),
	[
		<<?GS2U_LoginResult:?U16>>,
		Bin_result
	];

%GENERATED from file:player.h => GS2U_LookInfoPlayer
encode(#pk_GS2U_LookInfoPlayer{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_LookInfoPlayer.code ),
	Bin_roleID = write_uint64( P#pk_GS2U_LookInfoPlayer.roleID ),
	Bin_name = write_string( P#pk_GS2U_LookInfoPlayer.name ),
	Bin_x = write_float( P#pk_GS2U_LookInfoPlayer.x ),
	Bin_y = write_float( P#pk_GS2U_LookInfoPlayer.y ),
	Bin_race = write_int8( P#pk_GS2U_LookInfoPlayer.race ),
	Bin_career = write_uint32( P#pk_GS2U_LookInfoPlayer.career ),
	Bin_sex = write_int8( P#pk_GS2U_LookInfoPlayer.sex ),
	Bin_camp = write_int8( P#pk_GS2U_LookInfoPlayer.camp ),
	Bin_head = write_int32( P#pk_GS2U_LookInfoPlayer.head ),
	Bin_move_speed = write_float( P#pk_GS2U_LookInfoPlayer.move_speed ),
	Bin_level = write_int16( P#pk_GS2U_LookInfoPlayer.level ),
	Bin_hp_per = write_uint8( P#pk_GS2U_LookInfoPlayer.hp_per ),
	Bin_petID = write_uint16( P#pk_GS2U_LookInfoPlayer.petID ),
	Bin_otherCode = write_uint64( P#pk_GS2U_LookInfoPlayer.otherCode ),
	Bin_servername = write_string( P#pk_GS2U_LookInfoPlayer.servername ),
	Bin_myServerName = write_string( P#pk_GS2U_LookInfoPlayer.myServerName ),
	Bin_isInCross = write_bool( P#pk_GS2U_LookInfoPlayer.isInCross ),
	Bin_pkMode = write_uint8( P#pk_GS2U_LookInfoPlayer.pkMode ),
	Bin_pet_list = write_array(P#pk_GS2U_LookInfoPlayer.pet_list, fun(X) -> write_uint64( X ) end),
	Bin_move_list = write_array(P#pk_GS2U_LookInfoPlayer.move_list, fun(X) -> encode_PosInfo( X ) end),
	Bin_buffs = write_array(P#pk_GS2U_LookInfoPlayer.buffs, fun(X) -> encode_BuffBaseInfo( X ) end),
	Bin_visible_equips = write_array(P#pk_GS2U_LookInfoPlayer.visible_equips, fun(X) -> encode_visibleEquip( X ) end),
	Bin_refine_levels = write_array(P#pk_GS2U_LookInfoPlayer.refine_levels, fun(X) -> encode_refineLevel( X ) end),
	[
		<<?GS2U_LookInfoPlayer:?U16>>,
		Bin_code,
		Bin_roleID,
		Bin_name,
		Bin_x,
		Bin_y,
		Bin_race,
		Bin_career,
		Bin_sex,
		Bin_camp,
		Bin_head,
		Bin_move_speed,
		Bin_level,
		Bin_hp_per,
		Bin_petID,
		Bin_otherCode,
		Bin_servername,
		Bin_myServerName,
		Bin_isInCross,
		Bin_pkMode,
		Bin_pet_list,
		Bin_move_list,
		Bin_buffs,
		Bin_visible_equips,
		Bin_refine_levels
	];

%GENERATED from file:player.h => GS2U_LotteryForTowerBeginTimeEndTime
encode(#pk_GS2U_LotteryForTowerBeginTimeEndTime{} = P) ->
	Bin_beginTime = write_uint32( P#pk_GS2U_LotteryForTowerBeginTimeEndTime.beginTime ),
	Bin_endTime = write_uint32( P#pk_GS2U_LotteryForTowerBeginTimeEndTime.endTime ),
	[
		<<?GS2U_LotteryForTowerBeginTimeEndTime:?U16>>,
		Bin_beginTime,
		Bin_endTime
	];

%GENERATED from file:player.h => GS2U_LotteryForTowerInfo
encode(#pk_GS2U_LotteryForTowerInfo{} = P) ->
	Bin_current_cfg_id = write_int16( P#pk_GS2U_LotteryForTowerInfo.current_cfg_id ),
	Bin_endTime = write_uint32( P#pk_GS2U_LotteryForTowerInfo.endTime ),
	Bin_oneTimeCost = write_uint32( P#pk_GS2U_LotteryForTowerInfo.oneTimeCost ),
	Bin_tenTimeCost = write_uint32( P#pk_GS2U_LotteryForTowerInfo.tenTimeCost ),
	Bin_fiftyTimeCost = write_uint32( P#pk_GS2U_LotteryForTowerInfo.fiftyTimeCost ),
	Bin_itemList = write_array(P#pk_GS2U_LotteryForTowerInfo.itemList, fun(X) -> encode_lotteryForToweItem( X ) end),
	Bin_noticeList = write_array(P#pk_GS2U_LotteryForTowerInfo.noticeList, fun(X) -> encode_lotteryForTowerNotice( X ) end),
	[
		<<?GS2U_LotteryForTowerInfo:?U16>>,
		Bin_current_cfg_id,
		Bin_endTime,
		Bin_oneTimeCost,
		Bin_tenTimeCost,
		Bin_fiftyTimeCost,
		Bin_itemList,
		Bin_noticeList
	];

%GENERATED from file:player.h => GS2U_LotteryForTowerRandonAward
encode(#pk_GS2U_LotteryForTowerRandonAward{} = P) ->
	Bin_current_cfg_id = write_int16( P#pk_GS2U_LotteryForTowerRandonAward.current_cfg_id ),
	Bin_noticeList = write_array(P#pk_GS2U_LotteryForTowerRandonAward.noticeList, fun(X) -> encode_lotteryForTowerNotice( X ) end),
	Bin_reward_cfg_id_list = write_array(P#pk_GS2U_LotteryForTowerRandonAward.reward_cfg_id_list, fun(X) -> write_int16( X ) end),
	[
		<<?GS2U_LotteryForTowerRandonAward:?U16>>,
		Bin_current_cfg_id,
		Bin_noticeList,
		Bin_reward_cfg_id_list
	];

%GENERATED from file:player.h => GS2U_MapLevel
encode(#pk_GS2U_MapLevel{} = P) ->
	Bin_level = write_uint32( P#pk_GS2U_MapLevel.level ),
	[
		<<?GS2U_MapLevel:?U16>>,
		Bin_level
	];

%GENERATED from file:player.h => GS2U_MapLineList
encode(#pk_GS2U_MapLineList{} = P) ->
	Bin_mapID = write_uint16( P#pk_GS2U_MapLineList.mapID ),
	Bin_lineList = write_array(P#pk_GS2U_MapLineList.lineList, fun(X) -> encode_MapLineInfo( X ) end),
	[
		<<?GS2U_MapLineList:?U16>>,
		Bin_mapID,
		Bin_lineList
	];

%GENERATED from file:player.h => GS2U_MaterialCopyMapResult
encode(#pk_GS2U_MaterialCopyMapResult{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_GS2U_MaterialCopyMapResult.copyMapID ),
	Bin_score = write_uint16( P#pk_GS2U_MaterialCopyMapResult.score ),
	Bin_state = write_uint16( P#pk_GS2U_MaterialCopyMapResult.state ),
	Bin_goldReward = write_uint32( P#pk_GS2U_MaterialCopyMapResult.goldReward ),
	Bin_expReward = write_uint32( P#pk_GS2U_MaterialCopyMapResult.expReward ),
	Bin_maxChapter = write_uint16( P#pk_GS2U_MaterialCopyMapResult.maxChapter ),
	Bin_finishChapter = write_uint16( P#pk_GS2U_MaterialCopyMapResult.finishChapter ),
	Bin_isAssist = write_bool( P#pk_GS2U_MaterialCopyMapResult.isAssist ),
	Bin_dropItems = write_array(P#pk_GS2U_MaterialCopyMapResult.dropItems, fun(X) -> encode_CopyMapDropItem( X ) end),
	Bin_festivalDrop = write_array(P#pk_GS2U_MaterialCopyMapResult.festivalDrop, fun(X) -> encode_CopyMapDropItem( X ) end),
	[
		<<?GS2U_MaterialCopyMapResult:?U16>>,
		Bin_copyMapID,
		Bin_score,
		Bin_state,
		Bin_goldReward,
		Bin_expReward,
		Bin_maxChapter,
		Bin_finishChapter,
		Bin_isAssist,
		Bin_dropItems,
		Bin_festivalDrop
	];

%GENERATED from file:player.h => GS2U_MissionObjectList
encode(#pk_GS2U_MissionObjectList{} = P) ->
	Bin_missionObj_list = write_array(P#pk_GS2U_MissionObjectList.missionObj_list, fun(X) -> encode_MissionObjectInfo( X ) end),
	[
		<<?GS2U_MissionObjectList:?U16>>,
		Bin_missionObj_list
	];

%GENERATED from file:player.h => GS2U_MoneyChanges
encode(#pk_GS2U_MoneyChanges{} = P) ->
	Bin_changes = write_array(P#pk_GS2U_MoneyChanges.changes, fun(X) -> encode_MoneyChanges( X ) end),
	[
		<<?GS2U_MoneyChanges:?U16>>,
		Bin_changes
	];

%GENERATED from file:player.h => GS2U_MoneyDungeonCopyMapResult
encode(#pk_GS2U_MoneyDungeonCopyMapResult{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_GS2U_MoneyDungeonCopyMapResult.copyMapID ),
	Bin_score = write_uint16( P#pk_GS2U_MoneyDungeonCopyMapResult.score ),
	Bin_maxChapter = write_uint16( P#pk_GS2U_MoneyDungeonCopyMapResult.maxChapter ),
	Bin_finishChapter = write_uint16( P#pk_GS2U_MoneyDungeonCopyMapResult.finishChapter ),
	Bin_listMonsterID = write_array(P#pk_GS2U_MoneyDungeonCopyMapResult.listMonsterID, fun(X) -> write_uint16( X ) end),
	Bin_listMonsterCountKill = write_array(P#pk_GS2U_MoneyDungeonCopyMapResult.listMonsterCountKill, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_MoneyDungeonCopyMapResult:?U16>>,
		Bin_copyMapID,
		Bin_score,
		Bin_maxChapter,
		Bin_finishChapter,
		Bin_listMonsterID,
		Bin_listMonsterCountKill
	];

%GENERATED from file:player.h => GS2U_MoneyTreeAck
encode(#pk_GS2U_MoneyTreeAck{} = P) ->
	Bin_totalMoney = write_uint32( P#pk_GS2U_MoneyTreeAck.totalMoney ),
	Bin_boxMoney = write_uint32( P#pk_GS2U_MoneyTreeAck.boxMoney ),
	Bin_rate = write_uint16( P#pk_GS2U_MoneyTreeAck.rate ),
	[
		<<?GS2U_MoneyTreeAck:?U16>>,
		Bin_totalMoney,
		Bin_boxMoney,
		Bin_rate
	];

%GENERATED from file:player.h => GS2U_MoneyTreeBox
encode(#pk_GS2U_MoneyTreeBox{} = P) ->
	Bin_totalMoney = write_uint32( P#pk_GS2U_MoneyTreeBox.totalMoney ),
	Bin_rate = write_uint16( P#pk_GS2U_MoneyTreeBox.rate ),
	[
		<<?GS2U_MoneyTreeBox:?U16>>,
		Bin_totalMoney,
		Bin_rate
	];

%GENERATED from file:player.h => GS2U_MonsterBookEnterNewMap_Sync
encode(#pk_GS2U_MonsterBookEnterNewMap_Sync{} = P) ->
	Bin_mapid = write_uint16( P#pk_GS2U_MonsterBookEnterNewMap_Sync.mapid ),
	[
		<<?GS2U_MonsterBookEnterNewMap_Sync:?U16>>,
		Bin_mapid
	];

%GENERATED from file:player.h => GS2U_MonsterBookNeed_Sync
encode(#pk_GS2U_MonsterBookNeed_Sync{} = P) ->
	Bin_listUnlockID = write_array(P#pk_GS2U_MonsterBookNeed_Sync.listUnlockID, fun(X) -> write_uint16( X ) end),
	Bin_listRewardID = write_array(P#pk_GS2U_MonsterBookNeed_Sync.listRewardID, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_MonsterBookNeed_Sync:?U16>>,
		Bin_listUnlockID,
		Bin_listRewardID
	];

%GENERATED from file:player.h => GS2U_MonsterBookReward_Ack
encode(#pk_GS2U_MonsterBookReward_Ack{} = P) ->
	Bin_id = write_uint16( P#pk_GS2U_MonsterBookReward_Ack.id ),
	[
		<<?GS2U_MonsterBookReward_Ack:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => GS2U_MonsterBookSnap_Ack
encode(#pk_GS2U_MonsterBookSnap_Ack{} = P) ->
	Bin_id = write_uint16( P#pk_GS2U_MonsterBookSnap_Ack.id ),
	[
		<<?GS2U_MonsterBookSnap_Ack:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => GS2U_MonsterBookUnlock_Ack
encode(#pk_GS2U_MonsterBookUnlock_Ack{} = P) ->
	Bin_id = write_uint16( P#pk_GS2U_MonsterBookUnlock_Ack.id ),
	[
		<<?GS2U_MonsterBookUnlock_Ack:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => GS2U_MonsterBook_Ack
encode(#pk_GS2U_MonsterBook_Ack{} = P) ->
	Bin_listMapID = write_array(P#pk_GS2U_MonsterBook_Ack.listMapID, fun(X) -> write_uint16( X ) end),
	Bin_listMonster = write_array(P#pk_GS2U_MonsterBook_Ack.listMonster, fun(X) -> encode_MonsterBook( X ) end),
	[
		<<?GS2U_MonsterBook_Ack:?U16>>,
		Bin_listMapID,
		Bin_listMonster
	];

%GENERATED from file:player.h => GS2U_MonsterList
encode(#pk_GS2U_MonsterList{} = P) ->
	Bin_monster_list = write_array(P#pk_GS2U_MonsterList.monster_list, fun(X) -> encode_LookInfoMonster( X ) end),
	[
		<<?GS2U_MonsterList:?U16>>,
		Bin_monster_list
	];

%GENERATED from file:player.h => GS2U_MonthCardEndTips
encode(#pk_GS2U_MonthCardEndTips{} = P) ->
	Bin_remainDays = write_uint8( P#pk_GS2U_MonthCardEndTips.remainDays ),
	[
		<<?GS2U_MonthCardEndTips:?U16>>,
		Bin_remainDays
	];

%GENERATED from file:player.h => GS2U_MoveInfo
encode(#pk_GS2U_MoveInfo{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_MoveInfo.code ),
	Bin_posX = write_float( P#pk_GS2U_MoveInfo.posX ),
	Bin_posY = write_float( P#pk_GS2U_MoveInfo.posY ),
	Bin_posInfos = write_array(P#pk_GS2U_MoveInfo.posInfos, fun(X) -> encode_PosInfo( X ) end),
	[
		<<?GS2U_MoveInfo:?U16>>,
		Bin_code,
		Bin_posX,
		Bin_posY,
		Bin_posInfos
	];

%GENERATED from file:player.h => GS2U_MsgBoxTips
encode(#pk_GS2U_MsgBoxTips{} = P) ->
	Bin_code = write_int32( P#pk_GS2U_MsgBoxTips.code ),
	Bin_msg = write_string( P#pk_GS2U_MsgBoxTips.msg ),
	[
		<<?GS2U_MsgBoxTips:?U16>>,
		Bin_code,
		Bin_msg
	];

%GENERATED from file:player.h => GS2U_NoticeAdd
encode(#pk_GS2U_NoticeAdd{} = P) ->
	Bin_notice = write_array(P#pk_GS2U_NoticeAdd.notice, fun(X) -> encode_NoticeInfo( X ) end),
	[
		<<?GS2U_NoticeAdd:?U16>>,
		Bin_notice
	];

%GENERATED from file:player.h => GS2U_NoticeDel
encode(#pk_GS2U_NoticeDel{} = P) ->
	Bin_id = write_array(P#pk_GS2U_NoticeDel.id, fun(X) -> write_int64( X ) end),
	[
		<<?GS2U_NoticeDel:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => GS2U_NoticeResponse
encode(#pk_GS2U_NoticeResponse{} = P) ->
	Bin_result = write_int8( P#pk_GS2U_NoticeResponse.result ),
	Bin_noticeList = write_array(P#pk_GS2U_NoticeResponse.noticeList, fun(X) -> encode_NoticeInfo( X ) end),
	[
		<<?GS2U_NoticeResponse:?U16>>,
		Bin_result,
		Bin_noticeList
	];

%GENERATED from file:player.h => GS2U_NpcList
encode(#pk_GS2U_NpcList{} = P) ->
	Bin_npc_list = write_array(P#pk_GS2U_NpcList.npc_list, fun(X) -> encode_LookInfoNpc( X ) end),
	[
		<<?GS2U_NpcList:?U16>>,
		Bin_npc_list
	];

%GENERATED from file:player.h => GS2U_NpcStatusChange
encode(#pk_GS2U_NpcStatusChange{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_NpcStatusChange.code ),
	Bin_actionStatus = write_uint32( P#pk_GS2U_NpcStatusChange.actionStatus ),
	[
		<<?GS2U_NpcStatusChange:?U16>>,
		Bin_code,
		Bin_actionStatus
	];

%GENERATED from file:player.h => GS2U_ObjBrief
encode(#pk_GS2U_ObjBrief{} = P) ->
	Bin_obj_type = write_int8( P#pk_GS2U_ObjBrief.obj_type ),
	Bin_objs = write_array(P#pk_GS2U_ObjBrief.objs, fun(X) -> encode_ObjBrief( X ) end),
	[
		<<?GS2U_ObjBrief:?U16>>,
		Bin_obj_type,
		Bin_objs
	];

%GENERATED from file:player.h => GS2U_PetList
encode(#pk_GS2U_PetList{} = P) ->
	Bin_pet_list = write_array(P#pk_GS2U_PetList.pet_list, fun(X) -> encode_LookInfoPet( X ) end),
	[
		<<?GS2U_PetList:?U16>>,
		Bin_pet_list
	];

%GENERATED from file:player.h => GS2U_PetLvlChange
encode(#pk_GS2U_PetLvlChange{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_PetLvlChange.code ),
	Bin_level = write_uint16( P#pk_GS2U_PetLvlChange.level ),
	[
		<<?GS2U_PetLvlChange:?U16>>,
		Bin_code,
		Bin_level
	];

%GENERATED from file:player.h => GS2U_PetRawLvlChange
encode(#pk_GS2U_PetRawLvlChange{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_PetRawLvlChange.code ),
	Bin_rawLvl = write_uint8( P#pk_GS2U_PetRawLvlChange.rawLvl ),
	[
		<<?GS2U_PetRawLvlChange:?U16>>,
		Bin_code,
		Bin_rawLvl
	];

%GENERATED from file:player.h => GS2U_PlayerAddExp
encode(#pk_GS2U_PlayerAddExp{} = P) ->
	Bin_curExp = write_uint32( P#pk_GS2U_PlayerAddExp.curExp ),
	Bin_addExp = write_int32( P#pk_GS2U_PlayerAddExp.addExp ),
	Bin_addPercent = write_int32( P#pk_GS2U_PlayerAddExp.addPercent ),
	[
		<<?GS2U_PlayerAddExp:?U16>>,
		Bin_curExp,
		Bin_addExp,
		Bin_addPercent
	];

%GENERATED from file:player.h => GS2U_PlayerAwakenInfo
encode(#pk_GS2U_PlayerAwakenInfo{} = P) ->
	Bin_type = write_int8( P#pk_GS2U_PlayerAwakenInfo.type ),
	Bin_awakenLevel = write_int8( P#pk_GS2U_PlayerAwakenInfo.awakenLevel ),
	Bin_itemNum = write_uint16( P#pk_GS2U_PlayerAwakenInfo.itemNum ),
	[
		<<?GS2U_PlayerAwakenInfo:?U16>>,
		Bin_type,
		Bin_awakenLevel,
		Bin_itemNum
	];

%GENERATED from file:player.h => GS2U_PlayerBaseInfo
encode(#pk_GS2U_PlayerBaseInfo{} = P) ->
	Bin_baseInfo = encode_RoleBaseInfo( P#pk_GS2U_PlayerBaseInfo.baseInfo ),
	[
		<<?GS2U_PlayerBaseInfo:?U16>>,
		Bin_baseInfo
	];

%GENERATED from file:player.h => GS2U_PlayerBlood
encode(#pk_GS2U_PlayerBlood{} = P) ->
	Bin_blood = write_uint32( P#pk_GS2U_PlayerBlood.blood ),
	[
		<<?GS2U_PlayerBlood:?U16>>,
		Bin_blood
	];

%GENERATED from file:player.h => GS2U_PlayerChangedWealth
encode(#pk_GS2U_PlayerChangedWealth{} = P) ->
	Bin_type = write_uint32( P#pk_GS2U_PlayerChangedWealth.type ),
	Bin_wealth = write_uint32( P#pk_GS2U_PlayerChangedWealth.wealth ),
	Bin_reason = write_uint16( P#pk_GS2U_PlayerChangedWealth.reason ),
	[
		<<?GS2U_PlayerChangedWealth:?U16>>,
		Bin_type,
		Bin_wealth,
		Bin_reason
	];

%GENERATED from file:player.h => GS2U_PlayerCour
encode(#pk_GS2U_PlayerCour{} = P) ->
	Bin_cour = write_uint32( P#pk_GS2U_PlayerCour.cour ),
	[
		<<?GS2U_PlayerCour:?U16>>,
		Bin_cour
	];

%GENERATED from file:player.h => GS2U_PlayerDead
encode(#pk_GS2U_PlayerDead{} = P) ->
	Bin_deadTime = write_uint64( P#pk_GS2U_PlayerDead.deadTime ),
	Bin_code = write_uint64( P#pk_GS2U_PlayerDead.code ),
	Bin_normalReviveCDTime = write_uint32( P#pk_GS2U_PlayerDead.normalReviveCDTime ),
	Bin_reviveCost = encode_MoneyInit( P#pk_GS2U_PlayerDead.reviveCost ),
	Bin_attackCode = write_uint64( P#pk_GS2U_PlayerDead.attackCode ),
	Bin_attackName = write_string( P#pk_GS2U_PlayerDead.attackName ),
	Bin_lostMoney = write_array(P#pk_GS2U_PlayerDead.lostMoney, fun(X) -> encode_MoneyInit( X ) end),
	Bin_reviveType = write_uint32( P#pk_GS2U_PlayerDead.reviveType ),
	Bin_reviveCount = write_uint32( P#pk_GS2U_PlayerDead.reviveCount ),
	[
		<<?GS2U_PlayerDead:?U16>>,
		Bin_deadTime,
		Bin_code,
		Bin_normalReviveCDTime,
		Bin_reviveCost,
		Bin_attackCode,
		Bin_attackName,
		Bin_lostMoney,
		Bin_reviveType,
		Bin_reviveCount
	];

%GENERATED from file:player.h => GS2U_PlayerHp
encode(#pk_GS2U_PlayerHp{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_PlayerHp.code ),
	Bin_hp = write_uint32( P#pk_GS2U_PlayerHp.hp ),
	[
		<<?GS2U_PlayerHp:?U16>>,
		Bin_code,
		Bin_hp
	];

%GENERATED from file:player.h => GS2U_PlayerInitEnd
encode(#pk_GS2U_PlayerInitEnd{}) ->
	[
		<<?GS2U_PlayerInitEnd:?U16>>

	];

%GENERATED from file:player.h => GS2U_PlayerLevelUp
encode(#pk_GS2U_PlayerLevelUp{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_PlayerLevelUp.code ),
	Bin_curExp = write_uint32( P#pk_GS2U_PlayerLevelUp.curExp ),
	Bin_maxExp = write_uint32( P#pk_GS2U_PlayerLevelUp.maxExp ),
	Bin_addExp = write_uint32( P#pk_GS2U_PlayerLevelUp.addExp ),
	Bin_addPercent = write_int32( P#pk_GS2U_PlayerLevelUp.addPercent ),
	Bin_level = write_uint8( P#pk_GS2U_PlayerLevelUp.level ),
	[
		<<?GS2U_PlayerLevelUp:?U16>>,
		Bin_code,
		Bin_curExp,
		Bin_maxExp,
		Bin_addExp,
		Bin_addPercent,
		Bin_level
	];

%GENERATED from file:player.h => GS2U_PlayerPhys
encode(#pk_GS2U_PlayerPhys{} = P) ->
	Bin_phys = write_uint32( P#pk_GS2U_PlayerPhys.phys ),
	[
		<<?GS2U_PlayerPhys:?U16>>,
		Bin_phys
	];

%GENERATED from file:player.h => GS2U_PlayerRevive
encode(#pk_GS2U_PlayerRevive{} = P) ->
	Bin_mapId = write_uint16( P#pk_GS2U_PlayerRevive.mapId ),
	Bin_x = write_float( P#pk_GS2U_PlayerRevive.x ),
	Bin_y = write_float( P#pk_GS2U_PlayerRevive.y ),
	Bin_curHp = write_uint32( P#pk_GS2U_PlayerRevive.curHp ),
	Bin_maxHp = write_uint32( P#pk_GS2U_PlayerRevive.maxHp ),
	Bin_curPower = write_uint32( P#pk_GS2U_PlayerRevive.curPower ),
	Bin_curPhys = write_uint32( P#pk_GS2U_PlayerRevive.curPhys ),
	[
		<<?GS2U_PlayerRevive:?U16>>,
		Bin_mapId,
		Bin_x,
		Bin_y,
		Bin_curHp,
		Bin_maxHp,
		Bin_curPower,
		Bin_curPhys
	];

%GENERATED from file:player.h => GS2U_PlayerSp
encode(#pk_GS2U_PlayerSp{} = P) ->
	Bin_sp = write_uint32( P#pk_GS2U_PlayerSp.sp ),
	[
		<<?GS2U_PlayerSp:?U16>>,
		Bin_sp
	];

%GENERATED from file:player.h => GS2U_PlotDialogue
encode(#pk_GS2U_PlotDialogue{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_PlotDialogue.id ),
	[
		<<?GS2U_PlotDialogue:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => GS2U_PropSync
encode(#pk_GS2U_PropSync{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_PropSync.code ),
	Bin_ints = write_array(P#pk_GS2U_PropSync.ints, fun(X) -> encode_PropInt( X ) end),
	Bin_int64s = write_array(P#pk_GS2U_PropSync.int64s, fun(X) -> encode_PropInt64( X ) end),
	Bin_floats = write_array(P#pk_GS2U_PropSync.floats, fun(X) -> encode_PropFloat( X ) end),
	Bin_strs = write_array(P#pk_GS2U_PropSync.strs, fun(X) -> encode_PropString( X ) end),
	[
		<<?GS2U_PropSync:?U16>>,
		Bin_code,
		Bin_ints,
		Bin_int64s,
		Bin_floats,
		Bin_strs
	];

%GENERATED from file:player.h => GS2U_PushInfo
encode(#pk_GS2U_PushInfo{} = P) ->
	Bin_items = write_array(P#pk_GS2U_PushInfo.items, fun(X) -> encode_pushItem( X ) end),
	Bin_startTime = write_uint32( P#pk_GS2U_PushInfo.startTime ),
	Bin_endTime = write_uint32( P#pk_GS2U_PushInfo.endTime ),
	[
		<<?GS2U_PushInfo:?U16>>,
		Bin_items,
		Bin_startTime,
		Bin_endTime
	];

%GENERATED from file:player.h => GS2U_RaceApplyInfo_Sync
encode(#pk_GS2U_RaceApplyInfo_Sync{} = P) ->
	Bin_info = encode_RaceTeamBase( P#pk_GS2U_RaceApplyInfo_Sync.info ),
	[
		<<?GS2U_RaceApplyInfo_Sync:?U16>>,
		Bin_info
	];

%GENERATED from file:player.h => GS2U_RaceApplyState
encode(#pk_GS2U_RaceApplyState{} = P) ->
	Bin_retInfo = write_int32( P#pk_GS2U_RaceApplyState.retInfo ),
	Bin_errorInfo = write_array(P#pk_GS2U_RaceApplyState.errorInfo, fun(X) -> encode_Error( X ) end),
	Bin_master = encode_RaceCanBeInvite( P#pk_GS2U_RaceApplyState.master ),
	Bin_passenger = write_array(P#pk_GS2U_RaceApplyState.passenger, fun(X) -> encode_RaceCanBeInvite( X ) end),
	Bin_petID = write_uint16( P#pk_GS2U_RaceApplyState.petID ),
	Bin_type = write_uint8( P#pk_GS2U_RaceApplyState.type ),
	Bin_isApply = write_bool( P#pk_GS2U_RaceApplyState.isApply ),
	Bin_autoMatch = write_uint8( P#pk_GS2U_RaceApplyState.autoMatch ),
	[
		<<?GS2U_RaceApplyState:?U16>>,
		Bin_retInfo,
		Bin_errorInfo,
		Bin_master,
		Bin_passenger,
		Bin_petID,
		Bin_type,
		Bin_isApply,
		Bin_autoMatch
	];

%GENERATED from file:player.h => GS2U_RaceApply_Ack
encode(#pk_GS2U_RaceApply_Ack{} = P) ->
	Bin_info = encode_RaceTeamBase( P#pk_GS2U_RaceApply_Ack.info ),
	[
		<<?GS2U_RaceApply_Ack:?U16>>,
		Bin_info
	];

%GENERATED from file:player.h => GS2U_RaceCancel_Ack
encode(#pk_GS2U_RaceCancel_Ack{} = P) ->
	Bin_role = encode_CrossRoleBase( P#pk_GS2U_RaceCancel_Ack.role ),
	[
		<<?GS2U_RaceCancel_Ack:?U16>>,
		Bin_role
	];

%GENERATED from file:player.h => GS2U_RaceInit
encode(#pk_GS2U_RaceInit{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_RaceInit.type ),
	Bin_petID = write_uint16( P#pk_GS2U_RaceInit.petID ),
	Bin_autoMatch = write_uint8( P#pk_GS2U_RaceInit.autoMatch ),
	[
		<<?GS2U_RaceInit:?U16>>,
		Bin_type,
		Bin_petID,
		Bin_autoMatch
	];

%GENERATED from file:player.h => GS2U_RaceInviteList
encode(#pk_GS2U_RaceInviteList{} = P) ->
	Bin_retInfo = write_int32( P#pk_GS2U_RaceInviteList.retInfo ),
	Bin_errorInfo = write_array(P#pk_GS2U_RaceInviteList.errorInfo, fun(X) -> encode_Error( X ) end),
	Bin_listInfo = write_array(P#pk_GS2U_RaceInviteList.listInfo, fun(X) -> encode_RaceCanBeInvite( X ) end),
	[
		<<?GS2U_RaceInviteList:?U16>>,
		Bin_retInfo,
		Bin_errorInfo,
		Bin_listInfo
	];

%GENERATED from file:player.h => GS2U_RaceInvite_S2B
encode(#pk_GS2U_RaceInvite_S2B{} = P) ->
	Bin_master = encode_RaceCanBeInvite( P#pk_GS2U_RaceInvite_S2B.master ),
	Bin_petID = write_uint16( P#pk_GS2U_RaceInvite_S2B.petID ),
	Bin_timeout = write_uint32( P#pk_GS2U_RaceInvite_S2B.timeout ),
	[
		<<?GS2U_RaceInvite_S2B:?U16>>,
		Bin_master,
		Bin_petID,
		Bin_timeout
	];

%GENERATED from file:player.h => GS2U_RaceMapGiveUp_Sync
encode(#pk_GS2U_RaceMapGiveUp_Sync{} = P) ->
	Bin_isComplete = write_bool( P#pk_GS2U_RaceMapGiveUp_Sync.isComplete ),
	Bin_reason = write_uint8( P#pk_GS2U_RaceMapGiveUp_Sync.reason ),
	Bin_role = encode_CrossRoleBase( P#pk_GS2U_RaceMapGiveUp_Sync.role ),
	[
		<<?GS2U_RaceMapGiveUp_Sync:?U16>>,
		Bin_isComplete,
		Bin_reason,
		Bin_role
	];

%GENERATED from file:player.h => GS2U_RaceMapItem_Sync
encode(#pk_GS2U_RaceMapItem_Sync{} = P) ->
	Bin_applyID = write_uint64( P#pk_GS2U_RaceMapItem_Sync.applyID ),
	Bin_roleID = write_uint64( P#pk_GS2U_RaceMapItem_Sync.roleID ),
	Bin_getOrUse = write_bool( P#pk_GS2U_RaceMapItem_Sync.getOrUse ),
	Bin_itemID = write_uint8( P#pk_GS2U_RaceMapItem_Sync.itemID ),
	Bin_item = encode_RaceTeamItem( P#pk_GS2U_RaceMapItem_Sync.item ),
	[
		<<?GS2U_RaceMapItem_Sync:?U16>>,
		Bin_applyID,
		Bin_roleID,
		Bin_getOrUse,
		Bin_itemID,
		Bin_item
	];

%GENERATED from file:player.h => GS2U_RaceMapMilestone_Sync
encode(#pk_GS2U_RaceMapMilestone_Sync{} = P) ->
	Bin_applyID = write_uint64( P#pk_GS2U_RaceMapMilestone_Sync.applyID ),
	Bin_sort = encode_RaceTeamSort( P#pk_GS2U_RaceMapMilestone_Sync.sort ),
	[
		<<?GS2U_RaceMapMilestone_Sync:?U16>>,
		Bin_applyID,
		Bin_sort
	];

%GENERATED from file:player.h => GS2U_RaceMapState_Sync
encode(#pk_GS2U_RaceMapState_Sync{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_RaceMapState_Sync.type ),
	Bin_state = write_uint8( P#pk_GS2U_RaceMapState_Sync.state ),
	Bin_sec = write_uint16( P#pk_GS2U_RaceMapState_Sync.sec ),
	Bin_timeBegin = write_uint32( P#pk_GS2U_RaceMapState_Sync.timeBegin ),
	Bin_info = write_array(P#pk_GS2U_RaceMapState_Sync.info, fun(X) -> encode_RaceTeamEx( X ) end),
	[
		<<?GS2U_RaceMapState_Sync:?U16>>,
		Bin_type,
		Bin_state,
		Bin_sec,
		Bin_timeBegin,
		Bin_info
	];

%GENERATED from file:player.h => GS2U_RaceSeletPet
encode(#pk_GS2U_RaceSeletPet{} = P) ->
	Bin_retInfo = write_int32( P#pk_GS2U_RaceSeletPet.retInfo ),
	Bin_errorInfo = write_array(P#pk_GS2U_RaceSeletPet.errorInfo, fun(X) -> encode_Error( X ) end),
	Bin_petID = write_uint16( P#pk_GS2U_RaceSeletPet.petID ),
	[
		<<?GS2U_RaceSeletPet:?U16>>,
		Bin_retInfo,
		Bin_errorInfo,
		Bin_petID
	];

%GENERATED from file:player.h => GS2U_RaceType_Sync
encode(#pk_GS2U_RaceType_Sync{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_RaceType_Sync.type ),
	[
		<<?GS2U_RaceType_Sync:?U16>>,
		Bin_type
	];

%GENERATED from file:player.h => GS2U_ReceivePlayerLevelRewardResult
encode(#pk_GS2U_ReceivePlayerLevelRewardResult{} = P) ->
	Bin_level = write_uint8( P#pk_GS2U_ReceivePlayerLevelRewardResult.level ),
	[
		<<?GS2U_ReceivePlayerLevelRewardResult:?U16>>,
		Bin_level
	];

%GENERATED from file:player.h => GS2U_ReconnectLoginRequestFail
encode(#pk_GS2U_ReconnectLoginRequestFail{}) ->
	[
		<<?GS2U_ReconnectLoginRequestFail:?U16>>

	];

%GENERATED from file:player.h => GS2U_RequestAutoDealAck
encode(#pk_GS2U_RequestAutoDealAck{} = P) ->
	Bin_isSuccess = write_bool( P#pk_GS2U_RequestAutoDealAck.isSuccess ),
	Bin_copyMapID = write_uint16( P#pk_GS2U_RequestAutoDealAck.copyMapID ),
	Bin_coinReward = write_array(P#pk_GS2U_RequestAutoDealAck.coinReward, fun(X) -> encode_CoinData( X ) end),
	Bin_expReward = write_uint64( P#pk_GS2U_RequestAutoDealAck.expReward ),
	Bin_dropItems = write_array(P#pk_GS2U_RequestAutoDealAck.dropItems, fun(X) -> encode_CopyMapDropItem( X ) end),
	[
		<<?GS2U_RequestAutoDealAck:?U16>>,
		Bin_isSuccess,
		Bin_copyMapID,
		Bin_coinReward,
		Bin_expReward,
		Bin_dropItems
	];

%GENERATED from file:player.h => GS2U_RequestGoddessCodeAck
encode(#pk_GS2U_RequestGoddessCodeAck{} = P) ->
	Bin_goddessCode = write_uint64( P#pk_GS2U_RequestGoddessCodeAck.goddessCode ),
	[
		<<?GS2U_RequestGoddessCodeAck:?U16>>,
		Bin_goddessCode
	];

%GENERATED from file:player.h => GS2U_RequestOneKeyDealAck
encode(#pk_GS2U_RequestOneKeyDealAck{} = P) ->
	Bin_listResult = write_array(P#pk_GS2U_RequestOneKeyDealAck.listResult, fun(X) -> encode_RequestAutoDeal( X ) end),
	[
		<<?GS2U_RequestOneKeyDealAck:?U16>>,
		Bin_listResult
	];

%GENERATED from file:player.h => GS2U_RequestRechargeAck
encode(#pk_GS2U_RequestRechargeAck{} = P) ->
	Bin_funcellOrderID = write_string( P#pk_GS2U_RequestRechargeAck.funcellOrderID ),
	Bin_moneyNun = write_float( P#pk_GS2U_RequestRechargeAck.moneyNun ),
	[
		<<?GS2U_RequestRechargeAck:?U16>>,
		Bin_funcellOrderID,
		Bin_moneyNun
	];

%GENERATED from file:player.h => GS2U_RequestRechargeHasGiftIDListAck
encode(#pk_GS2U_RequestRechargeHasGiftIDListAck{} = P) ->
	Bin_takenIDList = write_array(P#pk_GS2U_RequestRechargeHasGiftIDListAck.takenIDList, fun(X) -> write_uint32( X ) end),
	Bin_confIDList = write_array(P#pk_GS2U_RequestRechargeHasGiftIDListAck.confIDList, fun(X) -> encode_RechargeDoubleConf( X ) end),
	[
		<<?GS2U_RequestRechargeHasGiftIDListAck:?U16>>,
		Bin_takenIDList,
		Bin_confIDList
	];

%GENERATED from file:player.h => GS2U_RequestTargetCopyMapScore
encode(#pk_GS2U_RequestTargetCopyMapScore{} = P) ->
	Bin_targetCopyMapID = write_uint32( P#pk_GS2U_RequestTargetCopyMapScore.targetCopyMapID ),
	Bin_highestScore = write_uint32( P#pk_GS2U_RequestTargetCopyMapScore.highestScore ),
	[
		<<?GS2U_RequestTargetCopyMapScore:?U16>>,
		Bin_targetCopyMapID,
		Bin_highestScore
	];

%GENERATED from file:player.h => GS2U_ResetCopyMap
encode(#pk_GS2U_ResetCopyMap{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_GS2U_ResetCopyMap.copyMapID ),
	[
		<<?GS2U_ResetCopyMap:?U16>>,
		Bin_copyMapID
	];

%GENERATED from file:player.h => GS2U_RespChatVoice
encode(#pk_GS2U_RespChatVoice{} = P) ->
	Bin_count = write_uint8( P#pk_GS2U_RespChatVoice.count ),
	Bin_index = write_uint8( P#pk_GS2U_RespChatVoice.index ),
	Bin_playerID = write_uint64( P#pk_GS2U_RespChatVoice.playerID ),
	Bin_key = write_uint32( P#pk_GS2U_RespChatVoice.key ),
	Bin_data = write_array(P#pk_GS2U_RespChatVoice.data, fun(X) -> write_uint8( X ) end),
	[
		<<?GS2U_RespChatVoice:?U16>>,
		Bin_count,
		Bin_index,
		Bin_playerID,
		Bin_key,
		Bin_data
	];

%GENERATED from file:player.h => GS2U_RespChatVoiceError
encode(#pk_GS2U_RespChatVoiceError{} = P) ->
	Bin_playerID = write_uint64( P#pk_GS2U_RespChatVoiceError.playerID ),
	Bin_key = write_uint32( P#pk_GS2U_RespChatVoiceError.key ),
	Bin_errorCode = write_uint8( P#pk_GS2U_RespChatVoiceError.errorCode ),
	[
		<<?GS2U_RespChatVoiceError:?U16>>,
		Bin_playerID,
		Bin_key,
		Bin_errorCode
	];

%GENERATED from file:player.h => GS2U_RoleAwakeInof
encode(#pk_GS2U_RoleAwakeInof{} = P) ->
	Bin_curStage = write_uint8( P#pk_GS2U_RoleAwakeInof.curStage ),
	Bin_curStone = write_uint8( P#pk_GS2U_RoleAwakeInof.curStone ),
	Bin_allAwakeInfo = write_array(P#pk_GS2U_RoleAwakeInof.allAwakeInfo, fun(X) -> encode_OneAwakeinfo( X ) end),
	[
		<<?GS2U_RoleAwakeInof:?U16>>,
		Bin_curStage,
		Bin_curStone,
		Bin_allAwakeInfo
	];

%GENERATED from file:player.h => GS2U_RoleAwakeingRet
encode(#pk_GS2U_RoleAwakeingRet{} = P) ->
	Bin_stage = write_uint8( P#pk_GS2U_RoleAwakeingRet.stage ),
	Bin_stone = write_uint8( P#pk_GS2U_RoleAwakeingRet.stone ),
	Bin_param = write_uint32( P#pk_GS2U_RoleAwakeingRet.param ),
	[
		<<?GS2U_RoleAwakeingRet:?U16>>,
		Bin_stage,
		Bin_stone,
		Bin_param
	];

%GENERATED from file:player.h => GS2U_SelPlayerResult
encode(#pk_GS2U_SelPlayerResult{} = P) ->
	Bin_result = write_int32( P#pk_GS2U_SelPlayerResult.result ),
	[
		<<?GS2U_SelPlayerResult:?U16>>,
		Bin_result
	];

%GENERATED from file:player.h => GS2U_SendGiftNotice
encode(#pk_GS2U_SendGiftNotice{} = P) ->
	Bin_ids = write_array(P#pk_GS2U_SendGiftNotice.ids, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_SendGiftNotice:?U16>>,
		Bin_ids
	];

%GENERATED from file:player.h => GS2U_SendPlayerDailyCountList
encode(#pk_GS2U_SendPlayerDailyCountList{} = P) ->
	Bin_playerDailyCountList = write_array(P#pk_GS2U_SendPlayerDailyCountList.playerDailyCountList, fun(X) -> encode_PlayerDailyCount( X ) end),
	[
		<<?GS2U_SendPlayerDailyCountList:?U16>>,
		Bin_playerDailyCountList
	];

%GENERATED from file:player.h => GS2U_SendServerType
encode(#pk_GS2U_SendServerType{} = P) ->
	Bin_serverType = write_uint32( P#pk_GS2U_SendServerType.serverType ),
	[
		<<?GS2U_SendServerType:?U16>>,
		Bin_serverType
	];

%GENERATED from file:player.h => GS2U_SessionKey
encode(#pk_GS2U_SessionKey{} = P) ->
	Bin_key = write_string( P#pk_GS2U_SessionKey.key ),
	[
		<<?GS2U_SessionKey:?U16>>,
		Bin_key
	];

%GENERATED from file:player.h => GS2U_SetUpAnchor
encode(#pk_GS2U_SetUpAnchor{} = P) ->
	Bin_args = write_array(P#pk_GS2U_SetUpAnchor.args, fun(X) -> write_int64( X ) end),
	[
		<<?GS2U_SetUpAnchor:?U16>>,
		Bin_args
	];

%GENERATED from file:player.h => GS2U_SevenDayAimReward_Ack
encode(#pk_GS2U_SevenDayAimReward_Ack{} = P) ->
	Bin_id = write_uint16( P#pk_GS2U_SevenDayAimReward_Ack.id ),
	[
		<<?GS2U_SevenDayAimReward_Ack:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => GS2U_SevenDayAimState_Sync
encode(#pk_GS2U_SevenDayAimState_Sync{} = P) ->
	Bin_timeBegin = write_uint32( P#pk_GS2U_SevenDayAimState_Sync.timeBegin ),
	Bin_conditions = write_array(P#pk_GS2U_SevenDayAimState_Sync.conditions, fun(X) -> encode_SevenDayAimUpdate( X ) end),
	Bin_alreadyReward = write_array(P#pk_GS2U_SevenDayAimState_Sync.alreadyReward, fun(X) -> write_uint16( X ) end),
	[
		<<?GS2U_SevenDayAimState_Sync:?U16>>,
		Bin_timeBegin,
		Bin_conditions,
		Bin_alreadyReward
	];

%GENERATED from file:player.h => GS2U_SevenDayAimUpdate_Sync
encode(#pk_GS2U_SevenDayAimUpdate_Sync{} = P) ->
	Bin_type = write_int32( P#pk_GS2U_SevenDayAimUpdate_Sync.type ),
	Bin_args = write_array(P#pk_GS2U_SevenDayAimUpdate_Sync.args, fun(X) -> write_int64( X ) end),
	[
		<<?GS2U_SevenDayAimUpdate_Sync:?U16>>,
		Bin_type,
		Bin_args
	];

%GENERATED from file:player.h => GS2U_ShiftTo
encode(#pk_GS2U_ShiftTo{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_ShiftTo.code ),
	Bin_posX = write_float( P#pk_GS2U_ShiftTo.posX ),
	Bin_posY = write_float( P#pk_GS2U_ShiftTo.posY ),
	[
		<<?GS2U_ShiftTo:?U16>>,
		Bin_code,
		Bin_posX,
		Bin_posY
	];

%GENERATED from file:player.h => GS2U_ShowAction
encode(#pk_GS2U_ShowAction{} = P) ->
	Bin_playerCode = write_uint64( P#pk_GS2U_ShowAction.playerCode ),
	Bin_actionIndex = write_uint32( P#pk_GS2U_ShowAction.actionIndex ),
	[
		<<?GS2U_ShowAction:?U16>>,
		Bin_playerCode,
		Bin_actionIndex
	];

%GENERATED from file:player.h => GS2U_SpecificEvent_Sync
encode(#pk_GS2U_SpecificEvent_Sync{} = P) ->
	Bin_eventID = write_uint32( P#pk_GS2U_SpecificEvent_Sync.eventID ),
	Bin_initOrSettle = write_bool( P#pk_GS2U_SpecificEvent_Sync.initOrSettle ),
	Bin_scheduleID = write_uint32( P#pk_GS2U_SpecificEvent_Sync.scheduleID ),
	[
		<<?GS2U_SpecificEvent_Sync:?U16>>,
		Bin_eventID,
		Bin_initOrSettle,
		Bin_scheduleID
	];

%GENERATED from file:player.h => GS2U_StopMove
encode(#pk_GS2U_StopMove{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_StopMove.code ),
	Bin_posX = write_float( P#pk_GS2U_StopMove.posX ),
	Bin_posY = write_float( P#pk_GS2U_StopMove.posY ),
	[
		<<?GS2U_StopMove:?U16>>,
		Bin_code,
		Bin_posX,
		Bin_posY
	];

%GENERATED from file:player.h => GS2U_StopTheAwakeBuffRet
encode(#pk_GS2U_StopTheAwakeBuffRet{}) ->
	[
		<<?GS2U_StopTheAwakeBuffRet:?U16>>

	];

%GENERATED from file:player.h => GS2U_SyncServerTime
encode(#pk_GS2U_SyncServerTime{} = P) ->
	Bin_time = write_uint32( P#pk_GS2U_SyncServerTime.time ),
	[
		<<?GS2U_SyncServerTime:?U16>>,
		Bin_time
	];

%GENERATED from file:player.h => GS2U_TaskUseItemList
encode(#pk_GS2U_TaskUseItemList{} = P) ->
	Bin_useItemlist = write_array(P#pk_GS2U_TaskUseItemList.useItemlist, fun(X) -> encode_TaskUseItem( X ) end),
	[
		<<?GS2U_TaskUseItemList:?U16>>,
		Bin_useItemlist
	];

%GENERATED from file:player.h => GS2U_TheAwakeBuffInfo
encode(#pk_GS2U_TheAwakeBuffInfo{} = P) ->
	Bin_buffID = write_uint32( P#pk_GS2U_TheAwakeBuffInfo.buffID ),
	Bin_curstatus = write_uint8( P#pk_GS2U_TheAwakeBuffInfo.curstatus ),
	Bin_lefttime = write_uint32( P#pk_GS2U_TheAwakeBuffInfo.lefttime ),
	[
		<<?GS2U_TheAwakeBuffInfo:?U16>>,
		Bin_buffID,
		Bin_curstatus,
		Bin_lefttime
	];

%GENERATED from file:player.h => GS2U_ThirtyDayLoginGiftState_Sync
encode(#pk_GS2U_ThirtyDayLoginGiftState_Sync{} = P) ->
	Bin_timeBegin = write_uint32( P#pk_GS2U_ThirtyDayLoginGiftState_Sync.timeBegin ),
	Bin_alreadyReward = write_uint16( P#pk_GS2U_ThirtyDayLoginGiftState_Sync.alreadyReward ),
	[
		<<?GS2U_ThirtyDayLoginGiftState_Sync:?U16>>,
		Bin_timeBegin,
		Bin_alreadyReward
	];

%GENERATED from file:player.h => GS2U_ThirtyDayLoginGift_Ack
encode(#pk_GS2U_ThirtyDayLoginGift_Ack{} = P) ->
	Bin_id = write_uint16( P#pk_GS2U_ThirtyDayLoginGift_Ack.id ),
	[
		<<?GS2U_ThirtyDayLoginGift_Ack:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => GS2U_TipsError
encode(#pk_GS2U_TipsError{} = P) ->
	Bin_errorCode = write_uint32( P#pk_GS2U_TipsError.errorCode ),
	[
		<<?GS2U_TipsError:?U16>>,
		Bin_errorCode
	];

%GENERATED from file:player.h => GS2U_TipsString
encode(#pk_GS2U_TipsString{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_TipsString.type ),
	Bin_tips = write_string( P#pk_GS2U_TipsString.tips ),
	Bin_params = write_array(P#pk_GS2U_TipsString.params, fun(X) -> write_string( X ) end),
	[
		<<?GS2U_TipsString:?U16>>,
		Bin_type,
		Bin_tips,
		Bin_params
	];

%GENERATED from file:player.h => GS2U_TransferNewPos
encode(#pk_GS2U_TransferNewPos{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_TransferNewPos.code ),
	Bin_pos = encode_PosInfo( P#pk_GS2U_TransferNewPos.pos ),
	[
		<<?GS2U_TransferNewPos:?U16>>,
		Bin_code,
		Bin_pos
	];

%GENERATED from file:player.h => GS2U_UserPlayerList
encode(#pk_GS2U_UserPlayerList{} = P) ->
	Bin_unlockNewRace = write_int32( P#pk_GS2U_UserPlayerList.unlockNewRace ),
	Bin_info = write_array(P#pk_GS2U_UserPlayerList.info, fun(X) -> encode_UserPlayerData( X ) end),
	[
		<<?GS2U_UserPlayerList:?U16>>,
		Bin_unlockNewRace,
		Bin_info
	];

%GENERATED from file:player.h => GS2U_WingRise
encode(#pk_GS2U_WingRise{} = P) ->
	Bin_itemID = write_uint32( P#pk_GS2U_WingRise.itemID ),
	Bin_expChange = write_int32( P#pk_GS2U_WingRise.expChange ),
	[
		<<?GS2U_WingRise:?U16>>,
		Bin_itemID,
		Bin_expChange
	];

%GENERATED from file:player.h => GS2U_WorldBossBuyBuff
encode(#pk_GS2U_WorldBossBuyBuff{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_WorldBossBuyBuff.type ),
	[
		<<?GS2U_WorldBossBuyBuff:?U16>>,
		Bin_type
	];

%GENERATED from file:player.h => GS2U_XmlNoticeResponse
encode(#pk_GS2U_XmlNoticeResponse{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_XmlNoticeResponse.type ),
	Bin_ret = write_uint8( P#pk_GS2U_XmlNoticeResponse.ret ),
	Bin_content = write_string( P#pk_GS2U_XmlNoticeResponse.content ),
	Bin_sign = write_string( P#pk_GS2U_XmlNoticeResponse.sign ),
	[
		<<?GS2U_XmlNoticeResponse:?U16>>,
		Bin_type,
		Bin_ret,
		Bin_content,
		Bin_sign
	];

%GENERATED from file:player.h => GS2U_action_point_info
encode(#pk_GS2U_action_point_info{} = P) ->
	Bin_value = write_uint32( P#pk_GS2U_action_point_info.value ),
	Bin_lastUpdateUtcTime = write_uint32( P#pk_GS2U_action_point_info.lastUpdateUtcTime ),
	[
		<<?GS2U_action_point_info:?U16>>,
		Bin_value,
		Bin_lastUpdateUtcTime
	];

%GENERATED from file:player.h => GS2U_copy_map_destory_time
encode(#pk_GS2U_copy_map_destory_time{} = P) ->
	Bin_copyMapID = write_uint32( P#pk_GS2U_copy_map_destory_time.copyMapID ),
	Bin_destoryTime = write_uint64( P#pk_GS2U_copy_map_destory_time.destoryTime ),
	Bin_waitTime = write_uint64( P#pk_GS2U_copy_map_destory_time.waitTime ),
	[
		<<?GS2U_copy_map_destory_time:?U16>>,
		Bin_copyMapID,
		Bin_destoryTime,
		Bin_waitTime
	];

%GENERATED from file:player.h => GS2U_lottery_award_items
encode(#pk_GS2U_lottery_award_items{} = P) ->
	Bin_award_item_list = write_array(P#pk_GS2U_lottery_award_items.award_item_list, fun(X) -> encode_lottery_award_item_info( X ) end),
	Bin_award_item_list_sp = write_array(P#pk_GS2U_lottery_award_items.award_item_list_sp, fun(X) -> encode_lottery_award_item_info( X ) end),
	[
		<<?GS2U_lottery_award_items:?U16>>,
		Bin_award_item_list,
		Bin_award_item_list_sp
	];

%GENERATED from file:player.h => GS2U_lottery_sys_info
encode(#pk_GS2U_lottery_sys_info{} = P) ->
	Bin_goblin_lottery_last_free_times = write_int16( P#pk_GS2U_lottery_sys_info.goblin_lottery_last_free_times ),
	Bin_goblin_lottery_free_cd = write_uint32( P#pk_GS2U_lottery_sys_info.goblin_lottery_free_cd ),
	Bin_treasure_lottery_last_free_times = write_uint32( P#pk_GS2U_lottery_sys_info.treasure_lottery_last_free_times ),
	Bin_treasure_lottery_free_cd = write_uint32( P#pk_GS2U_lottery_sys_info.treasure_lottery_free_cd ),
	[
		<<?GS2U_lottery_sys_info:?U16>>,
		Bin_goblin_lottery_last_free_times,
		Bin_goblin_lottery_free_cd,
		Bin_treasure_lottery_last_free_times,
		Bin_treasure_lottery_free_cd
	];

%GENERATED from file:player.h => GS2U_lsbattlefield_award_list
encode(#pk_GS2U_lsbattlefield_award_list{} = P) ->
	Bin_index = write_uint32( P#pk_GS2U_lsbattlefield_award_list.index ),
	Bin_award_list = write_array(P#pk_GS2U_lsbattlefield_award_list.award_list, fun(X) -> encode_lsbattlefield_award( X ) end),
	Bin_coinType = write_uint32( P#pk_GS2U_lsbattlefield_award_list.coinType ),
	Bin_coinValue = write_uint32( P#pk_GS2U_lsbattlefield_award_list.coinValue ),
	[
		<<?GS2U_lsbattlefield_award_list:?U16>>,
		Bin_index,
		Bin_award_list,
		Bin_coinType,
		Bin_coinValue
	];

%GENERATED from file:player.h => GS2U_lsbattlefield_rank_list
encode(#pk_GS2U_lsbattlefield_rank_list{} = P) ->
	Bin_rank_list = write_array(P#pk_GS2U_lsbattlefield_rank_list.rank_list, fun(X) -> encode_lsbattlefield_rank( X ) end),
	[
		<<?GS2U_lsbattlefield_rank_list:?U16>>,
		Bin_rank_list
	];

%GENERATED from file:player.h => GS2U_monsterChange
encode(#pk_GS2U_monsterChange{} = P) ->
	Bin_number = write_uint32( P#pk_GS2U_monsterChange.number ),
	[
		<<?GS2U_monsterChange:?U16>>,
		Bin_number
	];

%GENERATED from file:player.h => GS2U_returnFriendPos
encode(#pk_GS2U_returnFriendPos{} = P) ->
	Bin_mapID = write_uint32( P#pk_GS2U_returnFriendPos.mapID ),
	Bin_x = write_float( P#pk_GS2U_returnFriendPos.x ),
	Bin_y = write_float( P#pk_GS2U_returnFriendPos.y ),
	[
		<<?GS2U_returnFriendPos:?U16>>,
		Bin_mapID,
		Bin_x,
		Bin_y
	];

%GENERATED from file:player.h => GS2U_synch_lsbattlefield_state
encode(#pk_GS2U_synch_lsbattlefield_state{} = P) ->
	Bin_state = write_uint32( P#pk_GS2U_synch_lsbattlefield_state.state ),
	[
		<<?GS2U_synch_lsbattlefield_state:?U16>>,
		Bin_state
	];

%GENERATED from file:player.h => GetPlayerOnlineReward
encode(#pk_GetPlayerOnlineReward{} = P) ->
	Bin_timeID = write_uint32( P#pk_GetPlayerOnlineReward.timeID ),
	[
		<<?GetPlayerOnlineReward:?U16>>,
		Bin_timeID
	];

%GENERATED from file:player.h => PlayerLevelReward
encode(#pk_PlayerLevelReward{} = P) ->
	Bin_receiveRewardLevel = write_array(P#pk_PlayerLevelReward.receiveRewardLevel, fun(X) -> write_uint8( X ) end),
	[
		<<?PlayerLevelReward:?U16>>,
		Bin_receiveRewardLevel
	];

%GENERATED from file:player.h => U2GS2U_RaceAutoMatch
encode(#pk_U2GS2U_RaceAutoMatch{} = P) ->
	Bin_autoMatch = write_uint8( P#pk_U2GS2U_RaceAutoMatch.autoMatch ),
	[
		<<?U2GS2U_RaceAutoMatch:?U16>>,
		Bin_autoMatch
	];

%GENERATED from file:player.h => U2GS_AcceptHolidayTask
encode(#pk_U2GS_AcceptHolidayTask{}) ->
	[
		<<?U2GS_AcceptHolidayTask:?U16>>

	];

%GENERATED from file:player.h => U2GS_ActiveCodeRequest
encode(#pk_U2GS_ActiveCodeRequest{} = P) ->
	Bin_code = write_string( P#pk_U2GS_ActiveCodeRequest.code ),
	[
		<<?U2GS_ActiveCodeRequest:?U16>>,
		Bin_code
	];

%GENERATED from file:player.h => U2GS_AliveApply_Request
encode(#pk_U2GS_AliveApply_Request{}) ->
	[
		<<?U2GS_AliveApply_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_AliveCancel_Request
encode(#pk_U2GS_AliveCancel_Request{}) ->
	[
		<<?U2GS_AliveCancel_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_AliveEnterSafeArea_Request
encode(#pk_U2GS_AliveEnterSafeArea_Request{}) ->
	[
		<<?U2GS_AliveEnterSafeArea_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_BusinessCashDailyGift_Request
encode(#pk_U2GS_BusinessCashDailyGift_Request{}) ->
	[
		<<?U2GS_BusinessCashDailyGift_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_BusinessSupperGift_Request
encode(#pk_U2GS_BusinessSupperGift_Request{}) ->
	[
		<<?U2GS_BusinessSupperGift_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_Buy4System
encode(#pk_U2GS_Buy4System{} = P) ->
	Bin_costID = write_uint32( P#pk_U2GS_Buy4System.costID ),
	Bin_number = write_uint32( P#pk_U2GS_Buy4System.number ),
	[
		<<?U2GS_Buy4System:?U16>>,
		Bin_costID,
		Bin_number
	];

%GENERATED from file:player.h => U2GS_BuyLimitSales
encode(#pk_U2GS_BuyLimitSales{} = P) ->
	Bin_sku = write_uint32( P#pk_U2GS_BuyLimitSales.sku ),
	[
		<<?U2GS_BuyLimitSales:?U16>>,
		Bin_sku
	];

%GENERATED from file:player.h => U2GS_ChangeCarrer
encode(#pk_U2GS_ChangeCarrer{} = P) ->
	Bin_newCareer = write_uint32( P#pk_U2GS_ChangeCarrer.newCareer ),
	[
		<<?U2GS_ChangeCarrer:?U16>>,
		Bin_newCareer
	];

%GENERATED from file:player.h => U2GS_ChangeLineLoginRequest
encode(#pk_U2GS_ChangeLineLoginRequest{} = P) ->
	Bin_accountID = write_uint64( P#pk_U2GS_ChangeLineLoginRequest.accountID ),
	Bin_roleID = write_uint64( P#pk_U2GS_ChangeLineLoginRequest.roleID ),
	Bin_key = write_string( P#pk_U2GS_ChangeLineLoginRequest.key ),
	Bin_protocolVer = write_int32( P#pk_U2GS_ChangeLineLoginRequest.protocolVer ),
	[
		<<?U2GS_ChangeLineLoginRequest:?U16>>,
		Bin_accountID,
		Bin_roleID,
		Bin_key,
		Bin_protocolVer
	];

%GENERATED from file:player.h => U2GS_ChangeLineRequest
encode(#pk_U2GS_ChangeLineRequest{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_ChangeLineRequest.type ),
	[
		<<?U2GS_ChangeLineRequest:?U16>>,
		Bin_type
	];

%GENERATED from file:player.h => U2GS_ChangeLineRequestAck
encode(#pk_U2GS_ChangeLineRequestAck{} = P) ->
	Bin_yes = write_uint8( P#pk_U2GS_ChangeLineRequestAck.yes ),
	[
		<<?U2GS_ChangeLineRequestAck:?U16>>,
		Bin_yes
	];

%GENERATED from file:player.h => U2GS_ChangeName
encode(#pk_U2GS_ChangeName{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_ChangeName.roleID ),
	Bin_name = write_string( P#pk_U2GS_ChangeName.name ),
	[
		<<?U2GS_ChangeName:?U16>>,
		Bin_roleID,
		Bin_name
	];

%GENERATED from file:player.h => U2GS_ChangeWingLevel
encode(#pk_U2GS_ChangeWingLevel{} = P) ->
	Bin_level = write_uint32( P#pk_U2GS_ChangeWingLevel.level ),
	[
		<<?U2GS_ChangeWingLevel:?U16>>,
		Bin_level
	];

%GENERATED from file:player.h => U2GS_ChatInfo
encode(#pk_U2GS_ChatInfo{} = P) ->
	Bin_channel = write_int8( P#pk_U2GS_ChatInfo.channel ),
	Bin_receiverID = write_uint64( P#pk_U2GS_ChatInfo.receiverID ),
	Bin_receiverName = write_string( P#pk_U2GS_ChatInfo.receiverName ),
	Bin_content = write_string( P#pk_U2GS_ChatInfo.content ),
	[
		<<?U2GS_ChatInfo:?U16>>,
		Bin_channel,
		Bin_receiverID,
		Bin_receiverName,
		Bin_content
	];

%GENERATED from file:player.h => U2GS_ChatVoice
encode(#pk_U2GS_ChatVoice{} = P) ->
	Bin_count = write_uint8( P#pk_U2GS_ChatVoice.count ),
	Bin_index = write_uint8( P#pk_U2GS_ChatVoice.index ),
	Bin_playerID = write_uint64( P#pk_U2GS_ChatVoice.playerID ),
	Bin_key = write_uint32( P#pk_U2GS_ChatVoice.key ),
	Bin_channel = write_int8( P#pk_U2GS_ChatVoice.channel ),
	Bin_data = write_array(P#pk_U2GS_ChatVoice.data, fun(X) -> write_uint8( X ) end),
	[
		<<?U2GS_ChatVoice:?U16>>,
		Bin_count,
		Bin_index,
		Bin_playerID,
		Bin_key,
		Bin_channel,
		Bin_data
	];

%GENERATED from file:player.h => U2GS_CommonditiesPush
encode(#pk_U2GS_CommonditiesPush{}) ->
	[
		<<?U2GS_CommonditiesPush:?U16>>

	];

%GENERATED from file:player.h => U2GS_CopyChat
encode(#pk_U2GS_CopyChat{}) ->
	[
		<<?U2GS_CopyChat:?U16>>

	];

%GENERATED from file:player.h => U2GS_DashTo
encode(#pk_U2GS_DashTo{} = P) ->
	Bin_posX = write_float( P#pk_U2GS_DashTo.posX ),
	Bin_posY = write_float( P#pk_U2GS_DashTo.posY ),
	[
		<<?U2GS_DashTo:?U16>>,
		Bin_posX,
		Bin_posY
	];

%GENERATED from file:player.h => U2GS_DigTransferMap
encode(#pk_U2GS_DigTransferMap{} = P) ->
	Bin_mapId = write_uint32( P#pk_U2GS_DigTransferMap.mapId ),
	Bin_waypointName = write_string( P#pk_U2GS_DigTransferMap.waypointName ),
	[
		<<?U2GS_DigTransferMap:?U16>>,
		Bin_mapId,
		Bin_waypointName
	];

%GENERATED from file:player.h => U2GS_EnterActiveMap
encode(#pk_U2GS_EnterActiveMap{} = P) ->
	Bin_npcCode = write_uint64( P#pk_U2GS_EnterActiveMap.npcCode ),
	Bin_activeID = write_uint16( P#pk_U2GS_EnterActiveMap.activeID ),
	[
		<<?U2GS_EnterActiveMap:?U16>>,
		Bin_npcCode,
		Bin_activeID
	];

%GENERATED from file:player.h => U2GS_EnterCopyMap
encode(#pk_U2GS_EnterCopyMap{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_U2GS_EnterCopyMap.copyMapID ),
	[
		<<?U2GS_EnterCopyMap:?U16>>,
		Bin_copyMapID
	];

%GENERATED from file:player.h => U2GS_EnteredMap
encode(#pk_U2GS_EnteredMap{}) ->
	[
		<<?U2GS_EnteredMap:?U16>>

	];

%GENERATED from file:player.h => U2GS_EqupmentCombin
encode(#pk_U2GS_EqupmentCombin{} = P) ->
	Bin_combinID = write_uint32( P#pk_U2GS_EqupmentCombin.combinID ),
	Bin_combinNum = write_uint32( P#pk_U2GS_EqupmentCombin.combinNum ),
	Bin_equpmentUIDList = write_array(P#pk_U2GS_EqupmentCombin.equpmentUIDList, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_EqupmentCombin:?U16>>,
		Bin_combinID,
		Bin_combinNum,
		Bin_equpmentUIDList
	];

%GENERATED from file:player.h => U2GS_EveryDayGetPower
encode(#pk_U2GS_EveryDayGetPower{} = P) ->
	Bin_getPowerNoonOrNight = write_uint8( P#pk_U2GS_EveryDayGetPower.getPowerNoonOrNight ),
	[
		<<?U2GS_EveryDayGetPower:?U16>>,
		Bin_getPowerNoonOrNight
	];

%GENERATED from file:player.h => U2GS_ExpToVigour
encode(#pk_U2GS_ExpToVigour{} = P) ->
	Bin_useExpValue = write_uint32( P#pk_U2GS_ExpToVigour.useExpValue ),
	[
		<<?U2GS_ExpToVigour:?U16>>,
		Bin_useExpValue
	];

%GENERATED from file:player.h => U2GS_GetLeavedExp
encode(#pk_U2GS_GetLeavedExp{} = P) ->
	Bin_getType = write_uint8( P#pk_U2GS_GetLeavedExp.getType ),
	[
		<<?U2GS_GetLeavedExp:?U16>>,
		Bin_getType
	];

%GENERATED from file:player.h => U2GS_GetMapLevel
encode(#pk_U2GS_GetMapLevel{}) ->
	[
		<<?U2GS_GetMapLevel:?U16>>

	];

%GENERATED from file:player.h => U2GS_GetQuestionnaireSurveyAward
encode(#pk_U2GS_GetQuestionnaireSurveyAward{}) ->
	[
		<<?U2GS_GetQuestionnaireSurveyAward:?U16>>

	];

%GENERATED from file:player.h => U2GS_GetUpdateReward
encode(#pk_U2GS_GetUpdateReward{} = P) ->
	Bin_count = write_uint8( P#pk_U2GS_GetUpdateReward.count ),
	[
		<<?U2GS_GetUpdateReward:?U16>>,
		Bin_count
	];

%GENERATED from file:player.h => U2GS_GetVipReward
encode(#pk_U2GS_GetVipReward{} = P) ->
	Bin_vipLevel = write_int16( P#pk_U2GS_GetVipReward.vipLevel ),
	[
		<<?U2GS_GetVipReward:?U16>>,
		Bin_vipLevel
	];

%GENERATED from file:player.h => U2GS_GoToExpMap
encode(#pk_U2GS_GoToExpMap{}) ->
	[
		<<?U2GS_GoToExpMap:?U16>>

	];

%GENERATED from file:player.h => U2GS_HeartBeat
encode(#pk_U2GS_HeartBeat{} = P) ->
	Bin_time = write_uint32( P#pk_U2GS_HeartBeat.time ),
	Bin_version = write_uint32( P#pk_U2GS_HeartBeat.version ),
	[
		<<?U2GS_HeartBeat:?U16>>,
		Bin_time,
		Bin_version
	];

%GENERATED from file:player.h => U2GS_HeartBeatReal
encode(#pk_U2GS_HeartBeatReal{} = P) ->
	Bin_time = write_uint32( P#pk_U2GS_HeartBeatReal.time ),
	[
		<<?U2GS_HeartBeatReal:?U16>>,
		Bin_time
	];

%GENERATED from file:player.h => U2GS_HisoryForce_Request
encode(#pk_U2GS_HisoryForce_Request{}) ->
	[
		<<?U2GS_HisoryForce_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_Join_lsbattlefield
encode(#pk_U2GS_Join_lsbattlefield{}) ->
	[
		<<?U2GS_Join_lsbattlefield:?U16>>

	];

%GENERATED from file:player.h => U2GS_KillValueRequest
encode(#pk_U2GS_KillValueRequest{}) ->
	[
		<<?U2GS_KillValueRequest:?U16>>

	];

%GENERATED from file:player.h => U2GS_LBS_BesideRole_Request
encode(#pk_U2GS_LBS_BesideRole_Request{} = P) ->
	Bin_lat = write_float( P#pk_U2GS_LBS_BesideRole_Request.lat ),
	Bin_lng = write_float( P#pk_U2GS_LBS_BesideRole_Request.lng ),
	Bin_dist = write_float( P#pk_U2GS_LBS_BesideRole_Request.dist ),
	[
		<<?U2GS_LBS_BesideRole_Request:?U16>>,
		Bin_lat,
		Bin_lng,
		Bin_dist
	];

%GENERATED from file:player.h => U2GS_LBS_Request
encode(#pk_U2GS_LBS_Request{} = P) ->
	Bin_lat = write_float( P#pk_U2GS_LBS_Request.lat ),
	Bin_lng = write_float( P#pk_U2GS_LBS_Request.lng ),
	[
		<<?U2GS_LBS_Request:?U16>>,
		Bin_lat,
		Bin_lng
	];

%GENERATED from file:player.h => U2GS_LeaveCopyMap
encode(#pk_U2GS_LeaveCopyMap{} = P) ->
	Bin_type = write_uint16( P#pk_U2GS_LeaveCopyMap.type ),
	[
		<<?U2GS_LeaveCopyMap:?U16>>,
		Bin_type
	];

%GENERATED from file:player.h => U2GS_LoadedMap
encode(#pk_U2GS_LoadedMap{}) ->
	[
		<<?U2GS_LoadedMap:?U16>>

	];

%GENERATED from file:player.h => U2GS_LotteryForTowerInfo
encode(#pk_U2GS_LotteryForTowerInfo{}) ->
	[
		<<?U2GS_LotteryForTowerInfo:?U16>>

	];

%GENERATED from file:player.h => U2GS_LotteryForTowerRandonAward
encode(#pk_U2GS_LotteryForTowerRandonAward{} = P) ->
	Bin_randomNumber = write_uint32( P#pk_U2GS_LotteryForTowerRandonAward.randomNumber ),
	Bin_isShowPanel = write_bool( P#pk_U2GS_LotteryForTowerRandonAward.isShowPanel ),
	[
		<<?U2GS_LotteryForTowerRandonAward:?U16>>,
		Bin_randomNumber,
		Bin_isShowPanel
	];

%GENERATED from file:player.h => U2GS_MoneyTree
encode(#pk_U2GS_MoneyTree{}) ->
	[
		<<?U2GS_MoneyTree:?U16>>

	];

%GENERATED from file:player.h => U2GS_MonsterBookReward_Request
encode(#pk_U2GS_MonsterBookReward_Request{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_MonsterBookReward_Request.id ),
	[
		<<?U2GS_MonsterBookReward_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => U2GS_MonsterBookSnap_Request
encode(#pk_U2GS_MonsterBookSnap_Request{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_MonsterBookSnap_Request.id ),
	[
		<<?U2GS_MonsterBookSnap_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => U2GS_MonsterBookUnlock_Request
encode(#pk_U2GS_MonsterBookUnlock_Request{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_MonsterBookUnlock_Request.id ),
	[
		<<?U2GS_MonsterBookUnlock_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => U2GS_MonsterBook_Request
encode(#pk_U2GS_MonsterBook_Request{}) ->
	[
		<<?U2GS_MonsterBook_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_MonthCardGettingEvent
encode(#pk_U2GS_MonthCardGettingEvent{} = P) ->
	Bin_type = write_uint32( P#pk_U2GS_MonthCardGettingEvent.type ),
	[
		<<?U2GS_MonthCardGettingEvent:?U16>>,
		Bin_type
	];

%GENERATED from file:player.h => U2GS_MoveTo
encode(#pk_U2GS_MoveTo{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_MoveTo.code ),
	Bin_posX = write_float( P#pk_U2GS_MoveTo.posX ),
	Bin_posY = write_float( P#pk_U2GS_MoveTo.posY ),
	Bin_posInfos = write_array(P#pk_U2GS_MoveTo.posInfos, fun(X) -> encode_PosInfo( X ) end),
	[
		<<?U2GS_MoveTo:?U16>>,
		Bin_code,
		Bin_posX,
		Bin_posY,
		Bin_posInfos
	];

%GENERATED from file:player.h => U2GS_NoticeRequest
encode(#pk_U2GS_NoticeRequest{} = P) ->
	Bin_md5 = write_string( P#pk_U2GS_NoticeRequest.md5 ),
	[
		<<?U2GS_NoticeRequest:?U16>>,
		Bin_md5
	];

%GENERATED from file:player.h => U2GS_PlayerAwakenUseItem
encode(#pk_U2GS_PlayerAwakenUseItem{} = P) ->
	Bin_num = write_uint16( P#pk_U2GS_PlayerAwakenUseItem.num ),
	[
		<<?U2GS_PlayerAwakenUseItem:?U16>>,
		Bin_num
	];

%GENERATED from file:player.h => U2GS_PlayerCoupleBack
encode(#pk_U2GS_PlayerCoupleBack{} = P) ->
	Bin_cbType = write_uint32( P#pk_U2GS_PlayerCoupleBack.cbType ),
	Bin_cbContent = write_string( P#pk_U2GS_PlayerCoupleBack.cbContent ),
	[
		<<?U2GS_PlayerCoupleBack:?U16>>,
		Bin_cbType,
		Bin_cbContent
	];

%GENERATED from file:player.h => U2GS_PlotDialogueEnd
encode(#pk_U2GS_PlotDialogueEnd{}) ->
	[
		<<?U2GS_PlotDialogueEnd:?U16>>

	];

%GENERATED from file:player.h => U2GS_QueryTargetObject
encode(#pk_U2GS_QueryTargetObject{} = P) ->
	Bin_targetCode = write_uint64( P#pk_U2GS_QueryTargetObject.targetCode ),
	[
		<<?U2GS_QueryTargetObject:?U16>>,
		Bin_targetCode
	];

%GENERATED from file:player.h => U2GS_RaceApply
encode(#pk_U2GS_RaceApply{}) ->
	[
		<<?U2GS_RaceApply:?U16>>

	];

%GENERATED from file:player.h => U2GS_RaceApply_Request
encode(#pk_U2GS_RaceApply_Request{}) ->
	[
		<<?U2GS_RaceApply_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_RaceCancel
encode(#pk_U2GS_RaceCancel{}) ->
	[
		<<?U2GS_RaceCancel:?U16>>

	];

%GENERATED from file:player.h => U2GS_RaceCancel_Request
encode(#pk_U2GS_RaceCancel_Request{}) ->
	[
		<<?U2GS_RaceCancel_Request:?U16>>

	];

%GENERATED from file:player.h => U2GS_RaceInviteList
encode(#pk_U2GS_RaceInviteList{}) ->
	[
		<<?U2GS_RaceInviteList:?U16>>

	];

%GENERATED from file:player.h => U2GS_RaceInvite_A2S
encode(#pk_U2GS_RaceInvite_A2S{} = P) ->
	Bin_id = write_uint64( P#pk_U2GS_RaceInvite_A2S.id ),
	[
		<<?U2GS_RaceInvite_A2S:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => U2GS_RaceInvite_B2S
encode(#pk_U2GS_RaceInvite_B2S{} = P) ->
	Bin_isAgree = write_bool( P#pk_U2GS_RaceInvite_B2S.isAgree ),
	Bin_id = write_uint64( P#pk_U2GS_RaceInvite_B2S.id ),
	Bin_petID = write_uint16( P#pk_U2GS_RaceInvite_B2S.petID ),
	[
		<<?U2GS_RaceInvite_B2S:?U16>>,
		Bin_isAgree,
		Bin_id,
		Bin_petID
	];

%GENERATED from file:player.h => U2GS_RaceMapItem_Request
encode(#pk_U2GS_RaceMapItem_Request{} = P) ->
	Bin_itemID = write_uint8( P#pk_U2GS_RaceMapItem_Request.itemID ),
	[
		<<?U2GS_RaceMapItem_Request:?U16>>,
		Bin_itemID
	];

%GENERATED from file:player.h => U2GS_RaceSelectPet
encode(#pk_U2GS_RaceSelectPet{} = P) ->
	Bin_petID = write_uint16( P#pk_U2GS_RaceSelectPet.petID ),
	[
		<<?U2GS_RaceSelectPet:?U16>>,
		Bin_petID
	];

%GENERATED from file:player.h => U2GS_RecClientEvent
encode(#pk_U2GS_RecClientEvent{} = P) ->
	Bin_eventID = write_uint32( P#pk_U2GS_RecClientEvent.eventID ),
	Bin_eventTime = write_uint32( P#pk_U2GS_RecClientEvent.eventTime ),
	Bin_eventArgs = write_string( P#pk_U2GS_RecClientEvent.eventArgs ),
	[
		<<?U2GS_RecClientEvent:?U16>>,
		Bin_eventID,
		Bin_eventTime,
		Bin_eventArgs
	];

%GENERATED from file:player.h => U2GS_ReceivePlayerLevelReward
encode(#pk_U2GS_ReceivePlayerLevelReward{} = P) ->
	Bin_level = write_uint8( P#pk_U2GS_ReceivePlayerLevelReward.level ),
	[
		<<?U2GS_ReceivePlayerLevelReward:?U16>>,
		Bin_level
	];

%GENERATED from file:player.h => U2GS_RechargeGettingEvent
encode(#pk_U2GS_RechargeGettingEvent{} = P) ->
	Bin_type = write_uint32( P#pk_U2GS_RechargeGettingEvent.type ),
	Bin_grade = write_uint32( P#pk_U2GS_RechargeGettingEvent.grade ),
	[
		<<?U2GS_RechargeGettingEvent:?U16>>,
		Bin_type,
		Bin_grade
	];

%GENERATED from file:player.h => U2GS_ReconnectLoginRequest
encode(#pk_U2GS_ReconnectLoginRequest{} = P) ->
	Bin_accountID = write_uint64( P#pk_U2GS_ReconnectLoginRequest.accountID ),
	Bin_roleID = write_uint64( P#pk_U2GS_ReconnectLoginRequest.roleID ),
	Bin_key = write_string( P#pk_U2GS_ReconnectLoginRequest.key ),
	Bin_protocolVer = write_int32( P#pk_U2GS_ReconnectLoginRequest.protocolVer ),
	[
		<<?U2GS_ReconnectLoginRequest:?U16>>,
		Bin_accountID,
		Bin_roleID,
		Bin_key,
		Bin_protocolVer
	];

%GENERATED from file:player.h => U2GS_RenewChangeCarrer
encode(#pk_U2GS_RenewChangeCarrer{} = P) ->
	Bin_newCareer = write_uint32( P#pk_U2GS_RenewChangeCarrer.newCareer ),
	[
		<<?U2GS_RenewChangeCarrer:?U16>>,
		Bin_newCareer
	];

%GENERATED from file:player.h => U2GS_ReqChatVoice
encode(#pk_U2GS_ReqChatVoice{} = P) ->
	Bin_playerID = write_uint64( P#pk_U2GS_ReqChatVoice.playerID ),
	Bin_key = write_uint32( P#pk_U2GS_ReqChatVoice.key ),
	[
		<<?U2GS_ReqChatVoice:?U16>>,
		Bin_playerID,
		Bin_key
	];

%GENERATED from file:player.h => U2GS_RequestCreatePlayer
encode(#pk_U2GS_RequestCreatePlayer{} = P) ->
	Bin_name = write_string( P#pk_U2GS_RequestCreatePlayer.name ),
	Bin_camp = write_int8( P#pk_U2GS_RequestCreatePlayer.camp ),
	Bin_career = write_uint32( P#pk_U2GS_RequestCreatePlayer.career ),
	Bin_race = write_int8( P#pk_U2GS_RequestCreatePlayer.race ),
	Bin_sex = write_int8( P#pk_U2GS_RequestCreatePlayer.sex ),
	Bin_head = write_int32( P#pk_U2GS_RequestCreatePlayer.head ),
	[
		<<?U2GS_RequestCreatePlayer:?U16>>,
		Bin_name,
		Bin_camp,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head
	];

%GENERATED from file:player.h => U2GS_RequestDeletePlayer
encode(#pk_U2GS_RequestDeletePlayer{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_RequestDeletePlayer.roleID ),
	[
		<<?U2GS_RequestDeletePlayer:?U16>>,
		Bin_roleID
	];

%GENERATED from file:player.h => U2GS_RequestEnterMapLine
encode(#pk_U2GS_RequestEnterMapLine{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_RequestEnterMapLine.mapID ),
	Bin_lineID = write_uint32( P#pk_U2GS_RequestEnterMapLine.lineID ),
	[
		<<?U2GS_RequestEnterMapLine:?U16>>,
		Bin_mapID,
		Bin_lineID
	];

%GENERATED from file:player.h => U2GS_RequestGoddessCode
encode(#pk_U2GS_RequestGoddessCode{}) ->
	[
		<<?U2GS_RequestGoddessCode:?U16>>

	];

%GENERATED from file:player.h => U2GS_RequestLogin
encode(#pk_U2GS_RequestLogin{} = P) ->
	Bin_accountID = write_uint64( P#pk_U2GS_RequestLogin.accountID ),
	Bin_key = write_string( P#pk_U2GS_RequestLogin.key ),
	Bin_protocolVer = write_int32( P#pk_U2GS_RequestLogin.protocolVer ),
	[
		<<?U2GS_RequestLogin:?U16>>,
		Bin_accountID,
		Bin_key,
		Bin_protocolVer
	];

%GENERATED from file:player.h => U2GS_RequestMapLineList
encode(#pk_U2GS_RequestMapLineList{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_RequestMapLineList.mapID ),
	[
		<<?U2GS_RequestMapLineList:?U16>>,
		Bin_mapID
	];

%GENERATED from file:player.h => U2GS_RequestObjInfo
encode(#pk_U2GS_RequestObjInfo{} = P) ->
	Bin_obj_type = write_int8( P#pk_U2GS_RequestObjInfo.obj_type ),
	Bin_codes = write_array(P#pk_U2GS_RequestObjInfo.codes, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_RequestObjInfo:?U16>>,
		Bin_obj_type,
		Bin_codes
	];

%GENERATED from file:player.h => U2GS_RequestRecharge
encode(#pk_U2GS_RequestRecharge{} = P) ->
	Bin_funcellAccessToken = write_string( P#pk_U2GS_RequestRecharge.funcellAccessToken ),
	Bin_funcellCilentID = write_string( P#pk_U2GS_RequestRecharge.funcellCilentID ),
	Bin_funcellOrderID = write_string( P#pk_U2GS_RequestRecharge.funcellOrderID ),
	Bin_extArgs = write_string( P#pk_U2GS_RequestRecharge.extArgs ),
	[
		<<?U2GS_RequestRecharge:?U16>>,
		Bin_funcellAccessToken,
		Bin_funcellCilentID,
		Bin_funcellOrderID,
		Bin_extArgs
	];

%GENERATED from file:player.h => U2GS_RequestRechargeHasGiftIDList
encode(#pk_U2GS_RequestRechargeHasGiftIDList{}) ->
	[
		<<?U2GS_RequestRechargeHasGiftIDList:?U16>>

	];

%GENERATED from file:player.h => U2GS_RequestRevive
encode(#pk_U2GS_RequestRevive{} = P) ->
	Bin_reviveType = write_uint32( P#pk_U2GS_RequestRevive.reviveType ),
	[
		<<?U2GS_RequestRevive:?U16>>,
		Bin_reviveType
	];

%GENERATED from file:player.h => U2GS_RequestTargetCopyMapScore
encode(#pk_U2GS_RequestTargetCopyMapScore{} = P) ->
	Bin_targetCopyMapID = write_uint32( P#pk_U2GS_RequestTargetCopyMapScore.targetCopyMapID ),
	[
		<<?U2GS_RequestTargetCopyMapScore:?U16>>,
		Bin_targetCopyMapID
	];

%GENERATED from file:player.h => U2GS_ResetCopyMap
encode(#pk_U2GS_ResetCopyMap{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_U2GS_ResetCopyMap.copyMapID ),
	[
		<<?U2GS_ResetCopyMap:?U16>>,
		Bin_copyMapID
	];

%GENERATED from file:player.h => U2GS_ResetPosToRevivePt
encode(#pk_U2GS_ResetPosToRevivePt{}) ->
	[
		<<?U2GS_ResetPosToRevivePt:?U16>>

	];

%GENERATED from file:player.h => U2GS_ResetRoleAwake
encode(#pk_U2GS_ResetRoleAwake{}) ->
	[
		<<?U2GS_ResetRoleAwake:?U16>>

	];

%GENERATED from file:player.h => U2GS_RoleAwakeing
encode(#pk_U2GS_RoleAwakeing{} = P) ->
	Bin_stage = write_uint8( P#pk_U2GS_RoleAwakeing.stage ),
	Bin_stone = write_uint8( P#pk_U2GS_RoleAwakeing.stone ),
	Bin_awakeParam = write_uint32( P#pk_U2GS_RoleAwakeing.awakeParam ),
	[
		<<?U2GS_RoleAwakeing:?U16>>,
		Bin_stage,
		Bin_stone,
		Bin_awakeParam
	];

%GENERATED from file:player.h => U2GS_SelPlayerEnterGame
encode(#pk_U2GS_SelPlayerEnterGame{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_SelPlayerEnterGame.roleID ),
	[
		<<?U2GS_SelPlayerEnterGame:?U16>>,
		Bin_roleID
	];

%GENERATED from file:player.h => U2GS_SelectTarget
encode(#pk_U2GS_SelectTarget{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_SelectTarget.code ),
	[
		<<?U2GS_SelectTarget:?U16>>,
		Bin_code
	];

%GENERATED from file:player.h => U2GS_SessionKeyAck
encode(#pk_U2GS_SessionKeyAck{} = P) ->
	Bin_oldKey = write_string( P#pk_U2GS_SessionKeyAck.oldKey ),
	Bin_newKey = write_string( P#pk_U2GS_SessionKeyAck.newKey ),
	[
		<<?U2GS_SessionKeyAck:?U16>>,
		Bin_oldKey,
		Bin_newKey
	];

%GENERATED from file:player.h => U2GS_SevenDayAimReward_Request
encode(#pk_U2GS_SevenDayAimReward_Request{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_SevenDayAimReward_Request.id ),
	[
		<<?U2GS_SevenDayAimReward_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => U2GS_ShowAction
encode(#pk_U2GS_ShowAction{} = P) ->
	Bin_actionIndex = write_uint32( P#pk_U2GS_ShowAction.actionIndex ),
	[
		<<?U2GS_ShowAction:?U16>>,
		Bin_actionIndex
	];

%GENERATED from file:player.h => U2GS_ShowHeadEmoticonIcon
encode(#pk_U2GS_ShowHeadEmoticonIcon{} = P) ->
	Bin_iconIndex = write_uint32( P#pk_U2GS_ShowHeadEmoticonIcon.iconIndex ),
	[
		<<?U2GS_ShowHeadEmoticonIcon:?U16>>,
		Bin_iconIndex
	];

%GENERATED from file:player.h => U2GS_StartMeditation
encode(#pk_U2GS_StartMeditation{} = P) ->
	Bin_istart = write_bool( P#pk_U2GS_StartMeditation.istart ),
	[
		<<?U2GS_StartMeditation:?U16>>,
		Bin_istart
	];

%GENERATED from file:player.h => U2GS_StopMove
encode(#pk_U2GS_StopMove{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_StopMove.code ),
	Bin_posX = write_float( P#pk_U2GS_StopMove.posX ),
	Bin_posY = write_float( P#pk_U2GS_StopMove.posY ),
	[
		<<?U2GS_StopMove:?U16>>,
		Bin_code,
		Bin_posX,
		Bin_posY
	];

%GENERATED from file:player.h => U2GS_StopTheAwakeBuff
encode(#pk_U2GS_StopTheAwakeBuff{}) ->
	[
		<<?U2GS_StopTheAwakeBuff:?U16>>

	];

%GENERATED from file:player.h => U2GS_Telesport
encode(#pk_U2GS_Telesport{} = P) ->
	Bin_x = write_float( P#pk_U2GS_Telesport.x ),
	Bin_y = write_float( P#pk_U2GS_Telesport.y ),
	[
		<<?U2GS_Telesport:?U16>>,
		Bin_x,
		Bin_y
	];

%GENERATED from file:player.h => U2GS_ThirtyDayLoginGift_Request
encode(#pk_U2GS_ThirtyDayLoginGift_Request{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_ThirtyDayLoginGift_Request.id ),
	[
		<<?U2GS_ThirtyDayLoginGift_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:player.h => U2GS_Transfer2NewPos
encode(#pk_U2GS_Transfer2NewPos{} = P) ->
	Bin_mapID = write_uint32( P#pk_U2GS_Transfer2NewPos.mapID ),
	Bin_x = write_float( P#pk_U2GS_Transfer2NewPos.x ),
	Bin_y = write_float( P#pk_U2GS_Transfer2NewPos.y ),
	[
		<<?U2GS_Transfer2NewPos:?U16>>,
		Bin_mapID,
		Bin_x,
		Bin_y
	];

%GENERATED from file:player.h => U2GS_TransferMap
encode(#pk_U2GS_TransferMap{} = P) ->
	Bin_mapId = write_uint32( P#pk_U2GS_TransferMap.mapId ),
	Bin_waypointName = write_string( P#pk_U2GS_TransferMap.waypointName ),
	[
		<<?U2GS_TransferMap:?U16>>,
		Bin_mapId,
		Bin_waypointName
	];

%GENERATED from file:player.h => U2GS_UseTheAwakeBuff
encode(#pk_U2GS_UseTheAwakeBuff{}) ->
	[
		<<?U2GS_UseTheAwakeBuff:?U16>>

	];

%GENERATED from file:player.h => U2GS_WingRise
encode(#pk_U2GS_WingRise{} = P) ->
	Bin_itemID = write_uint32( P#pk_U2GS_WingRise.itemID ),
	Bin_itemNum = write_uint32( P#pk_U2GS_WingRise.itemNum ),
	Bin_firstBind = write_uint8( P#pk_U2GS_WingRise.firstBind ),
	[
		<<?U2GS_WingRise:?U16>>,
		Bin_itemID,
		Bin_itemNum,
		Bin_firstBind
	];

%GENERATED from file:player.h => U2GS_WingRiseOneTouch
encode(#pk_U2GS_WingRiseOneTouch{}) ->
	[
		<<?U2GS_WingRiseOneTouch:?U16>>

	];

%GENERATED from file:player.h => U2GS_XmlNoticeRequest
encode(#pk_U2GS_XmlNoticeRequest{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_XmlNoticeRequest.type ),
	Bin_sign = write_string( P#pk_U2GS_XmlNoticeRequest.sign ),
	[
		<<?U2GS_XmlNoticeRequest:?U16>>,
		Bin_type,
		Bin_sign
	];

%GENERATED from file:player.h => U2GS_buy_action_count
encode(#pk_U2GS_buy_action_count{} = P) ->
	Bin_copyMapID = write_uint16( P#pk_U2GS_buy_action_count.copyMapID ),
	[
		<<?U2GS_buy_action_count:?U16>>,
		Bin_copyMapID
	];

%GENERATED from file:player.h => U2GS_buy_action_point
encode(#pk_U2GS_buy_action_point{}) ->
	[
		<<?U2GS_buy_action_point:?U16>>

	];

%GENERATED from file:player.h => U2GS_getFriendPos
encode(#pk_U2GS_getFriendPos{} = P) ->
	Bin_friendID = write_uint64( P#pk_U2GS_getFriendPos.friendID ),
	[
		<<?U2GS_getFriendPos:?U16>>,
		Bin_friendID
	];

%GENERATED from file:player.h => U2GS_get_action_point_info
encode(#pk_U2GS_get_action_point_info{}) ->
	[
		<<?U2GS_get_action_point_info:?U16>>

	];

%GENERATED from file:player.h => U2GS_get_copy_map_destory_time
encode(#pk_U2GS_get_copy_map_destory_time{}) ->
	[
		<<?U2GS_get_copy_map_destory_time:?U16>>

	];

%GENERATED from file:player.h => U2GS_get_lottery_sys_info
encode(#pk_U2GS_get_lottery_sys_info{}) ->
	[
		<<?U2GS_get_lottery_sys_info:?U16>>

	];

%GENERATED from file:player.h => U2GS_lottery_start
encode(#pk_U2GS_lottery_start{} = P) ->
	Bin_type = write_uint32( P#pk_U2GS_lottery_start.type ),
	[
		<<?U2GS_lottery_start:?U16>>,
		Bin_type
	];

%GENERATED from file:player.h => U2GS_save_current_guide_id
encode(#pk_U2GS_save_current_guide_id{} = P) ->
	Bin_guideID = write_uint16( P#pk_U2GS_save_current_guide_id.guideID ),
	[
		<<?U2GS_save_current_guide_id:?U16>>,
		Bin_guideID
	];

%GENERATED from file:player2.h => GS2U_GetPlayerInitDataEnd
encode(#pk_GS2U_GetPlayerInitDataEnd{}) ->
	[
		<<?GS2U_GetPlayerInitDataEnd:?U16>>

	];

%GENERATED from file:player2.h => GS2U_GotoNewMap
encode(#pk_GS2U_GotoNewMap{} = P) ->
	Bin_map_id = write_uint16( P#pk_GS2U_GotoNewMap.map_id ),
	Bin_x = write_float( P#pk_GS2U_GotoNewMap.x ),
	Bin_y = write_float( P#pk_GS2U_GotoNewMap.y ),
	[
		<<?GS2U_GotoNewMap:?U16>>,
		Bin_map_id,
		Bin_x,
		Bin_y
	];

%GENERATED from file:player2.h => GS2U_HearBeat
encode(#pk_GS2U_HearBeat{} = P) ->
	Bin_now = write_uint32( P#pk_GS2U_HearBeat.now ),
	[
		<<?GS2U_HearBeat:?U16>>,
		Bin_now
	];

%GENERATED from file:player2.h => GS2U_KickByServer
encode(#pk_GS2U_KickByServer{} = P) ->
	Bin_reason = write_string( P#pk_GS2U_KickByServer.reason ),
	[
		<<?GS2U_KickByServer:?U16>>,
		Bin_reason
	];

%GENERATED from file:player2.h => GS2U_PlayerInitBase
encode(#pk_GS2U_PlayerInitBase{} = P) ->
	Bin_uid = write_uint64( P#pk_GS2U_PlayerInitBase.uid ),
	Bin_name = write_string( P#pk_GS2U_PlayerInitBase.name ),
	Bin_level = write_int32( P#pk_GS2U_PlayerInitBase.level ),
	Bin_camp = write_int32( P#pk_GS2U_PlayerInitBase.camp ),
	Bin_race = write_int32( P#pk_GS2U_PlayerInitBase.race ),
	Bin_career = write_uint32( P#pk_GS2U_PlayerInitBase.career ),
	Bin_sex = write_int32( P#pk_GS2U_PlayerInitBase.sex ),
	Bin_head = write_int32( P#pk_GS2U_PlayerInitBase.head ),
	Bin_mapID = write_uint32( P#pk_GS2U_PlayerInitBase.mapID ),
	Bin_combat_props = write_array(P#pk_GS2U_PlayerInitBase.combat_props, fun(X) -> write_int32( X ) end),
	Bin_skill_list = write_array(P#pk_GS2U_PlayerInitBase.skill_list, fun(X) -> encode_SkillInfo( X ) end),
	[
		<<?GS2U_PlayerInitBase:?U16>>,
		Bin_uid,
		Bin_name,
		Bin_level,
		Bin_camp,
		Bin_race,
		Bin_career,
		Bin_sex,
		Bin_head,
		Bin_mapID,
		Bin_combat_props,
		Bin_skill_list
	];

%GENERATED from file:player2.h => GS2U_RemoteMonster
encode(#pk_GS2U_RemoteMonster{} = P) ->
	Bin_uid = write_uint64( P#pk_GS2U_RemoteMonster.uid ),
	Bin_did = write_uint32( P#pk_GS2U_RemoteMonster.did ),
	Bin_level = write_int32( P#pk_GS2U_RemoteMonster.level ),
	Bin_hp_percent = write_int32( P#pk_GS2U_RemoteMonster.hp_percent ),
	Bin_cur_x = write_float( P#pk_GS2U_RemoteMonster.cur_x ),
	Bin_cur_y = write_float( P#pk_GS2U_RemoteMonster.cur_y ),
	[
		<<?GS2U_RemoteMonster:?U16>>,
		Bin_uid,
		Bin_did,
		Bin_level,
		Bin_hp_percent,
		Bin_cur_x,
		Bin_cur_y
	];

%GENERATED from file:player2.h => GS2U_RemoteNpc
encode(#pk_GS2U_RemoteNpc{} = P) ->
	Bin_uid = write_uint64( P#pk_GS2U_RemoteNpc.uid ),
	Bin_did = write_uint32( P#pk_GS2U_RemoteNpc.did ),
	Bin_level = write_int32( P#pk_GS2U_RemoteNpc.level ),
	Bin_cur_x = write_float( P#pk_GS2U_RemoteNpc.cur_x ),
	Bin_cur_y = write_float( P#pk_GS2U_RemoteNpc.cur_y ),
	[
		<<?GS2U_RemoteNpc:?U16>>,
		Bin_uid,
		Bin_did,
		Bin_level,
		Bin_cur_x,
		Bin_cur_y
	];

%GENERATED from file:player2.h => GS2U_RemotePet
encode(#pk_GS2U_RemotePet{} = P) ->
	Bin_uid = write_uint64( P#pk_GS2U_RemotePet.uid ),
	Bin_owner = write_uint64( P#pk_GS2U_RemotePet.owner ),
	Bin_did = write_uint32( P#pk_GS2U_RemotePet.did ),
	Bin_level = write_int32( P#pk_GS2U_RemotePet.level ),
	Bin_cur_x = write_float( P#pk_GS2U_RemotePet.cur_x ),
	Bin_cur_y = write_float( P#pk_GS2U_RemotePet.cur_y ),
	[
		<<?GS2U_RemotePet:?U16>>,
		Bin_uid,
		Bin_owner,
		Bin_did,
		Bin_level,
		Bin_cur_x,
		Bin_cur_y
	];

%GENERATED from file:player2.h => GS2U_RemotePlayer
encode(#pk_GS2U_RemotePlayer{} = P) ->
	Bin_uid = write_uint64( P#pk_GS2U_RemotePlayer.uid ),
	Bin_level = write_int32( P#pk_GS2U_RemotePlayer.level ),
	Bin_name = write_string( P#pk_GS2U_RemotePlayer.name ),
	Bin_career = write_int32( P#pk_GS2U_RemotePlayer.career ),
	Bin_race = write_int32( P#pk_GS2U_RemotePlayer.race ),
	Bin_hp_percent = write_int32( P#pk_GS2U_RemotePlayer.hp_percent ),
	Bin_cur_x = write_float( P#pk_GS2U_RemotePlayer.cur_x ),
	Bin_cur_y = write_float( P#pk_GS2U_RemotePlayer.cur_y ),
	[
		<<?GS2U_RemotePlayer:?U16>>,
		Bin_uid,
		Bin_level,
		Bin_name,
		Bin_career,
		Bin_race,
		Bin_hp_percent,
		Bin_cur_x,
		Bin_cur_y
	];

%GENERATED from file:player2.h => GS2U_RemoveRemote
encode(#pk_GS2U_RemoveRemote{} = P) ->
	Bin_uid_list = write_array(P#pk_GS2U_RemoveRemote.uid_list, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_RemoveRemote:?U16>>,
		Bin_uid_list
	];

%GENERATED from file:player2.h => GS2U_SyncStand
encode(#pk_GS2U_SyncStand{} = P) ->
	Bin_uid = write_uint64( P#pk_GS2U_SyncStand.uid ),
	Bin_cur_x = write_float( P#pk_GS2U_SyncStand.cur_x ),
	Bin_cur_y = write_float( P#pk_GS2U_SyncStand.cur_y ),
	[
		<<?GS2U_SyncStand:?U16>>,
		Bin_uid,
		Bin_cur_x,
		Bin_cur_y
	];

%GENERATED from file:player2.h => GS2U_SyncWalk
encode(#pk_GS2U_SyncWalk{} = P) ->
	Bin_uid = write_uint64( P#pk_GS2U_SyncWalk.uid ),
	Bin_src_x = write_float( P#pk_GS2U_SyncWalk.src_x ),
	Bin_src_y = write_float( P#pk_GS2U_SyncWalk.src_y ),
	Bin_dst_x = write_float( P#pk_GS2U_SyncWalk.dst_x ),
	Bin_dst_y = write_float( P#pk_GS2U_SyncWalk.dst_y ),
	Bin_move_time = write_int32( P#pk_GS2U_SyncWalk.move_time ),
	Bin_speed = write_float( P#pk_GS2U_SyncWalk.speed ),
	[
		<<?GS2U_SyncWalk:?U16>>,
		Bin_uid,
		Bin_src_x,
		Bin_src_y,
		Bin_dst_x,
		Bin_dst_y,
		Bin_move_time,
		Bin_speed
	];

%GENERATED from file:player2.h => U2GS_ChangeMap
encode(#pk_U2GS_ChangeMap{} = P) ->
	Bin_map_id = write_uint32( P#pk_U2GS_ChangeMap.map_id ),
	Bin_x = write_float( P#pk_U2GS_ChangeMap.x ),
	Bin_y = write_float( P#pk_U2GS_ChangeMap.y ),
	[
		<<?U2GS_ChangeMap:?U16>>,
		Bin_map_id,
		Bin_x,
		Bin_y
	];

%GENERATED from file:player2.h => U2GS_ExitGame
encode(#pk_U2GS_ExitGame{}) ->
	[
		<<?U2GS_ExitGame:?U16>>

	];

%GENERATED from file:player2.h => U2GS_GetPlayerInitData
encode(#pk_U2GS_GetPlayerInitData{}) ->
	[
		<<?U2GS_GetPlayerInitData:?U16>>

	];

%GENERATED from file:player2.h => U2GS_GetRemoteObjInfo
encode(#pk_U2GS_GetRemoteObjInfo{} = P) ->
	Bin_uids = write_array(P#pk_U2GS_GetRemoteObjInfo.uids, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_GetRemoteObjInfo:?U16>>,
		Bin_uids
	];

%GENERATED from file:player2.h => U2GS_HearBeat
encode(#pk_U2GS_HearBeat{}) ->
	[
		<<?U2GS_HearBeat:?U16>>

	];

%GENERATED from file:player2.h => U2GS_PlayerStopWalk
encode(#pk_U2GS_PlayerStopWalk{} = P) ->
	Bin_cur_x = write_float( P#pk_U2GS_PlayerStopWalk.cur_x ),
	Bin_cur_y = write_float( P#pk_U2GS_PlayerStopWalk.cur_y ),
	[
		<<?U2GS_PlayerStopWalk:?U16>>,
		Bin_cur_x,
		Bin_cur_y
	];

%GENERATED from file:player2.h => U2GS_PlayerWalk
encode(#pk_U2GS_PlayerWalk{} = P) ->
	Bin_dst_x = write_float( P#pk_U2GS_PlayerWalk.dst_x ),
	Bin_dst_y = write_float( P#pk_U2GS_PlayerWalk.dst_y ),
	Bin_speed = write_float( P#pk_U2GS_PlayerWalk.speed ),
	[
		<<?U2GS_PlayerWalk:?U16>>,
		Bin_dst_x,
		Bin_dst_y,
		Bin_speed
	];

%GENERATED from file:rank.h => GS2U_ActivityMapRankData
encode(#pk_GS2U_ActivityMapRankData{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_ActivityMapRankData.type ),
	Bin_data = write_array(P#pk_GS2U_ActivityMapRankData.data, fun(X) -> encode_ActivityMapRankData( X ) end),
	[
		<<?GS2U_ActivityMapRankData:?U16>>,
		Bin_type,
		Bin_data
	];

%GENERATED from file:rank.h => GS2U_MyKillNumber
encode(#pk_GS2U_MyKillNumber{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_MyKillNumber.type ),
	Bin_killNumber = write_uint16( P#pk_GS2U_MyKillNumber.killNumber ),
	[
		<<?GS2U_MyKillNumber:?U16>>,
		Bin_type,
		Bin_killNumber
	];

%GENERATED from file:rank.h => GS2U_MyRankingAndDamage
encode(#pk_GS2U_MyRankingAndDamage{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_MyRankingAndDamage.type ),
	Bin_ranking = write_uint16( P#pk_GS2U_MyRankingAndDamage.ranking ),
	Bin_damage = write_uint64( P#pk_GS2U_MyRankingAndDamage.damage ),
	[
		<<?GS2U_MyRankingAndDamage:?U16>>,
		Bin_type,
		Bin_ranking,
		Bin_damage
	];

%GENERATED from file:rank.h => GS2U_RefreshRank
encode(#pk_GS2U_RefreshRank{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_RefreshRank.type ),
	[
		<<?GS2U_RefreshRank:?U16>>,
		Bin_type
	];

%GENERATED from file:rank.h => GS2U_SendCharmRankFirstData
encode(#pk_GS2U_SendCharmRankFirstData{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_SendCharmRankFirstData.roleID ),
	Bin_sb_type = write_int8( P#pk_GS2U_SendCharmRankFirstData.sb_type ),
	Bin_name = write_string( P#pk_GS2U_SendCharmRankFirstData.name ),
	Bin_playerForce = write_uint64( P#pk_GS2U_SendCharmRankFirstData.playerForce ),
	Bin_level = write_int32( P#pk_GS2U_SendCharmRankFirstData.level ),
	Bin_charm = write_uint32( P#pk_GS2U_SendCharmRankFirstData.charm ),
	Bin_sign = write_string( P#pk_GS2U_SendCharmRankFirstData.sign ),
	Bin_guildName = write_string( P#pk_GS2U_SendCharmRankFirstData.guildName ),
	[
		<<?GS2U_SendCharmRankFirstData:?U16>>,
		Bin_roleID,
		Bin_sb_type,
		Bin_name,
		Bin_playerForce,
		Bin_level,
		Bin_charm,
		Bin_sign,
		Bin_guildName
	];

%GENERATED from file:rank.h => GS2U_SendPropList
encode(#pk_GS2U_SendPropList{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_SendPropList.roleID ),
	Bin_playerCode = write_uint64( P#pk_GS2U_SendPropList.playerCode ),
	Bin_career = write_uint32( P#pk_GS2U_SendPropList.career ),
	Bin_race = write_int8( P#pk_GS2U_SendPropList.race ),
	Bin_sex = write_int8( P#pk_GS2U_SendPropList.sex ),
	Bin_head = write_int32( P#pk_GS2U_SendPropList.head ),
	Bin_wingLevel = write_int32( P#pk_GS2U_SendPropList.wingLevel ),
	Bin_fashionIDs = write_array(P#pk_GS2U_SendPropList.fashionIDs, fun(X) -> write_int32( X ) end),
	Bin_equipIDList = write_array(P#pk_GS2U_SendPropList.equipIDList, fun(X) -> encode_PlayerEquip( X ) end),
	Bin_equipLevelList = write_array(P#pk_GS2U_SendPropList.equipLevelList, fun(X) -> encode_PlayerEquipLevel( X ) end),
	[
		<<?GS2U_SendPropList:?U16>>,
		Bin_roleID,
		Bin_playerCode,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_wingLevel,
		Bin_fashionIDs,
		Bin_equipIDList,
		Bin_equipLevelList
	];

%GENERATED from file:rank.h => GS2U_SendRank
encode(#pk_GS2U_SendRank{} = P) ->
	Bin_type = write_uint8( P#pk_GS2U_SendRank.type ),
	Bin_datas = write_array(P#pk_GS2U_SendRank.datas, fun(X) -> encode_RankInfo( X ) end),
	[
		<<?GS2U_SendRank:?U16>>,
		Bin_type,
		Bin_datas
	];

%GENERATED from file:rank.h => GS2U_SendRankModelData
encode(#pk_GS2U_SendRankModelData{} = P) ->
	Bin_playerRankMoldelList = write_array(P#pk_GS2U_SendRankModelData.playerRankMoldelList, fun(X) -> encode_RankModelData( X ) end),
	[
		<<?GS2U_SendRankModelData:?U16>>,
		Bin_playerRankMoldelList
	];

%GENERATED from file:rank.h => U2GS_RequestActivityMapRank
encode(#pk_U2GS_RequestActivityMapRank{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequestActivityMapRank.type ),
	[
		<<?U2GS_RequestActivityMapRank:?U16>>,
		Bin_type
	];

%GENERATED from file:rank.h => U2GS_RequestPropList
encode(#pk_U2GS_RequestPropList{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequestPropList.type ),
	Bin_roleID = write_uint64( P#pk_U2GS_RequestPropList.roleID ),
	[
		<<?U2GS_RequestPropList:?U16>>,
		Bin_type,
		Bin_roleID
	];

%GENERATED from file:rank.h => U2GS_RequestRank
encode(#pk_U2GS_RequestRank{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequestRank.type ),
	[
		<<?U2GS_RequestRank:?U16>>,
		Bin_type
	];

%GENERATED from file:rank.h => U2GS_RequestRankAward
encode(#pk_U2GS_RequestRankAward{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_RequestRankAward.type ),
	[
		<<?U2GS_RequestRankAward:?U16>>,
		Bin_type
	];

%GENERATED from file:redenvelope.h => GS2U_RedEnvelopeHistoryAck
encode(#pk_GS2U_RedEnvelopeHistoryAck{} = P) ->
	Bin_historyList = write_array(P#pk_GS2U_RedEnvelopeHistoryAck.historyList, fun(X) -> encode_redEnvelopeHistory( X ) end),
	[
		<<?GS2U_RedEnvelopeHistoryAck:?U16>>,
		Bin_historyList
	];

%GENERATED from file:redenvelope.h => GS2U_RedEnvelopeInfoAck
encode(#pk_GS2U_RedEnvelopeInfoAck{} = P) ->
	Bin_red = encode_redEnvelopeInfo( P#pk_GS2U_RedEnvelopeInfoAck.red ),
	[
		<<?GS2U_RedEnvelopeInfoAck:?U16>>,
		Bin_red
	];

%GENERATED from file:redenvelope.h => GS2U_RedEnvelopeQuery
encode(#pk_GS2U_RedEnvelopeQuery{} = P) ->
	Bin_redEnvelopeList = write_array(P#pk_GS2U_RedEnvelopeQuery.redEnvelopeList, fun(X) -> encode_redEnvelopeBaseInfo( X ) end),
	[
		<<?GS2U_RedEnvelopeQuery:?U16>>,
		Bin_redEnvelopeList
	];

%GENERATED from file:redenvelope.h => GS2U_RobRedEnvelopeAck
encode(#pk_GS2U_RobRedEnvelopeAck{} = P) ->
	Bin_robAmount = write_uint32( P#pk_GS2U_RobRedEnvelopeAck.robAmount ),
	Bin_red = encode_redEnvelopeInfo( P#pk_GS2U_RobRedEnvelopeAck.red ),
	[
		<<?GS2U_RobRedEnvelopeAck:?U16>>,
		Bin_robAmount,
		Bin_red
	];

%GENERATED from file:redenvelope.h => U2GS_GiveUpRedEnvelope
encode(#pk_U2GS_GiveUpRedEnvelope{}) ->
	[
		<<?U2GS_GiveUpRedEnvelope:?U16>>

	];

%GENERATED from file:redenvelope.h => U2GS_RedEnvelopeHistory
encode(#pk_U2GS_RedEnvelopeHistory{}) ->
	[
		<<?U2GS_RedEnvelopeHistory:?U16>>

	];

%GENERATED from file:redenvelope.h => U2GS_RedEnvelopeInfo
encode(#pk_U2GS_RedEnvelopeInfo{} = P) ->
	Bin_redUID = write_uint64( P#pk_U2GS_RedEnvelopeInfo.redUID ),
	[
		<<?U2GS_RedEnvelopeInfo:?U16>>,
		Bin_redUID
	];

%GENERATED from file:redenvelope.h => U2GS_RedEnvelopeQuery
encode(#pk_U2GS_RedEnvelopeQuery{} = P) ->
	Bin_targetType = write_uint8( P#pk_U2GS_RedEnvelopeQuery.targetType ),
	[
		<<?U2GS_RedEnvelopeQuery:?U16>>,
		Bin_targetType
	];

%GENERATED from file:redenvelope.h => U2GS_RobRedEnvelope
encode(#pk_U2GS_RobRedEnvelope{} = P) ->
	Bin_redUID = write_uint64( P#pk_U2GS_RobRedEnvelope.redUID ),
	[
		<<?U2GS_RobRedEnvelope:?U16>>,
		Bin_redUID
	];

%GENERATED from file:redenvelope.h => U2GS_SendRedEnvelope
encode(#pk_U2GS_SendRedEnvelope{} = P) ->
	Bin_type = write_uint8( P#pk_U2GS_SendRedEnvelope.type ),
	Bin_targetType = write_uint8( P#pk_U2GS_SendRedEnvelope.targetType ),
	Bin_targetUID = write_uint64( P#pk_U2GS_SendRedEnvelope.targetUID ),
	Bin_allNumber = write_uint32( P#pk_U2GS_SendRedEnvelope.allNumber ),
	Bin_allMoney = write_uint32( P#pk_U2GS_SendRedEnvelope.allMoney ),
	Bin_luckContent = write_string( P#pk_U2GS_SendRedEnvelope.luckContent ),
	[
		<<?U2GS_SendRedEnvelope:?U16>>,
		Bin_type,
		Bin_targetType,
		Bin_targetUID,
		Bin_allNumber,
		Bin_allMoney,
		Bin_luckContent
	];

%GENERATED from file:ride.h => DeleteRide
encode(#pk_DeleteRide{} = P) ->
	Bin_npcCode = write_uint64( P#pk_DeleteRide.npcCode ),
	[
		<<?DeleteRide:?U16>>,
		Bin_npcCode
	];

%GENERATED from file:ride.h => RequestDownRide
encode(#pk_RequestDownRide{}) ->
	[
		<<?RequestDownRide:?U16>>

	];

%GENERATED from file:ride.h => RequestRecycle
encode(#pk_RequestRecycle{} = P) ->
	Bin_itemUID = write_uint64( P#pk_RequestRecycle.itemUID ),
	[
		<<?RequestRecycle:?U16>>,
		Bin_itemUID
	];

%GENERATED from file:ride.h => RequestUpRide
encode(#pk_RequestUpRide{} = P) ->
	Bin_npcCode = write_uint64( P#pk_RequestUpRide.npcCode ),
	[
		<<?RequestUpRide:?U16>>,
		Bin_npcCode
	];

%GENERATED from file:ride.h => RequestUse
encode(#pk_RequestUse{} = P) ->
	Bin_itemUID = write_uint64( P#pk_RequestUse.itemUID ),
	Bin_useLimit = write_uint8( P#pk_RequestUse.useLimit ),
	[
		<<?RequestUse:?U16>>,
		Bin_itemUID,
		Bin_useLimit
	];

%GENERATED from file:ride.h => SyncPlayerInfo
encode(#pk_SyncPlayerInfo{} = P) ->
	Bin_npcCode = write_uint64( P#pk_SyncPlayerInfo.npcCode ),
	Bin_info = encode_RidePlayerInfo( P#pk_SyncPlayerInfo.info ),
	Bin_state = write_uint8( P#pk_SyncPlayerInfo.state ),
	[
		<<?SyncPlayerInfo:?U16>>,
		Bin_npcCode,
		Bin_info,
		Bin_state
	];

%GENERATED from file:ride.h => SyncRideInfo
encode(#pk_SyncRideInfo{} = P) ->
	Bin_infos = write_array(P#pk_SyncRideInfo.infos, fun(X) -> encode_RideInfo( X ) end),
	[
		<<?SyncRideInfo:?U16>>,
		Bin_infos
	];

%GENERATED from file:ride.h => SyncRideItem
encode(#pk_SyncRideItem{} = P) ->
	Bin_items = write_array(P#pk_SyncRideItem.items, fun(X) -> encode_RideItem( X ) end),
	[
		<<?SyncRideItem:?U16>>,
		Bin_items
	];

%GENERATED from file:rune.h => DeleteRunes
encode(#pk_DeleteRunes{} = P) ->
	Bin_runeUIDS = write_array(P#pk_DeleteRunes.runeUIDS, fun(X) -> write_uint64( X ) end),
	[
		<<?DeleteRunes:?U16>>,
		Bin_runeUIDS
	];

%GENERATED from file:rune.h => GS2U_QueryRuneTipsAck
encode(#pk_GS2U_QueryRuneTipsAck{} = P) ->
	Bin_info = encode_RuneInfo( P#pk_GS2U_QueryRuneTipsAck.info ),
	[
		<<?GS2U_QueryRuneTipsAck:?U16>>,
		Bin_info
	];

%GENERATED from file:rune.h => GS2U_RPRuneInfoList
encode(#pk_GS2U_RPRuneInfoList{} = P) ->
	Bin_targetRoleID = write_uint64( P#pk_GS2U_RPRuneInfoList.targetRoleID ),
	Bin_runeList = write_array(P#pk_GS2U_RPRuneInfoList.runeList, fun(X) -> encode_RuneInfo( X ) end),
	[
		<<?GS2U_RPRuneInfoList:?U16>>,
		Bin_targetRoleID,
		Bin_runeList
	];

%GENERATED from file:rune.h => GS2U_RuneCastAck
encode(#pk_GS2U_RuneCastAck{} = P) ->
	Bin_runeInfo = encode_RuneInfo( P#pk_GS2U_RuneCastAck.runeInfo ),
	Bin_runeUIDS = write_array(P#pk_GS2U_RuneCastAck.runeUIDS, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_RuneCastAck:?U16>>,
		Bin_runeInfo,
		Bin_runeUIDS
	];

%GENERATED from file:rune.h => GS2U_RuneCastProp
encode(#pk_GS2U_RuneCastProp{} = P) ->
	Bin_flagID = write_uint64( P#pk_GS2U_RuneCastProp.flagID ),
	Bin_oldprop = encode_RuneBaseProp( P#pk_GS2U_RuneCastProp.oldprop ),
	Bin_newprop = encode_RuneBaseProp( P#pk_GS2U_RuneCastProp.newprop ),
	[
		<<?GS2U_RuneCastProp:?U16>>,
		Bin_flagID,
		Bin_oldprop,
		Bin_newprop
	];

%GENERATED from file:rune.h => GS2U_RuneCompoundAck
encode(#pk_GS2U_RuneCompoundAck{} = P) ->
	Bin_runeList = write_array(P#pk_GS2U_RuneCompoundAck.runeList, fun(X) -> encode_RuneInfo( X ) end),
	Bin_isOneKeyCompound = write_bool( P#pk_GS2U_RuneCompoundAck.isOneKeyCompound ),
	[
		<<?GS2U_RuneCompoundAck:?U16>>,
		Bin_runeList,
		Bin_isOneKeyCompound
	];

%GENERATED from file:rune.h => GS2U_RuneEmbedOffAck
encode(#pk_GS2U_RuneEmbedOffAck{} = P) ->
	Bin_runeList = write_array(P#pk_GS2U_RuneEmbedOffAck.runeList, fun(X) -> encode_RuneInfo( X ) end),
	[
		<<?GS2U_RuneEmbedOffAck:?U16>>,
		Bin_runeList
	];

%GENERATED from file:rune.h => GS2U_RuneEmbedOnAck
encode(#pk_GS2U_RuneEmbedOnAck{} = P) ->
	Bin_targetID = write_uint32( P#pk_GS2U_RuneEmbedOnAck.targetID ),
	Bin_runeList = write_array(P#pk_GS2U_RuneEmbedOnAck.runeList, fun(X) -> encode_RuneInfo( X ) end),
	[
		<<?GS2U_RuneEmbedOnAck:?U16>>,
		Bin_targetID,
		Bin_runeList
	];

%GENERATED from file:rune.h => GS2U_RuneFuseAck
encode(#pk_GS2U_RuneFuseAck{} = P) ->
	Bin_runeInfo = encode_RuneInfo( P#pk_GS2U_RuneFuseAck.runeInfo ),
	Bin_runeUIDS = write_array(P#pk_GS2U_RuneFuseAck.runeUIDS, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_RuneFuseAck:?U16>>,
		Bin_runeInfo,
		Bin_runeUIDS
	];

%GENERATED from file:rune.h => GS2U_RuneGrid
encode(#pk_GS2U_RuneGrid{} = P) ->
	Bin_ownerID = write_uint8( P#pk_GS2U_RuneGrid.ownerID ),
	Bin_cur = write_uint16( P#pk_GS2U_RuneGrid.cur ),
	Bin_max = write_uint16( P#pk_GS2U_RuneGrid.max ),
	[
		<<?GS2U_RuneGrid:?U16>>,
		Bin_ownerID,
		Bin_cur,
		Bin_max
	];

%GENERATED from file:rune.h => GS2U_RuneInfoList
encode(#pk_GS2U_RuneInfoList{} = P) ->
	Bin_runeList = write_array(P#pk_GS2U_RuneInfoList.runeList, fun(X) -> encode_RuneInfo( X ) end),
	[
		<<?GS2U_RuneInfoList:?U16>>,
		Bin_runeList
	];

%GENERATED from file:rune.h => GS2U_RuneMeltAck
encode(#pk_GS2U_RuneMeltAck{} = P) ->
	Bin_runeInfo = encode_RuneInfo( P#pk_GS2U_RuneMeltAck.runeInfo ),
	[
		<<?GS2U_RuneMeltAck:?U16>>,
		Bin_runeInfo
	];

%GENERATED from file:rune.h => GS2U_RuneOpenBorad
encode(#pk_GS2U_RuneOpenBorad{} = P) ->
	Bin_code = write_int32( P#pk_GS2U_RuneOpenBorad.code ),
	[
		<<?GS2U_RuneOpenBorad:?U16>>,
		Bin_code
	];

%GENERATED from file:rune.h => GS2U_RuneSuitPropList
encode(#pk_GS2U_RuneSuitPropList{} = P) ->
	Bin_suitProps = write_array(P#pk_GS2U_RuneSuitPropList.suitProps, fun(X) -> encode_RuneSuitProp( X ) end),
	[
		<<?GS2U_RuneSuitPropList:?U16>>,
		Bin_suitProps
	];

%GENERATED from file:rune.h => GS2U_RuneTurnPosAck
encode(#pk_GS2U_RuneTurnPosAck{} = P) ->
	Bin_runeInfo = encode_RuneInfo( P#pk_GS2U_RuneTurnPosAck.runeInfo ),
	[
		<<?GS2U_RuneTurnPosAck:?U16>>,
		Bin_runeInfo
	];

%GENERATED from file:rune.h => RuneEmbedOn
encode(#pk_RuneEmbedOn{} = P) ->
	Bin_runeUIDs = write_array(P#pk_RuneEmbedOn.runeUIDs, fun(X) -> write_uint64( X ) end),
	Bin_targetID = write_uint32( P#pk_RuneEmbedOn.targetID ),
	[
		<<?RuneEmbedOn:?U16>>,
		Bin_runeUIDs,
		Bin_targetID
	];

%GENERATED from file:rune.h => U2GS_OpenRuneGrid
encode(#pk_U2GS_OpenRuneGrid{} = P) ->
	Bin_ownerID = write_uint8( P#pk_U2GS_OpenRuneGrid.ownerID ),
	Bin_openNumber = write_uint16( P#pk_U2GS_OpenRuneGrid.openNumber ),
	[
		<<?U2GS_OpenRuneGrid:?U16>>,
		Bin_ownerID,
		Bin_openNumber
	];

%GENERATED from file:rune.h => U2GS_QueryRuneTips
encode(#pk_U2GS_QueryRuneTips{} = P) ->
	Bin_runeUID = write_uint64( P#pk_U2GS_QueryRuneTips.runeUID ),
	[
		<<?U2GS_QueryRuneTips:?U16>>,
		Bin_runeUID
	];

%GENERATED from file:rune.h => U2GS_RequestSuitProp
encode(#pk_U2GS_RequestSuitProp{} = P) ->
	Bin_ownerID = write_uint32( P#pk_U2GS_RequestSuitProp.ownerID ),
	[
		<<?U2GS_RequestSuitProp:?U16>>,
		Bin_ownerID
	];

%GENERATED from file:rune.h => U2GS_RuneCast
encode(#pk_U2GS_RuneCast{} = P) ->
	Bin_targetUID = write_uint64( P#pk_U2GS_RuneCast.targetUID ),
	Bin_indexNumber = write_uint32( P#pk_U2GS_RuneCast.indexNumber ),
	Bin_materialUID = write_uint64( P#pk_U2GS_RuneCast.materialUID ),
	[
		<<?U2GS_RuneCast:?U16>>,
		Bin_targetUID,
		Bin_indexNumber,
		Bin_materialUID
	];

%GENERATED from file:rune.h => U2GS_RuneCastAffirm
encode(#pk_U2GS_RuneCastAffirm{} = P) ->
	Bin_flagID = write_uint64( P#pk_U2GS_RuneCastAffirm.flagID ),
	Bin_isAffirm = write_bool( P#pk_U2GS_RuneCastAffirm.isAffirm ),
	[
		<<?U2GS_RuneCastAffirm:?U16>>,
		Bin_flagID,
		Bin_isAffirm
	];

%GENERATED from file:rune.h => U2GS_RuneCompound
encode(#pk_U2GS_RuneCompound{} = P) ->
	Bin_quality = write_uint8( P#pk_U2GS_RuneCompound.quality ),
	Bin_level = write_uint8( P#pk_U2GS_RuneCompound.level ),
	Bin_materialUIDS = write_array(P#pk_U2GS_RuneCompound.materialUIDS, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_RuneCompound:?U16>>,
		Bin_quality,
		Bin_level,
		Bin_materialUIDS
	];

%GENERATED from file:rune.h => U2GS_RuneEmbedOff
encode(#pk_U2GS_RuneEmbedOff{} = P) ->
	Bin_runeUIDs = write_array(P#pk_U2GS_RuneEmbedOff.runeUIDs, fun(X) -> write_uint64( X ) end),
	[
		<<?U2GS_RuneEmbedOff:?U16>>,
		Bin_runeUIDs
	];

%GENERATED from file:rune.h => U2GS_RuneFuse
encode(#pk_U2GS_RuneFuse{} = P) ->
	Bin_targetRuneUID = write_uint64( P#pk_U2GS_RuneFuse.targetRuneUID ),
	Bin_materialUID = write_uint64( P#pk_U2GS_RuneFuse.materialUID ),
	Bin_fuseType = write_uint8( P#pk_U2GS_RuneFuse.fuseType ),
	Bin_targetPropKey = write_uint64( P#pk_U2GS_RuneFuse.targetPropKey ),
	Bin_materialPropKey = write_uint64( P#pk_U2GS_RuneFuse.materialPropKey ),
	Bin_isUseFuseStone = write_bool( P#pk_U2GS_RuneFuse.isUseFuseStone ),
	[
		<<?U2GS_RuneFuse:?U16>>,
		Bin_targetRuneUID,
		Bin_materialUID,
		Bin_fuseType,
		Bin_targetPropKey,
		Bin_materialPropKey,
		Bin_isUseFuseStone
	];

%GENERATED from file:rune.h => U2GS_RuneMelt
encode(#pk_U2GS_RuneMelt{} = P) ->
	Bin_targetRuneUID = write_uint64( P#pk_U2GS_RuneMelt.targetRuneUID ),
	[
		<<?U2GS_RuneMelt:?U16>>,
		Bin_targetRuneUID
	];

%GENERATED from file:rune.h => U2GS_RuneReserve
encode(#pk_U2GS_RuneReserve{} = P) ->
	Bin_isReserve = write_bool( P#pk_U2GS_RuneReserve.isReserve ),
	[
		<<?U2GS_RuneReserve:?U16>>,
		Bin_isReserve
	];

%GENERATED from file:rune.h => U2GS_RuneTurnPos
encode(#pk_U2GS_RuneTurnPos{} = P) ->
	Bin_targetRuneUID = write_uint64( P#pk_U2GS_RuneTurnPos.targetRuneUID ),
	[
		<<?U2GS_RuneTurnPos:?U16>>,
		Bin_targetRuneUID
	];

%GENERATED from file:rune.h => U2GS_SellRune
encode(#pk_U2GS_SellRune{} = P) ->
	Bin_targetRuneUID = write_uint64( P#pk_U2GS_SellRune.targetRuneUID ),
	[
		<<?U2GS_SellRune:?U16>>,
		Bin_targetRuneUID
	];

%GENERATED from file:serverTest.h => GS2U_GridPlayerRotw
encode(#pk_GS2U_GridPlayerRotw{} = P) ->
	Bin_rotw = write_int32( P#pk_GS2U_GridPlayerRotw.rotw ),
	Bin_codes = write_array(P#pk_GS2U_GridPlayerRotw.codes, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_GridPlayerRotw:?U16>>,
		Bin_rotw,
		Bin_codes
	];

%GENERATED from file:setting.h => Any_UpdateBitVariant
encode(#pk_Any_UpdateBitVariant{} = P) ->
	Bin_updateVariantList = write_array(P#pk_Any_UpdateBitVariant.updateVariantList, fun(X) -> encode_SwitchVariantInfo( X ) end),
	[
		<<?Any_UpdateBitVariant:?U16>>,
		Bin_updateVariantList
	];

%GENERATED from file:setting.h => Any_UpdateVariant
encode(#pk_Any_UpdateVariant{} = P) ->
	Bin_updateVariantList = write_array(P#pk_Any_UpdateVariant.updateVariantList, fun(X) -> encode_VariantInfo( X ) end),
	[
		<<?Any_UpdateVariant:?U16>>,
		Bin_updateVariantList
	];

%GENERATED from file:setting.h => GS2U_VariantInfo
encode(#pk_GS2U_VariantInfo{} = P) ->
	Bin_variantList = write_array(P#pk_GS2U_VariantInfo.variantList, fun(X) -> encode_VariantInfo( X ) end),
	[
		<<?GS2U_VariantInfo:?U16>>,
		Bin_variantList
	];

%GENERATED from file:setting.h => U2GS_AllTeamInvitationSetting
encode(#pk_U2GS_AllTeamInvitationSetting{} = P) ->
	Bin_onOrOff = write_uint8( P#pk_U2GS_AllTeamInvitationSetting.onOrOff ),
	[
		<<?U2GS_AllTeamInvitationSetting:?U16>>,
		Bin_onOrOff
	];

%GENERATED from file:signin.h => BindPhoneAwardGet
encode(#pk_BindPhoneAwardGet{}) ->
	[
		<<?BindPhoneAwardGet:?U16>>

	];

%GENERATED from file:signin.h => EveryDaySignIn
encode(#pk_EveryDaySignIn{}) ->
	[
		<<?EveryDaySignIn:?U16>>

	];

%GENERATED from file:signin.h => GS2U_BindPhoneResult
encode(#pk_GS2U_BindPhoneResult{} = P) ->
	Bin_isSuccess = write_bool( P#pk_GS2U_BindPhoneResult.isSuccess ),
	[
		<<?GS2U_BindPhoneResult:?U16>>,
		Bin_isSuccess
	];

%GENERATED from file:signin.h => GS2U_SignIn
encode(#pk_GS2U_SignIn{} = P) ->
	Bin_info_list = write_array(P#pk_GS2U_SignIn.info_list, fun(X) -> encode_SignInInfo( X ) end),
	Bin_time = write_uint64( P#pk_GS2U_SignIn.time ),
	[
		<<?GS2U_SignIn:?U16>>,
		Bin_info_list,
		Bin_time
	];

%GENERATED from file:signin.h => SevenDaySignIn
encode(#pk_SevenDaySignIn{} = P) ->
	Bin_dayCount = write_uint8( P#pk_SevenDaySignIn.dayCount ),
	[
		<<?SevenDaySignIn:?U16>>,
		Bin_dayCount
	];

%GENERATED from file:signin.h => U2GS_AccuReward
encode(#pk_U2GS_AccuReward{} = P) ->
	Bin_id = write_uint8( P#pk_U2GS_AccuReward.id ),
	[
		<<?U2GS_AccuReward:?U16>>,
		Bin_id
	];

%GENERATED from file:signin.h => U2GS_BindPhone
encode(#pk_U2GS_BindPhone{} = P) ->
	Bin_funcellCilentID = write_string( P#pk_U2GS_BindPhone.funcellCilentID ),
	Bin_accessToken = write_string( P#pk_U2GS_BindPhone.accessToken ),
	Bin_phoneNum = write_uint64( P#pk_U2GS_BindPhone.phoneNum ),
	Bin_verifyid = write_string( P#pk_U2GS_BindPhone.verifyid ),
	Bin_content = write_string( P#pk_U2GS_BindPhone.content ),
	[
		<<?U2GS_BindPhone:?U16>>,
		Bin_funcellCilentID,
		Bin_accessToken,
		Bin_phoneNum,
		Bin_verifyid,
		Bin_content
	];

%GENERATED from file:signin.h => U2GS_SignIn
encode(#pk_U2GS_SignIn{}) ->
	[
		<<?U2GS_SignIn:?U16>>

	];

%GENERATED from file:skill.h => GS2U_BreakLifeSkill
encode(#pk_GS2U_BreakLifeSkill{} = P) ->
	Bin_type = write_int16( P#pk_GS2U_BreakLifeSkill.type ),
	[
		<<?GS2U_BreakLifeSkill:?U16>>,
		Bin_type
	];

%GENERATED from file:skill.h => GS2U_ChangeSkillSlotResult
encode(#pk_GS2U_ChangeSkillSlotResult{} = P) ->
	Bin_changeType = write_uint32( P#pk_GS2U_ChangeSkillSlotResult.changeType ),
	Bin_skillType = write_int8( P#pk_GS2U_ChangeSkillSlotResult.skillType ),
	Bin_oldIndex = write_uint32( P#pk_GS2U_ChangeSkillSlotResult.oldIndex ),
	Bin_newSkillInfo = encode_SkillSlotInfo( P#pk_GS2U_ChangeSkillSlotResult.newSkillInfo ),
	[
		<<?GS2U_ChangeSkillSlotResult:?U16>>,
		Bin_changeType,
		Bin_skillType,
		Bin_oldIndex,
		Bin_newSkillInfo
	];

%GENERATED from file:skill.h => GS2U_GiveRewardAck
encode(#pk_GS2U_GiveRewardAck{} = P) ->
	Bin_type = write_int16( P#pk_GS2U_GiveRewardAck.type ),
	Bin_infos = write_array(P#pk_GS2U_GiveRewardAck.infos, fun(X) -> encode_itemInfo( X ) end),
	[
		<<?GS2U_GiveRewardAck:?U16>>,
		Bin_type,
		Bin_infos
	];

%GENERATED from file:skill.h => GS2U_InitLifeSkillList
encode(#pk_GS2U_InitLifeSkillList{} = P) ->
	Bin_infos = write_array(P#pk_GS2U_InitLifeSkillList.infos, fun(X) -> encode_LifeSkillInfo( X ) end),
	[
		<<?GS2U_InitLifeSkillList:?U16>>,
		Bin_infos
	];

%GENERATED from file:skill.h => GS2U_InitiativeSkillSlotInfoList
encode(#pk_GS2U_InitiativeSkillSlotInfoList{} = P) ->
	Bin_skillSlotList = write_array(P#pk_GS2U_InitiativeSkillSlotInfoList.skillSlotList, fun(X) -> encode_SkillSlotInfo( X ) end),
	[
		<<?GS2U_InitiativeSkillSlotInfoList:?U16>>,
		Bin_skillSlotList
	];

%GENERATED from file:skill.h => GS2U_LifeSkillCanUseCount
encode(#pk_GS2U_LifeSkillCanUseCount{} = P) ->
	Bin_listNew = write_array(P#pk_GS2U_LifeSkillCanUseCount.listNew, fun(X) -> encode_lifeSkillCanUseCount( X ) end),
	[
		<<?GS2U_LifeSkillCanUseCount:?U16>>,
		Bin_listNew
	];

%GENERATED from file:skill.h => GS2U_OpenSkill
encode(#pk_GS2U_OpenSkill{} = P) ->
	Bin_skillId = write_uint32( P#pk_GS2U_OpenSkill.skillId ),
	Bin_level = write_uint32( P#pk_GS2U_OpenSkill.level ),
	[
		<<?GS2U_OpenSkill:?U16>>,
		Bin_skillId,
		Bin_level
	];

%GENERATED from file:skill.h => GS2U_OpenSlot
encode(#pk_GS2U_OpenSlot{} = P) ->
	Bin_openSlot = encode_OpenSlot( P#pk_GS2U_OpenSlot.openSlot ),
	[
		<<?GS2U_OpenSlot:?U16>>,
		Bin_openSlot
	];

%GENERATED from file:skill.h => GS2U_OpenSlotList
encode(#pk_GS2U_OpenSlotList{} = P) ->
	Bin_slotList = write_array(P#pk_GS2U_OpenSlotList.slotList, fun(X) -> encode_OpenSlot( X ) end),
	[
		<<?GS2U_OpenSlotList:?U16>>,
		Bin_slotList
	];

%GENERATED from file:skill.h => GS2U_PassiveSkillInfo
encode(#pk_GS2U_PassiveSkillInfo{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_PassiveSkillInfo.id ),
	Bin_level = write_uint32( P#pk_GS2U_PassiveSkillInfo.level ),
	[
		<<?GS2U_PassiveSkillInfo:?U16>>,
		Bin_id,
		Bin_level
	];

%GENERATED from file:skill.h => GS2U_PassiveSkillInfoList
encode(#pk_GS2U_PassiveSkillInfoList{} = P) ->
	Bin_skillList = write_array(P#pk_GS2U_PassiveSkillInfoList.skillList, fun(X) -> encode_PassiveSkillInfo( X ) end),
	[
		<<?GS2U_PassiveSkillInfoList:?U16>>,
		Bin_skillList
	];

%GENERATED from file:skill.h => GS2U_PassiveSkillSlotInfoList
encode(#pk_GS2U_PassiveSkillSlotInfoList{} = P) ->
	Bin_skillSlotList = write_array(P#pk_GS2U_PassiveSkillSlotInfoList.skillSlotList, fun(X) -> encode_SkillSlotInfo( X ) end),
	[
		<<?GS2U_PassiveSkillSlotInfoList:?U16>>,
		Bin_skillSlotList
	];

%GENERATED from file:skill.h => GS2U_ReduceCD
encode(#pk_GS2U_ReduceCD{} = P) ->
	Bin_skillId = write_uint32( P#pk_GS2U_ReduceCD.skillId ),
	Bin_cd = write_uint32( P#pk_GS2U_ReduceCD.cd ),
	[
		<<?GS2U_ReduceCD:?U16>>,
		Bin_skillId,
		Bin_cd
	];

%GENERATED from file:skill.h => GS2U_SkillInfo
encode(#pk_GS2U_SkillInfo{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_SkillInfo.id ),
	Bin_level = write_uint32( P#pk_GS2U_SkillInfo.level ),
	[
		<<?GS2U_SkillInfo:?U16>>,
		Bin_id,
		Bin_level
	];

%GENERATED from file:skill.h => GS2U_SkillInfoList
encode(#pk_GS2U_SkillInfoList{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_SkillInfoList.code ),
	Bin_skillInfoList = write_array(P#pk_GS2U_SkillInfoList.skillInfoList, fun(X) -> encode_SkillInfo( X ) end),
	[
		<<?GS2U_SkillInfoList:?U16>>,
		Bin_code,
		Bin_skillInfoList
	];

%GENERATED from file:skill.h => GS2U_TransformSkillSlotInfoList
encode(#pk_GS2U_TransformSkillSlotInfoList{} = P) ->
	Bin_skillSlotList = write_array(P#pk_GS2U_TransformSkillSlotInfoList.skillSlotList, fun(X) -> encode_SkillSlotInfo( X ) end),
	[
		<<?GS2U_TransformSkillSlotInfoList:?U16>>,
		Bin_skillSlotList
	];

%GENERATED from file:skill.h => GS2U_TriggerPassiveSkill
encode(#pk_GS2U_TriggerPassiveSkill{} = P) ->
	Bin_id = write_uint32( P#pk_GS2U_TriggerPassiveSkill.id ),
	Bin_level = write_uint32( P#pk_GS2U_TriggerPassiveSkill.level ),
	Bin_codelist = write_array(P#pk_GS2U_TriggerPassiveSkill.codelist, fun(X) -> write_uint64( X ) end),
	[
		<<?GS2U_TriggerPassiveSkill:?U16>>,
		Bin_id,
		Bin_level,
		Bin_codelist
	];

%GENERATED from file:skill.h => GS2U_UpdateLifeSkill
encode(#pk_GS2U_UpdateLifeSkill{} = P) ->
	Bin_info = encode_LifeSkillInfo( P#pk_GS2U_UpdateLifeSkill.info ),
	[
		<<?GS2U_UpdateLifeSkill:?U16>>,
		Bin_info
	];

%GENERATED from file:skill.h => GS2U_UpgradeSkill_Result
encode(#pk_GS2U_UpgradeSkill_Result{} = P) ->
	Bin_resultCode = write_uint32( P#pk_GS2U_UpgradeSkill_Result.resultCode ),
	Bin_skillinfo = encode_SkillInfo( P#pk_GS2U_UpgradeSkill_Result.skillinfo ),
	[
		<<?GS2U_UpgradeSkill_Result:?U16>>,
		Bin_resultCode,
		Bin_skillinfo
	];

%GENERATED from file:skill.h => U2GS_BuySpirit
encode(#pk_U2GS_BuySpirit{}) ->
	[
		<<?U2GS_BuySpirit:?U16>>

	];

%GENERATED from file:skill.h => U2GS_ChangeSkillSlotRequest
encode(#pk_U2GS_ChangeSkillSlotRequest{} = P) ->
	Bin_changeType = write_uint32( P#pk_U2GS_ChangeSkillSlotRequest.changeType ),
	Bin_skillType = write_int8( P#pk_U2GS_ChangeSkillSlotRequest.skillType ),
	Bin_changeSkillInfo = encode_SkillSlotInfo( P#pk_U2GS_ChangeSkillSlotRequest.changeSkillInfo ),
	[
		<<?U2GS_ChangeSkillSlotRequest:?U16>>,
		Bin_changeType,
		Bin_skillType,
		Bin_changeSkillInfo
	];

%GENERATED from file:skill.h => U2GS_FinishLifeSkill
encode(#pk_U2GS_FinishLifeSkill{} = P) ->
	Bin_type = write_int16( P#pk_U2GS_FinishLifeSkill.type ),
	[
		<<?U2GS_FinishLifeSkill:?U16>>,
		Bin_type
	];

%GENERATED from file:skill.h => U2GS_GiveReward
encode(#pk_U2GS_GiveReward{} = P) ->
	Bin_type = write_int16( P#pk_U2GS_GiveReward.type ),
	Bin_npcCode = write_int64( P#pk_U2GS_GiveReward.npcCode ),
	Bin_param = write_int64( P#pk_U2GS_GiveReward.param ),
	[
		<<?U2GS_GiveReward:?U16>>,
		Bin_type,
		Bin_npcCode,
		Bin_param
	];

%GENERATED from file:skill.h => U2GS_LifeSkillBuyCount
encode(#pk_U2GS_LifeSkillBuyCount{} = P) ->
	Bin_type = write_int16( P#pk_U2GS_LifeSkillBuyCount.type ),
	Bin_count = write_int16( P#pk_U2GS_LifeSkillBuyCount.count ),
	[
		<<?U2GS_LifeSkillBuyCount:?U16>>,
		Bin_type,
		Bin_count
	];

%GENERATED from file:skill.h => U2GS_PassiveUpSkill
encode(#pk_U2GS_PassiveUpSkill{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_PassiveUpSkill.id ),
	[
		<<?U2GS_PassiveUpSkill:?U16>>,
		Bin_id
	];

%GENERATED from file:skill.h => U2GS_ResetSkill
encode(#pk_U2GS_ResetSkill{}) ->
	[
		<<?U2GS_ResetSkill:?U16>>

	];

%GENERATED from file:skill.h => U2GS_UpSkill
encode(#pk_U2GS_UpSkill{} = P) ->
	Bin_id = write_uint32( P#pk_U2GS_UpSkill.id ),
	Bin_type = write_uint32( P#pk_U2GS_UpSkill.type ),
	[
		<<?U2GS_UpSkill:?U16>>,
		Bin_id,
		Bin_type
	];

%GENERATED from file:skill.h => U2GS_UpgradeSkill_Request
encode(#pk_U2GS_UpgradeSkill_Request{} = P) ->
	Bin_skillId = write_uint32( P#pk_U2GS_UpgradeSkill_Request.skillId ),
	[
		<<?U2GS_UpgradeSkill_Request:?U16>>,
		Bin_skillId
	];

%GENERATED from file:skill.h => U2GS_UseLifeSkill
encode(#pk_U2GS_UseLifeSkill{} = P) ->
	Bin_type = write_int16( P#pk_U2GS_UseLifeSkill.type ),
	Bin_npcCode = write_int64( P#pk_U2GS_UseLifeSkill.npcCode ),
	Bin_param = write_int64( P#pk_U2GS_UseLifeSkill.param ),
	Bin_times = write_int16( P#pk_U2GS_UseLifeSkill.times ),
	[
		<<?U2GS_UseLifeSkill:?U16>>,
		Bin_type,
		Bin_npcCode,
		Bin_param,
		Bin_times
	];

%GENERATED from file:talent.h => GS2U_TalentInitAck
encode(#pk_GS2U_TalentInitAck{} = P) ->
	Bin_talentInfos = write_array(P#pk_GS2U_TalentInitAck.talentInfos, fun(X) -> encode_TalentInfo( X ) end),
	[
		<<?GS2U_TalentInitAck:?U16>>,
		Bin_talentInfos
	];

%GENERATED from file:talent.h => GS2U_TalentLevelUpSuccess
encode(#pk_GS2U_TalentLevelUpSuccess{} = P) ->
	Bin_talentInfo = encode_TalentInfo( P#pk_GS2U_TalentLevelUpSuccess.talentInfo ),
	[
		<<?GS2U_TalentLevelUpSuccess:?U16>>,
		Bin_talentInfo
	];

%GENERATED from file:talent.h => U2GS_TalentInit
encode(#pk_U2GS_TalentInit{}) ->
	[
		<<?U2GS_TalentInit:?U16>>

	];

%GENERATED from file:talent.h => U2GS_TalentLevelUp
encode(#pk_U2GS_TalentLevelUp{} = P) ->
	Bin_id = write_uint8( P#pk_U2GS_TalentLevelUp.id ),
	[
		<<?U2GS_TalentLevelUp:?U16>>,
		Bin_id
	];

%GENERATED from file:task.h => GS2U_AcceptTask
encode(#pk_GS2U_AcceptTask{} = P) ->
	Bin_info = encode_taskInfo( P#pk_GS2U_AcceptTask.info ),
	[
		<<?GS2U_AcceptTask:?U16>>,
		Bin_info
	];

%GENERATED from file:task.h => GS2U_AcceptTaskList
encode(#pk_GS2U_AcceptTaskList{} = P) ->
	Bin_list = write_array(P#pk_GS2U_AcceptTaskList.list, fun(X) -> encode_acceptedBaseTask( X ) end),
	[
		<<?GS2U_AcceptTaskList:?U16>>,
		Bin_list
	];

%GENERATED from file:task.h => GS2U_AddNewAcceptTask
encode(#pk_GS2U_AddNewAcceptTask{} = P) ->
	Bin_taskID = write_int32( P#pk_GS2U_AddNewAcceptTask.taskID ),
	Bin_result = write_int32( P#pk_GS2U_AddNewAcceptTask.result ),
	[
		<<?GS2U_AddNewAcceptTask:?U16>>,
		Bin_taskID,
		Bin_result
	];

%GENERATED from file:task.h => GS2U_AddNewCompleteTask
encode(#pk_GS2U_AddNewCompleteTask{} = P) ->
	Bin_result = write_int32( P#pk_GS2U_AddNewCompleteTask.result ),
	Bin_taskID = write_int32( P#pk_GS2U_AddNewCompleteTask.taskID ),
	[
		<<?GS2U_AddNewCompleteTask:?U16>>,
		Bin_result,
		Bin_taskID
	];

%GENERATED from file:task.h => GS2U_CollectObj_Failed
encode(#pk_GS2U_CollectObj_Failed{} = P) ->
	Bin_code = write_uint64( P#pk_GS2U_CollectObj_Failed.code ),
	[
		<<?GS2U_CollectObj_Failed:?U16>>,
		Bin_code
	];

%GENERATED from file:task.h => GS2U_CompleteTaskList
encode(#pk_GS2U_CompleteTaskList{} = P) ->
	Bin_list = write_array(P#pk_GS2U_CompleteTaskList.list, fun(X) -> encode_SubmittedTaskInfo( X ) end),
	[
		<<?GS2U_CompleteTaskList:?U16>>,
		Bin_list
	];

%GENERATED from file:task.h => GS2U_DeleteAcceptTask
encode(#pk_GS2U_DeleteAcceptTask{} = P) ->
	Bin_taskID = write_int32( P#pk_GS2U_DeleteAcceptTask.taskID ),
	Bin_result = write_int32( P#pk_GS2U_DeleteAcceptTask.result ),
	[
		<<?GS2U_DeleteAcceptTask:?U16>>,
		Bin_taskID,
		Bin_result
	];

%GENERATED from file:task.h => GS2U_SyncStateLoopTask
encode(#pk_GS2U_SyncStateLoopTask{} = P) ->
	Bin_list = write_array(P#pk_GS2U_SyncStateLoopTask.list, fun(X) -> encode_LoopTaskState( X ) end),
	Bin_state = write_uint8( P#pk_GS2U_SyncStateLoopTask.state ),
	Bin_allFive = write_uint8( P#pk_GS2U_SyncStateLoopTask.allFive ),
	[
		<<?GS2U_SyncStateLoopTask:?U16>>,
		Bin_list,
		Bin_state,
		Bin_allFive
	];

%GENERATED from file:task.h => GS2U_TalkToNpcResult
encode(#pk_GS2U_TalkToNpcResult{} = P) ->
	Bin_result = write_int32( P#pk_GS2U_TalkToNpcResult.result ),
	Bin_code = write_uint64( P#pk_GS2U_TalkToNpcResult.code ),
	[
		<<?GS2U_TalkToNpcResult:?U16>>,
		Bin_result,
		Bin_code
	];

%GENERATED from file:task.h => GS2U_TaskList
encode(#pk_GS2U_TaskList{} = P) ->
	Bin_list = write_array(P#pk_GS2U_TaskList.list, fun(X) -> encode_taskInfo( X ) end),
	[
		<<?GS2U_TaskList:?U16>>,
		Bin_list
	];

%GENERATED from file:task.h => GS2U_UpdateAcceptTask
encode(#pk_GS2U_UpdateAcceptTask{} = P) ->
	Bin_result = write_int32( P#pk_GS2U_UpdateAcceptTask.result ),
	Bin_acceptTaskInfo = encode_acceptedBaseTask( P#pk_GS2U_UpdateAcceptTask.acceptTaskInfo ),
	[
		<<?GS2U_UpdateAcceptTask:?U16>>,
		Bin_result,
		Bin_acceptTaskInfo
	];

%GENERATED from file:task.h => GS2U_UpdateTask
encode(#pk_GS2U_UpdateTask{} = P) ->
	Bin_info = encode_taskInfo( P#pk_GS2U_UpdateTask.info ),
	[
		<<?GS2U_UpdateTask:?U16>>,
		Bin_info
	];

%GENERATED from file:task.h => U2GS_AcceptTask
encode(#pk_U2GS_AcceptTask{} = P) ->
	Bin_taskID = write_int32( P#pk_U2GS_AcceptTask.taskID ),
	Bin_npcCode = write_uint64( P#pk_U2GS_AcceptTask.npcCode ),
	[
		<<?U2GS_AcceptTask:?U16>>,
		Bin_taskID,
		Bin_npcCode
	];

%GENERATED from file:task.h => U2GS_CollectObj
encode(#pk_U2GS_CollectObj{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_CollectObj.code ),
	[
		<<?U2GS_CollectObj:?U16>>,
		Bin_code
	];

%GENERATED from file:task.h => U2GS_DropTask
encode(#pk_U2GS_DropTask{} = P) ->
	Bin_taskID = write_int32( P#pk_U2GS_DropTask.taskID ),
	[
		<<?U2GS_DropTask:?U16>>,
		Bin_taskID
	];

%GENERATED from file:task.h => U2GS_RequestAcceptLoopTask
encode(#pk_U2GS_RequestAcceptLoopTask{}) ->
	[
		<<?U2GS_RequestAcceptLoopTask:?U16>>

	];

%GENERATED from file:task.h => U2GS_RequestAcceptTask
encode(#pk_U2GS_RequestAcceptTask{} = P) ->
	Bin_taskID = write_int32( P#pk_U2GS_RequestAcceptTask.taskID ),
	Bin_code = write_uint64( P#pk_U2GS_RequestAcceptTask.code ),
	[
		<<?U2GS_RequestAcceptTask:?U16>>,
		Bin_taskID,
		Bin_code
	];

%GENERATED from file:task.h => U2GS_RequestHandIn
encode(#pk_U2GS_RequestHandIn{} = P) ->
	Bin_taskID = write_uint16( P#pk_U2GS_RequestHandIn.taskID ),
	Bin_itemID = write_uint16( P#pk_U2GS_RequestHandIn.itemID ),
	Bin_itemCount = write_uint32( P#pk_U2GS_RequestHandIn.itemCount ),
	Bin_npcCode = write_uint64( P#pk_U2GS_RequestHandIn.npcCode ),
	[
		<<?U2GS_RequestHandIn:?U16>>,
		Bin_taskID,
		Bin_itemID,
		Bin_itemCount,
		Bin_npcCode
	];

%GENERATED from file:task.h => U2GS_RequestOneKeyLoopTask
encode(#pk_U2GS_RequestOneKeyLoopTask{} = P) ->
	Bin_count = write_uint32( P#pk_U2GS_RequestOneKeyLoopTask.count ),
	[
		<<?U2GS_RequestOneKeyLoopTask:?U16>>,
		Bin_count
	];

%GENERATED from file:task.h => U2GS_RequestOperateLoopTask
encode(#pk_U2GS_RequestOperateLoopTask{} = P) ->
	Bin_taskID = write_uint16( P#pk_U2GS_RequestOperateLoopTask.taskID ),
	Bin_opType = write_uint8( P#pk_U2GS_RequestOperateLoopTask.opType ),
	[
		<<?U2GS_RequestOperateLoopTask:?U16>>,
		Bin_taskID,
		Bin_opType
	];

%GENERATED from file:task.h => U2GS_ResetTask
encode(#pk_U2GS_ResetTask{} = P) ->
	Bin_taskID = write_int32( P#pk_U2GS_ResetTask.taskID ),
	[
		<<?U2GS_ResetTask:?U16>>,
		Bin_taskID
	];

%GENERATED from file:task.h => U2GS_SumbitTask
encode(#pk_U2GS_SumbitTask{} = P) ->
	Bin_taskID = write_int32( P#pk_U2GS_SumbitTask.taskID ),
	Bin_code = write_uint64( P#pk_U2GS_SumbitTask.code ),
	[
		<<?U2GS_SumbitTask:?U16>>,
		Bin_taskID,
		Bin_code
	];

%GENERATED from file:task.h => U2GS_TalkToNpc
encode(#pk_U2GS_TalkToNpc{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_TalkToNpc.code ),
	[
		<<?U2GS_TalkToNpc:?U16>>,
		Bin_code
	];

%GENERATED from file:task.h => U2GS_TriggerTaskBuff
encode(#pk_U2GS_TriggerTaskBuff{} = P) ->
	Bin_taskID = write_int32( P#pk_U2GS_TriggerTaskBuff.taskID ),
	[
		<<?U2GS_TriggerTaskBuff:?U16>>,
		Bin_taskID
	];

%GENERATED from file:task.h => U2GS_UseItemObj
encode(#pk_U2GS_UseItemObj{} = P) ->
	Bin_code = write_uint64( P#pk_U2GS_UseItemObj.code ),
	[
		<<?U2GS_UseItemObj:?U16>>,
		Bin_code
	];

%GENERATED from file:team.h => GS2U_AddTeamMemberInfo
encode(#pk_GS2U_AddTeamMemberInfo{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_AddTeamMemberInfo.teamType ),
	Bin_memberInfo = encode_TeamMemberInfo( P#pk_GS2U_AddTeamMemberInfo.memberInfo ),
	[
		<<?GS2U_AddTeamMemberInfo:?U16>>,
		Bin_teamType,
		Bin_memberInfo
	];

%GENERATED from file:team.h => GS2U_BeenInviteTeam
encode(#pk_GS2U_BeenInviteTeam{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_BeenInviteTeam.teamType ),
	Bin_inviteType = write_uint8( P#pk_GS2U_BeenInviteTeam.inviteType ),
	Bin_inviterPlayerID = write_uint64( P#pk_GS2U_BeenInviteTeam.inviterPlayerID ),
	Bin_inviterPlayerName = write_string( P#pk_GS2U_BeenInviteTeam.inviterPlayerName ),
	[
		<<?GS2U_BeenInviteTeam:?U16>>,
		Bin_teamType,
		Bin_inviteType,
		Bin_inviterPlayerID,
		Bin_inviterPlayerName
	];

%GENERATED from file:team.h => GS2U_DelTeammateInfo
encode(#pk_GS2U_DelTeammateInfo{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_DelTeammateInfo.teamType ),
	Bin_teammateID = write_uint64( P#pk_GS2U_DelTeammateInfo.teammateID ),
	[
		<<?GS2U_DelTeammateInfo:?U16>>,
		Bin_teamType,
		Bin_teammateID
	];

%GENERATED from file:team.h => GS2U_FastTeamAck
encode(#pk_GS2U_FastTeamAck{}) ->
	[
		<<?GS2U_FastTeamAck:?U16>>

	];

%GENERATED from file:team.h => GS2U_FastTeamSucc
encode(#pk_GS2U_FastTeamSucc{} = P) ->
	Bin_time = write_uint16( P#pk_GS2U_FastTeamSucc.time ),
	[
		<<?GS2U_FastTeamSucc:?U16>>,
		Bin_time
	];

%GENERATED from file:team.h => GS2U_InviteUJoinTeam
encode(#pk_GS2U_InviteUJoinTeam{} = P) ->
	Bin_copyMapID = write_int32( P#pk_GS2U_InviteUJoinTeam.copyMapID ),
	Bin_inviterPlayerID = write_uint64( P#pk_GS2U_InviteUJoinTeam.inviterPlayerID ),
	Bin_inviterPlayerName = write_string( P#pk_GS2U_InviteUJoinTeam.inviterPlayerName ),
	Bin_guildID = write_uint64( P#pk_GS2U_InviteUJoinTeam.guildID ),
	Bin_guildName = write_string( P#pk_GS2U_InviteUJoinTeam.guildName ),
	Bin_friendState = write_uint8( P#pk_GS2U_InviteUJoinTeam.friendState ),
	[
		<<?GS2U_InviteUJoinTeam:?U16>>,
		Bin_copyMapID,
		Bin_inviterPlayerID,
		Bin_inviterPlayerName,
		Bin_guildID,
		Bin_guildName,
		Bin_friendState
	];

%GENERATED from file:team.h => GS2U_KickOutByLeader
encode(#pk_GS2U_KickOutByLeader{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_KickOutByLeader.teamType ),
	[
		<<?GS2U_KickOutByLeader:?U16>>,
		Bin_teamType
	];

%GENERATED from file:team.h => GS2U_MyTeamInfo
encode(#pk_GS2U_MyTeamInfo{} = P) ->
	Bin_base = encode_TeamBaseInfo( P#pk_GS2U_MyTeamInfo.base ),
	Bin_infos = write_array(P#pk_GS2U_MyTeamInfo.infos, fun(X) -> encode_TeamMemberInfo( X ) end),
	[
		<<?GS2U_MyTeamInfo:?U16>>,
		Bin_base,
		Bin_infos
	];

%GENERATED from file:team.h => GS2U_NearTeamInfo
encode(#pk_GS2U_NearTeamInfo{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_NearTeamInfo.teamType ),
	Bin_teamInfoList = write_array(P#pk_GS2U_NearTeamInfo.teamInfoList, fun(X) -> encode_NearTeamInfo( X ) end),
	[
		<<?GS2U_NearTeamInfo:?U16>>,
		Bin_teamType,
		Bin_teamInfoList
	];

%GENERATED from file:team.h => GS2U_NearbyPlayer_Ack
encode(#pk_GS2U_NearbyPlayer_Ack{} = P) ->
	Bin_list = write_array(P#pk_GS2U_NearbyPlayer_Ack.list, fun(X) -> encode_NotTeamMemberInfo( X ) end),
	[
		<<?GS2U_NearbyPlayer_Ack:?U16>>,
		Bin_list
	];

%GENERATED from file:team.h => GS2U_NewMemberJoin
encode(#pk_GS2U_NewMemberJoin{} = P) ->
	Bin_info = encode_TeamMemberInfo( P#pk_GS2U_NewMemberJoin.info ),
	[
		<<?GS2U_NewMemberJoin:?U16>>,
		Bin_info
	];

%GENERATED from file:team.h => GS2U_QueryRoleListAck
encode(#pk_GS2U_QueryRoleListAck{} = P) ->
	Bin_queryType = write_int32( P#pk_GS2U_QueryRoleListAck.queryType ),
	Bin_playerList = write_array(P#pk_GS2U_QueryRoleListAck.playerList, fun(X) -> encode_OnlineMemberSnapshot( X ) end),
	[
		<<?GS2U_QueryRoleListAck:?U16>>,
		Bin_queryType,
		Bin_playerList
	];

%GENERATED from file:team.h => GS2U_QueryTeamListAck
encode(#pk_GS2U_QueryTeamListAck{} = P) ->
	Bin_teamSnapshot = write_array(P#pk_GS2U_QueryTeamListAck.teamSnapshot, fun(X) -> encode_TeamSnapshot( X ) end),
	[
		<<?GS2U_QueryTeamListAck:?U16>>,
		Bin_teamSnapshot
	];

%GENERATED from file:team.h => GS2U_QueryTeamListThisLineAck
encode(#pk_GS2U_QueryTeamListThisLineAck{} = P) ->
	Bin_teamSnapshot = write_array(P#pk_GS2U_QueryTeamListThisLineAck.teamSnapshot, fun(X) -> encode_TeamSnapshot( X ) end),
	[
		<<?GS2U_QueryTeamListThisLineAck:?U16>>,
		Bin_teamSnapshot
	];

%GENERATED from file:team.h => GS2U_QuickTeamMatchAck
encode(#pk_GS2U_QuickTeamMatchAck{} = P) ->
	Bin_result = write_int32( P#pk_GS2U_QuickTeamMatchAck.result ),
	Bin_startTime = write_uint64( P#pk_GS2U_QuickTeamMatchAck.startTime ),
	[
		<<?GS2U_QuickTeamMatchAck:?U16>>,
		Bin_result,
		Bin_startTime
	];

%GENERATED from file:team.h => GS2U_ReceiveNotice
encode(#pk_GS2U_ReceiveNotice{} = P) ->
	Bin_sendRoleName = write_string( P#pk_GS2U_ReceiveNotice.sendRoleName ),
	Bin_mapID = write_uint16( P#pk_GS2U_ReceiveNotice.mapID ),
	[
		<<?GS2U_ReceiveNotice:?U16>>,
		Bin_sendRoleName,
		Bin_mapID
	];

%GENERATED from file:team.h => GS2U_RequestFightingCapacity
encode(#pk_GS2U_RequestFightingCapacity{} = P) ->
	Bin_fightingCapacityInfos = write_array(P#pk_GS2U_RequestFightingCapacity.fightingCapacityInfos, fun(X) -> encode_FightingCapacityInfo( X ) end),
	[
		<<?GS2U_RequestFightingCapacity:?U16>>,
		Bin_fightingCapacityInfos
	];

%GENERATED from file:team.h => GS2U_TeamChangeLeader
encode(#pk_GS2U_TeamChangeLeader{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_TeamChangeLeader.teamType ),
	Bin_newLeaderID = write_uint64( P#pk_GS2U_TeamChangeLeader.newLeaderID ),
	[
		<<?GS2U_TeamChangeLeader:?U16>>,
		Bin_teamType,
		Bin_newLeaderID
	];

%GENERATED from file:team.h => GS2U_TeamDisbanded
encode(#pk_GS2U_TeamDisbanded{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_TeamDisbanded.teamType ),
	[
		<<?GS2U_TeamDisbanded:?U16>>,
		Bin_teamType
	];

%GENERATED from file:team.h => GS2U_TeamInfo
encode(#pk_GS2U_TeamInfo{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_TeamInfo.teamType ),
	Bin_teamID = write_int64( P#pk_GS2U_TeamInfo.teamID ),
	Bin_leaderID = write_uint64( P#pk_GS2U_TeamInfo.leaderID ),
	Bin_info_list = write_array(P#pk_GS2U_TeamInfo.info_list, fun(X) -> encode_TeamMemberInfo( X ) end),
	Bin_customProp = write_string( P#pk_GS2U_TeamInfo.customProp ),
	[
		<<?GS2U_TeamInfo:?U16>>,
		Bin_teamType,
		Bin_teamID,
		Bin_leaderID,
		Bin_info_list,
		Bin_customProp
	];

%GENERATED from file:team.h => GS2U_TeamLeaderStartCopymap
encode(#pk_GS2U_TeamLeaderStartCopymap{} = P) ->
	Bin_copyMapID = write_int32( P#pk_GS2U_TeamLeaderStartCopymap.copyMapID ),
	[
		<<?GS2U_TeamLeaderStartCopymap:?U16>>,
		Bin_copyMapID
	];

%GENERATED from file:team.h => GS2U_TeamMemberExtInfo
encode(#pk_GS2U_TeamMemberExtInfo{} = P) ->
	Bin_roleID = write_uint64( P#pk_GS2U_TeamMemberExtInfo.roleID ),
	Bin_level = write_uint16( P#pk_GS2U_TeamMemberExtInfo.level ),
	Bin_hpPC = write_uint8( P#pk_GS2U_TeamMemberExtInfo.hpPC ),
	Bin_mapID = write_uint16( P#pk_GS2U_TeamMemberExtInfo.mapID ),
	[
		<<?GS2U_TeamMemberExtInfo:?U16>>,
		Bin_roleID,
		Bin_level,
		Bin_hpPC,
		Bin_mapID
	];

%GENERATED from file:team.h => GS2U_TeamMemberOffline
encode(#pk_GS2U_TeamMemberOffline{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_TeamMemberOffline.teamType ),
	Bin_playerID = write_uint64( P#pk_GS2U_TeamMemberOffline.playerID ),
	[
		<<?GS2U_TeamMemberOffline:?U16>>,
		Bin_teamType,
		Bin_playerID
	];

%GENERATED from file:team.h => GS2U_TeamMemberOnline
encode(#pk_GS2U_TeamMemberOnline{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_TeamMemberOnline.teamType ),
	Bin_playerID = write_uint64( P#pk_GS2U_TeamMemberOnline.playerID ),
	Bin_code = write_uint64( P#pk_GS2U_TeamMemberOnline.code ),
	Bin_level = write_uint16( P#pk_GS2U_TeamMemberOnline.level ),
	[
		<<?GS2U_TeamMemberOnline:?U16>>,
		Bin_teamType,
		Bin_playerID,
		Bin_code,
		Bin_level
	];

%GENERATED from file:team.h => GS2U_TeamMemberOnlineState
encode(#pk_GS2U_TeamMemberOnlineState{} = P) ->
	Bin_playerID = write_uint64( P#pk_GS2U_TeamMemberOnlineState.playerID ),
	Bin_state = write_int32( P#pk_GS2U_TeamMemberOnlineState.state ),
	[
		<<?GS2U_TeamMemberOnlineState:?U16>>,
		Bin_playerID,
		Bin_state
	];

%GENERATED from file:team.h => GS2U_TeamReset
encode(#pk_GS2U_TeamReset{} = P) ->
	Bin_reason = write_int32( P#pk_GS2U_TeamReset.reason ),
	[
		<<?GS2U_TeamReset:?U16>>,
		Bin_reason
	];

%GENERATED from file:team.h => GS2U_TeammateLeave
encode(#pk_GS2U_TeammateLeave{} = P) ->
	Bin_teammateID = write_uint64( P#pk_GS2U_TeammateLeave.teammateID ),
	[
		<<?GS2U_TeammateLeave:?U16>>,
		Bin_teammateID
	];

%GENERATED from file:team.h => GS2U_TeammateLeaveAwayTeam
encode(#pk_GS2U_TeammateLeaveAwayTeam{} = P) ->
	Bin_teamType = write_uint8( P#pk_GS2U_TeammateLeaveAwayTeam.teamType ),
	Bin_teammateID = write_uint64( P#pk_GS2U_TeammateLeaveAwayTeam.teammateID ),
	[
		<<?GS2U_TeammateLeaveAwayTeam:?U16>>,
		Bin_teamType,
		Bin_teammateID
	];

%GENERATED from file:team.h => GS2U_TeammateLocation
encode(#pk_GS2U_TeammateLocation{} = P) ->
	Bin_teammateLocations = write_array(P#pk_GS2U_TeammateLocation.teammateLocations, fun(X) -> encode_TeamMemberLocation( X ) end),
	[
		<<?GS2U_TeammateLocation:?U16>>,
		Bin_teammateLocations
	];

%GENERATED from file:team.h => GS2U_TeammateStartCopymapAck
encode(#pk_GS2U_TeammateStartCopymapAck{} = P) ->
	Bin_playerID = write_uint64( P#pk_GS2U_TeammateStartCopymapAck.playerID ),
	Bin_isAgree = write_uint8( P#pk_GS2U_TeammateStartCopymapAck.isAgree ),
	[
		<<?GS2U_TeammateStartCopymapAck:?U16>>,
		Bin_playerID,
		Bin_isAgree
	];

%GENERATED from file:team.h => GS2U_UpdateMemberExInfo
encode(#pk_GS2U_UpdateMemberExInfo{} = P) ->
	Bin_infoEx = encode_TeamMemberInfoEx( P#pk_GS2U_UpdateMemberExInfo.infoEx ),
	[
		<<?GS2U_UpdateMemberExInfo:?U16>>,
		Bin_infoEx
	];

%GENERATED from file:team.h => GS2U_UpdateTeamInfo
encode(#pk_GS2U_UpdateTeamInfo{} = P) ->
	Bin_base = encode_TeamBaseInfo( P#pk_GS2U_UpdateTeamInfo.base ),
	[
		<<?GS2U_UpdateTeamInfo:?U16>>,
		Bin_base
	];

%GENERATED from file:team.h => U2GS_AckInviteJoinTeam
encode(#pk_U2GS_AckInviteJoinTeam{} = P) ->
	Bin_isAgree = write_uint8( P#pk_U2GS_AckInviteJoinTeam.isAgree ),
	Bin_inviterPlayerID = write_uint64( P#pk_U2GS_AckInviteJoinTeam.inviterPlayerID ),
	[
		<<?U2GS_AckInviteJoinTeam:?U16>>,
		Bin_isAgree,
		Bin_inviterPlayerID
	];

%GENERATED from file:team.h => U2GS_AckInviteTeam
encode(#pk_U2GS_AckInviteTeam{} = P) ->
	Bin_teamType = write_uint8( P#pk_U2GS_AckInviteTeam.teamType ),
	Bin_isAgree = write_uint8( P#pk_U2GS_AckInviteTeam.isAgree ),
	Bin_inviteType = write_uint8( P#pk_U2GS_AckInviteTeam.inviteType ),
	Bin_inviterPlayerID = write_uint64( P#pk_U2GS_AckInviteTeam.inviterPlayerID ),
	[
		<<?U2GS_AckInviteTeam:?U16>>,
		Bin_teamType,
		Bin_isAgree,
		Bin_inviteType,
		Bin_inviterPlayerID
	];

%GENERATED from file:team.h => U2GS_CancelFastTeam
encode(#pk_U2GS_CancelFastTeam{}) ->
	[
		<<?U2GS_CancelFastTeam:?U16>>

	];

%GENERATED from file:team.h => U2GS_IsOpenMapPanel
encode(#pk_U2GS_IsOpenMapPanel{} = P) ->
	Bin_isOpen = write_bool( P#pk_U2GS_IsOpenMapPanel.isOpen ),
	[
		<<?U2GS_IsOpenMapPanel:?U16>>,
		Bin_isOpen
	];

%GENERATED from file:team.h => U2GS_LeaveAwayTeam
encode(#pk_U2GS_LeaveAwayTeam{} = P) ->
	Bin_teamType = write_uint8( P#pk_U2GS_LeaveAwayTeam.teamType ),
	Bin_id = write_uint8( P#pk_U2GS_LeaveAwayTeam.id ),
	[
		<<?U2GS_LeaveAwayTeam:?U16>>,
		Bin_teamType,
		Bin_id
	];

%GENERATED from file:team.h => U2GS_NearbyPlayer_Request
encode(#pk_U2GS_NearbyPlayer_Request{}) ->
	[
		<<?U2GS_NearbyPlayer_Request:?U16>>

	];

%GENERATED from file:team.h => U2GS_NoticeLeader
encode(#pk_U2GS_NoticeLeader{}) ->
	[
		<<?U2GS_NoticeLeader:?U16>>

	];

%GENERATED from file:team.h => U2GS_OperateTeam
encode(#pk_U2GS_OperateTeam{} = P) ->
	Bin_teamType = write_uint8( P#pk_U2GS_OperateTeam.teamType ),
	Bin_operateType = write_uint8( P#pk_U2GS_OperateTeam.operateType ),
	Bin_operatedID = write_uint64( P#pk_U2GS_OperateTeam.operatedID ),
	[
		<<?U2GS_OperateTeam:?U16>>,
		Bin_teamType,
		Bin_operateType,
		Bin_operatedID
	];

%GENERATED from file:team.h => U2GS_QueryRoleList
encode(#pk_U2GS_QueryRoleList{} = P) ->
	Bin_queryType = write_int32( P#pk_U2GS_QueryRoleList.queryType ),
	[
		<<?U2GS_QueryRoleList:?U16>>,
		Bin_queryType
	];

%GENERATED from file:team.h => U2GS_QueryTeamList
encode(#pk_U2GS_QueryTeamList{} = P) ->
	Bin_mapIDList = write_array(P#pk_U2GS_QueryTeamList.mapIDList, fun(X) -> write_int32( X ) end),
	[
		<<?U2GS_QueryTeamList:?U16>>,
		Bin_mapIDList
	];

%GENERATED from file:team.h => U2GS_QueryTeamListThisLine
encode(#pk_U2GS_QueryTeamListThisLine{}) ->
	[
		<<?U2GS_QueryTeamListThisLine:?U16>>

	];

%GENERATED from file:team.h => U2GS_QuickJoinTeam
encode(#pk_U2GS_QuickJoinTeam{} = P) ->
	Bin_roleID = write_uint64( P#pk_U2GS_QuickJoinTeam.roleID ),
	Bin_mapID = write_uint32( P#pk_U2GS_QuickJoinTeam.mapID ),
	[
		<<?U2GS_QuickJoinTeam:?U16>>,
		Bin_roleID,
		Bin_mapID
	];

%GENERATED from file:team.h => U2GS_QuickTeamMatch
encode(#pk_U2GS_QuickTeamMatch{} = P) ->
	Bin_mapList = write_array(P#pk_U2GS_QuickTeamMatch.mapList, fun(X) -> write_uint16( X ) end),
	[
		<<?U2GS_QuickTeamMatch:?U16>>,
		Bin_mapList
	];

%GENERATED from file:team.h => U2GS_QuickTeamStart
encode(#pk_U2GS_QuickTeamStart{} = P) ->
	Bin_mapID = write_uint32( P#pk_U2GS_QuickTeamStart.mapID ),
	[
		<<?U2GS_QuickTeamStart:?U16>>,
		Bin_mapID
	];

%GENERATED from file:team.h => U2GS_RequestFightingCapacity
encode(#pk_U2GS_RequestFightingCapacity{}) ->
	[
		<<?U2GS_RequestFightingCapacity:?U16>>

	];

%GENERATED from file:team.h => U2GS_RequestNearByTeamInfo
encode(#pk_U2GS_RequestNearByTeamInfo{} = P) ->
	Bin_teamType = write_uint8( P#pk_U2GS_RequestNearByTeamInfo.teamType ),
	[
		<<?U2GS_RequestNearByTeamInfo:?U16>>,
		Bin_teamType
	];

%GENERATED from file:team.h => U2GS_TeamOp
encode(#pk_U2GS_TeamOp{} = P) ->
	Bin_operateType = write_uint8( P#pk_U2GS_TeamOp.operateType ),
	Bin_operatedID = write_uint64( P#pk_U2GS_TeamOp.operatedID ),
	Bin_param1 = write_uint64( P#pk_U2GS_TeamOp.param1 ),
	[
		<<?U2GS_TeamOp:?U16>>,
		Bin_operateType,
		Bin_operatedID,
		Bin_param1
	];

%GENERATED from file:trade.h => GS2U_BuyTradeFaild
encode(#pk_GS2U_BuyTradeFaild{}) ->
	[
		<<?GS2U_BuyTradeFaild:?U16>>

	];

%GENERATED from file:trade.h => GS2U_BuyTradeSuccess
encode(#pk_GS2U_BuyTradeSuccess{}) ->
	[
		<<?GS2U_BuyTradeSuccess:?U16>>

	];

%GENERATED from file:trade.h => GS2U_DealRecord
encode(#pk_GS2U_DealRecord{} = P) ->
	Bin_opCode = write_uint8( P#pk_GS2U_DealRecord.opCode ),
	Bin_number = write_uint32( P#pk_GS2U_DealRecord.number ),
	Bin_dealRecord = write_array(P#pk_GS2U_DealRecord.dealRecord, fun(X) -> encode_DealRecord( X ) end),
	[
		<<?GS2U_DealRecord:?U16>>,
		Bin_opCode,
		Bin_number,
		Bin_dealRecord
	];

%GENERATED from file:trade.h => GS2U_OpTradeResult
encode(#pk_GS2U_OpTradeResult{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_GS2U_OpTradeResult.tradeClass ),
	Bin_orderID = write_uint64( P#pk_GS2U_OpTradeResult.orderID ),
	Bin_result = write_uint8( P#pk_GS2U_OpTradeResult.result ),
	Bin_opCode = write_uint8( P#pk_GS2U_OpTradeResult.opCode ),
	[
		<<?GS2U_OpTradeResult:?U16>>,
		Bin_tradeClass,
		Bin_orderID,
		Bin_result,
		Bin_opCode
	];

%GENERATED from file:trade.h => GS2U_QueryTrade
encode(#pk_GS2U_QueryTrade{} = P) ->
	Bin_opCode = write_uint8( P#pk_GS2U_QueryTrade.opCode ),
	Bin_sortType = write_uint8( P#pk_GS2U_QueryTrade.sortType ),
	Bin_sortIndex = write_uint8( P#pk_GS2U_QueryTrade.sortIndex ),
	Bin_pageNumber = write_uint32( P#pk_GS2U_QueryTrade.pageNumber ),
	Bin_nowTime = write_uint64( P#pk_GS2U_QueryTrade.nowTime ),
	Bin_queryTradeList = write_array(P#pk_GS2U_QueryTrade.queryTradeList, fun(X) -> encode_QueryTradeList( X ) end),
	[
		<<?GS2U_QueryTrade:?U16>>,
		Bin_opCode,
		Bin_sortType,
		Bin_sortIndex,
		Bin_pageNumber,
		Bin_nowTime,
		Bin_queryTradeList
	];

%GENERATED from file:trade.h => GS2U_QueryTradeInfo
encode(#pk_GS2U_QueryTradeInfo{} = P) ->
	Bin_opCode = write_uint8( P#pk_GS2U_QueryTradeInfo.opCode ),
	Bin_tradeClass = write_uint8( P#pk_GS2U_QueryTradeInfo.tradeClass ),
	Bin_itemClass = write_uint8( P#pk_GS2U_QueryTradeInfo.itemClass ),
	Bin_itemTypeList = write_array(P#pk_GS2U_QueryTradeInfo.itemTypeList, fun(X) -> write_int8( X ) end),
	Bin_itemSubType = write_int8( P#pk_GS2U_QueryTradeInfo.itemSubType ),
	Bin_allNumber = write_int32( P#pk_GS2U_QueryTradeInfo.allNumber ),
	[
		<<?GS2U_QueryTradeInfo:?U16>>,
		Bin_opCode,
		Bin_tradeClass,
		Bin_itemClass,
		Bin_itemTypeList,
		Bin_itemSubType,
		Bin_allNumber
	];

%GENERATED from file:trade.h => GS2U_ReferenceItem
encode(#pk_GS2U_ReferenceItem{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_GS2U_ReferenceItem.tradeClass ),
	Bin_referenceItems = write_array(P#pk_GS2U_ReferenceItem.referenceItems, fun(X) -> encode_ReferenceItem( X ) end),
	Bin_referenceItem = encode_ReferenceItem( P#pk_GS2U_ReferenceItem.referenceItem ),
	[
		<<?GS2U_ReferenceItem:?U16>>,
		Bin_tradeClass,
		Bin_referenceItems,
		Bin_referenceItem
	];

%GENERATED from file:trade.h => U2GS_DownTrade
encode(#pk_U2GS_DownTrade{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_DownTrade.tradeClass ),
	Bin_orderID = write_uint64( P#pk_U2GS_DownTrade.orderID ),
	Bin_opCode = write_uint8( P#pk_U2GS_DownTrade.opCode ),
	[
		<<?U2GS_DownTrade:?U16>>,
		Bin_tradeClass,
		Bin_orderID,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_NextResult
encode(#pk_U2GS_NextResult{} = P) ->
	Bin_pageNumber = write_uint32( P#pk_U2GS_NextResult.pageNumber ),
	Bin_opCode = write_uint8( P#pk_U2GS_NextResult.opCode ),
	[
		<<?U2GS_NextResult:?U16>>,
		Bin_pageNumber,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_PutTrade
encode(#pk_U2GS_PutTrade{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_PutTrade.tradeClass ),
	Bin_itemUID = write_uint64( P#pk_U2GS_PutTrade.itemUID ),
	Bin_itemID = write_uint32( P#pk_U2GS_PutTrade.itemID ),
	Bin_sellNumber = write_uint16( P#pk_U2GS_PutTrade.sellNumber ),
	Bin_sellTime = write_uint8( P#pk_U2GS_PutTrade.sellTime ),
	Bin_gold = write_uint32( P#pk_U2GS_PutTrade.gold ),
	Bin_diamond = write_uint32( P#pk_U2GS_PutTrade.diamond ),
	Bin_destRoleName = write_string( P#pk_U2GS_PutTrade.destRoleName ),
	Bin_opCode = write_uint8( P#pk_U2GS_PutTrade.opCode ),
	[
		<<?U2GS_PutTrade:?U16>>,
		Bin_tradeClass,
		Bin_itemUID,
		Bin_itemID,
		Bin_sellNumber,
		Bin_sellTime,
		Bin_gold,
		Bin_diamond,
		Bin_destRoleName,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_QueryNewestTrade
encode(#pk_U2GS_QueryNewestTrade{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_QueryNewestTrade.tradeClass ),
	Bin_getNumber = write_uint8( P#pk_U2GS_QueryNewestTrade.getNumber ),
	Bin_oneNumber = write_int8( P#pk_U2GS_QueryNewestTrade.oneNumber ),
	Bin_opCode = write_uint8( P#pk_U2GS_QueryNewestTrade.opCode ),
	[
		<<?U2GS_QueryNewestTrade:?U16>>,
		Bin_tradeClass,
		Bin_getNumber,
		Bin_oneNumber,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_QuerySelfTrade
encode(#pk_U2GS_QuerySelfTrade{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_QuerySelfTrade.tradeClass ),
	Bin_opCode = write_uint8( P#pk_U2GS_QuerySelfTrade.opCode ),
	[
		<<?U2GS_QuerySelfTrade:?U16>>,
		Bin_tradeClass,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_QueryTrade
encode(#pk_U2GS_QueryTrade{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_QueryTrade.tradeClass ),
	Bin_itemClass = write_uint8( P#pk_U2GS_QueryTrade.itemClass ),
	Bin_itemTypeList = write_array(P#pk_U2GS_QueryTrade.itemTypeList, fun(X) -> write_int8( X ) end),
	Bin_itemSubType = write_int8( P#pk_U2GS_QueryTrade.itemSubType ),
	Bin_itemList = write_array(P#pk_U2GS_QueryTrade.itemList, fun(X) -> write_uint32( X ) end),
	Bin_career = write_int16( P#pk_U2GS_QueryTrade.career ),
	Bin_itemLvlMin = write_int8( P#pk_U2GS_QueryTrade.itemLvlMin ),
	Bin_itemLvlMax = write_int8( P#pk_U2GS_QueryTrade.itemLvlMax ),
	Bin_itemQuality = write_int8( P#pk_U2GS_QueryTrade.itemQuality ),
	Bin_oneNumber = write_int8( P#pk_U2GS_QueryTrade.oneNumber ),
	Bin_opCode = write_uint8( P#pk_U2GS_QueryTrade.opCode ),
	[
		<<?U2GS_QueryTrade:?U16>>,
		Bin_tradeClass,
		Bin_itemClass,
		Bin_itemTypeList,
		Bin_itemSubType,
		Bin_itemList,
		Bin_career,
		Bin_itemLvlMin,
		Bin_itemLvlMax,
		Bin_itemQuality,
		Bin_oneNumber,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_ReferenceItem
encode(#pk_U2GS_ReferenceItem{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_ReferenceItem.tradeClass ),
	Bin_itemID = write_uint32( P#pk_U2GS_ReferenceItem.itemID ),
	Bin_requestNumber = write_uint16( P#pk_U2GS_ReferenceItem.requestNumber ),
	[
		<<?U2GS_ReferenceItem:?U16>>,
		Bin_tradeClass,
		Bin_itemID,
		Bin_requestNumber
	];

%GENERATED from file:trade.h => U2GS_RequestDealRecord
encode(#pk_U2GS_RequestDealRecord{} = P) ->
	Bin_oneNumber = write_int8( P#pk_U2GS_RequestDealRecord.oneNumber ),
	Bin_pageNumber = write_uint8( P#pk_U2GS_RequestDealRecord.pageNumber ),
	Bin_opCode = write_uint8( P#pk_U2GS_RequestDealRecord.opCode ),
	[
		<<?U2GS_RequestDealRecord:?U16>>,
		Bin_oneNumber,
		Bin_pageNumber,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_ResultSort
encode(#pk_U2GS_ResultSort{} = P) ->
	Bin_sortIndex = write_uint8( P#pk_U2GS_ResultSort.sortIndex ),
	Bin_pageNumber = write_uint32( P#pk_U2GS_ResultSort.pageNumber ),
	Bin_sortType = write_uint8( P#pk_U2GS_ResultSort.sortType ),
	Bin_opCode = write_uint8( P#pk_U2GS_ResultSort.opCode ),
	[
		<<?U2GS_ResultSort:?U16>>,
		Bin_sortIndex,
		Bin_pageNumber,
		Bin_sortType,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_TradeBuy
encode(#pk_U2GS_TradeBuy{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_TradeBuy.tradeClass ),
	Bin_orderID = write_uint64( P#pk_U2GS_TradeBuy.orderID ),
	Bin_opCode = write_uint8( P#pk_U2GS_TradeBuy.opCode ),
	[
		<<?U2GS_TradeBuy:?U16>>,
		Bin_tradeClass,
		Bin_orderID,
		Bin_opCode
	];

%GENERATED from file:trade.h => U2GS_TradeRefuse
encode(#pk_U2GS_TradeRefuse{} = P) ->
	Bin_tradeClass = write_uint8( P#pk_U2GS_TradeRefuse.tradeClass ),
	Bin_orderID = write_uint64( P#pk_U2GS_TradeRefuse.orderID ),
	Bin_opCode = write_uint8( P#pk_U2GS_TradeRefuse.opCode ),
	[
		<<?U2GS_TradeRefuse:?U16>>,
		Bin_tradeClass,
		Bin_orderID,
		Bin_opCode
	];

%GENERATED from file:wake.h => GS2U_GoddessActiveSkill
encode(#pk_GS2U_GoddessActiveSkill{} = P) ->
	Bin_skillID = write_uint32( P#pk_GS2U_GoddessActiveSkill.skillID ),
	[
		<<?GS2U_GoddessActiveSkill:?U16>>,
		Bin_skillID
	];

%GENERATED from file:wake.h => GS2U_WakeInfo
encode(#pk_GS2U_WakeInfo{} = P) ->
	Bin_wakeInfo = encode_WakeInfo( P#pk_GS2U_WakeInfo.wakeInfo ),
	[
		<<?GS2U_WakeInfo:?U16>>,
		Bin_wakeInfo
	];

%GENERATED from file:wake.h => GS2U_WakeInfoList
encode(#pk_GS2U_WakeInfoList{} = P) ->
	Bin_wakeInfoList = write_array(P#pk_GS2U_WakeInfoList.wakeInfoList, fun(X) -> encode_WakeInfo( X ) end),
	[
		<<?GS2U_WakeInfoList:?U16>>,
		Bin_wakeInfoList
	];

%GENERATED from file:wake.h => U2GS_CallGoddess
encode(#pk_U2GS_CallGoddess{} = P) ->
	Bin_cardID = write_uint8( P#pk_U2GS_CallGoddess.cardID ),
	[
		<<?U2GS_CallGoddess:?U16>>,
		Bin_cardID
	];

%GENERATED from file:wake.h => U2GS_ChangeState
encode(#pk_U2GS_ChangeState{} = P) ->
	Bin_cardID = write_uint8( P#pk_U2GS_ChangeState.cardID ),
	Bin_state = write_uint8( P#pk_U2GS_ChangeState.state ),
	[
		<<?U2GS_ChangeState:?U16>>,
		Bin_cardID,
		Bin_state
	];

%GENERATED from file:wake.h => U2GS_OnKeyUpWakeInfo
encode(#pk_U2GS_OnKeyUpWakeInfo{} = P) ->
	Bin_cardID = write_uint8( P#pk_U2GS_OnKeyUpWakeInfo.cardID ),
	[
		<<?U2GS_OnKeyUpWakeInfo:?U16>>,
		Bin_cardID
	];

%GENERATED from file:wake.h => U2GS_UnlockCard
encode(#pk_U2GS_UnlockCard{} = P) ->
	Bin_cardID = write_uint8( P#pk_U2GS_UnlockCard.cardID ),
	[
		<<?U2GS_UnlockCard:?U16>>,
		Bin_cardID
	];

%GENERATED from file:wake.h => U2GS_UnlockState
encode(#pk_U2GS_UnlockState{} = P) ->
	Bin_cardID = write_uint8( P#pk_U2GS_UnlockState.cardID ),
	Bin_state = write_uint8( P#pk_U2GS_UnlockState.state ),
	[
		<<?U2GS_UnlockState:?U16>>,
		Bin_cardID,
		Bin_state
	];

%GENERATED from file:wake.h => U2GS_UpGradeWakeInfo
encode(#pk_U2GS_UpGradeWakeInfo{} = P) ->
	Bin_cardID = write_uint8( P#pk_U2GS_UpGradeWakeInfo.cardID ),
	[
		<<?U2GS_UpGradeWakeInfo:?U16>>,
		Bin_cardID
	];

%GENERATED from file:wake.h => U2GS_UpWakeInfo
encode(#pk_U2GS_UpWakeInfo{} = P) ->
	Bin_cardID = write_uint8( P#pk_U2GS_UpWakeInfo.cardID ),
	Bin_num = write_uint16( P#pk_U2GS_UpWakeInfo.num ),
	[
		<<?U2GS_UpWakeInfo:?U16>>,
		Bin_cardID,
		Bin_num
	];

%GENERATED from file:warriortrial.h => GS2U_InitWarriorTrialAck
encode(#pk_GS2U_InitWarriorTrialAck{} = P) ->
	Bin_record = write_uint16( P#pk_GS2U_InitWarriorTrialAck.record ),
	Bin_cur = write_uint16( P#pk_GS2U_InitWarriorTrialAck.cur ),
	Bin_max = write_uint16( P#pk_GS2U_InitWarriorTrialAck.max ),
	Bin_coin = write_uint32( P#pk_GS2U_InitWarriorTrialAck.coin ),
	Bin_maxReward = write_uint16( P#pk_GS2U_InitWarriorTrialAck.maxReward ),
	Bin_curCount = write_uint32( P#pk_GS2U_InitWarriorTrialAck.curCount ),
	[
		<<?GS2U_InitWarriorTrialAck:?U16>>,
		Bin_record,
		Bin_cur,
		Bin_max,
		Bin_coin,
		Bin_maxReward,
		Bin_curCount
	];

%GENERATED from file:warriortrial.h => GS2U_InitWarriorTrialMissionInfo
encode(#pk_GS2U_InitWarriorTrialMissionInfo{} = P) ->
	Bin_missionID = write_uint16( P#pk_GS2U_InitWarriorTrialMissionInfo.missionID ),
	Bin_time = write_uint16( P#pk_GS2U_InitWarriorTrialMissionInfo.time ),
	[
		<<?GS2U_InitWarriorTrialMissionInfo:?U16>>,
		Bin_missionID,
		Bin_time
	];

%GENERATED from file:warriortrial.h => GS2U_SweepWarriorTrialSuccess
encode(#pk_GS2U_SweepWarriorTrialSuccess{} = P) ->
	Bin_record = write_uint16( P#pk_GS2U_SweepWarriorTrialSuccess.record ),
	Bin_cur = write_uint16( P#pk_GS2U_SweepWarriorTrialSuccess.cur ),
	Bin_coin = write_uint32( P#pk_GS2U_SweepWarriorTrialSuccess.coin ),
	[
		<<?GS2U_SweepWarriorTrialSuccess:?U16>>,
		Bin_record,
		Bin_cur,
		Bin_coin
	];

%GENERATED from file:warriortrial.h => GS2U_WarriorFirstKillReward_Ack
encode(#pk_GS2U_WarriorFirstKillReward_Ack{} = P) ->
	Bin_isOK = write_bool( P#pk_GS2U_WarriorFirstKillReward_Ack.isOK ),
	Bin_maxReward = write_uint16( P#pk_GS2U_WarriorFirstKillReward_Ack.maxReward ),
	Bin_start = write_uint16( P#pk_GS2U_WarriorFirstKillReward_Ack.start ),
	[
		<<?GS2U_WarriorFirstKillReward_Ack:?U16>>,
		Bin_isOK,
		Bin_maxReward,
		Bin_start
	];

%GENERATED from file:warriortrial.h => GS2U_WarriorTrialSuccess
encode(#pk_GS2U_WarriorTrialSuccess{} = P) ->
	Bin_result = write_bool( P#pk_GS2U_WarriorTrialSuccess.result ),
	[
		<<?GS2U_WarriorTrialSuccess:?U16>>,
		Bin_result
	];

%GENERATED from file:warriortrial.h => U2GS_BeginWarriorTrial
encode(#pk_U2GS_BeginWarriorTrial{}) ->
	[
		<<?U2GS_BeginWarriorTrial:?U16>>

	];

%GENERATED from file:warriortrial.h => U2GS_CompleteWarriorTrail
encode(#pk_U2GS_CompleteWarriorTrail{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_CompleteWarriorTrail.mapID ),
	[
		<<?U2GS_CompleteWarriorTrail:?U16>>,
		Bin_mapID
	];

%GENERATED from file:warriortrial.h => U2GS_SweepWarriorTrial
encode(#pk_U2GS_SweepWarriorTrial{} = P) ->
	Bin_mapID = write_uint16( P#pk_U2GS_SweepWarriorTrial.mapID ),
	[
		<<?U2GS_SweepWarriorTrial:?U16>>,
		Bin_mapID
	];

%GENERATED from file:warriortrial.h => U2GS_SweepWarriorTrial_OneKey_Request
encode(#pk_U2GS_SweepWarriorTrial_OneKey_Request{}) ->
	[
		<<?U2GS_SweepWarriorTrial_OneKey_Request:?U16>>

	];

%GENERATED from file:warriortrial.h => U2GS_WarriorFirstKillReward_Request
encode(#pk_U2GS_WarriorFirstKillReward_Request{} = P) ->
	Bin_id = write_uint16( P#pk_U2GS_WarriorFirstKillReward_Request.id ),
	[
		<<?U2GS_WarriorFirstKillReward_Request:?U16>>,
		Bin_id
	];

%GENERATED from file:warriortrial.h => U2GS_WarriorTrialInit
encode(#pk_U2GS_WarriorTrialInit{}) ->
	[
		<<?U2GS_WarriorTrialInit:?U16>>

	];

encode(_) -> noMatch.

%GENERATED from file:Date.h => DateMonsterPos
encode_DateMonsterPos( #pk_DateMonsterPos{} = P ) ->
	Bin_code = write_uint64( P#pk_DateMonsterPos.code ),
	Bin_x = write_float( P#pk_DateMonsterPos.x ),
	Bin_z = write_float( P#pk_DateMonsterPos.z ),
	[
		Bin_code,
		Bin_x,
		Bin_z	
].

%GENERATED from file:LS2User.h => GameServerInfo
encode_GameServerInfo( #pk_GameServerInfo{} = P ) ->
	Bin_lineid = write_int16( P#pk_GameServerInfo.lineid ),
	Bin_name = write_string( P#pk_GameServerInfo.name ),
	Bin_ip = write_string( P#pk_GameServerInfo.ip ),
	Bin_port = write_int16( P#pk_GameServerInfo.port ),
	Bin_state = write_int8( P#pk_GameServerInfo.state ),
	[
		Bin_lineid,
		Bin_name,
		Bin_ip,
		Bin_port,
		Bin_state	
].

%GENERATED from file:achieve.h => AchieveSchedule
encode_AchieveSchedule( #pk_AchieveSchedule{} = P ) ->
	Bin_achieveID = write_uint16( P#pk_AchieveSchedule.achieveID ),
	Bin_scheduleRewardID = write_uint8( P#pk_AchieveSchedule.scheduleRewardID ),
	Bin_scheduleCompleteNum = write_uint32( P#pk_AchieveSchedule.scheduleCompleteNum ),
	Bin_scheduleCompleteID = write_uint8( P#pk_AchieveSchedule.scheduleCompleteID ),
	[
		Bin_achieveID,
		Bin_scheduleRewardID,
		Bin_scheduleCompleteNum,
		Bin_scheduleCompleteID	
].

%GENERATED from file:achieve.h => BadgeInfo
encode_BadgeInfo( #pk_BadgeInfo{} = P ) ->
	Bin_mapID = write_uint16( P#pk_BadgeInfo.mapID ),
	Bin_itemList = write_array(P#pk_BadgeInfo.itemList, fun(X) -> write_uint32( X ) end),
	[
		Bin_mapID,
		Bin_itemList	
].

%GENERATED from file:achieve.h => DailyActiveInfo
encode_DailyActiveInfo( #pk_DailyActiveInfo{} = P ) ->
	Bin_dailyID = write_uint8( P#pk_DailyActiveInfo.dailyID ),
	Bin_curTimes = write_uint8( P#pk_DailyActiveInfo.curTimes ),
	[
		Bin_dailyID,
		Bin_curTimes	
].

%GENERATED from file:achieve.h => TitleInfo
encode_TitleInfo( #pk_TitleInfo{} = P ) ->
	Bin_titleID = write_uint16( P#pk_TitleInfo.titleID ),
	Bin_endTime = write_uint32( P#pk_TitleInfo.endTime ),
	[
		Bin_titleID,
		Bin_endTime	
].

%GENERATED from file:activity.h => ActivityAnswerRankData
encode_ActivityAnswerRankData( #pk_ActivityAnswerRankData{} = P ) ->
	Bin_name = write_string( P#pk_ActivityAnswerRankData.name ),
	Bin_value = write_uint32( P#pk_ActivityAnswerRankData.value ),
	[
		Bin_name,
		Bin_value	
].

%GENERATED from file:activity.h => ActivityState
encode_ActivityState( #pk_ActivityState{} = P ) ->
	Bin_activityID = write_uint16( P#pk_ActivityState.activityID ),
	Bin_state = write_int16( P#pk_ActivityState.state ),
	[
		Bin_activityID,
		Bin_state	
].

%GENERATED from file:activity.h => AngelInvestmentData
encode_AngelInvestmentData( #pk_AngelInvestmentData{} = P ) ->
	Bin_isCanGet = write_bool( P#pk_AngelInvestmentData.isCanGet ),
	Bin_leftNumber = write_uint8( P#pk_AngelInvestmentData.leftNumber ),
	Bin_id = write_uint16( P#pk_AngelInvestmentData.id ),
	[
		Bin_isCanGet,
		Bin_leftNumber,
		Bin_id	
].

%GENERATED from file:activity.h => ArenaBattle
encode_ArenaBattle( #pk_ArenaBattle{} = P ) ->
	Bin_id = write_uint64( P#pk_ArenaBattle.id ),
	Bin_camp = write_uint8( P#pk_ArenaBattle.camp ),
	Bin_name = write_string( P#pk_ArenaBattle.name ),
	Bin_servername = write_string( P#pk_ArenaBattle.servername ),
	Bin_killnum = write_uint8( P#pk_ArenaBattle.killnum ),
	Bin_force = write_uint64( P#pk_ArenaBattle.force ),
	Bin_hurt = write_uint64( P#pk_ArenaBattle.hurt ),
	Bin_arenaVal = write_uint32( P#pk_ArenaBattle.arenaVal ),
	[
		Bin_id,
		Bin_camp,
		Bin_name,
		Bin_servername,
		Bin_killnum,
		Bin_force,
		Bin_hurt,
		Bin_arenaVal	
].

%GENERATED from file:activity.h => ArenaRole
encode_ArenaRole( #pk_ArenaRole{} = P ) ->
	Bin_servername = write_string( P#pk_ArenaRole.servername ),
	Bin_name = write_string( P#pk_ArenaRole.name ),
	Bin_id = write_uint64( P#pk_ArenaRole.id ),
	Bin_camp = write_uint8( P#pk_ArenaRole.camp ),
	[
		Bin_servername,
		Bin_name,
		Bin_id,
		Bin_camp	
].

%GENERATED from file:activity.h => ArenaTeamMemberInfo
encode_ArenaTeamMemberInfo( #pk_ArenaTeamMemberInfo{} = P ) ->
	Bin_id = write_uint64( P#pk_ArenaTeamMemberInfo.id ),
	Bin_code = write_uint64( P#pk_ArenaTeamMemberInfo.code ),
	Bin_name = write_string( P#pk_ArenaTeamMemberInfo.name ),
	Bin_isLeader = write_bool( P#pk_ArenaTeamMemberInfo.isLeader ),
	Bin_isPrepare = write_bool( P#pk_ArenaTeamMemberInfo.isPrepare ),
	Bin_level = write_uint8( P#pk_ArenaTeamMemberInfo.level ),
	Bin_career = write_uint32( P#pk_ArenaTeamMemberInfo.career ),
	Bin_force = write_uint64( P#pk_ArenaTeamMemberInfo.force ),
	Bin_arenaVal = write_uint32( P#pk_ArenaTeamMemberInfo.arenaVal ),
	[
		Bin_id,
		Bin_code,
		Bin_name,
		Bin_isLeader,
		Bin_isPrepare,
		Bin_level,
		Bin_career,
		Bin_force,
		Bin_arenaVal	
].

%GENERATED from file:activity.h => ChargeOrUseRuleInfo
encode_ChargeOrUseRuleInfo( #pk_ChargeOrUseRuleInfo{} = P ) ->
	Bin_ruleID = write_uint8( P#pk_ChargeOrUseRuleInfo.ruleID ),
	Bin_diamon = write_uint32( P#pk_ChargeOrUseRuleInfo.diamon ),
	Bin_itemJson = write_string( P#pk_ChargeOrUseRuleInfo.itemJson ),
	Bin_hasTake = write_bool( P#pk_ChargeOrUseRuleInfo.hasTake ),
	[
		Bin_ruleID,
		Bin_diamon,
		Bin_itemJson,
		Bin_hasTake	
].

%GENERATED from file:activity.h => CrosArenaBattleHighRank
encode_CrosArenaBattleHighRank( #pk_CrosArenaBattleHighRank{} = P ) ->
	Bin_career = write_uint32( P#pk_CrosArenaBattleHighRank.career ),
	Bin_roleID = write_uint64( P#pk_CrosArenaBattleHighRank.roleID ),
	Bin_name = write_string( P#pk_CrosArenaBattleHighRank.name ),
	Bin_servername = write_string( P#pk_CrosArenaBattleHighRank.servername ),
	Bin_force = write_uint32( P#pk_CrosArenaBattleHighRank.force ),
	Bin_arenaVal = write_uint32( P#pk_CrosArenaBattleHighRank.arenaVal ),
	Bin_win = write_uint32( P#pk_CrosArenaBattleHighRank.win ),
	Bin_fail = write_uint32( P#pk_CrosArenaBattleHighRank.fail ),
	Bin_time = write_uint64( P#pk_CrosArenaBattleHighRank.time ),
	[
		Bin_career,
		Bin_roleID,
		Bin_name,
		Bin_servername,
		Bin_force,
		Bin_arenaVal,
		Bin_win,
		Bin_fail,
		Bin_time	
].

%GENERATED from file:activity.h => CrosArenaBattleRank
encode_CrosArenaBattleRank( #pk_CrosArenaBattleRank{} = P ) ->
	Bin_rankID = write_uint8( P#pk_CrosArenaBattleRank.rankID ),
	Bin_career = write_uint32( P#pk_CrosArenaBattleRank.career ),
	Bin_roleID = write_uint64( P#pk_CrosArenaBattleRank.roleID ),
	Bin_name = write_string( P#pk_CrosArenaBattleRank.name ),
	Bin_servername = write_string( P#pk_CrosArenaBattleRank.servername ),
	Bin_force = write_uint32( P#pk_CrosArenaBattleRank.force ),
	Bin_arenaVal = write_uint32( P#pk_CrosArenaBattleRank.arenaVal ),
	Bin_win = write_uint32( P#pk_CrosArenaBattleRank.win ),
	Bin_fail = write_uint32( P#pk_CrosArenaBattleRank.fail ),
	[
		Bin_rankID,
		Bin_career,
		Bin_roleID,
		Bin_name,
		Bin_servername,
		Bin_force,
		Bin_arenaVal,
		Bin_win,
		Bin_fail	
].

%GENERATED from file:activity.h => CrosBattleExploit
encode_CrosBattleExploit( #pk_CrosBattleExploit{} = P ) ->
	Bin_rankID = write_uint8( P#pk_CrosBattleExploit.rankID ),
	Bin_career = write_uint32( P#pk_CrosBattleExploit.career ),
	Bin_roleID = write_uint64( P#pk_CrosBattleExploit.roleID ),
	Bin_name = write_string( P#pk_CrosBattleExploit.name ),
	Bin_servername = write_string( P#pk_CrosBattleExploit.servername ),
	Bin_force = write_uint32( P#pk_CrosBattleExploit.force ),
	Bin_exploit = write_uint32( P#pk_CrosBattleExploit.exploit ),
	[
		Bin_rankID,
		Bin_career,
		Bin_roleID,
		Bin_name,
		Bin_servername,
		Bin_force,
		Bin_exploit	
].

%GENERATED from file:activity.h => DarknessPlayerRank
encode_DarknessPlayerRank( #pk_DarknessPlayerRank{} = P ) ->
	Bin_rank = write_uint32( P#pk_DarknessPlayerRank.rank ),
	Bin_camp = write_uint8( P#pk_DarknessPlayerRank.camp ),
	Bin_roleID = write_uint64( P#pk_DarknessPlayerRank.roleID ),
	Bin_roleName = write_string( P#pk_DarknessPlayerRank.roleName ),
	Bin_roleLevel = write_uint32( P#pk_DarknessPlayerRank.roleLevel ),
	Bin_integral = write_uint32( P#pk_DarknessPlayerRank.integral ),
	Bin_mapPos = write_uint8( P#pk_DarknessPlayerRank.mapPos ),
	[
		Bin_rank,
		Bin_camp,
		Bin_roleID,
		Bin_roleName,
		Bin_roleLevel,
		Bin_integral,
		Bin_mapPos	
].

%GENERATED from file:activity.h => DarknessState
encode_DarknessState( #pk_DarknessState{} = P ) ->
	Bin_remainTime = write_uint32( P#pk_DarknessState.remainTime ),
	[
		Bin_remainTime	
].

%GENERATED from file:activity.h => DeadlineGift
encode_DeadlineGift( #pk_DeadlineGift{} = P ) ->
	Bin_id = write_uint16( P#pk_DeadlineGift.id ),
	Bin_startTime = write_uint32( P#pk_DeadlineGift.startTime ),
	Bin_remainTime = write_uint32( P#pk_DeadlineGift.remainTime ),
	Bin_tabString = write_string( P#pk_DeadlineGift.tabString ),
	Bin_itemID1 = write_uint16( P#pk_DeadlineGift.itemID1 ),
	Bin_itemID2 = write_uint16( P#pk_DeadlineGift.itemID2 ),
	Bin_itemID3 = write_uint16( P#pk_DeadlineGift.itemID3 ),
	Bin_itemNum1 = write_uint16( P#pk_DeadlineGift.itemNum1 ),
	Bin_itemNum2 = write_uint16( P#pk_DeadlineGift.itemNum2 ),
	Bin_itemNum3 = write_uint16( P#pk_DeadlineGift.itemNum3 ),
	Bin_itemBuyNum1 = write_uint16( P#pk_DeadlineGift.itemBuyNum1 ),
	Bin_itemBuyNum2 = write_uint16( P#pk_DeadlineGift.itemBuyNum2 ),
	Bin_itemBuyNum3 = write_uint16( P#pk_DeadlineGift.itemBuyNum3 ),
	Bin_itemDiscount1 = write_string( P#pk_DeadlineGift.itemDiscount1 ),
	Bin_itemDiscount2 = write_string( P#pk_DeadlineGift.itemDiscount2 ),
	Bin_itemDiscount3 = write_string( P#pk_DeadlineGift.itemDiscount3 ),
	Bin_itemCoinType1 = write_uint16( P#pk_DeadlineGift.itemCoinType1 ),
	Bin_itemCoinType2 = write_uint16( P#pk_DeadlineGift.itemCoinType2 ),
	Bin_itemCoinType3 = write_uint16( P#pk_DeadlineGift.itemCoinType3 ),
	Bin_itemCoinNum1 = write_uint16( P#pk_DeadlineGift.itemCoinNum1 ),
	Bin_itemCoinNum2 = write_uint16( P#pk_DeadlineGift.itemCoinNum2 ),
	Bin_itemCoinNum3 = write_uint16( P#pk_DeadlineGift.itemCoinNum3 ),
	Bin_itemRealCoinNum1 = write_uint16( P#pk_DeadlineGift.itemRealCoinNum1 ),
	Bin_itemRealCoinNum2 = write_uint16( P#pk_DeadlineGift.itemRealCoinNum2 ),
	Bin_itemRealCoinNum3 = write_uint16( P#pk_DeadlineGift.itemRealCoinNum3 ),
	Bin_image = write_string( P#pk_DeadlineGift.image ),
	Bin_itemName1 = write_string( P#pk_DeadlineGift.itemName1 ),
	Bin_itemName2 = write_string( P#pk_DeadlineGift.itemName2 ),
	Bin_itemName3 = write_string( P#pk_DeadlineGift.itemName3 ),
	Bin_itemCounts1 = write_uint16( P#pk_DeadlineGift.itemCounts1 ),
	Bin_itemCounts2 = write_uint16( P#pk_DeadlineGift.itemCounts2 ),
	Bin_itemCounts3 = write_uint16( P#pk_DeadlineGift.itemCounts3 ),
	Bin_gift1 = write_uint16( P#pk_DeadlineGift.gift1 ),
	Bin_gift2 = write_uint16( P#pk_DeadlineGift.gift2 ),
	Bin_gift3 = write_uint16( P#pk_DeadlineGift.gift3 ),
	[
		Bin_id,
		Bin_startTime,
		Bin_remainTime,
		Bin_tabString,
		Bin_itemID1,
		Bin_itemID2,
		Bin_itemID3,
		Bin_itemNum1,
		Bin_itemNum2,
		Bin_itemNum3,
		Bin_itemBuyNum1,
		Bin_itemBuyNum2,
		Bin_itemBuyNum3,
		Bin_itemDiscount1,
		Bin_itemDiscount2,
		Bin_itemDiscount3,
		Bin_itemCoinType1,
		Bin_itemCoinType2,
		Bin_itemCoinType3,
		Bin_itemCoinNum1,
		Bin_itemCoinNum2,
		Bin_itemCoinNum3,
		Bin_itemRealCoinNum1,
		Bin_itemRealCoinNum2,
		Bin_itemRealCoinNum3,
		Bin_image,
		Bin_itemName1,
		Bin_itemName2,
		Bin_itemName3,
		Bin_itemCounts1,
		Bin_itemCounts2,
		Bin_itemCounts3,
		Bin_gift1,
		Bin_gift2,
		Bin_gift3	
].

%GENERATED from file:activity.h => EscortPlunderMoney
encode_EscortPlunderMoney( #pk_EscortPlunderMoney{} = P ) ->
	Bin_roleName = write_string( P#pk_EscortPlunderMoney.roleName ),
	Bin_plunderMoney = write_int64( P#pk_EscortPlunderMoney.plunderMoney ),
	[
		Bin_roleName,
		Bin_plunderMoney	
].

%GENERATED from file:activity.h => EscortResultReward
encode_EscortResultReward( #pk_EscortResultReward{} = P ) ->
	Bin_moneyType = write_uint8( P#pk_EscortResultReward.moneyType ),
	Bin_money = write_uint32( P#pk_EscortResultReward.money ),
	Bin_perValue = write_uint32( P#pk_EscortResultReward.perValue ),
	[
		Bin_moneyType,
		Bin_money,
		Bin_perValue	
].

%GENERATED from file:activity.h => EscortTeam
encode_EscortTeam( #pk_EscortTeam{} = P ) ->
	Bin_roleID = write_uint64( P#pk_EscortTeam.roleID ),
	Bin_roleName = write_string( P#pk_EscortTeam.roleName ),
	Bin_sequenceNumber = write_uint16( P#pk_EscortTeam.sequenceNumber ),
	Bin_cur_RobNumber = write_uint16( P#pk_EscortTeam.cur_RobNumber ),
	Bin_max_RobNumber = write_uint16( P#pk_EscortTeam.max_RobNumber ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_sequenceNumber,
		Bin_cur_RobNumber,
		Bin_max_RobNumber	
].

%GENERATED from file:activity.h => GBMapLineInfo
encode_GBMapLineInfo( #pk_GBMapLineInfo{} = P ) ->
	Bin_lineID = write_uint32( P#pk_GBMapLineInfo.lineID ),
	Bin_number = write_uint16( P#pk_GBMapLineInfo.number ),
	[
		Bin_lineID,
		Bin_number	
].

%GENERATED from file:activity.h => HDBattleExploit
encode_HDBattleExploit( #pk_HDBattleExploit{} = P ) ->
	Bin_rankID = write_uint8( P#pk_HDBattleExploit.rankID ),
	Bin_camp = write_uint8( P#pk_HDBattleExploit.camp ),
	Bin_roleID = write_uint64( P#pk_HDBattleExploit.roleID ),
	Bin_name = write_string( P#pk_HDBattleExploit.name ),
	Bin_servername = write_string( P#pk_HDBattleExploit.servername ),
	Bin_killNum = write_uint16( P#pk_HDBattleExploit.killNum ),
	Bin_asKillNum = write_uint16( P#pk_HDBattleExploit.asKillNum ),
	Bin_exploit = write_uint32( P#pk_HDBattleExploit.exploit ),
	[
		Bin_rankID,
		Bin_camp,
		Bin_roleID,
		Bin_name,
		Bin_servername,
		Bin_killNum,
		Bin_asKillNum,
		Bin_exploit	
].

%GENERATED from file:activity.h => KillRank
encode_KillRank( #pk_KillRank{} = P ) ->
	Bin_sortNumber = write_uint32( P#pk_KillRank.sortNumber ),
	Bin_killNumber = write_uint32( P#pk_KillRank.killNumber ),
	Bin_playerName = write_string( P#pk_KillRank.playerName ),
	[
		Bin_sortNumber,
		Bin_killNumber,
		Bin_playerName	
].

%GENERATED from file:activity.h => LotteryItem
encode_LotteryItem( #pk_LotteryItem{} = P ) ->
	Bin_roleID = write_uint64( P#pk_LotteryItem.roleID ),
	Bin_roleName = write_string( P#pk_LotteryItem.roleName ),
	Bin_pondID = write_uint32( P#pk_LotteryItem.pondID ),
	Bin_onlyID = write_uint32( P#pk_LotteryItem.onlyID ),
	Bin_itemId = write_uint32( P#pk_LotteryItem.itemId ),
	Bin_itemNumber = write_uint32( P#pk_LotteryItem.itemNumber ),
	Bin_isBind = write_uint8( P#pk_LotteryItem.isBind ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_pondID,
		Bin_onlyID,
		Bin_itemId,
		Bin_itemNumber,
		Bin_isBind	
].

%GENERATED from file:activity.h => LotteryNote
encode_LotteryNote( #pk_LotteryNote{} = P ) ->
	Bin_roleID = write_uint64( P#pk_LotteryNote.roleID ),
	Bin_roleName = write_string( P#pk_LotteryNote.roleName ),
	Bin_itemID = write_uint32( P#pk_LotteryNote.itemID ),
	Bin_itemNumber = write_uint32( P#pk_LotteryNote.itemNumber ),
	Bin_isBind = write_uint8( P#pk_LotteryNote.isBind ),
	Bin_isServerNote = write_uint8( P#pk_LotteryNote.isServerNote ),
	Bin_zbTime = write_uint64( P#pk_LotteryNote.zbTime ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_itemID,
		Bin_itemNumber,
		Bin_isBind,
		Bin_isServerNote,
		Bin_zbTime	
].

%GENERATED from file:activity.h => OperateActExchangeRequire
encode_OperateActExchangeRequire( #pk_OperateActExchangeRequire{} = P ) ->
	Bin_itemID = write_uint16( P#pk_OperateActExchangeRequire.itemID ),
	Bin_itemNum = write_uint16( P#pk_OperateActExchangeRequire.itemNum ),
	[
		Bin_itemID,
		Bin_itemNum	
].

%GENERATED from file:activity.h => Picture_notice
encode_Picture_notice( #pk_Picture_notice{} = P ) ->
	Bin_site = write_int8( P#pk_Picture_notice.site ),
	Bin_ver = write_int32( P#pk_Picture_notice.ver ),
	Bin_source = write_string( P#pk_Picture_notice.source ),
	Bin_target = write_string( P#pk_Picture_notice.target ),
	[
		Bin_site,
		Bin_ver,
		Bin_source,
		Bin_target	
].

%GENERATED from file:activity.h => PlayerGBInfo
encode_PlayerGBInfo( #pk_PlayerGBInfo{} = P ) ->
	Bin_remainSecond = write_uint32( P#pk_PlayerGBInfo.remainSecond ),
	Bin_gatherPoint = write_uint32( P#pk_PlayerGBInfo.gatherPoint ),
	Bin_status = write_uint8( P#pk_PlayerGBInfo.status ),
	[
		Bin_remainSecond,
		Bin_gatherPoint,
		Bin_status	
].

%GENERATED from file:activity.h => PlayerKingBattleEquip
encode_PlayerKingBattleEquip( #pk_PlayerKingBattleEquip{} = P ) ->
	Bin_equipID = write_uint32( P#pk_PlayerKingBattleEquip.equipID ),
	Bin_quality = write_uint8( P#pk_PlayerKingBattleEquip.quality ),
	[
		Bin_equipID,
		Bin_quality	
].

%GENERATED from file:activity.h => PlayerKingBattleEquipLevel
encode_PlayerKingBattleEquipLevel( #pk_PlayerKingBattleEquipLevel{} = P ) ->
	Bin_type = write_uint8( P#pk_PlayerKingBattleEquipLevel.type ),
	Bin_level = write_uint8( P#pk_PlayerKingBattleEquipLevel.level ),
	[
		Bin_type,
		Bin_level	
].

%GENERATED from file:activity.h => Question
encode_Question( #pk_Question{} = P ) ->
	Bin_questionID = write_uint32( P#pk_Question.questionID ),
	Bin_answers = write_array(P#pk_Question.answers, fun(X) -> write_uint8( X ) end),
	[
		Bin_questionID,
		Bin_answers	
].

%GENERATED from file:activity.h => RewardItem
encode_RewardItem( #pk_RewardItem{} = P ) ->
	Bin_itemID = write_uint16( P#pk_RewardItem.itemID ),
	Bin_number = write_uint32( P#pk_RewardItem.number ),
	[
		Bin_itemID,
		Bin_number	
].

%GENERATED from file:activity.h => RobitAnswer
encode_RobitAnswer( #pk_RobitAnswer{} = P ) ->
	Bin_startTime = write_uint64( P#pk_RobitAnswer.startTime ),
	Bin_intervalTime = write_uint32( P#pk_RobitAnswer.intervalTime ),
	[
		Bin_startTime,
		Bin_intervalTime	
].

%GENERATED from file:activity.h => SevenDayMissionData
encode_SevenDayMissionData( #pk_SevenDayMissionData{} = P ) ->
	Bin_isFinish = write_bool( P#pk_SevenDayMissionData.isFinish ),
	Bin_number = write_uint16( P#pk_SevenDayMissionData.number ),
	Bin_max = write_uint16( P#pk_SevenDayMissionData.max ),
	Bin_missionid = write_uint16( P#pk_SevenDayMissionData.missionid ),
	[
		Bin_isFinish,
		Bin_number,
		Bin_max,
		Bin_missionid	
].

%GENERATED from file:activity.h => WildBossInfo
encode_WildBossInfo( #pk_WildBossInfo{} = P ) ->
	Bin_mapID = write_uint32( P#pk_WildBossInfo.mapID ),
	Bin_bossID = write_uint32( P#pk_WildBossInfo.bossID ),
	Bin_refreshTime = write_uint64( P#pk_WildBossInfo.refreshTime ),
	[
		Bin_mapID,
		Bin_bossID,
		Bin_refreshTime	
].

%GENERATED from file:activity.h => collectionWords_RewardCfg
encode_collectionWords_RewardCfg( #pk_collectionWords_RewardCfg{} = P ) ->
	Bin_id = write_uint16( P#pk_collectionWords_RewardCfg.id ),
	Bin_group = write_uint16( P#pk_collectionWords_RewardCfg.group ),
	Bin_collect_num = write_uint32( P#pk_collectionWords_RewardCfg.collect_num ),
	Bin_listNeed = write_array(P#pk_collectionWords_RewardCfg.listNeed, fun(X) -> encode_itemIdAndCount( X ) end),
	Bin_listReward = write_array(P#pk_collectionWords_RewardCfg.listReward, fun(X) -> encode_itemIdAndCount( X ) end),
	[
		Bin_id,
		Bin_group,
		Bin_collect_num,
		Bin_listNeed,
		Bin_listReward	
].

%GENERATED from file:activity.h => collectionWords_State
encode_collectionWords_State( #pk_collectionWords_State{} = P ) ->
	Bin_group = write_uint16( P#pk_collectionWords_State.group ),
	Bin_ver = write_uint32( P#pk_collectionWords_State.ver ),
	Bin_image = write_string( P#pk_collectionWords_State.image ),
	Bin_info_1 = write_string( P#pk_collectionWords_State.info_1 ),
	Bin_info_2 = write_string( P#pk_collectionWords_State.info_2 ),
	Bin_open_y_m_d = write_array(P#pk_collectionWords_State.open_y_m_d, fun(X) -> write_uint32( X ) end),
	Bin_limit_time = write_uint32( P#pk_collectionWords_State.limit_time ),
	Bin_word_limit = write_uint32( P#pk_collectionWords_State.word_limit ),
	[
		Bin_group,
		Bin_ver,
		Bin_image,
		Bin_info_1,
		Bin_info_2,
		Bin_open_y_m_d,
		Bin_limit_time,
		Bin_word_limit	
].

%GENERATED from file:activity.h => itemIdAndCount
encode_itemIdAndCount( #pk_itemIdAndCount{} = P ) ->
	Bin_itemID = write_uint16( P#pk_itemIdAndCount.itemID ),
	Bin_count = write_uint32( P#pk_itemIdAndCount.count ),
	[
		Bin_itemID,
		Bin_count	
].

%GENERATED from file:arena.h => KingRole
encode_KingRole( #pk_KingRole{} = P ) ->
	Bin_roleID = write_uint64( P#pk_KingRole.roleID ),
	Bin_ranksort = write_uint32( P#pk_KingRole.ranksort ),
	Bin_career = write_uint32( P#pk_KingRole.career ),
	Bin_roleName = write_string( P#pk_KingRole.roleName ),
	Bin_worshipTimes = write_uint32( P#pk_KingRole.worshipTimes ),
	[
		Bin_roleID,
		Bin_ranksort,
		Bin_career,
		Bin_roleName,
		Bin_worshipTimes	
].

%GENERATED from file:arena.h => LadderLS
encode_LadderLS( #pk_LadderLS{} = P ) ->
	Bin_roleID = write_uint64( P#pk_LadderLS.roleID ),
	Bin_roleName = write_string( P#pk_LadderLS.roleName ),
	Bin_isTerminator = write_bool( P#pk_LadderLS.isTerminator ),
	Bin_ls_times = write_uint16( P#pk_LadderLS.ls_times ),
	Bin_targetID = write_uint64( P#pk_LadderLS.targetID ),
	Bin_targetName = write_string( P#pk_LadderLS.targetName ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_isTerminator,
		Bin_ls_times,
		Bin_targetID,
		Bin_targetName	
].

%GENERATED from file:arena.h => LadderMatchInfo
encode_LadderMatchInfo( #pk_LadderMatchInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_LadderMatchInfo.roleID ),
	Bin_roleName = write_string( P#pk_LadderMatchInfo.roleName ),
	Bin_isChallenge = write_bool( P#pk_LadderMatchInfo.isChallenge ),
	Bin_isWin = write_bool( P#pk_LadderMatchInfo.isWin ),
	Bin_targetID = write_uint64( P#pk_LadderMatchInfo.targetID ),
	Bin_targetName = write_string( P#pk_LadderMatchInfo.targetName ),
	Bin_rank1 = write_uint32( P#pk_LadderMatchInfo.rank1 ),
	Bin_rank2 = write_uint32( P#pk_LadderMatchInfo.rank2 ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_isChallenge,
		Bin_isWin,
		Bin_targetID,
		Bin_targetName,
		Bin_rank1,
		Bin_rank2	
].

%GENERATED from file:arena.h => LadderTargetInfo
encode_LadderTargetInfo( #pk_LadderTargetInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_LadderTargetInfo.roleID ),
	Bin_name = write_string( P#pk_LadderTargetInfo.name ),
	Bin_level = write_uint16( P#pk_LadderTargetInfo.level ),
	Bin_career = write_uint32( P#pk_LadderTargetInfo.career ),
	Bin_ranksort = write_uint32( P#pk_LadderTargetInfo.ranksort ),
	Bin_fightingCapacity = write_uint32( P#pk_LadderTargetInfo.fightingCapacity ),
	Bin_sex = write_int8( P#pk_LadderTargetInfo.sex ),
	Bin_race = write_int8( P#pk_LadderTargetInfo.race ),
	[
		Bin_roleID,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_ranksort,
		Bin_fightingCapacity,
		Bin_sex,
		Bin_race	
].

%GENERATED from file:arena.h => SelfBattleInfo
encode_SelfBattleInfo( #pk_SelfBattleInfo{} = P ) ->
	Bin_ranksort = write_uint32( P#pk_SelfBattleInfo.ranksort ),
	Bin_fightingCapacity = write_uint32( P#pk_SelfBattleInfo.fightingCapacity ),
	Bin_exploit = write_uint32( P#pk_SelfBattleInfo.exploit ),
	Bin_cur_ChallengeTimes = write_uint16( P#pk_SelfBattleInfo.cur_ChallengeTimes ),
	Bin_max_ChallengeTimes = write_uint16( P#pk_SelfBattleInfo.max_ChallengeTimes ),
	Bin_moneyType = write_uint8( P#pk_SelfBattleInfo.moneyType ),
	Bin_money = write_uint32( P#pk_SelfBattleInfo.money ),
	Bin_cur_win = write_uint16( P#pk_SelfBattleInfo.cur_win ),
	Bin_max_win = write_uint16( P#pk_SelfBattleInfo.max_win ),
	Bin_win_times = write_uint32( P#pk_SelfBattleInfo.win_times ),
	Bin_surplusSec = write_uint32( P#pk_SelfBattleInfo.surplusSec ),
	Bin_exploitValue = write_uint32( P#pk_SelfBattleInfo.exploitValue ),
	[
		Bin_ranksort,
		Bin_fightingCapacity,
		Bin_exploit,
		Bin_cur_ChallengeTimes,
		Bin_max_ChallengeTimes,
		Bin_moneyType,
		Bin_money,
		Bin_cur_win,
		Bin_max_win,
		Bin_win_times,
		Bin_surplusSec,
		Bin_exploitValue	
].

%GENERATED from file:aruna.h => WWFormData
encode_WWFormData( #pk_WWFormData{} = P ) ->
	Bin_selfRank = encode_WWRank( P#pk_WWFormData.selfRank ),
	Bin_selfLastRank = encode_WWRank( P#pk_WWFormData.selfLastRank ),
	Bin_isGetLastReward = write_bool( P#pk_WWFormData.isGetLastReward ),
	Bin_phase = write_uint16( P#pk_WWFormData.phase ),
	Bin_schedule = write_uint32( P#pk_WWFormData.schedule ),
	Bin_selfPhase = write_uint16( P#pk_WWFormData.selfPhase ),
	Bin_upper = write_uint32( P#pk_WWFormData.upper ),
	[
		Bin_selfRank,
		Bin_selfLastRank,
		Bin_isGetLastReward,
		Bin_phase,
		Bin_schedule,
		Bin_selfPhase,
		Bin_upper	
].

%GENERATED from file:aruna.h => WWMapLineInfo
encode_WWMapLineInfo( #pk_WWMapLineInfo{} = P ) ->
	Bin_mapID = write_uint16( P#pk_WWMapLineInfo.mapID ),
	Bin_lineID = write_uint32( P#pk_WWMapLineInfo.lineID ),
	Bin_number = write_uint16( P#pk_WWMapLineInfo.number ),
	[
		Bin_mapID,
		Bin_lineID,
		Bin_number	
].

%GENERATED from file:aruna.h => WWRank
encode_WWRank( #pk_WWRank{} = P ) ->
	Bin_rankIndex = write_uint16( P#pk_WWRank.rankIndex ),
	Bin_roleID = write_uint64( P#pk_WWRank.roleID ),
	Bin_roleName = write_string( P#pk_WWRank.roleName ),
	Bin_guildName = write_string( P#pk_WWRank.guildName ),
	Bin_contribution = write_uint32( P#pk_WWRank.contribution ),
	[
		Bin_rankIndex,
		Bin_roleID,
		Bin_roleName,
		Bin_guildName,
		Bin_contribution	
].

%GENERATED from file:aruna.h => WWSyncMapPhaseTwo
encode_WWSyncMapPhaseTwo( #pk_WWSyncMapPhaseTwo{} = P ) ->
	Bin_monsterID = write_uint32( P#pk_WWSyncMapPhaseTwo.monsterID ),
	Bin_curNumber = write_uint32( P#pk_WWSyncMapPhaseTwo.curNumber ),
	Bin_maxNumber = write_uint32( P#pk_WWSyncMapPhaseTwo.maxNumber ),
	[
		Bin_monsterID,
		Bin_curNumber,
		Bin_maxNumber	
].

%GENERATED from file:bag.h => BagSlot
encode_BagSlot( #pk_BagSlot{} = P ) ->
	Bin_max = write_uint8( P#pk_BagSlot.max ),
	Bin_used = write_uint8( P#pk_BagSlot.used ),
	[
		Bin_max,
		Bin_used	
].

%GENERATED from file:bag.h => EquipEnhancedProp
encode_EquipEnhancedProp( #pk_EquipEnhancedProp{} = P ) ->
	Bin_propKey = write_uint8( P#pk_EquipEnhancedProp.propKey ),
	Bin_propValue = write_float( P#pk_EquipEnhancedProp.propValue ),
	[
		Bin_propKey,
		Bin_propValue	
].

%GENERATED from file:bag.h => EquipGemInfo
encode_EquipGemInfo( #pk_EquipGemInfo{} = P ) ->
	Bin_equipPos = write_uint16( P#pk_EquipGemInfo.equipPos ),
	Bin_gemList = write_array(P#pk_EquipGemInfo.gemList, fun(X) -> encode_GemEmbedInfo( X ) end),
	[
		Bin_equipPos,
		Bin_gemList	
].

%GENERATED from file:bag.h => EquipItemInfo
encode_EquipItemInfo( #pk_EquipItemInfo{} = P ) ->
	Bin_itemID = write_uint32( P#pk_EquipItemInfo.itemID ),
	Bin_itemUID = write_uint64( P#pk_EquipItemInfo.itemUID ),
	Bin_recastNum = write_uint16( P#pk_EquipItemInfo.recastNum ),
	Bin_quality = write_uint8( P#pk_EquipItemInfo.quality ),
	Bin_isBind = write_bool( P#pk_EquipItemInfo.isBind ),
	Bin_isLocked = write_bool( P#pk_EquipItemInfo.isLocked ),
	Bin_expiredTime = write_uint32( P#pk_EquipItemInfo.expiredTime ),
	Bin_equipProps = write_array(P#pk_EquipItemInfo.equipProps, fun(X) -> encode_EquipPropInfo( X ) end),
	[
		Bin_itemID,
		Bin_itemUID,
		Bin_recastNum,
		Bin_quality,
		Bin_isBind,
		Bin_isLocked,
		Bin_expiredTime,
		Bin_equipProps	
].

%GENERATED from file:bag.h => EquipPropInfo
encode_EquipPropInfo( #pk_EquipPropInfo{} = P ) ->
	Bin_propType = write_uint8( P#pk_EquipPropInfo.propType ),
	Bin_propKey = write_uint8( P#pk_EquipPropInfo.propKey ),
	Bin_propAffix = write_uint16( P#pk_EquipPropInfo.propAffix ),
	Bin_calcType = write_bool( P#pk_EquipPropInfo.calcType ),
	Bin_propValue = write_float( P#pk_EquipPropInfo.propValue ),
	[
		Bin_propType,
		Bin_propKey,
		Bin_propAffix,
		Bin_calcType,
		Bin_propValue	
].

%GENERATED from file:bag.h => EquipRefineLevel
encode_EquipRefineLevel( #pk_EquipRefineLevel{} = P ) ->
	Bin_type = write_uint8( P#pk_EquipRefineLevel.type ),
	Bin_bless = write_uint16( P#pk_EquipRefineLevel.bless ),
	Bin_level = write_uint8( P#pk_EquipRefineLevel.level ),
	[
		Bin_type,
		Bin_bless,
		Bin_level	
].

%GENERATED from file:bag.h => EquipStarLevel
encode_EquipStarLevel( #pk_EquipStarLevel{} = P ) ->
	Bin_type = write_uint8( P#pk_EquipStarLevel.type ),
	Bin_level = write_uint8( P#pk_EquipStarLevel.level ),
	[
		Bin_type,
		Bin_level	
].

%GENERATED from file:bag.h => EquipUpStarInfo
encode_EquipUpStarInfo( #pk_EquipUpStarInfo{} = P ) ->
	Bin_pos = write_uint8( P#pk_EquipUpStarInfo.pos ),
	Bin_level = write_uint8( P#pk_EquipUpStarInfo.level ),
	Bin_prog = write_uint8( P#pk_EquipUpStarInfo.prog ),
	Bin_bless = write_uint16( P#pk_EquipUpStarInfo.bless ),
	[
		Bin_pos,
		Bin_level,
		Bin_prog,
		Bin_bless	
].

%GENERATED from file:bag.h => ExchangeResource
encode_ExchangeResource( #pk_ExchangeResource{} = P ) ->
	Bin_id = write_uint32( P#pk_ExchangeResource.id ),
	Bin_groupID = write_uint8( P#pk_ExchangeResource.groupID ),
	Bin_itemID = write_uint32( P#pk_ExchangeResource.itemID ),
	Bin_payItem = write_array(P#pk_ExchangeResource.payItem, fun(X) -> encode_PayItemOfExchange( X ) end),
	Bin_playerLevel = write_uint8( P#pk_ExchangeResource.playerLevel ),
	Bin_limit = write_uint16( P#pk_ExchangeResource.limit ),
	[
		Bin_id,
		Bin_groupID,
		Bin_itemID,
		Bin_payItem,
		Bin_playerLevel,
		Bin_limit	
].

%GENERATED from file:bag.h => GemEmbedInfo
encode_GemEmbedInfo( #pk_GemEmbedInfo{} = P ) ->
	Bin_gemID = write_uint64( P#pk_GemEmbedInfo.gemID ),
	Bin_slot = write_uint8( P#pk_GemEmbedInfo.slot ),
	[
		Bin_gemID,
		Bin_slot	
].

%GENERATED from file:bag.h => LookGemInfo
encode_LookGemInfo( #pk_LookGemInfo{} = P ) ->
	Bin_gemID = write_uint16( P#pk_LookGemInfo.gemID ),
	Bin_slot = write_uint8( P#pk_LookGemInfo.slot ),
	[
		Bin_gemID,
		Bin_slot	
].

%GENERATED from file:bag.h => LookGodWeaponInfo
encode_LookGodWeaponInfo( #pk_LookGodWeaponInfo{} = P ) ->
	Bin_weaponID = write_uint8( P#pk_LookGodWeaponInfo.weaponID ),
	Bin_weaponLevel = write_uint16( P#pk_LookGodWeaponInfo.weaponLevel ),
	Bin_skillLevel = write_uint16( P#pk_LookGodWeaponInfo.skillLevel ),
	[
		Bin_weaponID,
		Bin_weaponLevel,
		Bin_skillLevel	
].

%GENERATED from file:bag.h => LookPetEquipInfo
encode_LookPetEquipInfo( #pk_LookPetEquipInfo{} = P ) ->
	Bin_equipID = write_uint8( P#pk_LookPetEquipInfo.equipID ),
	Bin_equipLv = write_uint8( P#pk_LookPetEquipInfo.equipLv ),
	[
		Bin_equipID,
		Bin_equipLv	
].

%GENERATED from file:bag.h => LookPetInfo
encode_LookPetInfo( #pk_LookPetInfo{} = P ) ->
	Bin_petID = write_uint16( P#pk_LookPetInfo.petID ),
	Bin_petStar = write_uint8( P#pk_LookPetInfo.petStar ),
	Bin_petname = write_string( P#pk_LookPetInfo.petname ),
	Bin_petForce = write_uint32( P#pk_LookPetInfo.petForce ),
	Bin_petColNum = write_uint16( P#pk_LookPetInfo.petColNum ),
	Bin_petRaw = write_uint8( P#pk_LookPetInfo.petRaw ),
	Bin_petSkill = write_array(P#pk_LookPetInfo.petSkill, fun(X) -> encode_LookPetSkill( X ) end),
	Bin_equalInfo = write_array(P#pk_LookPetInfo.equalInfo, fun(X) -> encode_LookPetEquipInfo( X ) end),
	Bin_petPropValues = write_array(P#pk_LookPetInfo.petPropValues, fun(X) -> write_float( X ) end),
	[
		Bin_petID,
		Bin_petStar,
		Bin_petname,
		Bin_petForce,
		Bin_petColNum,
		Bin_petRaw,
		Bin_petSkill,
		Bin_equalInfo,
		Bin_petPropValues	
].

%GENERATED from file:bag.h => LookPetSkill
encode_LookPetSkill( #pk_LookPetSkill{} = P ) ->
	Bin_petSkillId = write_uint16( P#pk_LookPetSkill.petSkillId ),
	Bin_petSkillLv = write_uint8( P#pk_LookPetSkill.petSkillLv ),
	Bin_petSkillType = write_uint8( P#pk_LookPetSkill.petSkillType ),
	[
		Bin_petSkillId,
		Bin_petSkillLv,
		Bin_petSkillType	
].

%GENERATED from file:bag.h => LookWakeInfo
encode_LookWakeInfo( #pk_LookWakeInfo{} = P ) ->
	Bin_cardID = write_uint8( P#pk_LookWakeInfo.cardID ),
	Bin_level = write_uint8( P#pk_LookWakeInfo.level ),
	[
		Bin_cardID,
		Bin_level	
].

%GENERATED from file:bag.h => NormalItemInfo
encode_NormalItemInfo( #pk_NormalItemInfo{} = P ) ->
	Bin_itemID = write_uint32( P#pk_NormalItemInfo.itemID ),
	Bin_itemUID = write_uint64( P#pk_NormalItemInfo.itemUID ),
	Bin_itemSum = write_uint16( P#pk_NormalItemInfo.itemSum ),
	Bin_isBind = write_bool( P#pk_NormalItemInfo.isBind ),
	Bin_isLocked = write_bool( P#pk_NormalItemInfo.isLocked ),
	Bin_expiredTime = write_uint32( P#pk_NormalItemInfo.expiredTime ),
	[
		Bin_itemID,
		Bin_itemUID,
		Bin_itemSum,
		Bin_isBind,
		Bin_isLocked,
		Bin_expiredTime	
].

%GENERATED from file:bag.h => PayItemOfExchange
encode_PayItemOfExchange( #pk_PayItemOfExchange{} = P ) ->
	Bin_item = write_int32( P#pk_PayItemOfExchange.item ),
	Bin_number = write_uint16( P#pk_PayItemOfExchange.number ),
	[
		Bin_item,
		Bin_number	
].

%GENERATED from file:bag.h => PortraitFrame
encode_PortraitFrame( #pk_PortraitFrame{} = P ) ->
	Bin_id = write_uint16( P#pk_PortraitFrame.id ),
	Bin_endTime = write_uint32( P#pk_PortraitFrame.endTime ),
	[
		Bin_id,
		Bin_endTime	
].

%GENERATED from file:bag.h => RPView_AddProp
encode_RPView_AddProp( #pk_RPView_AddProp{} = P ) ->
	Bin_prop = write_uint8( P#pk_RPView_AddProp.prop ),
	Bin_value = write_float( P#pk_RPView_AddProp.value ),
	[
		Bin_prop,
		Bin_value	
].

%GENERATED from file:bag.h => RPView_AssistBattleInfo
encode_RPView_AssistBattleInfo( #pk_RPView_AssistBattleInfo{} = P ) ->
	Bin_petID = write_uint16( P#pk_RPView_AssistBattleInfo.petID ),
	Bin_slot = write_uint8( P#pk_RPView_AssistBattleInfo.slot ),
	[
		Bin_petID,
		Bin_slot	
].

%GENERATED from file:bag.h => RPView_FashionInfo
encode_RPView_FashionInfo( #pk_RPView_FashionInfo{} = P ) ->
	Bin_fashionID = write_uint32( P#pk_RPView_FashionInfo.fashionID ),
	Bin_time = write_uint32( P#pk_RPView_FashionInfo.time ),
	[
		Bin_fashionID,
		Bin_time	
].

%GENERATED from file:bag.h => RPView_PetBaseInfo
encode_RPView_PetBaseInfo( #pk_RPView_PetBaseInfo{} = P ) ->
	Bin_petID = write_uint16( P#pk_RPView_PetBaseInfo.petID ),
	Bin_petStar = write_uint8( P#pk_RPView_PetBaseInfo.petStar ),
	Bin_status = write_uint8( P#pk_RPView_PetBaseInfo.status ),
	Bin_petName = write_string( P#pk_RPView_PetBaseInfo.petName ),
	Bin_petRaw = write_uint8( P#pk_RPView_PetBaseInfo.petRaw ),
	Bin_petProps = write_array(P#pk_RPView_PetBaseInfo.petProps, fun(X) -> encode_RPView_AddProp( X ) end),
	Bin_petForce = write_uint64( P#pk_RPView_PetBaseInfo.petForce ),
	Bin_upCount = write_uint32( P#pk_RPView_PetBaseInfo.upCount ),
	Bin_petLevel = write_uint32( P#pk_RPView_PetBaseInfo.petLevel ),
	Bin_petExp = write_uint32( P#pk_RPView_PetBaseInfo.petExp ),
	[
		Bin_petID,
		Bin_petStar,
		Bin_status,
		Bin_petName,
		Bin_petRaw,
		Bin_petProps,
		Bin_petForce,
		Bin_upCount,
		Bin_petLevel,
		Bin_petExp	
].

%GENERATED from file:bag.h => RecastPosInfo
encode_RecastPosInfo( #pk_RecastPosInfo{} = P ) ->
	Bin_equipPos = write_uint16( P#pk_RecastPosInfo.equipPos ),
	Bin_recastVal = write_uint32( P#pk_RecastPosInfo.recastVal ),
	Bin_recastInfo = write_array(P#pk_RecastPosInfo.recastInfo, fun(X) -> encode_RecastPropInfo( X ) end),
	Bin_recastInfo_ext = write_array(P#pk_RecastPosInfo.recastInfo_ext, fun(X) -> encode_RecastPropInfo( X ) end),
	[
		Bin_equipPos,
		Bin_recastVal,
		Bin_recastInfo,
		Bin_recastInfo_ext	
].

%GENERATED from file:bag.h => RecastPropInfo
encode_RecastPropInfo( #pk_RecastPropInfo{} = P ) ->
	Bin_pos = write_uint16( P#pk_RecastPropInfo.pos ),
	Bin_propIndex = write_uint32( P#pk_RecastPropInfo.propIndex ),
	Bin_propValue = write_float( P#pk_RecastPropInfo.propValue ),
	Bin_propValMax = write_float( P#pk_RecastPropInfo.propValMax ),
	[
		Bin_pos,
		Bin_propIndex,
		Bin_propValue,
		Bin_propValMax	
].

%GENERATED from file:bag.h => RecycleEquip
encode_RecycleEquip( #pk_RecycleEquip{} = P ) ->
	Bin_slot = write_uint8( P#pk_RecycleEquip.slot ),
	Bin_equip = encode_EquipItemInfo( P#pk_RecycleEquip.equip ),
	[
		Bin_slot,
		Bin_equip	
].

%GENERATED from file:bag.h => RecycleItem
encode_RecycleItem( #pk_RecycleItem{} = P ) ->
	Bin_slot = write_uint8( P#pk_RecycleItem.slot ),
	Bin_item = encode_NormalItemInfo( P#pk_RecycleItem.item ),
	[
		Bin_slot,
		Bin_item	
].

%GENERATED from file:bag.h => starCostItem
encode_starCostItem( #pk_starCostItem{} = P ) ->
	Bin_itemID = write_uint16( P#pk_starCostItem.itemID ),
	Bin_itemNum = write_uint16( P#pk_starCostItem.itemNum ),
	[
		Bin_itemID,
		Bin_itemNum	
].

%GENERATED from file:bag.h => washReturnItemInfo
encode_washReturnItemInfo( #pk_washReturnItemInfo{} = P ) ->
	Bin_itemID = write_uint16( P#pk_washReturnItemInfo.itemID ),
	Bin_itemNum = write_uint16( P#pk_washReturnItemInfo.itemNum ),
	[
		Bin_itemID,
		Bin_itemNum	
].

%GENERATED from file:battle.h => AttackResultList
encode_AttackResultList( #pk_AttackResultList{} = P ) ->
	Bin_type = write_uint8( P#pk_AttackResultList.type ),
	Bin_value = write_uint32( P#pk_AttackResultList.value ),
	[
		Bin_type,
		Bin_value	
].

%GENERATED from file:battle.h => BeAttack
encode_BeAttack( #pk_BeAttack{} = P ) ->
	Bin_camp = write_uint8( P#pk_BeAttack.camp ),
	Bin_pos = write_uint8( P#pk_BeAttack.pos ),
	Bin_hp = write_int32( P#pk_BeAttack.hp ),
	[
		Bin_camp,
		Bin_pos,
		Bin_hp	
].

%GENERATED from file:battle.h => TrunBattleResult
encode_TrunBattleResult( #pk_TrunBattleResult{} = P ) ->
	Bin_camp = write_uint8( P#pk_TrunBattleResult.camp ),
	Bin_pos = write_uint8( P#pk_TrunBattleResult.pos ),
	Bin_id = write_uint16( P#pk_TrunBattleResult.id ),
	Bin_turn = write_uint8( P#pk_TrunBattleResult.turn ),
	Bin_bl = write_array(P#pk_TrunBattleResult.bl, fun(X) -> encode_BeAttack( X ) end),
	[
		Bin_camp,
		Bin_pos,
		Bin_id,
		Bin_turn,
		Bin_bl	
].

%GENERATED from file:battle.h => TurnBattleInit
encode_TurnBattleInit( #pk_TurnBattleInit{} = P ) ->
	Bin_id = write_uint64( P#pk_TurnBattleInit.id ),
	Bin_type = write_uint8( P#pk_TurnBattleInit.type ),
	Bin_camp = write_uint8( P#pk_TurnBattleInit.camp ),
	Bin_pos = write_uint8( P#pk_TurnBattleInit.pos ),
	Bin_hp = write_uint32( P#pk_TurnBattleInit.hp ),
	[
		Bin_id,
		Bin_type,
		Bin_camp,
		Bin_pos,
		Bin_hp	
].

%GENERATED from file:business.h => ActivityNum
encode_ActivityNum( #pk_ActivityNum{} = P ) ->
	Bin_id = write_uint32( P#pk_ActivityNum.id ),
	Bin_claimNum = write_uint32( P#pk_ActivityNum.claimNum ),
	[
		Bin_id,
		Bin_claimNum	
].

%GENERATED from file:business.h => ActivitySuccessItem
encode_ActivitySuccessItem( #pk_ActivitySuccessItem{} = P ) ->
	Bin_index = write_uint8( P#pk_ActivitySuccessItem.index ),
	Bin_itemID = write_uint32( P#pk_ActivitySuccessItem.itemID ),
	Bin_num = write_uint32( P#pk_ActivitySuccessItem.num ),
	[
		Bin_index,
		Bin_itemID,
		Bin_num	
].

%GENERATED from file:business.h => Business
encode_Business( #pk_Business{} = P ) ->
	Bin_id = write_uint32( P#pk_Business.id ),
	Bin_platformItemID = write_string( P#pk_Business.platformItemID ),
	Bin_name = write_string( P#pk_Business.name ),
	Bin_des = write_string( P#pk_Business.des ),
	Bin_pic = write_string( P#pk_Business.pic ),
	Bin_picType = write_uint8( P#pk_Business.picType ),
	Bin_activityType = write_uint8( P#pk_Business.activityType ),
	Bin_isAlonePay = write_uint8( P#pk_Business.isAlonePay ),
	Bin_resetClaimNumType = write_uint8( P#pk_Business.resetClaimNumType ),
	Bin_label = write_uint8( P#pk_Business.label ),
	Bin_claimMoney = write_float( P#pk_Business.claimMoney ),
	Bin_claimGold = write_uint32( P#pk_Business.claimGold ),
	Bin_claimConsumeType = write_uint8( P#pk_Business.claimConsumeType ),
	Bin_claimConsume = write_uint32( P#pk_Business.claimConsume ),
	Bin_claimNum = write_uint32( P#pk_Business.claimNum ),
	Bin_claimIsBuy = write_uint8( P#pk_Business.claimIsBuy ),
	Bin_claimVip = write_uint8( P#pk_Business.claimVip ),
	Bin_claimLevel = write_uint16( P#pk_Business.claimLevel ),
	Bin_rewardCoinType = write_uint8( P#pk_Business.rewardCoinType ),
	Bin_rewardCoinNum = write_uint32( P#pk_Business.rewardCoinNum ),
	Bin_rewardPackageID = write_uint32( P#pk_Business.rewardPackageID ),
	Bin_item1 = write_uint32( P#pk_Business.item1 ),
	Bin_num1 = write_uint32( P#pk_Business.num1 ),
	Bin_item2 = write_uint32( P#pk_Business.item2 ),
	Bin_num2 = write_uint32( P#pk_Business.num2 ),
	Bin_item3 = write_uint32( P#pk_Business.item3 ),
	Bin_num3 = write_uint32( P#pk_Business.num3 ),
	Bin_item4 = write_uint32( P#pk_Business.item4 ),
	Bin_num4 = write_uint32( P#pk_Business.num4 ),
	Bin_item5 = write_uint32( P#pk_Business.item5 ),
	Bin_num5 = write_uint32( P#pk_Business.num5 ),
	Bin_item6 = write_uint32( P#pk_Business.item6 ),
	Bin_num6 = write_uint32( P#pk_Business.num6 ),
	Bin_item7 = write_uint32( P#pk_Business.item7 ),
	Bin_num7 = write_uint32( P#pk_Business.num7 ),
	Bin_item8 = write_uint32( P#pk_Business.item8 ),
	Bin_num8 = write_uint32( P#pk_Business.num8 ),
	Bin_item9 = write_uint32( P#pk_Business.item9 ),
	Bin_num9 = write_uint32( P#pk_Business.num9 ),
	Bin_item10 = write_uint32( P#pk_Business.item10 ),
	Bin_num10 = write_uint32( P#pk_Business.num10 ),
	Bin_startTime = write_uint32( P#pk_Business.startTime ),
	Bin_endTime = write_uint32( P#pk_Business.endTime ),
	Bin_giveGold = write_uint32( P#pk_Business.giveGold ),
	Bin_isAddClaimGold = write_uint8( P#pk_Business.isAddClaimGold ),
	[
		Bin_id,
		Bin_platformItemID,
		Bin_name,
		Bin_des,
		Bin_pic,
		Bin_picType,
		Bin_activityType,
		Bin_isAlonePay,
		Bin_resetClaimNumType,
		Bin_label,
		Bin_claimMoney,
		Bin_claimGold,
		Bin_claimConsumeType,
		Bin_claimConsume,
		Bin_claimNum,
		Bin_claimIsBuy,
		Bin_claimVip,
		Bin_claimLevel,
		Bin_rewardCoinType,
		Bin_rewardCoinNum,
		Bin_rewardPackageID,
		Bin_item1,
		Bin_num1,
		Bin_item2,
		Bin_num2,
		Bin_item3,
		Bin_num3,
		Bin_item4,
		Bin_num4,
		Bin_item5,
		Bin_num5,
		Bin_item6,
		Bin_num6,
		Bin_item7,
		Bin_num7,
		Bin_item8,
		Bin_num8,
		Bin_item9,
		Bin_num9,
		Bin_item10,
		Bin_num10,
		Bin_startTime,
		Bin_endTime,
		Bin_giveGold,
		Bin_isAddClaimGold	
].

%GENERATED from file:business.h => BusinessCAInfo
encode_BusinessCAInfo( #pk_BusinessCAInfo{} = P ) ->
	Bin_businessID = write_uint32( P#pk_BusinessCAInfo.businessID ),
	Bin_isComplete = write_uint8( P#pk_BusinessCAInfo.isComplete ),
	Bin_isReward = write_uint8( P#pk_BusinessCAInfo.isReward ),
	Bin_rechargeDiamondCount = write_uint32( P#pk_BusinessCAInfo.rechargeDiamondCount ),
	[
		Bin_businessID,
		Bin_isComplete,
		Bin_isReward,
		Bin_rechargeDiamondCount	
].

%GENERATED from file:business.h => CoinConsume
encode_CoinConsume( #pk_CoinConsume{} = P ) ->
	Bin_coinType = write_uint8( P#pk_CoinConsume.coinType ),
	Bin_value = write_uint32( P#pk_CoinConsume.value ),
	[
		Bin_coinType,
		Bin_value	
].

%GENERATED from file:business.h => DialCost
encode_DialCost( #pk_DialCost{} = P ) ->
	Bin_id = write_uint32( P#pk_DialCost.id ),
	Bin_des = write_string( P#pk_DialCost.des ),
	Bin_boxType = write_uint8( P#pk_DialCost.boxType ),
	Bin_coinType = write_uint8( P#pk_DialCost.coinType ),
	Bin_coinNum = write_uint32( P#pk_DialCost.coinNum ),
	Bin_times = write_uint16( P#pk_DialCost.times ),
	Bin_addLuckValue = write_uint16( P#pk_DialCost.addLuckValue ),
	Bin_maxLuck = write_uint16( P#pk_DialCost.maxLuck ),
	[
		Bin_id,
		Bin_des,
		Bin_boxType,
		Bin_coinType,
		Bin_coinNum,
		Bin_times,
		Bin_addLuckValue,
		Bin_maxLuck	
].

%GENERATED from file:business.h => DialItem
encode_DialItem( #pk_DialItem{} = P ) ->
	Bin_boxType = write_uint8( P#pk_DialItem.boxType ),
	Bin_index = write_uint8( P#pk_DialItem.index ),
	Bin_itemID = write_uint32( P#pk_DialItem.itemID ),
	Bin_num = write_uint32( P#pk_DialItem.num ),
	[
		Bin_boxType,
		Bin_index,
		Bin_itemID,
		Bin_num	
].

%GENERATED from file:business.h => DialReward
encode_DialReward( #pk_DialReward{} = P ) ->
	Bin_boxType = write_uint8( P#pk_DialReward.boxType ),
	Bin_needTimes = write_uint16( P#pk_DialReward.needTimes ),
	Bin_itemID1 = write_uint32( P#pk_DialReward.itemID1 ),
	Bin_num1 = write_uint32( P#pk_DialReward.num1 ),
	Bin_itemID2 = write_uint32( P#pk_DialReward.itemID2 ),
	Bin_num2 = write_uint32( P#pk_DialReward.num2 ),
	Bin_itemID3 = write_uint32( P#pk_DialReward.itemID3 ),
	Bin_num3 = write_uint32( P#pk_DialReward.num3 ),
	[
		Bin_boxType,
		Bin_needTimes,
		Bin_itemID1,
		Bin_num1,
		Bin_itemID2,
		Bin_num2,
		Bin_itemID3,
		Bin_num3	
].

%GENERATED from file:business.h => SelfDialInfo
encode_SelfDialInfo( #pk_SelfDialInfo{} = P ) ->
	Bin_boxType = write_uint8( P#pk_SelfDialInfo.boxType ),
	Bin_haveTimes = write_uint16( P#pk_SelfDialInfo.haveTimes ),
	Bin_getTimes = write_array(P#pk_SelfDialInfo.getTimes, fun(X) -> write_uint16( X ) end),
	Bin_haveLuck = write_uint16( P#pk_SelfDialInfo.haveLuck ),
	[
		Bin_boxType,
		Bin_haveTimes,
		Bin_getTimes,
		Bin_haveLuck	
].

%GENERATED from file:companion.h => CompanionMember
encode_CompanionMember( #pk_CompanionMember{} = P ) ->
	Bin_roleid = write_uint64( P#pk_CompanionMember.roleid ),
	Bin_name = write_string( P#pk_CompanionMember.name ),
	Bin_lvl = write_uint16( P#pk_CompanionMember.lvl ),
	Bin_relation = write_uint8( P#pk_CompanionMember.relation ),
	Bin_cur_lively = write_uint32( P#pk_CompanionMember.cur_lively ),
	Bin_max_lively = write_uint32( P#pk_CompanionMember.max_lively ),
	Bin_all_lively = write_uint32( P#pk_CompanionMember.all_lively ),
	Bin_offlinetime = write_uint64( P#pk_CompanionMember.offlinetime ),
	Bin_onlineTimeEnough = write_bool( P#pk_CompanionMember.onlineTimeEnough ),
	Bin_styleID = write_uint8( P#pk_CompanionMember.styleID ),
	Bin_mapID = write_uint16( P#pk_CompanionMember.mapID ),
	Bin_career = write_uint32( P#pk_CompanionMember.career ),
	Bin_race = write_uint8( P#pk_CompanionMember.race ),
	Bin_sex = write_uint8( P#pk_CompanionMember.sex ),
	Bin_head = write_uint32( P#pk_CompanionMember.head ),
	[
		Bin_roleid,
		Bin_name,
		Bin_lvl,
		Bin_relation,
		Bin_cur_lively,
		Bin_max_lively,
		Bin_all_lively,
		Bin_offlinetime,
		Bin_onlineTimeEnough,
		Bin_styleID,
		Bin_mapID,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head	
].

%GENERATED from file:copy.h => BossRankInfo
encode_BossRankInfo( #pk_BossRankInfo{} = P ) ->
	Bin_name = write_string( P#pk_BossRankInfo.name ),
	Bin_hurt = write_uint64( P#pk_BossRankInfo.hurt ),
	[
		Bin_name,
		Bin_hurt	
].

%GENERATED from file:copy.h => CopyMapRankInfo
encode_CopyMapRankInfo( #pk_CopyMapRankInfo{} = P ) ->
	Bin_copyMapID = write_uint32( P#pk_CopyMapRankInfo.copyMapID ),
	Bin_star = write_uint16( P#pk_CopyMapRankInfo.star ),
	Bin_teamList = write_array(P#pk_CopyMapRankInfo.teamList, fun(X) -> encode_CopyRankTeamInfo( X ) end),
	[
		Bin_copyMapID,
		Bin_star,
		Bin_teamList	
].

%GENERATED from file:copy.h => CopyRankTeamInfo
encode_CopyRankTeamInfo( #pk_CopyRankTeamInfo{} = P ) ->
	Bin_diffTime = write_float( P#pk_CopyRankTeamInfo.diffTime ),
	Bin_time = write_uint32( P#pk_CopyRankTeamInfo.time ),
	Bin_rankPos = write_int16( P#pk_CopyRankTeamInfo.rankPos ),
	Bin_leader = encode_CopyRankTeamMemberInfo( P#pk_CopyRankTeamInfo.leader ),
	Bin_membersList = write_array(P#pk_CopyRankTeamInfo.membersList, fun(X) -> encode_CopyRankTeamMemberInfo( X ) end),
	[
		Bin_diffTime,
		Bin_time,
		Bin_rankPos,
		Bin_leader,
		Bin_membersList	
].

%GENERATED from file:copy.h => CopyRankTeamMemberInfo
encode_CopyRankTeamMemberInfo( #pk_CopyRankTeamMemberInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_CopyRankTeamMemberInfo.roleID ),
	Bin_roleName = write_string( P#pk_CopyRankTeamMemberInfo.roleName ),
	[
		Bin_roleID,
		Bin_roleName	
].

%GENERATED from file:copy.h => DevilCopyMapStarInfo
encode_DevilCopyMapStarInfo( #pk_DevilCopyMapStarInfo{} = P ) ->
	Bin_instanceGroup = write_uint32( P#pk_DevilCopyMapStarInfo.instanceGroup ),
	Bin_star = write_uint16( P#pk_DevilCopyMapStarInfo.star ),
	[
		Bin_instanceGroup,
		Bin_star	
].

%GENERATED from file:copy.h => OneFestivalTimeInfo
encode_OneFestivalTimeInfo( #pk_OneFestivalTimeInfo{} = P ) ->
	Bin_festivalID = write_uint32( P#pk_OneFestivalTimeInfo.festivalID ),
	Bin_startTime = write_uint32( P#pk_OneFestivalTimeInfo.startTime ),
	Bin_endTime = write_uint32( P#pk_OneFestivalTimeInfo.endTime ),
	[
		Bin_festivalID,
		Bin_startTime,
		Bin_endTime	
].

%GENERATED from file:copy.h => chapterInfo
encode_chapterInfo( #pk_chapterInfo{} = P ) ->
	Bin_nextChapterSeconds = write_uint32( P#pk_chapterInfo.nextChapterSeconds ),
	Bin_headCount = write_uint16( P#pk_chapterInfo.headCount ),
	Bin_maxChapter = write_uint16( P#pk_chapterInfo.maxChapter ),
	Bin_curChapter = write_uint16( P#pk_chapterInfo.curChapter ),
	Bin_curChapterMonsterMax = write_uint16( P#pk_chapterInfo.curChapterMonsterMax ),
	Bin_curChapterMonsterKilled = write_uint16( P#pk_chapterInfo.curChapterMonsterKilled ),
	Bin_mapMonterMax = write_uint16( P#pk_chapterInfo.mapMonterMax ),
	Bin_materialVal = write_uint32( P#pk_chapterInfo.materialVal ),
	[
		Bin_nextChapterSeconds,
		Bin_headCount,
		Bin_maxChapter,
		Bin_curChapter,
		Bin_curChapterMonsterMax,
		Bin_curChapterMonsterKilled,
		Bin_mapMonterMax,
		Bin_materialVal	
].

%GENERATED from file:copy.h => towerInfo
encode_towerInfo( #pk_towerInfo{} = P ) ->
	Bin_dataID = write_uint32( P#pk_towerInfo.dataID ),
	Bin_type = write_uint32( P#pk_towerInfo.type ),
	Bin_level = write_uint32( P#pk_towerInfo.level ),
	[
		Bin_dataID,
		Bin_type,
		Bin_level	
].

%GENERATED from file:fashion.h => FashionInfo
encode_FashionInfo( #pk_FashionInfo{} = P ) ->
	Bin_fashionID = write_uint32( P#pk_FashionInfo.fashionID ),
	Bin_time = write_uint32( P#pk_FashionInfo.time ),
	[
		Bin_fashionID,
		Bin_time	
].

%GENERATED from file:fashion.h => getFashionGiftAck
encode_getFashionGiftAck( #pk_getFashionGiftAck{} = P ) ->
	Bin_fashionID = write_uint32( P#pk_getFashionGiftAck.fashionID ),
	Bin_itemid = write_uint32( P#pk_getFashionGiftAck.itemid ),
	Bin_giveRole = write_uint64( P#pk_getFashionGiftAck.giveRole ),
	Bin_giveName = write_string( P#pk_getFashionGiftAck.giveName ),
	Bin_give = write_string( P#pk_getFashionGiftAck.give ),
	[
		Bin_fashionID,
		Bin_itemid,
		Bin_giveRole,
		Bin_giveName,
		Bin_give	
].

%GENERATED from file:floating.h => Conditions
encode_Conditions( #pk_Conditions{} = P ) ->
	Bin_cluesID = write_uint32( P#pk_Conditions.cluesID ),
	Bin_condComplete = write_bool( P#pk_Conditions.condComplete ),
	[
		Bin_cluesID,
		Bin_condComplete	
].

%GENERATED from file:floating.h => FloatingAward
encode_FloatingAward( #pk_FloatingAward{} = P ) ->
	Bin_pieceID = write_uint32( P#pk_FloatingAward.pieceID ),
	Bin_isGeted = write_bool( P#pk_FloatingAward.isGeted ),
	[
		Bin_pieceID,
		Bin_isGeted	
].

%GENERATED from file:friend.h => Friend2GetBackInfo
encode_Friend2GetBackInfo( #pk_Friend2GetBackInfo{} = P ) ->
	Bin_id = write_uint64( P#pk_Friend2GetBackInfo.id ),
	Bin_name = write_string( P#pk_Friend2GetBackInfo.name ),
	Bin_level = write_uint16( P#pk_Friend2GetBackInfo.level ),
	Bin_career = write_uint32( P#pk_Friend2GetBackInfo.career ),
	Bin_race = write_uint8( P#pk_Friend2GetBackInfo.race ),
	Bin_sex = write_uint8( P#pk_Friend2GetBackInfo.sex ),
	Bin_head = write_int32( P#pk_Friend2GetBackInfo.head ),
	Bin_force = write_uint64( P#pk_Friend2GetBackInfo.force ),
	Bin_face = write_array(P#pk_Friend2GetBackInfo.face, fun(X) -> write_uint8( X ) end),
	[
		Bin_id,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_force,
		Bin_face	
].

%GENERATED from file:friend.h => Friend2InfoBase
encode_Friend2InfoBase( #pk_Friend2InfoBase{} = P ) ->
	Bin_simple = encode_Friend2InfoSimple( P#pk_Friend2InfoBase.simple ),
	Bin_code = write_uint64( P#pk_Friend2InfoBase.code ),
	Bin_face = write_array(P#pk_Friend2InfoBase.face, fun(X) -> write_uint8( X ) end),
	Bin_vipLv = write_uint8( P#pk_Friend2InfoBase.vipLv ),
	Bin_familyName = write_string( P#pk_Friend2InfoBase.familyName ),
	Bin_force = write_uint64( P#pk_Friend2InfoBase.force ),
	Bin_timeRelation = write_uint32( P#pk_Friend2InfoBase.timeRelation ),
	Bin_timeLastOnline = write_uint32( P#pk_Friend2InfoBase.timeLastOnline ),
	Bin_timeLastInteractive = write_uint32( P#pk_Friend2InfoBase.timeLastInteractive ),
	Bin_like = write_uint32( P#pk_Friend2InfoBase.like ),
	Bin_charm = write_uint32( P#pk_Friend2InfoBase.charm ),
	Bin_isGiveLike = write_bool( P#pk_Friend2InfoBase.isGiveLike ),
	Bin_isBeGiveLike = write_bool( P#pk_Friend2InfoBase.isBeGiveLike ),
	Bin_isMarried = write_bool( P#pk_Friend2InfoBase.isMarried ),
	Bin_distance = write_float( P#pk_Friend2InfoBase.distance ),
	[
		Bin_simple,
		Bin_code,
		Bin_face,
		Bin_vipLv,
		Bin_familyName,
		Bin_force,
		Bin_timeRelation,
		Bin_timeLastOnline,
		Bin_timeLastInteractive,
		Bin_like,
		Bin_charm,
		Bin_isGiveLike,
		Bin_isBeGiveLike,
		Bin_isMarried,
		Bin_distance	
].

%GENERATED from file:friend.h => Friend2InfoCross
encode_Friend2InfoCross( #pk_Friend2InfoCross{} = P ) ->
	Bin_id = write_uint64( P#pk_Friend2InfoCross.id ),
	Bin_name = write_string( P#pk_Friend2InfoCross.name ),
	Bin_server = write_string( P#pk_Friend2InfoCross.server ),
	Bin_level = write_uint16( P#pk_Friend2InfoCross.level ),
	Bin_career = write_uint32( P#pk_Friend2InfoCross.career ),
	Bin_race = write_uint8( P#pk_Friend2InfoCross.race ),
	Bin_sex = write_uint8( P#pk_Friend2InfoCross.sex ),
	Bin_head = write_int32( P#pk_Friend2InfoCross.head ),
	Bin_frameID = write_uint16( P#pk_Friend2InfoCross.frameID ),
	Bin_face = write_array(P#pk_Friend2InfoCross.face, fun(X) -> write_uint8( X ) end),
	Bin_timeRelation = write_uint32( P#pk_Friend2InfoCross.timeRelation ),
	Bin_timeLastOnline = write_uint32( P#pk_Friend2InfoCross.timeLastOnline ),
	Bin_timeLastInteractive = write_uint32( P#pk_Friend2InfoCross.timeLastInteractive ),
	Bin_whereis = write_uint8( P#pk_Friend2InfoCross.whereis ),
	[
		Bin_id,
		Bin_name,
		Bin_server,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_face,
		Bin_timeRelation,
		Bin_timeLastOnline,
		Bin_timeLastInteractive,
		Bin_whereis	
].

%GENERATED from file:friend.h => Friend2InfoFormal
encode_Friend2InfoFormal( #pk_Friend2InfoFormal{} = P ) ->
	Bin_base = encode_Friend2InfoBase( P#pk_Friend2InfoFormal.base ),
	Bin_closeness = write_uint32( P#pk_Friend2InfoFormal.closeness ),
	Bin_isGiveAP = write_bool( P#pk_Friend2InfoFormal.isGiveAP ),
	Bin_isGainAP = write_bool( P#pk_Friend2InfoFormal.isGainAP ),
	Bin_isBeGiveAP = write_bool( P#pk_Friend2InfoFormal.isBeGiveAP ),
	Bin_isBeGainAP = write_bool( P#pk_Friend2InfoFormal.isBeGainAP ),
	[
		Bin_base,
		Bin_closeness,
		Bin_isGiveAP,
		Bin_isGainAP,
		Bin_isBeGiveAP,
		Bin_isBeGainAP	
].

%GENERATED from file:friend.h => Friend2InfoSimple
encode_Friend2InfoSimple( #pk_Friend2InfoSimple{} = P ) ->
	Bin_id = write_uint64( P#pk_Friend2InfoSimple.id ),
	Bin_name = write_string( P#pk_Friend2InfoSimple.name ),
	Bin_level = write_uint16( P#pk_Friend2InfoSimple.level ),
	Bin_career = write_uint32( P#pk_Friend2InfoSimple.career ),
	Bin_race = write_uint8( P#pk_Friend2InfoSimple.race ),
	Bin_sex = write_uint8( P#pk_Friend2InfoSimple.sex ),
	Bin_head = write_int32( P#pk_Friend2InfoSimple.head ),
	Bin_frameID = write_uint16( P#pk_Friend2InfoSimple.frameID ),
	[
		Bin_id,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID	
].

%GENERATED from file:godweapon.h => GodWeaponInfo
encode_GodWeaponInfo( #pk_GodWeaponInfo{} = P ) ->
	Bin_weaponID = write_uint8( P#pk_GodWeaponInfo.weaponID ),
	Bin_weaponLevel = write_uint16( P#pk_GodWeaponInfo.weaponLevel ),
	Bin_skillLevel = write_uint16( P#pk_GodWeaponInfo.skillLevel ),
	[
		Bin_weaponID,
		Bin_weaponLevel,
		Bin_skillLevel	
].

%GENERATED from file:guild.h => BiddingGuild
encode_BiddingGuild( #pk_BiddingGuild{} = P ) ->
	Bin_guildID = write_uint64( P#pk_BiddingGuild.guildID ),
	Bin_guildName = write_string( P#pk_BiddingGuild.guildName ),
	Bin_biddingMoney = write_uint32( P#pk_BiddingGuild.biddingMoney ),
	Bin_denoter = write_uint8( P#pk_BiddingGuild.denoter ),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_biddingMoney,
		Bin_denoter	
].

%GENERATED from file:guild.h => CannonState
encode_CannonState( #pk_CannonState{} = P ) ->
	Bin_collectID = write_uint32( P#pk_CannonState.collectID ),
	Bin_resetTime = write_uint32( P#pk_CannonState.resetTime ),
	[
		Bin_collectID,
		Bin_resetTime	
].

%GENERATED from file:guild.h => ExpeditionFinalInfo
encode_ExpeditionFinalInfo( #pk_ExpeditionFinalInfo{} = P ) ->
	Bin_mapid = write_uint32( P#pk_ExpeditionFinalInfo.mapid ),
	Bin_topGuildInfoList = write_array(P#pk_ExpeditionFinalInfo.topGuildInfoList, fun(X) -> encode_ExpeditionGuildBattleInfo( X ) end),
	[
		Bin_mapid,
		Bin_topGuildInfoList	
].

%GENERATED from file:guild.h => ExpeditionGlobalMapInfo
encode_ExpeditionGlobalMapInfo( #pk_ExpeditionGlobalMapInfo{} = P ) ->
	Bin_mapid = write_uint32( P#pk_ExpeditionGlobalMapInfo.mapid ),
	Bin_onlineNumber = write_uint16( P#pk_ExpeditionGlobalMapInfo.onlineNumber ),
	Bin_queueNumber = write_uint16( P#pk_ExpeditionGlobalMapInfo.queueNumber ),
	[
		Bin_mapid,
		Bin_onlineNumber,
		Bin_queueNumber	
].

%GENERATED from file:guild.h => ExpeditionGuildBattleInfo
encode_ExpeditionGuildBattleInfo( #pk_ExpeditionGuildBattleInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_ExpeditionGuildBattleInfo.guildID ),
	Bin_guildName = write_string( P#pk_ExpeditionGuildBattleInfo.guildName ),
	Bin_guildScore = write_uint64( P#pk_ExpeditionGuildBattleInfo.guildScore ),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_guildScore	
].

%GENERATED from file:guild.h => ExpeditionMapInfo
encode_ExpeditionMapInfo( #pk_ExpeditionMapInfo{} = P ) ->
	Bin_mapid = write_uint32( P#pk_ExpeditionMapInfo.mapid ),
	Bin_guildID = write_uint64( P#pk_ExpeditionMapInfo.guildID ),
	Bin_guildName = write_string( P#pk_ExpeditionMapInfo.guildName ),
	Bin_onlineNumber = write_uint16( P#pk_ExpeditionMapInfo.onlineNumber ),
	Bin_queueNumber = write_uint16( P#pk_ExpeditionMapInfo.queueNumber ),
	Bin_isGetReward = write_uint8( P#pk_ExpeditionMapInfo.isGetReward ),
	[
		Bin_mapid,
		Bin_guildID,
		Bin_guildName,
		Bin_onlineNumber,
		Bin_queueNumber,
		Bin_isGetReward	
].

%GENERATED from file:guild.h => ExpeditionPointInfo
encode_ExpeditionPointInfo( #pk_ExpeditionPointInfo{} = P ) ->
	Bin_pointIndex = write_uint16( P#pk_ExpeditionPointInfo.pointIndex ),
	Bin_guildID = write_uint64( P#pk_ExpeditionPointInfo.guildID ),
	Bin_guildName = write_string( P#pk_ExpeditionPointInfo.guildName ),
	[
		Bin_pointIndex,
		Bin_guildID,
		Bin_guildName	
].

%GENERATED from file:guild.h => GuildApplyMemberInfo
encode_GuildApplyMemberInfo( #pk_GuildApplyMemberInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_GuildApplyMemberInfo.roleID ),
	Bin_roleCode = write_uint64( P#pk_GuildApplyMemberInfo.roleCode ),
	Bin_roleName = write_string( P#pk_GuildApplyMemberInfo.roleName ),
	Bin_combatNum = write_uint32( P#pk_GuildApplyMemberInfo.combatNum ),
	Bin_vipLevel = write_uint8( P#pk_GuildApplyMemberInfo.vipLevel ),
	Bin_playerLevel = write_uint16( P#pk_GuildApplyMemberInfo.playerLevel ),
	Bin_applyTime = write_uint64( P#pk_GuildApplyMemberInfo.applyTime ),
	Bin_career = write_uint32( P#pk_GuildApplyMemberInfo.career ),
	Bin_race = write_uint8( P#pk_GuildApplyMemberInfo.race ),
	Bin_sex = write_uint8( P#pk_GuildApplyMemberInfo.sex ),
	Bin_head = write_int32( P#pk_GuildApplyMemberInfo.head ),
	Bin_frameID = write_uint16( P#pk_GuildApplyMemberInfo.frameID ),
	[
		Bin_roleID,
		Bin_roleCode,
		Bin_roleName,
		Bin_combatNum,
		Bin_vipLevel,
		Bin_playerLevel,
		Bin_applyTime,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID	
].

%GENERATED from file:guild.h => GuildBattleInfo
encode_GuildBattleInfo( #pk_GuildBattleInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_GuildBattleInfo.guildID ),
	Bin_guildName = write_string( P#pk_GuildBattleInfo.guildName ),
	Bin_guildLevel = write_uint8( P#pk_GuildBattleInfo.guildLevel ),
	Bin_fightForce = write_uint32( P#pk_GuildBattleInfo.fightForce ),
	Bin_leaderName = write_string( P#pk_GuildBattleInfo.leaderName ),
	Bin_leaderRoleID = write_uint64( P#pk_GuildBattleInfo.leaderRoleID ),
	Bin_denoter = write_uint8( P#pk_GuildBattleInfo.denoter ),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_guildLevel,
		Bin_fightForce,
		Bin_leaderName,
		Bin_leaderRoleID,
		Bin_denoter	
].

%GENERATED from file:guild.h => GuildBattlePlayerInfo
encode_GuildBattlePlayerInfo( #pk_GuildBattlePlayerInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_GuildBattlePlayerInfo.guildID ),
	Bin_rank = write_uint8( P#pk_GuildBattlePlayerInfo.rank ),
	Bin_roleID = write_uint64( P#pk_GuildBattlePlayerInfo.roleID ),
	Bin_roleName = write_string( P#pk_GuildBattlePlayerInfo.roleName ),
	Bin_point = write_uint32( P#pk_GuildBattlePlayerInfo.point ),
	[
		Bin_guildID,
		Bin_rank,
		Bin_roleID,
		Bin_roleName,
		Bin_point	
].

%GENERATED from file:guild.h => GuildBattleResultInfo
encode_GuildBattleResultInfo( #pk_GuildBattleResultInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_GuildBattleResultInfo.guildID ),
	Bin_guildName = write_string( P#pk_GuildBattleResultInfo.guildName ),
	Bin_point = write_uint32( P#pk_GuildBattleResultInfo.point ),
	Bin_playerInfos = write_array(P#pk_GuildBattleResultInfo.playerInfos, fun(X) -> encode_GuildBattlePlayerInfo( X ) end),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_point,
		Bin_playerInfos	
].

%GENERATED from file:guild.h => GuildBuff
encode_GuildBuff( #pk_GuildBuff{} = P ) ->
	Bin_confId = write_uint32( P#pk_GuildBuff.confId ),
	Bin_buffID = write_uint32( P#pk_GuildBuff.buffID ),
	Bin_getFlag = write_uint8( P#pk_GuildBuff.getFlag ),
	[
		Bin_confId,
		Bin_buffID,
		Bin_getFlag	
].

%GENERATED from file:guild.h => GuildBuffRole
encode_GuildBuffRole( #pk_GuildBuffRole{} = P ) ->
	Bin_roleID = write_uint64( P#pk_GuildBuffRole.roleID ),
	Bin_roleName = write_string( P#pk_GuildBuffRole.roleName ),
	Bin_buyTime = write_uint64( P#pk_GuildBuffRole.buyTime ),
	Bin_confId = write_uint32( P#pk_GuildBuffRole.confId ),
	Bin_buffID = write_uint32( P#pk_GuildBuffRole.buffID ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_buyTime,
		Bin_confId,
		Bin_buffID	
].

%GENERATED from file:guild.h => GuildFastrecord
encode_GuildFastrecord( #pk_GuildFastrecord{} = P ) ->
	Bin_guildname = write_string( P#pk_GuildFastrecord.guildname ),
	Bin_useTime = write_uint64( P#pk_GuildFastrecord.useTime ),
	[
		Bin_guildname,
		Bin_useTime	
].

%GENERATED from file:guild.h => GuildHurtList
encode_GuildHurtList( #pk_GuildHurtList{} = P ) ->
	Bin_name = write_string( P#pk_GuildHurtList.name ),
	Bin_hurt = write_uint64( P#pk_GuildHurtList.hurt ),
	[
		Bin_name,
		Bin_hurt	
].

%GENERATED from file:guild.h => GuildIDList
encode_GuildIDList( #pk_GuildIDList{} = P ) ->
	Bin_guildID = write_uint64( P#pk_GuildIDList.guildID ),
	Bin_guildName = write_string( P#pk_GuildIDList.guildName ),
	Bin_denoter = write_uint8( P#pk_GuildIDList.denoter ),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_denoter	
].

%GENERATED from file:guild.h => GuildInfo
encode_GuildInfo( #pk_GuildInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_GuildInfo.guildID ),
	Bin_guildName = write_string( P#pk_GuildInfo.guildName ),
	Bin_guildLevel = write_uint8( P#pk_GuildInfo.guildLevel ),
	Bin_denoter = write_uint8( P#pk_GuildInfo.denoter ),
	Bin_fightForce = write_uint32( P#pk_GuildInfo.fightForce ),
	Bin_memberNumber = write_uint32( P#pk_GuildInfo.memberNumber ),
	Bin_maxMemberNumber = write_uint32( P#pk_GuildInfo.maxMemberNumber ),
	Bin_leaderName = write_string( P#pk_GuildInfo.leaderName ),
	Bin_leaderRoleID = write_uint64( P#pk_GuildInfo.leaderRoleID ),
	Bin_isRequest = write_uint8( P#pk_GuildInfo.isRequest ),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_guildLevel,
		Bin_denoter,
		Bin_fightForce,
		Bin_memberNumber,
		Bin_maxMemberNumber,
		Bin_leaderName,
		Bin_leaderRoleID,
		Bin_isRequest	
].

%GENERATED from file:guild.h => GuildLoopTaskGiveHistory
encode_GuildLoopTaskGiveHistory( #pk_GuildLoopTaskGiveHistory{} = P ) ->
	Bin_time = write_uint32( P#pk_GuildLoopTaskGiveHistory.time ),
	Bin_roleID = write_uint64( P#pk_GuildLoopTaskGiveHistory.roleID ),
	Bin_tarRoleID = write_uint64( P#pk_GuildLoopTaskGiveHistory.tarRoleID ),
	Bin_taskID = write_uint16( P#pk_GuildLoopTaskGiveHistory.taskID ),
	Bin_itemID = write_uint16( P#pk_GuildLoopTaskGiveHistory.itemID ),
	Bin_itemM = write_uint16( P#pk_GuildLoopTaskGiveHistory.itemM ),
	Bin_itemN = write_uint16( P#pk_GuildLoopTaskGiveHistory.itemN ),
	[
		Bin_time,
		Bin_roleID,
		Bin_tarRoleID,
		Bin_taskID,
		Bin_itemID,
		Bin_itemM,
		Bin_itemN	
].

%GENERATED from file:guild.h => GuildLoopTaskGiveHistory2
encode_GuildLoopTaskGiveHistory2( #pk_GuildLoopTaskGiveHistory2{} = P ) ->
	Bin_career = write_uint32( P#pk_GuildLoopTaskGiveHistory2.career ),
	Bin_race = write_int8( P#pk_GuildLoopTaskGiveHistory2.race ),
	Bin_sex = write_int8( P#pk_GuildLoopTaskGiveHistory2.sex ),
	Bin_head = write_int32( P#pk_GuildLoopTaskGiveHistory2.head ),
	Bin_level = write_int32( P#pk_GuildLoopTaskGiveHistory2.level ),
	Bin_history = encode_GuildLoopTaskGiveHistory( P#pk_GuildLoopTaskGiveHistory2.history ),
	[
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_level,
		Bin_history	
].

%GENERATED from file:guild.h => GuildLoopTask_Get
encode_GuildLoopTask_Get( #pk_GuildLoopTask_Get{} = P ) ->
	Bin_roleID = write_uint64( P#pk_GuildLoopTask_Get.roleID ),
	Bin_roleCode = write_uint64( P#pk_GuildLoopTask_Get.roleCode ),
	Bin_roleName = write_string( P#pk_GuildLoopTask_Get.roleName ),
	Bin_roleGuildLevel = write_uint8( P#pk_GuildLoopTask_Get.roleGuildLevel ),
	Bin_career = write_uint32( P#pk_GuildLoopTask_Get.career ),
	Bin_race = write_int8( P#pk_GuildLoopTask_Get.race ),
	Bin_sex = write_int8( P#pk_GuildLoopTask_Get.sex ),
	Bin_head = write_int32( P#pk_GuildLoopTask_Get.head ),
	Bin_frameID = write_uint16( P#pk_GuildLoopTask_Get.frameID ),
	Bin_level = write_int32( P#pk_GuildLoopTask_Get.level ),
	Bin_taskID = write_uint16( P#pk_GuildLoopTask_Get.taskID ),
	Bin_itemID = write_uint16( P#pk_GuildLoopTask_Get.itemID ),
	Bin_itemM = write_uint16( P#pk_GuildLoopTask_Get.itemM ),
	Bin_itemN = write_uint16( P#pk_GuildLoopTask_Get.itemN ),
	Bin_isGive = write_bool( P#pk_GuildLoopTask_Get.isGive ),
	Bin_timeWantGet = write_uint32( P#pk_GuildLoopTask_Get.timeWantGet ),
	[
		Bin_roleID,
		Bin_roleCode,
		Bin_roleName,
		Bin_roleGuildLevel,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_level,
		Bin_taskID,
		Bin_itemID,
		Bin_itemM,
		Bin_itemN,
		Bin_isGive,
		Bin_timeWantGet	
].

%GENERATED from file:guild.h => GuildMemberInfo
encode_GuildMemberInfo( #pk_GuildMemberInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_GuildMemberInfo.roleID ),
	Bin_roleCode = write_uint64( P#pk_GuildMemberInfo.roleCode ),
	Bin_roleName = write_string( P#pk_GuildMemberInfo.roleName ),
	Bin_roleGuildLevel = write_uint8( P#pk_GuildMemberInfo.roleGuildLevel ),
	Bin_liveness = write_uint32( P#pk_GuildMemberInfo.liveness ),
	Bin_combatNum = write_uint32( P#pk_GuildMemberInfo.combatNum ),
	Bin_offlineTime = write_uint64( P#pk_GuildMemberInfo.offlineTime ),
	Bin_vipLevel = write_uint8( P#pk_GuildMemberInfo.vipLevel ),
	Bin_playerLevel = write_uint16( P#pk_GuildMemberInfo.playerLevel ),
	Bin_career = write_uint32( P#pk_GuildMemberInfo.career ),
	Bin_race = write_uint8( P#pk_GuildMemberInfo.race ),
	Bin_sex = write_uint8( P#pk_GuildMemberInfo.sex ),
	Bin_head = write_int32( P#pk_GuildMemberInfo.head ),
	Bin_frameID = write_uint16( P#pk_GuildMemberInfo.frameID ),
	[
		Bin_roleID,
		Bin_roleCode,
		Bin_roleName,
		Bin_roleGuildLevel,
		Bin_liveness,
		Bin_combatNum,
		Bin_offlineTime,
		Bin_vipLevel,
		Bin_playerLevel,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID	
].

%GENERATED from file:guild.h => GuildSkill
encode_GuildSkill( #pk_GuildSkill{} = P ) ->
	Bin_confId = write_uint32( P#pk_GuildSkill.confId ),
	Bin_skillID = write_uint32( P#pk_GuildSkill.skillID ),
	Bin_skillLvl = write_uint16( P#pk_GuildSkill.skillLvl ),
	Bin_next_confID = write_uint32( P#pk_GuildSkill.next_confID ),
	[
		Bin_confId,
		Bin_skillID,
		Bin_skillLvl,
		Bin_next_confID	
].

%GENERATED from file:guild.h => GuildTask
encode_GuildTask( #pk_GuildTask{} = P ) ->
	Bin_taskType = write_uint8( P#pk_GuildTask.taskType ),
	Bin_taskState = write_uint8( P#pk_GuildTask.taskState ),
	Bin_curTimes = write_uint16( P#pk_GuildTask.curTimes ),
	Bin_maxTimes = write_uint16( P#pk_GuildTask.maxTimes ),
	Bin_accCDTime = write_uint32( P#pk_GuildTask.accCDTime ),
	Bin_taskID = write_uint16( P#pk_GuildTask.taskID ),
	Bin_targetGuildID = write_uint64( P#pk_GuildTask.targetGuildID ),
	Bin_targetGuildName = write_string( P#pk_GuildTask.targetGuildName ),
	Bin_targetPlayerRoleID = write_uint64( P#pk_GuildTask.targetPlayerRoleID ),
	Bin_targetPLayerName = write_string( P#pk_GuildTask.targetPLayerName ),
	Bin_number1 = write_uint32( P#pk_GuildTask.number1 ),
	Bin_number2 = write_uint32( P#pk_GuildTask.number2 ),
	Bin_number3 = write_uint32( P#pk_GuildTask.number3 ),
	[
		Bin_taskType,
		Bin_taskState,
		Bin_curTimes,
		Bin_maxTimes,
		Bin_accCDTime,
		Bin_taskID,
		Bin_targetGuildID,
		Bin_targetGuildName,
		Bin_targetPlayerRoleID,
		Bin_targetPLayerName,
		Bin_number1,
		Bin_number2,
		Bin_number3	
].

%GENERATED from file:guild.h => GuildWar
encode_GuildWar( #pk_GuildWar{} = P ) ->
	Bin_stage = write_uint8( P#pk_GuildWar.stage ),
	Bin_group = write_uint8( P#pk_GuildWar.group ),
	Bin_guildID1 = write_uint64( P#pk_GuildWar.guildID1 ),
	Bin_guildName1 = write_string( P#pk_GuildWar.guildName1 ),
	Bin_denoter1 = write_uint8( P#pk_GuildWar.denoter1 ),
	Bin_guildID2 = write_uint64( P#pk_GuildWar.guildID2 ),
	Bin_guildName2 = write_string( P#pk_GuildWar.guildName2 ),
	Bin_denoter2 = write_uint8( P#pk_GuildWar.denoter2 ),
	Bin_guildID3 = write_uint64( P#pk_GuildWar.guildID3 ),
	Bin_guildName3 = write_string( P#pk_GuildWar.guildName3 ),
	Bin_denoter3 = write_uint8( P#pk_GuildWar.denoter3 ),
	Bin_winguildID = write_uint64( P#pk_GuildWar.winguildID ),
	Bin_winguildName = write_string( P#pk_GuildWar.winguildName ),
	Bin_windenoter = write_uint8( P#pk_GuildWar.windenoter ),
	[
		Bin_stage,
		Bin_group,
		Bin_guildID1,
		Bin_guildName1,
		Bin_denoter1,
		Bin_guildID2,
		Bin_guildName2,
		Bin_denoter2,
		Bin_guildID3,
		Bin_guildName3,
		Bin_denoter3,
		Bin_winguildID,
		Bin_winguildName,
		Bin_windenoter	
].

%GENERATED from file:guild.h => GuildWarInfo
encode_GuildWarInfo( #pk_GuildWarInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_GuildWarInfo.guildID ),
	Bin_guildName = write_string( P#pk_GuildWarInfo.guildName ),
	Bin_denoter = write_uint8( P#pk_GuildWarInfo.denoter ),
	Bin_key = write_uint8( P#pk_GuildWarInfo.key ),
	Bin_stage = write_uint8( P#pk_GuildWarInfo.stage ),
	Bin_all_integral = write_uint32( P#pk_GuildWarInfo.all_integral ),
	Bin_integrals = write_array(P#pk_GuildWarInfo.integrals, fun(X) -> encode_GuildWarInfoIntegral( X ) end),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_denoter,
		Bin_key,
		Bin_stage,
		Bin_all_integral,
		Bin_integrals	
].

%GENERATED from file:guild.h => GuildWarInfoIntegral
encode_GuildWarInfoIntegral( #pk_GuildWarInfoIntegral{} = P ) ->
	Bin_type = write_uint8( P#pk_GuildWarInfoIntegral.type ),
	Bin_number = write_uint16( P#pk_GuildWarInfoIntegral.number ),
	Bin_integral = write_uint32( P#pk_GuildWarInfoIntegral.integral ),
	[
		Bin_type,
		Bin_number,
		Bin_integral	
].

%GENERATED from file:guild.h => GuildWarRank
encode_GuildWarRank( #pk_GuildWarRank{} = P ) ->
	Bin_rank = write_uint16( P#pk_GuildWarRank.rank ),
	Bin_roleID = write_uint64( P#pk_GuildWarRank.roleID ),
	Bin_roleName = write_string( P#pk_GuildWarRank.roleName ),
	Bin_killPlayer = write_uint32( P#pk_GuildWarRank.killPlayer ),
	Bin_secondAttack = write_uint32( P#pk_GuildWarRank.secondAttack ),
	[
		Bin_rank,
		Bin_roleID,
		Bin_roleName,
		Bin_killPlayer,
		Bin_secondAttack	
].

%GENERATED from file:guild.h => GuildWarRankInfo
encode_GuildWarRankInfo( #pk_GuildWarRankInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_GuildWarRankInfo.guildID ),
	Bin_rank = write_uint32( P#pk_GuildWarRankInfo.rank ),
	[
		Bin_guildID,
		Bin_rank	
].

%GENERATED from file:guild.h => GuildWarReward_coin
encode_GuildWarReward_coin( #pk_GuildWarReward_coin{} = P ) ->
	Bin_cointype = write_uint8( P#pk_GuildWarReward_coin.cointype ),
	Bin_number = write_uint32( P#pk_GuildWarReward_coin.number ),
	[
		Bin_cointype,
		Bin_number	
].

%GENERATED from file:guild.h => GuildWarReward_item
encode_GuildWarReward_item( #pk_GuildWarReward_item{} = P ) ->
	Bin_isBind = write_uint8( P#pk_GuildWarReward_item.isBind ),
	Bin_itemID = write_uint32( P#pk_GuildWarReward_item.itemID ),
	Bin_itemNumber = write_uint32( P#pk_GuildWarReward_item.itemNumber ),
	[
		Bin_isBind,
		Bin_itemID,
		Bin_itemNumber	
].

%GENERATED from file:guild.h => NameTable2
encode_NameTable2( #pk_NameTable2{} = P ) ->
	Bin_id = write_uint64( P#pk_NameTable2.id ),
	Bin_name = write_string( P#pk_NameTable2.name ),
	[
		Bin_id,
		Bin_name	
].

%GENERATED from file:guild.h => OccupyGuildInfo
encode_OccupyGuildInfo( #pk_OccupyGuildInfo{} = P ) ->
	Bin_guildID = write_uint64( P#pk_OccupyGuildInfo.guildID ),
	Bin_guildName = write_string( P#pk_OccupyGuildInfo.guildName ),
	Bin_occupyIDs = write_array(P#pk_OccupyGuildInfo.occupyIDs, fun(X) -> write_uint32( X ) end),
	Bin_allPoint = write_uint32( P#pk_OccupyGuildInfo.allPoint ),
	Bin_denoter = write_uint8( P#pk_OccupyGuildInfo.denoter ),
	[
		Bin_guildID,
		Bin_guildName,
		Bin_occupyIDs,
		Bin_allPoint,
		Bin_denoter	
].

%GENERATED from file:guild.h => PebbleState
encode_PebbleState( #pk_PebbleState{} = P ) ->
	Bin_monsterID = write_uint32( P#pk_PebbleState.monsterID ),
	Bin_curHP = write_uint32( P#pk_PebbleState.curHP ),
	Bin_maxHP = write_uint32( P#pk_PebbleState.maxHP ),
	Bin_resetTime = write_uint32( P#pk_PebbleState.resetTime ),
	[
		Bin_monsterID,
		Bin_curHP,
		Bin_maxHP,
		Bin_resetTime	
].

%GENERATED from file:guild.h => Ride
encode_Ride( #pk_Ride{} = P ) ->
	Bin_id = write_uint32( P#pk_Ride.id ),
	Bin_level = write_uint32( P#pk_Ride.level ),
	Bin_state = write_uint8( P#pk_Ride.state ),
	[
		Bin_id,
		Bin_level,
		Bin_state	
].

%GENERATED from file:guild.h => RideRole
encode_RideRole( #pk_RideRole{} = P ) ->
	Bin_roleID = write_uint64( P#pk_RideRole.roleID ),
	Bin_guildID = write_uint64( P#pk_RideRole.guildID ),
	Bin_rideID = write_uint32( P#pk_RideRole.rideID ),
	Bin_seatID = write_uint32( P#pk_RideRole.seatID ),
	Bin_time = write_uint32( P#pk_RideRole.time ),
	[
		Bin_roleID,
		Bin_guildID,
		Bin_rideID,
		Bin_seatID,
		Bin_time	
].

%GENERATED from file:guild.h => SuppHistory
encode_SuppHistory( #pk_SuppHistory{} = P ) ->
	Bin_time = write_uint32( P#pk_SuppHistory.time ),
	Bin_roleID = write_uint64( P#pk_SuppHistory.roleID ),
	Bin_tarRoleID = write_uint64( P#pk_SuppHistory.tarRoleID ),
	Bin_itemID = write_uint16( P#pk_SuppHistory.itemID ),
	Bin_itemM = write_uint16( P#pk_SuppHistory.itemM ),
	[
		Bin_time,
		Bin_roleID,
		Bin_tarRoleID,
		Bin_itemID,
		Bin_itemM	
].

%GENERATED from file:guild.h => SuppHistory2
encode_SuppHistory2( #pk_SuppHistory2{} = P ) ->
	Bin_career = write_uint32( P#pk_SuppHistory2.career ),
	Bin_race = write_int8( P#pk_SuppHistory2.race ),
	Bin_sex = write_int8( P#pk_SuppHistory2.sex ),
	Bin_head = write_int32( P#pk_SuppHistory2.head ),
	Bin_level = write_int32( P#pk_SuppHistory2.level ),
	Bin_history = encode_SuppHistory( P#pk_SuppHistory2.history ),
	[
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_level,
		Bin_history	
].

%GENERATED from file:guild.h => Supplication
encode_Supplication( #pk_Supplication{} = P ) ->
	Bin_roleID = write_uint64( P#pk_Supplication.roleID ),
	Bin_roleCode = write_uint64( P#pk_Supplication.roleCode ),
	Bin_roleName = write_string( P#pk_Supplication.roleName ),
	Bin_roleGuildLevel = write_uint8( P#pk_Supplication.roleGuildLevel ),
	Bin_career = write_uint32( P#pk_Supplication.career ),
	Bin_race = write_int8( P#pk_Supplication.race ),
	Bin_sex = write_int8( P#pk_Supplication.sex ),
	Bin_head = write_int32( P#pk_Supplication.head ),
	Bin_frameID = write_uint16( P#pk_Supplication.frameID ),
	Bin_level = write_int32( P#pk_Supplication.level ),
	Bin_itemID = write_uint16( P#pk_Supplication.itemID ),
	Bin_itemM = write_uint16( P#pk_Supplication.itemM ),
	Bin_isGive = write_bool( P#pk_Supplication.isGive ),
	[
		Bin_roleID,
		Bin_roleCode,
		Bin_roleName,
		Bin_roleGuildLevel,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_level,
		Bin_itemID,
		Bin_itemM,
		Bin_isGive	
].

%GENERATED from file:home.h => FarmingPet
encode_FarmingPet( #pk_FarmingPet{} = P ) ->
	Bin_itemUid = write_uint64( P#pk_FarmingPet.itemUid ),
	Bin_petID = write_uint16( P#pk_FarmingPet.petID ),
	Bin_deltaTime = write_uint16( P#pk_FarmingPet.deltaTime ),
	Bin_time = write_uint64( P#pk_FarmingPet.time ),
	Bin_lastdeltaTime = write_uint16( P#pk_FarmingPet.lastdeltaTime ),
	Bin_addTime = write_uint16( P#pk_FarmingPet.addTime ),
	[
		Bin_itemUid,
		Bin_petID,
		Bin_deltaTime,
		Bin_time,
		Bin_lastdeltaTime,
		Bin_addTime	
].

%GENERATED from file:home.h => FurniInteractTrueData
encode_FurniInteractTrueData( #pk_FurniInteractTrueData{} = P ) ->
	Bin_itemUID = write_uint64( P#pk_FurniInteractTrueData.itemUID ),
	Bin_playerList = write_array(P#pk_FurniInteractTrueData.playerList, fun(X) -> encode_FurniTruePlayerInfo( X ) end),
	Bin_roleID = write_uint64( P#pk_FurniInteractTrueData.roleID ),
	[
		Bin_itemUID,
		Bin_playerList,
		Bin_roleID	
].

%GENERATED from file:home.h => FurniTruePlayerInfo
encode_FurniTruePlayerInfo( #pk_FurniTruePlayerInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_FurniTruePlayerInfo.roleID ),
	Bin_seatID = write_uint8( P#pk_FurniTruePlayerInfo.seatID ),
	[
		Bin_roleID,
		Bin_seatID	
].

%GENERATED from file:home.h => GivingFurniTrue
encode_GivingFurniTrue( #pk_GivingFurniTrue{} = P ) ->
	Bin_itemID = write_uint16( P#pk_GivingFurniTrue.itemID ),
	Bin_num = write_uint16( P#pk_GivingFurniTrue.num ),
	[
		Bin_itemID,
		Bin_num	
].

%GENERATED from file:home.h => HomeArea
encode_HomeArea( #pk_HomeArea{} = P ) ->
	Bin_homeID = write_uint64( P#pk_HomeArea.homeID ),
	Bin_areaID = write_uint32( P#pk_HomeArea.areaID ),
	Bin_areaLvl = write_uint32( P#pk_HomeArea.areaLvl ),
	[
		Bin_homeID,
		Bin_areaID,
		Bin_areaLvl	
].

%GENERATED from file:home.h => HomeLayoutInfo
encode_HomeLayoutInfo( #pk_HomeLayoutInfo{} = P ) ->
	Bin_uid = write_uint64( P#pk_HomeLayoutInfo.uid ),
	Bin_roleID = write_uint64( P#pk_HomeLayoutInfo.roleID ),
	Bin_itemID = write_uint16( P#pk_HomeLayoutInfo.itemID ),
	Bin_gridID = write_int32( P#pk_HomeLayoutInfo.gridID ),
	Bin_rotationY = write_int32( P#pk_HomeLayoutInfo.rotationY ),
	Bin_type = write_uint8( P#pk_HomeLayoutInfo.type ),
	[
		Bin_uid,
		Bin_roleID,
		Bin_itemID,
		Bin_gridID,
		Bin_rotationY,
		Bin_type	
].

%GENERATED from file:home.h => HomeLetter
encode_HomeLetter( #pk_HomeLetter{} = P ) ->
	Bin_itemUID = write_uint64( P#pk_HomeLetter.itemUID ),
	Bin_overTime = write_uint64( P#pk_HomeLetter.overTime ),
	[
		Bin_itemUID,
		Bin_overTime	
].

%GENERATED from file:home.h => HomeVisit
encode_HomeVisit( #pk_HomeVisit{} = P ) ->
	Bin_roleID = write_uint64( P#pk_HomeVisit.roleID ),
	Bin_roleName = write_string( P#pk_HomeVisit.roleName ),
	Bin_level = write_uint32( P#pk_HomeVisit.level ),
	Bin_career = write_uint32( P#pk_HomeVisit.career ),
	Bin_race = write_int8( P#pk_HomeVisit.race ),
	Bin_sex = write_int8( P#pk_HomeVisit.sex ),
	Bin_head = write_int32( P#pk_HomeVisit.head ),
	Bin_frameID = write_uint16( P#pk_HomeVisit.frameID ),
	Bin_homeID = write_uint64( P#pk_HomeVisit.homeID ),
	Bin_closeness = write_int32( P#pk_HomeVisit.closeness ),
	Bin_face = write_array(P#pk_HomeVisit.face, fun(X) -> write_uint8( X ) end),
	Bin_stylish = write_int32( P#pk_HomeVisit.stylish ),
	Bin_isCanPick = write_bool( P#pk_HomeVisit.isCanPick ),
	Bin_isdecorate = write_bool( P#pk_HomeVisit.isdecorate ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_homeID,
		Bin_closeness,
		Bin_face,
		Bin_stylish,
		Bin_isCanPick,
		Bin_isdecorate	
].

%GENERATED from file:home.h => Plant
encode_Plant( #pk_Plant{} = P ) ->
	Bin_homeID = write_uint64( P#pk_Plant.homeID ),
	Bin_areaType = write_uint8( P#pk_Plant.areaType ),
	Bin_itemUid = write_uint64( P#pk_Plant.itemUid ),
	Bin_id = write_uint16( P#pk_Plant.id ),
	Bin_time = write_uint32( P#pk_Plant.time ),
	Bin_health = write_uint8( P#pk_Plant.health ),
	Bin_wateringCount = write_uint8( P#pk_Plant.wateringCount ),
	Bin_wateringTime = write_uint32( P#pk_Plant.wateringTime ),
	Bin_compostCount = write_uint8( P#pk_Plant.compostCount ),
	Bin_compostTime = write_uint8( P#pk_Plant.compostTime ),
	Bin_isPestis = write_bool( P#pk_Plant.isPestis ),
	[
		Bin_homeID,
		Bin_areaType,
		Bin_itemUid,
		Bin_id,
		Bin_time,
		Bin_health,
		Bin_wateringCount,
		Bin_wateringTime,
		Bin_compostCount,
		Bin_compostTime,
		Bin_isPestis	
].

%GENERATED from file:home.h => UpgradeHomeData
encode_UpgradeHomeData( #pk_UpgradeHomeData{} = P ) ->
	Bin_itemID = write_uint16( P#pk_UpgradeHomeData.itemID ),
	Bin_num = write_uint16( P#pk_UpgradeHomeData.num ),
	[
		Bin_itemID,
		Bin_num	
].

%GENERATED from file:home.h => VisitRecord
encode_VisitRecord( #pk_VisitRecord{} = P ) ->
	Bin_roleID = write_uint64( P#pk_VisitRecord.roleID ),
	Bin_roleName = write_string( P#pk_VisitRecord.roleName ),
	Bin_relationType = write_uint8( P#pk_VisitRecord.relationType ),
	Bin_opType = write_uint8( P#pk_VisitRecord.opType ),
	Bin_opParam1 = write_uint32( P#pk_VisitRecord.opParam1 ),
	Bin_opParam2 = write_uint32( P#pk_VisitRecord.opParam2 ),
	Bin_opParam3 = write_uint32( P#pk_VisitRecord.opParam3 ),
	Bin_timestamp = write_uint64( P#pk_VisitRecord.timestamp ),
	[
		Bin_roleID,
		Bin_roleName,
		Bin_relationType,
		Bin_opType,
		Bin_opParam1,
		Bin_opParam2,
		Bin_opParam3,
		Bin_timestamp	
].

%GENERATED from file:identity.h => GiftHistory
encode_GiftHistory( #pk_GiftHistory{} = P ) ->
	Bin_index = write_uint64( P#pk_GiftHistory.index ),
	Bin_time = write_uint32( P#pk_GiftHistory.time ),
	Bin_roleID = write_uint64( P#pk_GiftHistory.roleID ),
	Bin_tarRoleID = write_uint64( P#pk_GiftHistory.tarRoleID ),
	Bin_itemID = write_uint16( P#pk_GiftHistory.itemID ),
	Bin_itemCount = write_uint16( P#pk_GiftHistory.itemCount ),
	Bin_charmUpdate = write_uint32( P#pk_GiftHistory.charmUpdate ),
	[
		Bin_index,
		Bin_time,
		Bin_roleID,
		Bin_tarRoleID,
		Bin_itemID,
		Bin_itemCount,
		Bin_charmUpdate	
].

%GENERATED from file:identity.h => MD5
encode_MD5( #pk_MD5{} = P ) ->
	Bin_md5 = write_array(P#pk_MD5.md5, fun(X) -> write_uint8( X ) end),
	[
		Bin_md5	
].

%GENERATED from file:identity.h => NameTable
encode_NameTable( #pk_NameTable{} = P ) ->
	Bin_id = write_uint64( P#pk_NameTable.id ),
	Bin_name = write_string( P#pk_NameTable.name ),
	[
		Bin_id,
		Bin_name	
].

%GENERATED from file:identity.h => RoleHeadPic
encode_RoleHeadPic( #pk_RoleHeadPic{} = P ) ->
	Bin_roleID = write_uint64( P#pk_RoleHeadPic.roleID ),
	Bin_md5 = write_array(P#pk_RoleHeadPic.md5, fun(X) -> write_uint8( X ) end),
	[
		Bin_roleID,
		Bin_md5	
].

%GENERATED from file:item.h => GiftItemInfo
encode_GiftItemInfo( #pk_GiftItemInfo{} = P ) ->
	Bin_itemid = write_uint16( P#pk_GiftItemInfo.itemid ),
	Bin_number = write_uint16( P#pk_GiftItemInfo.number ),
	[
		Bin_itemid,
		Bin_number	
].

%GENERATED from file:item.h => LookInfoItem
encode_LookInfoItem( #pk_LookInfoItem{} = P ) ->
	Bin_itemid = write_uint16( P#pk_LookInfoItem.itemid ),
	Bin_sortid = write_uint32( P#pk_LookInfoItem.sortid ),
	Bin_type = write_uint8( P#pk_LookInfoItem.type ),
	Bin_value = write_uint32( P#pk_LookInfoItem.value ),
	Bin_quality = write_uint8( P#pk_LookInfoItem.quality ),
	Bin_useLevel = write_uint16( P#pk_LookInfoItem.useLevel ),
	Bin_quotaNumber = write_int32( P#pk_LookInfoItem.quotaNumber ),
	[
		Bin_itemid,
		Bin_sortid,
		Bin_type,
		Bin_value,
		Bin_quality,
		Bin_useLevel,
		Bin_quotaNumber	
].

%GENERATED from file:item.h => LookInfoItemAtMall
encode_LookInfoItemAtMall( #pk_LookInfoItemAtMall{} = P ) ->
	Bin_itemid = write_uint16( P#pk_LookInfoItemAtMall.itemid ),
	Bin_sortid = write_uint8( P#pk_LookInfoItemAtMall.sortid ),
	Bin_type = write_uint8( P#pk_LookInfoItemAtMall.type ),
	Bin_value = write_uint32( P#pk_LookInfoItemAtMall.value ),
	Bin_stockCount = write_uint16( P#pk_LookInfoItemAtMall.stockCount ),
	Bin_stockGiftCount = write_uint16( P#pk_LookInfoItemAtMall.stockGiftCount ),
	Bin_gifts = write_array(P#pk_LookInfoItemAtMall.gifts, fun(X) -> encode_GiftItemInfo( X ) end),
	Bin_saleStartTime = write_uint32( P#pk_LookInfoItemAtMall.saleStartTime ),
	Bin_saleEndTime = write_uint32( P#pk_LookInfoItemAtMall.saleEndTime ),
	Bin_quotaNum = write_uint8( P#pk_LookInfoItemAtMall.quotaNum ),
	[
		Bin_itemid,
		Bin_sortid,
		Bin_type,
		Bin_value,
		Bin_stockCount,
		Bin_stockGiftCount,
		Bin_gifts,
		Bin_saleStartTime,
		Bin_saleEndTime,
		Bin_quotaNum	
].

%GENERATED from file:item.h => MysteriousShopItem
encode_MysteriousShopItem( #pk_MysteriousShopItem{} = P ) ->
	Bin_only_id = write_uint32( P#pk_MysteriousShopItem.only_id ),
	Bin_itemid = write_uint16( P#pk_MysteriousShopItem.itemid ),
	Bin_money_type = write_uint8( P#pk_MysteriousShopItem.money_type ),
	Bin_money = write_uint32( P#pk_MysteriousShopItem.money ),
	Bin_number = write_int32( P#pk_MysteriousShopItem.number ),
	[
		Bin_only_id,
		Bin_itemid,
		Bin_money_type,
		Bin_money,
		Bin_number	
].

%GENERATED from file:item.h => OneCoinInfo
encode_OneCoinInfo( #pk_OneCoinInfo{} = P ) ->
	Bin_coinType = write_uint8( P#pk_OneCoinInfo.coinType ),
	Bin_value = write_uint32( P#pk_OneCoinInfo.value ),
	[
		Bin_coinType,
		Bin_value	
].

%GENERATED from file:item.h => OneGoodsInfo
encode_OneGoodsInfo( #pk_OneGoodsInfo{} = P ) ->
	Bin_itemID = write_uint32( P#pk_OneGoodsInfo.itemID ),
	Bin_itemNum = write_uint16( P#pk_OneGoodsInfo.itemNum ),
	Bin_quality = write_uint8( P#pk_OneGoodsInfo.quality ),
	Bin_isBind = write_uint8( P#pk_OneGoodsInfo.isBind ),
	[
		Bin_itemID,
		Bin_itemNum,
		Bin_quality,
		Bin_isBind	
].

%GENERATED from file:item.h => RefindResInfo
encode_RefindResInfo( #pk_RefindResInfo{} = P ) ->
	Bin_id = write_uint32( P#pk_RefindResInfo.id ),
	Bin_number = write_int32( P#pk_RefindResInfo.number ),
	[
		Bin_id,
		Bin_number	
].

%GENERATED from file:item.h => UseItemCD
encode_UseItemCD( #pk_UseItemCD{} = P ) ->
	Bin_itemGroupID = write_uint16( P#pk_UseItemCD.itemGroupID ),
	Bin_remainCDTime = write_uint32( P#pk_UseItemCD.remainCDTime ),
	[
		Bin_itemGroupID,
		Bin_remainCDTime	
].

%GENERATED from file:item.h => UseItemGainCoinTips
encode_UseItemGainCoinTips( #pk_UseItemGainCoinTips{} = P ) ->
	Bin_coinType = write_uint8( P#pk_UseItemGainCoinTips.coinType ),
	Bin_value = write_uint32( P#pk_UseItemGainCoinTips.value ),
	[
		Bin_coinType,
		Bin_value	
].

%GENERATED from file:item.h => UseItemGainGoodsTips
encode_UseItemGainGoodsTips( #pk_UseItemGainGoodsTips{} = P ) ->
	Bin_itemID = write_uint32( P#pk_UseItemGainGoodsTips.itemID ),
	Bin_itemNum = write_uint16( P#pk_UseItemGainGoodsTips.itemNum ),
	Bin_quality = write_uint8( P#pk_UseItemGainGoodsTips.quality ),
	Bin_isBind = write_uint8( P#pk_UseItemGainGoodsTips.isBind ),
	[
		Bin_itemID,
		Bin_itemNum,
		Bin_quality,
		Bin_isBind	
].

%GENERATED from file:luckycoin.h => GainLuckyCoinInfo
encode_GainLuckyCoinInfo( #pk_GainLuckyCoinInfo{} = P ) ->
	Bin_time = write_uint32( P#pk_GainLuckyCoinInfo.time ),
	Bin_friendID = write_uint64( P#pk_GainLuckyCoinInfo.friendID ),
	[
		Bin_time,
		Bin_friendID	
].

%GENERATED from file:mail.h => MailCoin
encode_MailCoin( #pk_MailCoin{} = P ) ->
	Bin_coinType = write_uint8( P#pk_MailCoin.coinType ),
	Bin_coinNum = write_uint32( P#pk_MailCoin.coinNum ),
	[
		Bin_coinType,
		Bin_coinNum	
].

%GENERATED from file:mail.h => MailDetail
encode_MailDetail( #pk_MailDetail{} = P ) ->
	Bin_mailID = write_uint64( P#pk_MailDetail.mailID ),
	Bin_sendRoleID = write_uint64( P#pk_MailDetail.sendRoleID ),
	Bin_isLocked = write_bool( P#pk_MailDetail.isLocked ),
	Bin_remainDay = write_uint8( P#pk_MailDetail.remainDay ),
	Bin_sendPlayerName = write_string( P#pk_MailDetail.sendPlayerName ),
	Bin_mailTitle = write_string( P#pk_MailDetail.mailTitle ),
	Bin_mailContent = write_string( P#pk_MailDetail.mailContent ),
	Bin_itemList = write_array(P#pk_MailDetail.itemList, fun(X) -> encode_MailItem( X ) end),
	Bin_coinList = write_array(P#pk_MailDetail.coinList, fun(X) -> encode_MailCoin( X ) end),
	[
		Bin_mailID,
		Bin_sendRoleID,
		Bin_isLocked,
		Bin_remainDay,
		Bin_sendPlayerName,
		Bin_mailTitle,
		Bin_mailContent,
		Bin_itemList,
		Bin_coinList	
].

%GENERATED from file:mail.h => MailInfo
encode_MailInfo( #pk_MailInfo{} = P ) ->
	Bin_mailID = write_uint64( P#pk_MailInfo.mailID ),
	Bin_mailTitle = write_string( P#pk_MailInfo.mailTitle ),
	Bin_mailReadTime = write_uint64( P#pk_MailInfo.mailReadTime ),
	Bin_mailSendTime = write_uint64( P#pk_MailInfo.mailSendTime ),
	Bin_ishaveAttach = write_bool( P#pk_MailInfo.ishaveAttach ),
	Bin_senderName = write_string( P#pk_MailInfo.senderName ),
	[
		Bin_mailID,
		Bin_mailTitle,
		Bin_mailReadTime,
		Bin_mailSendTime,
		Bin_ishaveAttach,
		Bin_senderName	
].

%GENERATED from file:mail.h => MailItem
encode_MailItem( #pk_MailItem{} = P ) ->
	Bin_itemUID = write_uint64( P#pk_MailItem.itemUID ),
	Bin_itemID = write_uint32( P#pk_MailItem.itemID ),
	Bin_itemNumber = write_uint32( P#pk_MailItem.itemNumber ),
	Bin_quality = write_uint8( P#pk_MailItem.quality ),
	Bin_isBind = write_bool( P#pk_MailItem.isBind ),
	[
		Bin_itemUID,
		Bin_itemID,
		Bin_itemNumber,
		Bin_quality,
		Bin_isBind	
].

%GENERATED from file:mail.h => MailItemAll
encode_MailItemAll( #pk_MailItemAll{} = P ) ->
	Bin_itemID = write_uint32( P#pk_MailItemAll.itemID ),
	Bin_itemNumber = write_uint32( P#pk_MailItemAll.itemNumber ),
	[
		Bin_itemID,
		Bin_itemNumber	
].

%GENERATED from file:mail.h => retMailOpt
encode_retMailOpt( #pk_retMailOpt{} = P ) ->
	Bin_mailID = write_uint64( P#pk_retMailOpt.mailID ),
	Bin_result = write_bool( P#pk_retMailOpt.result ),
	[
		Bin_mailID,
		Bin_result	
].

%GENERATED from file:mall.h => FashionConfigInfo
encode_FashionConfigInfo( #pk_FashionConfigInfo{} = P ) ->
	Bin_id = write_int32( P#pk_FashionConfigInfo.id ),
	Bin_batch = write_int32( P#pk_FashionConfigInfo.batch ),
	Bin_fashionID = write_array(P#pk_FashionConfigInfo.fashionID, fun(X) -> encode_fashionIDCob( X ) end),
	Bin_itemID = write_array(P#pk_FashionConfigInfo.itemID, fun(X) -> encode_itemIDCob( X ) end),
	Bin_discount = write_float( P#pk_FashionConfigInfo.discount ),
	Bin_cointype = write_int32( P#pk_FashionConfigInfo.cointype ),
	Bin_original_price = write_uint64( P#pk_FashionConfigInfo.original_price ),
	Bin_price = write_uint64( P#pk_FashionConfigInfo.price ),
	Bin_start_time = write_uint64( P#pk_FashionConfigInfo.start_time ),
	Bin_time = write_uint64( P#pk_FashionConfigInfo.time ),
	Bin_resources_bg = write_string( P#pk_FashionConfigInfo.resources_bg ),
	Bin_fashion_show = write_int32( P#pk_FashionConfigInfo.fashion_show ),
	[
		Bin_id,
		Bin_batch,
		Bin_fashionID,
		Bin_itemID,
		Bin_discount,
		Bin_cointype,
		Bin_original_price,
		Bin_price,
		Bin_start_time,
		Bin_time,
		Bin_resources_bg,
		Bin_fashion_show	
].

%GENERATED from file:mall.h => GroupBuyGoodsInfo
encode_GroupBuyGoodsInfo( #pk_GroupBuyGoodsInfo{} = P ) ->
	Bin_id = write_int32( P#pk_GroupBuyGoodsInfo.id ),
	Bin_collect_num = write_int32( P#pk_GroupBuyGoodsInfo.collect_num ),
	Bin_product_name = write_string( P#pk_GroupBuyGoodsInfo.product_name ),
	Bin_product_icon = write_string( P#pk_GroupBuyGoodsInfo.product_icon ),
	Bin_product_quality = write_int32( P#pk_GroupBuyGoodsInfo.product_quality ),
	Bin_price = write_uint64( P#pk_GroupBuyGoodsInfo.price ),
	Bin_true_price = write_uint64( P#pk_GroupBuyGoodsInfo.true_price ),
	Bin_rebate1_num = write_uint64( P#pk_GroupBuyGoodsInfo.rebate1_num ),
	Bin_rebate1_price = write_uint64( P#pk_GroupBuyGoodsInfo.rebate1_price ),
	Bin_rebate2_num = write_uint64( P#pk_GroupBuyGoodsInfo.rebate2_num ),
	Bin_rebate2_price = write_uint64( P#pk_GroupBuyGoodsInfo.rebate2_price ),
	Bin_rebate3_num = write_uint64( P#pk_GroupBuyGoodsInfo.rebate3_num ),
	Bin_rebate3_price = write_uint64( P#pk_GroupBuyGoodsInfo.rebate3_price ),
	Bin_rebate4_num = write_uint64( P#pk_GroupBuyGoodsInfo.rebate4_num ),
	Bin_rebate4_price = write_uint64( P#pk_GroupBuyGoodsInfo.rebate4_price ),
	Bin_rebate5_num = write_uint64( P#pk_GroupBuyGoodsInfo.rebate5_num ),
	Bin_rebate5_price = write_uint64( P#pk_GroupBuyGoodsInfo.rebate5_price ),
	Bin_item1_id = write_uint16( P#pk_GroupBuyGoodsInfo.item1_id ),
	Bin_item1_num = write_uint16( P#pk_GroupBuyGoodsInfo.item1_num ),
	Bin_item2_id = write_uint16( P#pk_GroupBuyGoodsInfo.item2_id ),
	Bin_item2_num = write_uint16( P#pk_GroupBuyGoodsInfo.item2_num ),
	Bin_item3_id = write_uint16( P#pk_GroupBuyGoodsInfo.item3_id ),
	Bin_item3_num = write_uint16( P#pk_GroupBuyGoodsInfo.item3_num ),
	Bin_item4_id = write_uint16( P#pk_GroupBuyGoodsInfo.item4_id ),
	Bin_item4_num = write_uint16( P#pk_GroupBuyGoodsInfo.item4_num ),
	Bin_item5_id = write_uint16( P#pk_GroupBuyGoodsInfo.item5_id ),
	Bin_item5_num = write_uint16( P#pk_GroupBuyGoodsInfo.item5_num ),
	Bin_score = write_uint64( P#pk_GroupBuyGoodsInfo.score ),
	Bin_buy_count = write_uint64( P#pk_GroupBuyGoodsInfo.buy_count ),
	[
		Bin_id,
		Bin_collect_num,
		Bin_product_name,
		Bin_product_icon,
		Bin_product_quality,
		Bin_price,
		Bin_true_price,
		Bin_rebate1_num,
		Bin_rebate1_price,
		Bin_rebate2_num,
		Bin_rebate2_price,
		Bin_rebate3_num,
		Bin_rebate3_price,
		Bin_rebate4_num,
		Bin_rebate4_price,
		Bin_rebate5_num,
		Bin_rebate5_price,
		Bin_item1_id,
		Bin_item1_num,
		Bin_item2_id,
		Bin_item2_num,
		Bin_item3_id,
		Bin_item3_num,
		Bin_item4_id,
		Bin_item4_num,
		Bin_item5_id,
		Bin_item5_num,
		Bin_score,
		Bin_buy_count	
].

%GENERATED from file:mall.h => GroupBuyRewardInfo
encode_GroupBuyRewardInfo( #pk_GroupBuyRewardInfo{} = P ) ->
	Bin_id = write_int32( P#pk_GroupBuyRewardInfo.id ),
	Bin_score = write_uint64( P#pk_GroupBuyRewardInfo.score ),
	Bin_reward1_id = write_uint16( P#pk_GroupBuyRewardInfo.reward1_id ),
	Bin_reward1_num = write_uint16( P#pk_GroupBuyRewardInfo.reward1_num ),
	Bin_reward2_id = write_uint16( P#pk_GroupBuyRewardInfo.reward2_id ),
	Bin_reward2_num = write_uint16( P#pk_GroupBuyRewardInfo.reward2_num ),
	Bin_reward3_id = write_uint16( P#pk_GroupBuyRewardInfo.reward3_id ),
	Bin_reward3_num = write_uint16( P#pk_GroupBuyRewardInfo.reward3_num ),
	Bin_reward4_id = write_uint16( P#pk_GroupBuyRewardInfo.reward4_id ),
	Bin_reward4_num = write_uint16( P#pk_GroupBuyRewardInfo.reward4_num ),
	Bin_reward5_id = write_uint16( P#pk_GroupBuyRewardInfo.reward5_id ),
	Bin_reward5_num = write_uint16( P#pk_GroupBuyRewardInfo.reward5_num ),
	[
		Bin_id,
		Bin_score,
		Bin_reward1_id,
		Bin_reward1_num,
		Bin_reward2_id,
		Bin_reward2_num,
		Bin_reward3_id,
		Bin_reward3_num,
		Bin_reward4_id,
		Bin_reward4_num,
		Bin_reward5_id,
		Bin_reward5_num	
].

%GENERATED from file:mall.h => KoreaNaverConfigInfo
encode_KoreaNaverConfigInfo( #pk_KoreaNaverConfigInfo{} = P ) ->
	Bin_id = write_int32( P#pk_KoreaNaverConfigInfo.id ),
	Bin_name = write_string( P#pk_KoreaNaverConfigInfo.name ),
	Bin_beginTime = write_int32( P#pk_KoreaNaverConfigInfo.beginTime ),
	Bin_endTime = write_int32( P#pk_KoreaNaverConfigInfo.endTime ),
	Bin_itemID = write_int32( P#pk_KoreaNaverConfigInfo.itemID ),
	Bin_itemCount = write_int32( P#pk_KoreaNaverConfigInfo.itemCount ),
	Bin_param = write_string( P#pk_KoreaNaverConfigInfo.param ),
	Bin_ver = write_int32( P#pk_KoreaNaverConfigInfo.ver ),
	Bin_id_num = write_int32( P#pk_KoreaNaverConfigInfo.id_num ),
	Bin_menuID = write_int32( P#pk_KoreaNaverConfigInfo.menuID ),
	Bin_articleID = write_int32( P#pk_KoreaNaverConfigInfo.articleID ),
	[
		Bin_id,
		Bin_name,
		Bin_beginTime,
		Bin_endTime,
		Bin_itemID,
		Bin_itemCount,
		Bin_param,
		Bin_ver,
		Bin_id_num,
		Bin_menuID,
		Bin_articleID	
].

%GENERATED from file:mall.h => KoreaNaverIdAndVer
encode_KoreaNaverIdAndVer( #pk_KoreaNaverIdAndVer{} = P ) ->
	Bin_id = write_int32( P#pk_KoreaNaverIdAndVer.id ),
	Bin_ver = write_int32( P#pk_KoreaNaverIdAndVer.ver ),
	[
		Bin_id,
		Bin_ver	
].

%GENERATED from file:mall.h => MallInfo
encode_MallInfo( #pk_MallInfo{} = P ) ->
	Bin_db_id = write_uint32( P#pk_MallInfo.db_id ),
	Bin_itemid = write_uint32( P#pk_MallInfo.itemid ),
	Bin_buyNumDefalut = write_uint16( P#pk_MallInfo.buyNumDefalut ),
	Bin_mainmenu = write_int8( P#pk_MallInfo.mainmenu ),
	Bin_submenu = write_int8( P#pk_MallInfo.submenu ),
	Bin_gold = write_int32( P#pk_MallInfo.gold ),
	Bin_bind_gold = write_int32( P#pk_MallInfo.bind_gold ),
	Bin_use_integral = write_int32( P#pk_MallInfo.use_integral ),
	Bin_get_integral = write_int32( P#pk_MallInfo.get_integral ),
	Bin_lefttime = write_int32( P#pk_MallInfo.lefttime ),
	Bin_leftcount = write_int32( P#pk_MallInfo.leftcount ),
	Bin_leftcountMax = write_int32( P#pk_MallInfo.leftcountMax ),
	Bin_sortNumber = write_int32( P#pk_MallInfo.sortNumber ),
	Bin_rebate = write_int8( P#pk_MallInfo.rebate ),
	Bin_showtype = write_int8( P#pk_MallInfo.showtype ),
	Bin_limitType = write_int8( P#pk_MallInfo.limitType ),
	Bin_present = write_uint8( P#pk_MallInfo.present ),
	[
		Bin_db_id,
		Bin_itemid,
		Bin_buyNumDefalut,
		Bin_mainmenu,
		Bin_submenu,
		Bin_gold,
		Bin_bind_gold,
		Bin_use_integral,
		Bin_get_integral,
		Bin_lefttime,
		Bin_leftcount,
		Bin_leftcountMax,
		Bin_sortNumber,
		Bin_rebate,
		Bin_showtype,
		Bin_limitType,
		Bin_present	
].

%GENERATED from file:mall.h => fashionIDCob
encode_fashionIDCob( #pk_fashionIDCob{} = P ) ->
	Bin_sex = write_int32( P#pk_fashionIDCob.sex ),
	Bin_fashionID = write_int32( P#pk_fashionIDCob.fashionID ),
	[
		Bin_sex,
		Bin_fashionID	
].

%GENERATED from file:mall.h => idAndCount
encode_idAndCount( #pk_idAndCount{} = P ) ->
	Bin_id = write_int32( P#pk_idAndCount.id ),
	Bin_count = write_int32( P#pk_idAndCount.count ),
	[
		Bin_id,
		Bin_count	
].

%GENERATED from file:mall.h => itemIDCob
encode_itemIDCob( #pk_itemIDCob{} = P ) ->
	Bin_itemID = write_int32( P#pk_itemIDCob.itemID ),
	Bin_count = write_int32( P#pk_itemIDCob.count ),
	[
		Bin_itemID,
		Bin_count	
].

%GENERATED from file:marriage.h => InvitedPlayerData
encode_InvitedPlayerData( #pk_InvitedPlayerData{} = P ) ->
	Bin_roleId = write_uint64( P#pk_InvitedPlayerData.roleId ),
	Bin_name = write_string( P#pk_InvitedPlayerData.name ),
	Bin_level = write_uint16( P#pk_InvitedPlayerData.level ),
	Bin_career = write_uint32( P#pk_InvitedPlayerData.career ),
	Bin_race = write_uint8( P#pk_InvitedPlayerData.race ),
	Bin_sex = write_uint8( P#pk_InvitedPlayerData.sex ),
	Bin_head = write_int32( P#pk_InvitedPlayerData.head ),
	Bin_giveGiftsID = write_uint32( P#pk_InvitedPlayerData.giveGiftsID ),
	[
		Bin_roleId,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_giveGiftsID	
].

%GENERATED from file:marriage.h => KetubbaData
encode_KetubbaData( #pk_KetubbaData{} = P ) ->
	Bin_roleId = write_uint64( P#pk_KetubbaData.roleId ),
	Bin_partnerRoleId = write_uint64( P#pk_KetubbaData.partnerRoleId ),
	Bin_startTime = write_uint64( P#pk_KetubbaData.startTime ),
	Bin_itemUID = write_uint64( P#pk_KetubbaData.itemUID ),
	Bin_type = write_uint8( P#pk_KetubbaData.type ),
	Bin_name = write_string( P#pk_KetubbaData.name ),
	Bin_partnerName = write_string( P#pk_KetubbaData.partnerName ),
	Bin_weddingState = write_uint8( P#pk_KetubbaData.weddingState ),
	[
		Bin_roleId,
		Bin_partnerRoleId,
		Bin_startTime,
		Bin_itemUID,
		Bin_type,
		Bin_name,
		Bin_partnerName,
		Bin_weddingState	
].

%GENERATED from file:marriage.h => RobRedData
encode_RobRedData( #pk_RobRedData{} = P ) ->
	Bin_roleId = write_uint64( P#pk_RobRedData.roleId ),
	Bin_name = write_string( P#pk_RobRedData.name ),
	Bin_level = write_uint16( P#pk_RobRedData.level ),
	Bin_career = write_uint32( P#pk_RobRedData.career ),
	Bin_race = write_uint8( P#pk_RobRedData.race ),
	Bin_sex = write_uint8( P#pk_RobRedData.sex ),
	Bin_head = write_int32( P#pk_RobRedData.head ),
	Bin_robNum = write_uint16( P#pk_RobRedData.robNum ),
	Bin_useTime = write_uint16( P#pk_RobRedData.useTime ),
	[
		Bin_roleId,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_robNum,
		Bin_useTime	
].

%GENERATED from file:marriage.h => SitNpcData
encode_SitNpcData( #pk_SitNpcData{} = P ) ->
	Bin_npcCode = write_uint64( P#pk_SitNpcData.npcCode ),
	Bin_sitRoleID = write_uint64( P#pk_SitNpcData.sitRoleID ),
	Bin_npcX = write_float( P#pk_SitNpcData.npcX ),
	Bin_npcY = write_float( P#pk_SitNpcData.npcY ),
	[
		Bin_npcCode,
		Bin_sitRoleID,
		Bin_npcX,
		Bin_npcY	
].

%GENERATED from file:marriage.h => SkillInfoForMarraige
encode_SkillInfoForMarraige( #pk_SkillInfoForMarraige{} = P ) ->
	Bin_id = write_uint32( P#pk_SkillInfoForMarraige.id ),
	Bin_exp = write_uint32( P#pk_SkillInfoForMarraige.exp ),
	[
		Bin_id,
		Bin_exp	
].

%GENERATED from file:mount.h => MountInfo
encode_MountInfo( #pk_MountInfo{} = P ) ->
	Bin_level = write_uint8( P#pk_MountInfo.level ),
	Bin_state = write_uint8( P#pk_MountInfo.state ),
	Bin_curProcess = write_uint32( P#pk_MountInfo.curProcess ),
	Bin_shape_id = write_uint16( P#pk_MountInfo.shape_id ),
	[
		Bin_level,
		Bin_state,
		Bin_curProcess,
		Bin_shape_id	
].

%GENERATED from file:npc.h => NpcTitle
encode_NpcTitle( #pk_NpcTitle{} = P ) ->
	Bin_npccode = write_uint64( P#pk_NpcTitle.npccode ),
	Bin_new_title = write_string( P#pk_NpcTitle.new_title ),
	[
		Bin_npccode,
		Bin_new_title	
].

%GENERATED from file:pet.h => AddProp
encode_AddProp( #pk_AddProp{} = P ) ->
	Bin_prop = write_uint8( P#pk_AddProp.prop ),
	Bin_value = write_float( P#pk_AddProp.value ),
	[
		Bin_prop,
		Bin_value	
].

%GENERATED from file:pet.h => AssistBattleInfo
encode_AssistBattleInfo( #pk_AssistBattleInfo{} = P ) ->
	Bin_petID = write_uint16( P#pk_AssistBattleInfo.petID ),
	Bin_slot = write_uint8( P#pk_AssistBattleInfo.slot ),
	[
		Bin_petID,
		Bin_slot	
].

%GENERATED from file:pet.h => CatalogNode
encode_CatalogNode( #pk_CatalogNode{} = P ) ->
	Bin_id = write_uint16( P#pk_CatalogNode.id ),
	Bin_starLevel = write_uint8( P#pk_CatalogNode.starLevel ),
	[
		Bin_id,
		Bin_starLevel	
].

%GENERATED from file:pet.h => PetBaseInfo
encode_PetBaseInfo( #pk_PetBaseInfo{} = P ) ->
	Bin_petID = write_uint16( P#pk_PetBaseInfo.petID ),
	Bin_petStar = write_uint8( P#pk_PetBaseInfo.petStar ),
	Bin_status = write_uint8( P#pk_PetBaseInfo.status ),
	Bin_skillList = write_array(P#pk_PetBaseInfo.skillList, fun(X) -> encode_PetSkillBaseInfo( X ) end),
	Bin_petName = write_string( P#pk_PetBaseInfo.petName ),
	Bin_petRaw = write_uint8( P#pk_PetBaseInfo.petRaw ),
	Bin_petTime = write_uint64( P#pk_PetBaseInfo.petTime ),
	Bin_petProps = write_array(P#pk_PetBaseInfo.petProps, fun(X) -> encode_AddProp( X ) end),
	Bin_petForce = write_uint64( P#pk_PetBaseInfo.petForce ),
	Bin_upCount = write_uint32( P#pk_PetBaseInfo.upCount ),
	Bin_petLevel = write_uint32( P#pk_PetBaseInfo.petLevel ),
	Bin_petExp = write_uint32( P#pk_PetBaseInfo.petExp ),
	[
		Bin_petID,
		Bin_petStar,
		Bin_status,
		Bin_skillList,
		Bin_petName,
		Bin_petRaw,
		Bin_petTime,
		Bin_petProps,
		Bin_petForce,
		Bin_upCount,
		Bin_petLevel,
		Bin_petExp	
].

%GENERATED from file:pet.h => PetEquipInfo
encode_PetEquipInfo( #pk_PetEquipInfo{} = P ) ->
	Bin_equipID = write_uint8( P#pk_PetEquipInfo.equipID ),
	Bin_equipLv = write_uint8( P#pk_PetEquipInfo.equipLv ),
	[
		Bin_equipID,
		Bin_equipLv	
].

%GENERATED from file:pet.h => PetSkillBaseInfo
encode_PetSkillBaseInfo( #pk_PetSkillBaseInfo{} = P ) ->
	Bin_petSkillIndex = write_uint8( P#pk_PetSkillBaseInfo.petSkillIndex ),
	Bin_petSkillId = write_uint16( P#pk_PetSkillBaseInfo.petSkillId ),
	Bin_petSkillCd = write_uint16( P#pk_PetSkillBaseInfo.petSkillCd ),
	Bin_petSkillType = write_uint8( P#pk_PetSkillBaseInfo.petSkillType ),
	Bin_petSkillLv = write_uint8( P#pk_PetSkillBaseInfo.petSkillLv ),
	Bin_petSkillIsUnlock = write_uint8( P#pk_PetSkillBaseInfo.petSkillIsUnlock ),
	[
		Bin_petSkillIndex,
		Bin_petSkillId,
		Bin_petSkillCd,
		Bin_petSkillType,
		Bin_petSkillLv,
		Bin_petSkillIsUnlock	
].

%GENERATED from file:pet.h => PetSkillCastResult
encode_PetSkillCastResult( #pk_PetSkillCastResult{} = P ) ->
	Bin_oldSkillID = write_uint16( P#pk_PetSkillCastResult.oldSkillID ),
	Bin_newSkillID = write_uint16( P#pk_PetSkillCastResult.newSkillID ),
	Bin_newSkillLevel = write_uint16( P#pk_PetSkillCastResult.newSkillLevel ),
	[
		Bin_oldSkillID,
		Bin_newSkillID,
		Bin_newSkillLevel	
].

%GENERATED from file:pet.h => PetTerritoryInfo
encode_PetTerritoryInfo( #pk_PetTerritoryInfo{} = P ) ->
	Bin_petID = write_uint16( P#pk_PetTerritoryInfo.petID ),
	Bin_petLevel = write_uint16( P#pk_PetTerritoryInfo.petLevel ),
	Bin_petForce = write_uint64( P#pk_PetTerritoryInfo.petForce ),
	Bin_territoryID = write_uint32( P#pk_PetTerritoryInfo.territoryID ),
	Bin_star = write_uint8( P#pk_PetTerritoryInfo.star ),
	Bin_raw = write_uint8( P#pk_PetTerritoryInfo.raw ),
	[
		Bin_petID,
		Bin_petLevel,
		Bin_petForce,
		Bin_territoryID,
		Bin_star,
		Bin_raw	
].

%GENERATED from file:pet.h => PvPCityInfo
encode_PvPCityInfo( #pk_PvPCityInfo{} = P ) ->
	Bin_cityID = write_uint8( P#pk_PvPCityInfo.cityID ),
	Bin_cityTime = write_uint64( P#pk_PvPCityInfo.cityTime ),
	Bin_roleID = write_uint64( P#pk_PvPCityInfo.roleID ),
	Bin_cityHp = write_uint32( P#pk_PvPCityInfo.cityHp ),
	Bin_cityMax = write_uint32( P#pk_PvPCityInfo.cityMax ),
	Bin_force = write_uint32( P#pk_PvPCityInfo.force ),
	Bin_roleName = write_string( P#pk_PvPCityInfo.roleName ),
	Bin_petList = write_array(P#pk_PvPCityInfo.petList, fun(X) -> write_uint16( X ) end),
	[
		Bin_cityID,
		Bin_cityTime,
		Bin_roleID,
		Bin_cityHp,
		Bin_cityMax,
		Bin_force,
		Bin_roleName,
		Bin_petList	
].

%GENERATED from file:pet.h => PveItem
encode_PveItem( #pk_PveItem{} = P ) ->
	Bin_id = write_int16( P#pk_PveItem.id ),
	Bin_num = write_int16( P#pk_PveItem.num ),
	[
		Bin_id,
		Bin_num	
].

%GENERATED from file:pet.h => PveSweep
encode_PveSweep( #pk_PveSweep{} = P ) ->
	Bin_num = write_uint8( P#pk_PveSweep.num ),
	Bin_coin = write_int32( P#pk_PveSweep.coin ),
	Bin_exp = write_int32( P#pk_PveSweep.exp ),
	Bin_itemList = write_array(P#pk_PveSweep.itemList, fun(X) -> encode_PveItem( X ) end),
	[
		Bin_num,
		Bin_coin,
		Bin_exp,
		Bin_itemList	
].

%GENERATED from file:pet.h => PvpBattleReportInfo
encode_PvpBattleReportInfo( #pk_PvpBattleReportInfo{} = P ) ->
	Bin_time = write_uint64( P#pk_PvpBattleReportInfo.time ),
	Bin_type = write_uint8( P#pk_PvpBattleReportInfo.type ),
	Bin_cityID = write_uint8( P#pk_PvpBattleReportInfo.cityID ),
	Bin_roleID = write_uint64( P#pk_PvpBattleReportInfo.roleID ),
	Bin_roleName = write_string( P#pk_PvpBattleReportInfo.roleName ),
	[
		Bin_time,
		Bin_type,
		Bin_cityID,
		Bin_roleID,
		Bin_roleName	
].

%GENERATED from file:pet.h => TerritoryHistoryCell
encode_TerritoryHistoryCell( #pk_TerritoryHistoryCell{} = P ) ->
	Bin_time = write_uint32( P#pk_TerritoryHistoryCell.time ),
	Bin_roleName = write_string( P#pk_TerritoryHistoryCell.roleName ),
	Bin_roleID = write_uint64( P#pk_TerritoryHistoryCell.roleID ),
	Bin_territoryID = write_uint32( P#pk_TerritoryHistoryCell.territoryID ),
	Bin_cfgReward = write_uint32( P#pk_TerritoryHistoryCell.cfgReward ),
	Bin_count1 = write_uint32( P#pk_TerritoryHistoryCell.count1 ),
	Bin_count2 = write_uint32( P#pk_TerritoryHistoryCell.count2 ),
	[
		Bin_time,
		Bin_roleName,
		Bin_roleID,
		Bin_territoryID,
		Bin_cfgReward,
		Bin_count1,
		Bin_count2	
].

%GENERATED from file:pet.h => TerritoryInfo
encode_TerritoryInfo( #pk_TerritoryInfo{} = P ) ->
	Bin_territoryID = write_uint32( P#pk_TerritoryInfo.territoryID ),
	Bin_cfgReward = write_uint32( P#pk_TerritoryInfo.cfgReward ),
	Bin_cfgTime = write_uint32( P#pk_TerritoryInfo.cfgTime ),
	Bin_cfgLevel = write_uint32( P#pk_TerritoryInfo.cfgLevel ),
	Bin_cfgForce = write_uint32( P#pk_TerritoryInfo.cfgForce ),
	Bin_timeFresh = write_uint32( P#pk_TerritoryInfo.timeFresh ),
	Bin_timeEnd = write_uint32( P#pk_TerritoryInfo.timeEnd ),
	Bin_rewardCount1 = write_uint32( P#pk_TerritoryInfo.rewardCount1 ),
	Bin_rewardCount2 = write_uint32( P#pk_TerritoryInfo.rewardCount2 ),
	Bin_timeSafe = write_uint32( P#pk_TerritoryInfo.timeSafe ),
	Bin_timeSearch = write_uint32( P#pk_TerritoryInfo.timeSearch ),
	[
		Bin_territoryID,
		Bin_cfgReward,
		Bin_cfgTime,
		Bin_cfgLevel,
		Bin_cfgForce,
		Bin_timeFresh,
		Bin_timeEnd,
		Bin_rewardCount1,
		Bin_rewardCount2,
		Bin_timeSafe,
		Bin_timeSearch	
].

%GENERATED from file:player.h => AliveRole
encode_AliveRole( #pk_AliveRole{} = P ) ->
	Bin_roleID = write_uint64( P#pk_AliveRole.roleID ),
	Bin_role = encode_CrossRoleBase( P#pk_AliveRole.role ),
	Bin_listVE = write_array(P#pk_AliveRole.listVE, fun(X) -> write_uint16( X ) end),
	Bin_countKill = write_uint16( P#pk_AliveRole.countKill ),
	Bin_countDead = write_uint16( P#pk_AliveRole.countDead ),
	Bin_isGiveUp = write_bool( P#pk_AliveRole.isGiveUp ),
	Bin_rankID = write_uint8( P#pk_AliveRole.rankID ),
	Bin_timeDead = write_uint64( P#pk_AliveRole.timeDead ),
	Bin_isRevive = write_bool( P#pk_AliveRole.isRevive ),
	Bin_deadRank = write_uint16( P#pk_AliveRole.deadRank ),
	[
		Bin_roleID,
		Bin_role,
		Bin_listVE,
		Bin_countKill,
		Bin_countDead,
		Bin_isGiveUp,
		Bin_rankID,
		Bin_timeDead,
		Bin_isRevive,
		Bin_deadRank	
].

%GENERATED from file:player.h => AliveRolePos
encode_AliveRolePos( #pk_AliveRolePos{} = P ) ->
	Bin_id = write_uint64( P#pk_AliveRolePos.id ),
	Bin_level = write_uint16( P#pk_AliveRolePos.level ),
	Bin_career = write_uint32( P#pk_AliveRolePos.career ),
	Bin_race = write_uint8( P#pk_AliveRolePos.race ),
	Bin_sex = write_uint8( P#pk_AliveRolePos.sex ),
	Bin_head = write_int32( P#pk_AliveRolePos.head ),
	Bin_x = write_float( P#pk_AliveRolePos.x ),
	Bin_y = write_float( P#pk_AliveRolePos.y ),
	[
		Bin_id,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_x,
		Bin_y	
].

%GENERATED from file:player.h => BattleProp
encode_BattleProp( #pk_BattleProp{} = P ) ->
	Bin_index = write_uint8( P#pk_BattleProp.index ),
	Bin_value = write_float( P#pk_BattleProp.value ),
	[
		Bin_index,
		Bin_value	
].

%GENERATED from file:player.h => BlockStatusChange
encode_BlockStatusChange( #pk_BlockStatusChange{} = P ) ->
	Bin_blockName = write_string( P#pk_BlockStatusChange.blockName ),
	Bin_blockStatus = write_uint32( P#pk_BlockStatusChange.blockStatus ),
	[
		Bin_blockName,
		Bin_blockStatus	
].

%GENERATED from file:player.h => BuffBaseInfo
encode_BuffBaseInfo( #pk_BuffBaseInfo{} = P ) ->
	Bin_buffUID = write_uint64( P#pk_BuffBaseInfo.buffUID ),
	Bin_buffID = write_uint32( P#pk_BuffBaseInfo.buffID ),
	Bin_time = write_uint32( P#pk_BuffBaseInfo.time ),
	[
		Bin_buffUID,
		Bin_buffID,
		Bin_time	
].

%GENERATED from file:player.h => CoinData
encode_CoinData( #pk_CoinData{} = P ) ->
	Bin_coinType = write_uint8( P#pk_CoinData.coinType ),
	Bin_value = write_uint32( P#pk_CoinData.value ),
	[
		Bin_coinType,
		Bin_value	
].

%GENERATED from file:player.h => CopyMapDropItem
encode_CopyMapDropItem( #pk_CopyMapDropItem{} = P ) ->
	Bin_itemUID = write_uint64( P#pk_CopyMapDropItem.itemUID ),
	Bin_itemID = write_uint16( P#pk_CopyMapDropItem.itemID ),
	Bin_number = write_uint16( P#pk_CopyMapDropItem.number ),
	Bin_quality = write_uint8( P#pk_CopyMapDropItem.quality ),
	Bin_isBind = write_bool( P#pk_CopyMapDropItem.isBind ),
	[
		Bin_itemUID,
		Bin_itemID,
		Bin_number,
		Bin_quality,
		Bin_isBind	
].

%GENERATED from file:player.h => CopyMapStatHurt
encode_CopyMapStatHurt( #pk_CopyMapStatHurt{} = P ) ->
	Bin_roleID = write_uint64( P#pk_CopyMapStatHurt.roleID ),
	Bin_beHurt = write_uint32( P#pk_CopyMapStatHurt.beHurt ),
	Bin_playerHurt = write_uint32( P#pk_CopyMapStatHurt.playerHurt ),
	Bin_petHurt = write_uint32( P#pk_CopyMapStatHurt.petHurt ),
	[
		Bin_roleID,
		Bin_beHurt,
		Bin_playerHurt,
		Bin_petHurt	
].

%GENERATED from file:player.h => CopyObj
encode_CopyObj( #pk_CopyObj{} = P ) ->
	Bin_targetID = write_uint16( P#pk_CopyObj.targetID ),
	Bin_targetType = write_uint8( P#pk_CopyObj.targetType ),
	Bin_curNumber = write_uint16( P#pk_CopyObj.curNumber ),
	Bin_allNumber = write_uint16( P#pk_CopyObj.allNumber ),
	[
		Bin_targetID,
		Bin_targetType,
		Bin_curNumber,
		Bin_allNumber	
].

%GENERATED from file:player.h => CrossRoleBase
encode_CrossRoleBase( #pk_CrossRoleBase{} = P ) ->
	Bin_id = write_uint64( P#pk_CrossRoleBase.id ),
	Bin_name = write_string( P#pk_CrossRoleBase.name ),
	Bin_server = write_string( P#pk_CrossRoleBase.server ),
	Bin_level = write_uint16( P#pk_CrossRoleBase.level ),
	Bin_career = write_uint32( P#pk_CrossRoleBase.career ),
	Bin_race = write_uint8( P#pk_CrossRoleBase.race ),
	Bin_sex = write_uint8( P#pk_CrossRoleBase.sex ),
	Bin_head = write_int32( P#pk_CrossRoleBase.head ),
	Bin_frameID = write_uint16( P#pk_CrossRoleBase.frameID ),
	Bin_face = write_array(P#pk_CrossRoleBase.face, fun(X) -> write_uint8( X ) end),
	Bin_maxForce = write_uint64( P#pk_CrossRoleBase.maxForce ),
	Bin_maxForceNoPet = write_uint64( P#pk_CrossRoleBase.maxForceNoPet ),
	[
		Bin_id,
		Bin_name,
		Bin_server,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_face,
		Bin_maxForce,
		Bin_maxForceNoPet	
].

%GENERATED from file:player.h => Error
encode_Error( #pk_Error{} = P ) ->
	Bin_errorCode = write_uint32( P#pk_Error.errorCode ),
	Bin_params = write_array(P#pk_Error.params, fun(X) -> write_string( X ) end),
	[
		Bin_errorCode,
		Bin_params	
].

%GENERATED from file:player.h => LBSRole
encode_LBSRole( #pk_LBSRole{} = P ) ->
	Bin_id = write_uint64( P#pk_LBSRole.id ),
	Bin_name = write_string( P#pk_LBSRole.name ),
	Bin_server = write_string( P#pk_LBSRole.server ),
	Bin_level = write_uint16( P#pk_LBSRole.level ),
	Bin_career = write_uint32( P#pk_LBSRole.career ),
	Bin_race = write_uint8( P#pk_LBSRole.race ),
	Bin_sex = write_uint8( P#pk_LBSRole.sex ),
	Bin_head = write_int32( P#pk_LBSRole.head ),
	Bin_face = write_array(P#pk_LBSRole.face, fun(X) -> write_uint8( X ) end),
	Bin_maxForceAll = write_uint64( P#pk_LBSRole.maxForceAll ),
	Bin_frt = write_uint8( P#pk_LBSRole.frt ),
	Bin_homeID = write_uint64( P#pk_LBSRole.homeID ),
	Bin_lat = write_float( P#pk_LBSRole.lat ),
	Bin_lng = write_float( P#pk_LBSRole.lng ),
	Bin_dist = write_float( P#pk_LBSRole.dist ),
	[
		Bin_id,
		Bin_name,
		Bin_server,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_face,
		Bin_maxForceAll,
		Bin_frt,
		Bin_homeID,
		Bin_lat,
		Bin_lng,
		Bin_dist	
].

%GENERATED from file:player.h => LookInfoMonster
encode_LookInfoMonster( #pk_LookInfoMonster{} = P ) ->
	Bin_code = write_uint64( P#pk_LookInfoMonster.code ),
	Bin_id = write_uint32( P#pk_LookInfoMonster.id ),
	Bin_x = write_float( P#pk_LookInfoMonster.x ),
	Bin_y = write_float( P#pk_LookInfoMonster.y ),
	Bin_rotW = write_float( P#pk_LookInfoMonster.rotW ),
	Bin_targetX = write_float( P#pk_LookInfoMonster.targetX ),
	Bin_targetY = write_float( P#pk_LookInfoMonster.targetY ),
	Bin_move_speed = write_float( P#pk_LookInfoMonster.move_speed ),
	Bin_attack_speed = write_float( P#pk_LookInfoMonster.attack_speed ),
	Bin_moveStatus = write_uint8( P#pk_LookInfoMonster.moveStatus ),
	Bin_type = write_uint8( P#pk_LookInfoMonster.type ),
	Bin_hp_per = write_uint8( P#pk_LookInfoMonster.hp_per ),
	Bin_camp = write_int8( P#pk_LookInfoMonster.camp ),
	Bin_usercode = write_uint64( P#pk_LookInfoMonster.usercode ),
	Bin_groupID = write_uint64( P#pk_LookInfoMonster.groupID ),
	Bin_guildID = write_uint64( P#pk_LookInfoMonster.guildID ),
	Bin_buffs = write_array(P#pk_LookInfoMonster.buffs, fun(X) -> encode_BuffBaseInfo( X ) end),
	Bin_name = write_string( P#pk_LookInfoMonster.name ),
	Bin_level = write_uint16( P#pk_LookInfoMonster.level ),
	[
		Bin_code,
		Bin_id,
		Bin_x,
		Bin_y,
		Bin_rotW,
		Bin_targetX,
		Bin_targetY,
		Bin_move_speed,
		Bin_attack_speed,
		Bin_moveStatus,
		Bin_type,
		Bin_hp_per,
		Bin_camp,
		Bin_usercode,
		Bin_groupID,
		Bin_guildID,
		Bin_buffs,
		Bin_name,
		Bin_level	
].

%GENERATED from file:player.h => LookInfoNpc
encode_LookInfoNpc( #pk_LookInfoNpc{} = P ) ->
	Bin_code = write_uint64( P#pk_LookInfoNpc.code ),
	Bin_id = write_uint32( P#pk_LookInfoNpc.id ),
	Bin_x = write_float( P#pk_LookInfoNpc.x ),
	Bin_y = write_float( P#pk_LookInfoNpc.y ),
	Bin_rotW = write_float( P#pk_LookInfoNpc.rotW ),
	Bin_name = write_string( P#pk_LookInfoNpc.name ),
	Bin_actionStatus = write_uint32( P#pk_LookInfoNpc.actionStatus ),
	Bin_title = write_string( P#pk_LookInfoNpc.title ),
	[
		Bin_code,
		Bin_id,
		Bin_x,
		Bin_y,
		Bin_rotW,
		Bin_name,
		Bin_actionStatus,
		Bin_title	
].

%GENERATED from file:player.h => LookInfoPet
encode_LookInfoPet( #pk_LookInfoPet{} = P ) ->
	Bin_code = write_uint64( P#pk_LookInfoPet.code ),
	Bin_id = write_uint32( P#pk_LookInfoPet.id ),
	Bin_name = write_string( P#pk_LookInfoPet.name ),
	Bin_level = write_uint16( P#pk_LookInfoPet.level ),
	Bin_playerCode = write_uint64( P#pk_LookInfoPet.playerCode ),
	Bin_x = write_float( P#pk_LookInfoPet.x ),
	Bin_y = write_float( P#pk_LookInfoPet.y ),
	Bin_targetX = write_float( P#pk_LookInfoPet.targetX ),
	Bin_targetY = write_float( P#pk_LookInfoPet.targetY ),
	Bin_move_speed = write_float( P#pk_LookInfoPet.move_speed ),
	Bin_hp_per = write_uint8( P#pk_LookInfoPet.hp_per ),
	Bin_status = write_int8( P#pk_LookInfoPet.status ),
	Bin_camp = write_int8( P#pk_LookInfoPet.camp ),
	Bin_pkMode = write_uint8( P#pk_LookInfoPet.pkMode ),
	Bin_rawLvl = write_uint8( P#pk_LookInfoPet.rawLvl ),
	Bin_buffs = write_array(P#pk_LookInfoPet.buffs, fun(X) -> encode_BuffBaseInfo( X ) end),
	[
		Bin_code,
		Bin_id,
		Bin_name,
		Bin_level,
		Bin_playerCode,
		Bin_x,
		Bin_y,
		Bin_targetX,
		Bin_targetY,
		Bin_move_speed,
		Bin_hp_per,
		Bin_status,
		Bin_camp,
		Bin_pkMode,
		Bin_rawLvl,
		Bin_buffs	
].

%GENERATED from file:player.h => MapLineInfo
encode_MapLineInfo( #pk_MapLineInfo{} = P ) ->
	Bin_lineID = write_uint32( P#pk_MapLineInfo.lineID ),
	Bin_number = write_uint16( P#pk_MapLineInfo.number ),
	Bin_inStates = write_uint8( P#pk_MapLineInfo.inStates ),
	[
		Bin_lineID,
		Bin_number,
		Bin_inStates	
].

%GENERATED from file:player.h => MissionObjectInfo
encode_MissionObjectInfo( #pk_MissionObjectInfo{} = P ) ->
	Bin_code = write_uint64( P#pk_MissionObjectInfo.code ),
	Bin_id = write_uint32( P#pk_MissionObjectInfo.id ),
	Bin_x = write_float( P#pk_MissionObjectInfo.x ),
	Bin_y = write_float( P#pk_MissionObjectInfo.y ),
	Bin_rotW = write_float( P#pk_MissionObjectInfo.rotW ),
	[
		Bin_code,
		Bin_id,
		Bin_x,
		Bin_y,
		Bin_rotW	
].

%GENERATED from file:player.h => MoneyChanges
encode_MoneyChanges( #pk_MoneyChanges{} = P ) ->
	Bin_code = write_uint64( P#pk_MoneyChanges.code ),
	Bin_moneys = write_array(P#pk_MoneyChanges.moneys, fun(X) -> encode_MoneyInit( X ) end),
	[
		Bin_code,
		Bin_moneys	
].

%GENERATED from file:player.h => MoneyInit
encode_MoneyInit( #pk_MoneyInit{} = P ) ->
	Bin_moneyType = write_uint8( P#pk_MoneyInit.moneyType ),
	Bin_value = write_uint32( P#pk_MoneyInit.value ),
	[
		Bin_moneyType,
		Bin_value	
].

%GENERATED from file:player.h => MonsterBook
encode_MonsterBook( #pk_MonsterBook{} = P ) ->
	Bin_id = write_uint16( P#pk_MonsterBook.id ),
	Bin_kill = write_uint32( P#pk_MonsterBook.kill ),
	Bin_isSnap = write_bool( P#pk_MonsterBook.isSnap ),
	Bin_isUnlock = write_bool( P#pk_MonsterBook.isUnlock ),
	Bin_isReward = write_bool( P#pk_MonsterBook.isReward ),
	[
		Bin_id,
		Bin_kill,
		Bin_isSnap,
		Bin_isUnlock,
		Bin_isReward	
].

%GENERATED from file:player.h => NoticeInfo
encode_NoticeInfo( #pk_NoticeInfo{} = P ) ->
	Bin_id = write_int64( P#pk_NoticeInfo.id ),
	Bin_type = write_int8( P#pk_NoticeInfo.type ),
	Bin_pos = write_int8( P#pk_NoticeInfo.pos ),
	Bin_content = write_string( P#pk_NoticeInfo.content ),
	Bin_color = write_int32( P#pk_NoticeInfo.color ),
	Bin_afterSecondStart = write_int64( P#pk_NoticeInfo.afterSecondStart ),
	Bin_duration = write_int64( P#pk_NoticeInfo.duration ),
	Bin_interval = write_int32( P#pk_NoticeInfo.interval ),
	[
		Bin_id,
		Bin_type,
		Bin_pos,
		Bin_content,
		Bin_color,
		Bin_afterSecondStart,
		Bin_duration,
		Bin_interval	
].

%GENERATED from file:player.h => ObjBrief
encode_ObjBrief( #pk_ObjBrief{} = P ) ->
	Bin_code = write_uint64( P#pk_ObjBrief.code ),
	Bin_name = write_string( P#pk_ObjBrief.name ),
	Bin_x = write_float( P#pk_ObjBrief.x ),
	Bin_y = write_float( P#pk_ObjBrief.y ),
	[
		Bin_code,
		Bin_name,
		Bin_x,
		Bin_y	
].

%GENERATED from file:player.h => OneAwakeinfo
encode_OneAwakeinfo( #pk_OneAwakeinfo{} = P ) ->
	Bin_stage = write_uint8( P#pk_OneAwakeinfo.stage ),
	Bin_stone = write_uint8( P#pk_OneAwakeinfo.stone ),
	Bin_param = write_uint32( P#pk_OneAwakeinfo.param ),
	[
		Bin_stage,
		Bin_stone,
		Bin_param	
].

%GENERATED from file:player.h => PlayerDailyCount
encode_PlayerDailyCount( #pk_PlayerDailyCount{} = P ) ->
	Bin_dailyType = write_uint32( P#pk_PlayerDailyCount.dailyType ),
	Bin_dailyID = write_uint32( P#pk_PlayerDailyCount.dailyID ),
	Bin_dailyValue = write_uint32( P#pk_PlayerDailyCount.dailyValue ),
	[
		Bin_dailyType,
		Bin_dailyID,
		Bin_dailyValue	
].

%GENERATED from file:player.h => PosInfo
encode_PosInfo( #pk_PosInfo{} = P ) ->
	Bin_x = write_float( P#pk_PosInfo.x ),
	Bin_y = write_float( P#pk_PosInfo.y ),
	[
		Bin_x,
		Bin_y	
].

%GENERATED from file:player.h => PropFloat
encode_PropFloat( #pk_PropFloat{} = P ) ->
	Bin_index = write_uint16( P#pk_PropFloat.index ),
	Bin_value = write_float( P#pk_PropFloat.value ),
	[
		Bin_index,
		Bin_value	
].

%GENERATED from file:player.h => PropInt
encode_PropInt( #pk_PropInt{} = P ) ->
	Bin_index = write_uint16( P#pk_PropInt.index ),
	Bin_value = write_int32( P#pk_PropInt.value ),
	[
		Bin_index,
		Bin_value	
].

%GENERATED from file:player.h => PropInt64
encode_PropInt64( #pk_PropInt64{} = P ) ->
	Bin_index = write_uint16( P#pk_PropInt64.index ),
	Bin_value = write_uint64( P#pk_PropInt64.value ),
	[
		Bin_index,
		Bin_value	
].

%GENERATED from file:player.h => PropString
encode_PropString( #pk_PropString{} = P ) ->
	Bin_index = write_uint16( P#pk_PropString.index ),
	Bin_value = write_string( P#pk_PropString.value ),
	[
		Bin_index,
		Bin_value	
].

%GENERATED from file:player.h => RaceCanBeInvite
encode_RaceCanBeInvite( #pk_RaceCanBeInvite{} = P ) ->
	Bin_id = write_uint64( P#pk_RaceCanBeInvite.id ),
	Bin_name = write_string( P#pk_RaceCanBeInvite.name ),
	Bin_level = write_uint16( P#pk_RaceCanBeInvite.level ),
	Bin_career = write_uint32( P#pk_RaceCanBeInvite.career ),
	Bin_race = write_uint8( P#pk_RaceCanBeInvite.race ),
	Bin_sex = write_uint8( P#pk_RaceCanBeInvite.sex ),
	Bin_head = write_int32( P#pk_RaceCanBeInvite.head ),
	Bin_frameID = write_uint16( P#pk_RaceCanBeInvite.frameID ),
	Bin_face = write_array(P#pk_RaceCanBeInvite.face, fun(X) -> write_uint8( X ) end),
	Bin_maxForce = write_uint64( P#pk_RaceCanBeInvite.maxForce ),
	Bin_isCouple = write_bool( P#pk_RaceCanBeInvite.isCouple ),
	Bin_isFriend = write_bool( P#pk_RaceCanBeInvite.isFriend ),
	Bin_isGuildMember = write_bool( P#pk_RaceCanBeInvite.isGuildMember ),
	Bin_friendliness = write_uint32( P#pk_RaceCanBeInvite.friendliness ),
	Bin_liveness = write_uint32( P#pk_RaceCanBeInvite.liveness ),
	[
		Bin_id,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_face,
		Bin_maxForce,
		Bin_isCouple,
		Bin_isFriend,
		Bin_isGuildMember,
		Bin_friendliness,
		Bin_liveness	
].

%GENERATED from file:player.h => RaceTeamBase
encode_RaceTeamBase( #pk_RaceTeamBase{} = P ) ->
	Bin_applyID = write_uint64( P#pk_RaceTeamBase.applyID ),
	Bin_leaderID = write_uint64( P#pk_RaceTeamBase.leaderID ),
	Bin_members = write_array(P#pk_RaceTeamBase.members, fun(X) -> encode_CrossRoleBase( X ) end),
	Bin_petID = write_uint16( P#pk_RaceTeamBase.petID ),
	[
		Bin_applyID,
		Bin_leaderID,
		Bin_members,
		Bin_petID	
].

%GENERATED from file:player.h => RaceTeamEx
encode_RaceTeamEx( #pk_RaceTeamEx{} = P ) ->
	Bin_applyID = write_uint64( P#pk_RaceTeamEx.applyID ),
	Bin_base = encode_RaceTeamBase( P#pk_RaceTeamEx.base ),
	Bin_item = encode_RaceTeamItem( P#pk_RaceTeamEx.item ),
	Bin_sort = encode_RaceTeamSort( P#pk_RaceTeamEx.sort ),
	Bin_giveUpID = write_uint64( P#pk_RaceTeamEx.giveUpID ),
	[
		Bin_applyID,
		Bin_base,
		Bin_item,
		Bin_sort,
		Bin_giveUpID	
].

%GENERATED from file:player.h => RaceTeamItem
encode_RaceTeamItem( #pk_RaceTeamItem{} = P ) ->
	Bin_listItemIDA = write_array(P#pk_RaceTeamItem.listItemIDA, fun(X) -> write_uint8( X ) end),
	Bin_listItemIDB = write_array(P#pk_RaceTeamItem.listItemIDB, fun(X) -> write_uint8( X ) end),
	[
		Bin_listItemIDA,
		Bin_listItemIDB	
].

%GENERATED from file:player.h => RaceTeamSort
encode_RaceTeamSort( #pk_RaceTeamSort{} = P ) ->
	Bin_laps = write_uint8( P#pk_RaceTeamSort.laps ),
	Bin_milestone = write_uint8( P#pk_RaceTeamSort.milestone ),
	Bin_time = write_uint64( P#pk_RaceTeamSort.time ),
	[
		Bin_laps,
		Bin_milestone,
		Bin_time	
].

%GENERATED from file:player.h => RechargeDoubleConf
encode_RechargeDoubleConf( #pk_RechargeDoubleConf{} = P ) ->
	Bin_id = write_uint32( P#pk_RechargeDoubleConf.id ),
	Bin_payMoney = write_float( P#pk_RechargeDoubleConf.payMoney ),
	[
		Bin_id,
		Bin_payMoney	
].

%GENERATED from file:player.h => RequestAutoDeal
encode_RequestAutoDeal( #pk_RequestAutoDeal{} = P ) ->
	Bin_isSuccess = write_bool( P#pk_RequestAutoDeal.isSuccess ),
	Bin_copyMapID = write_uint16( P#pk_RequestAutoDeal.copyMapID ),
	Bin_coinReward = write_array(P#pk_RequestAutoDeal.coinReward, fun(X) -> encode_CoinData( X ) end),
	Bin_expReward = write_uint64( P#pk_RequestAutoDeal.expReward ),
	Bin_dropItems = write_array(P#pk_RequestAutoDeal.dropItems, fun(X) -> encode_CopyMapDropItem( X ) end),
	[
		Bin_isSuccess,
		Bin_copyMapID,
		Bin_coinReward,
		Bin_expReward,
		Bin_dropItems	
].

%GENERATED from file:player.h => RewardUpdateResource
encode_RewardUpdateResource( #pk_RewardUpdateResource{} = P ) ->
	Bin_count = write_uint8( P#pk_RewardUpdateResource.count ),
	Bin_flag = write_bool( P#pk_RewardUpdateResource.flag ),
	Bin_rewardList = write_array(P#pk_RewardUpdateResource.rewardList, fun(X) -> encode_UpdateReward( X ) end),
	[
		Bin_count,
		Bin_flag,
		Bin_rewardList	
].

%GENERATED from file:player.h => RoleBaseInfo
encode_RoleBaseInfo( #pk_RoleBaseInfo{} = P ) ->
	Bin_code = write_uint64( P#pk_RoleBaseInfo.code ),
	Bin_roleID = write_uint64( P#pk_RoleBaseInfo.roleID ),
	Bin_name = write_string( P#pk_RoleBaseInfo.name ),
	Bin_servername = write_string( P#pk_RoleBaseInfo.servername ),
	Bin_myServerName = write_string( P#pk_RoleBaseInfo.myServerName ),
	Bin_isInCross = write_bool( P#pk_RoleBaseInfo.isInCross ),
	Bin_x = write_float( P#pk_RoleBaseInfo.x ),
	Bin_y = write_float( P#pk_RoleBaseInfo.y ),
	Bin_head = write_uint32( P#pk_RoleBaseInfo.head ),
	Bin_level = write_int16( P#pk_RoleBaseInfo.level ),
	Bin_camp = write_int8( P#pk_RoleBaseInfo.camp ),
	Bin_career = write_uint32( P#pk_RoleBaseInfo.career ),
	Bin_race = write_int8( P#pk_RoleBaseInfo.race ),
	Bin_sex = write_int8( P#pk_RoleBaseInfo.sex ),
	Bin_vip = write_int8( P#pk_RoleBaseInfo.vip ),
	Bin_hp_per = write_uint8( P#pk_RoleBaseInfo.hp_per ),
	Bin_exp = write_uint32( P#pk_RoleBaseInfo.exp ),
	Bin_maxExp = write_uint32( P#pk_RoleBaseInfo.maxExp ),
	Bin_cur_hp = write_uint32( P#pk_RoleBaseInfo.cur_hp ),
	Bin_max_hp = write_uint32( P#pk_RoleBaseInfo.max_hp ),
	Bin_mp = write_uint32( P#pk_RoleBaseInfo.mp ),
	Bin_mountID = write_uint16( P#pk_RoleBaseInfo.mountID ),
	Bin_otherCode = write_uint64( P#pk_RoleBaseInfo.otherCode ),
	Bin_pkMode = write_uint8( P#pk_RoleBaseInfo.pkMode ),
	Bin_maxCourage = write_uint16( P#pk_RoleBaseInfo.maxCourage ),
	Bin_moneys = write_array(P#pk_RoleBaseInfo.moneys, fun(X) -> encode_MoneyInit( X ) end),
	Bin_visible_equips = write_array(P#pk_RoleBaseInfo.visible_equips, fun(X) -> encode_visibleEquip( X ) end),
	Bin_refine_levels = write_array(P#pk_RoleBaseInfo.refine_levels, fun(X) -> encode_refineLevel( X ) end),
	[
		Bin_code,
		Bin_roleID,
		Bin_name,
		Bin_servername,
		Bin_myServerName,
		Bin_isInCross,
		Bin_x,
		Bin_y,
		Bin_head,
		Bin_level,
		Bin_camp,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_vip,
		Bin_hp_per,
		Bin_exp,
		Bin_maxExp,
		Bin_cur_hp,
		Bin_max_hp,
		Bin_mp,
		Bin_mountID,
		Bin_otherCode,
		Bin_pkMode,
		Bin_maxCourage,
		Bin_moneys,
		Bin_visible_equips,
		Bin_refine_levels	
].

%GENERATED from file:player.h => SevenDayAimUpdate
encode_SevenDayAimUpdate( #pk_SevenDayAimUpdate{} = P ) ->
	Bin_type = write_int32( P#pk_SevenDayAimUpdate.type ),
	Bin_args = write_array(P#pk_SevenDayAimUpdate.args, fun(X) -> write_int64( X ) end),
	[
		Bin_type,
		Bin_args	
].

%GENERATED from file:player.h => TaskUseItem
encode_TaskUseItem( #pk_TaskUseItem{} = P ) ->
	Bin_code = write_uint64( P#pk_TaskUseItem.code ),
	Bin_id = write_uint32( P#pk_TaskUseItem.id ),
	Bin_x = write_float( P#pk_TaskUseItem.x ),
	Bin_y = write_float( P#pk_TaskUseItem.y ),
	Bin_rotW = write_float( P#pk_TaskUseItem.rotW ),
	[
		Bin_code,
		Bin_id,
		Bin_x,
		Bin_y,
		Bin_rotW	
].

%GENERATED from file:player.h => UpdateReward
encode_UpdateReward( #pk_UpdateReward{} = P ) ->
	Bin_itemid = write_uint16( P#pk_UpdateReward.itemid ),
	Bin_number = write_uint16( P#pk_UpdateReward.number ),
	[
		Bin_itemid,
		Bin_number	
].

%GENERATED from file:player.h => UserPlayerData
encode_UserPlayerData( #pk_UserPlayerData{} = P ) ->
	Bin_roleID = write_uint64( P#pk_UserPlayerData.roleID ),
	Bin_name = write_string( P#pk_UserPlayerData.name ),
	Bin_level = write_int32( P#pk_UserPlayerData.level ),
	Bin_wingLevel = write_int32( P#pk_UserPlayerData.wingLevel ),
	Bin_camp = write_int8( P#pk_UserPlayerData.camp ),
	Bin_race = write_int8( P#pk_UserPlayerData.race ),
	Bin_career = write_uint32( P#pk_UserPlayerData.career ),
	Bin_sex = write_int8( P#pk_UserPlayerData.sex ),
	Bin_head = write_int32( P#pk_UserPlayerData.head ),
	Bin_mapID = write_uint16( P#pk_UserPlayerData.mapID ),
	Bin_oldMapID = write_uint16( P#pk_UserPlayerData.oldMapID ),
	Bin_canRename = write_bool( P#pk_UserPlayerData.canRename ),
	Bin_visible_equips = write_array(P#pk_UserPlayerData.visible_equips, fun(X) -> encode_visibleEquip( X ) end),
	Bin_fashionList = write_array(P#pk_UserPlayerData.fashionList, fun(X) -> write_uint16( X ) end),
	Bin_refine_levels = write_array(P#pk_UserPlayerData.refine_levels, fun(X) -> encode_refineLevel( X ) end),
	[
		Bin_roleID,
		Bin_name,
		Bin_level,
		Bin_wingLevel,
		Bin_camp,
		Bin_race,
		Bin_career,
		Bin_sex,
		Bin_head,
		Bin_mapID,
		Bin_oldMapID,
		Bin_canRename,
		Bin_visible_equips,
		Bin_fashionList,
		Bin_refine_levels	
].

%GENERATED from file:player.h => lotteryForToweItem
encode_lotteryForToweItem( #pk_lotteryForToweItem{} = P ) ->
	Bin_pool_id = write_uint32( P#pk_lotteryForToweItem.pool_id ),
	Bin_cfg_id = write_uint32( P#pk_lotteryForToweItem.cfg_id ),
	Bin_itemID = write_uint32( P#pk_lotteryForToweItem.itemID ),
	Bin_itemNumber = write_uint32( P#pk_lotteryForToweItem.itemNumber ),
	Bin_isBind = write_uint32( P#pk_lotteryForToweItem.isBind ),
	Bin_isWin = write_int16( P#pk_lotteryForToweItem.isWin ),
	[
		Bin_pool_id,
		Bin_cfg_id,
		Bin_itemID,
		Bin_itemNumber,
		Bin_isBind,
		Bin_isWin	
].

%GENERATED from file:player.h => lotteryForTowerNotice
encode_lotteryForTowerNotice( #pk_lotteryForTowerNotice{} = P ) ->
	Bin_roleName = write_string( P#pk_lotteryForTowerNotice.roleName ),
	Bin_itemID = write_uint32( P#pk_lotteryForTowerNotice.itemID ),
	Bin_itemNumber = write_uint32( P#pk_lotteryForTowerNotice.itemNumber ),
	[
		Bin_roleName,
		Bin_itemID,
		Bin_itemNumber	
].

%GENERATED from file:player.h => lottery_award_item_info
encode_lottery_award_item_info( #pk_lottery_award_item_info{} = P ) ->
	Bin_itemID = write_uint32( P#pk_lottery_award_item_info.itemID ),
	Bin_itemNumber = write_uint32( P#pk_lottery_award_item_info.itemNumber ),
	[
		Bin_itemID,
		Bin_itemNumber	
].

%GENERATED from file:player.h => lsbattlefield_award
encode_lsbattlefield_award( #pk_lsbattlefield_award{} = P ) ->
	Bin_itemid = write_uint16( P#pk_lsbattlefield_award.itemid ),
	Bin_number = write_uint16( P#pk_lsbattlefield_award.number ),
	Bin_isBind = write_uint32( P#pk_lsbattlefield_award.isBind ),
	[
		Bin_itemid,
		Bin_number,
		Bin_isBind	
].

%GENERATED from file:player.h => lsbattlefield_rank
encode_lsbattlefield_rank( #pk_lsbattlefield_rank{} = P ) ->
	Bin_index = write_uint16( P#pk_lsbattlefield_rank.index ),
	Bin_score = write_uint16( P#pk_lsbattlefield_rank.score ),
	Bin_roleName = write_string( P#pk_lsbattlefield_rank.roleName ),
	[
		Bin_index,
		Bin_score,
		Bin_roleName	
].

%GENERATED from file:player.h => pushItem
encode_pushItem( #pk_pushItem{} = P ) ->
	Bin_sku = write_uint32( P#pk_pushItem.sku ),
	Bin_itemID = write_uint32( P#pk_pushItem.itemID ),
	Bin_num = write_uint16( P#pk_pushItem.num ),
	Bin_isBinded = write_uint8( P#pk_pushItem.isBinded ),
	Bin_price = write_uint32( P#pk_pushItem.price ),
	Bin_rebate = write_uint8( P#pk_pushItem.rebate ),
	Bin_coinType = write_uint8( P#pk_pushItem.coinType ),
	Bin_limited = write_uint8( P#pk_pushItem.limited ),
	[
		Bin_sku,
		Bin_itemID,
		Bin_num,
		Bin_isBinded,
		Bin_price,
		Bin_rebate,
		Bin_coinType,
		Bin_limited	
].

%GENERATED from file:player.h => refineLevel
encode_refineLevel( #pk_refineLevel{} = P ) ->
	Bin_type = write_uint8( P#pk_refineLevel.type ),
	Bin_level = write_uint8( P#pk_refineLevel.level ),
	[
		Bin_type,
		Bin_level	
].

%GENERATED from file:player.h => visibleEquip
encode_visibleEquip( #pk_visibleEquip{} = P ) ->
	Bin_equipID = write_uint32( P#pk_visibleEquip.equipID ),
	Bin_quality = write_uint8( P#pk_visibleEquip.quality ),
	[
		Bin_equipID,
		Bin_quality	
].

%GENERATED from file:rank.h => ActivityMapRankData
encode_ActivityMapRankData( #pk_ActivityMapRankData{} = P ) ->
	Bin_name = write_string( P#pk_ActivityMapRankData.name ),
	Bin_value = write_uint64( P#pk_ActivityMapRankData.value ),
	[
		Bin_name,
		Bin_value	
].

%GENERATED from file:rank.h => PlayerEquip
encode_PlayerEquip( #pk_PlayerEquip{} = P ) ->
	Bin_equipID = write_uint32( P#pk_PlayerEquip.equipID ),
	Bin_quality = write_uint8( P#pk_PlayerEquip.quality ),
	[
		Bin_equipID,
		Bin_quality	
].

%GENERATED from file:rank.h => PlayerEquipLevel
encode_PlayerEquipLevel( #pk_PlayerEquipLevel{} = P ) ->
	Bin_type = write_uint8( P#pk_PlayerEquipLevel.type ),
	Bin_level = write_uint8( P#pk_PlayerEquipLevel.level ),
	[
		Bin_type,
		Bin_level	
].

%GENERATED from file:rank.h => RankInfo
encode_RankInfo( #pk_RankInfo{} = P ) ->
	Bin_rankSort = write_uint8( P#pk_RankInfo.rankSort ),
	Bin_rankSortC = write_int8( P#pk_RankInfo.rankSortC ),
	Bin_roleID = write_uint64( P#pk_RankInfo.roleID ),
	Bin_name = write_string( P#pk_RankInfo.name ),
	Bin_wingLevel = write_int32( P#pk_RankInfo.wingLevel ),
	Bin_rankValue1 = write_int64( P#pk_RankInfo.rankValue1 ),
	Bin_rankValue2 = write_int64( P#pk_RankInfo.rankValue2 ),
	Bin_rankValue3 = write_int64( P#pk_RankInfo.rankValue3 ),
	Bin_title = encode_TitleData( P#pk_RankInfo.title ),
	Bin_frameID = write_uint16( P#pk_RankInfo.frameID ),
	Bin_career = write_uint32( P#pk_RankInfo.career ),
	Bin_race = write_int8( P#pk_RankInfo.race ),
	Bin_sex = write_int8( P#pk_RankInfo.sex ),
	Bin_head = write_int32( P#pk_RankInfo.head ),
	Bin_level = write_int32( P#pk_RankInfo.level ),
	[
		Bin_rankSort,
		Bin_rankSortC,
		Bin_roleID,
		Bin_name,
		Bin_wingLevel,
		Bin_rankValue1,
		Bin_rankValue2,
		Bin_rankValue3,
		Bin_title,
		Bin_frameID,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_level	
].

%GENERATED from file:rank.h => RankModelData
encode_RankModelData( #pk_RankModelData{} = P ) ->
	Bin_roleID = write_uint64( P#pk_RankModelData.roleID ),
	Bin_sb_type = write_int8( P#pk_RankModelData.sb_type ),
	Bin_name = write_string( P#pk_RankModelData.name ),
	Bin_career = write_uint32( P#pk_RankModelData.career ),
	Bin_race = write_int8( P#pk_RankModelData.race ),
	Bin_sex = write_int8( P#pk_RankModelData.sex ),
	Bin_head = write_int32( P#pk_RankModelData.head ),
	Bin_wingLevel = write_int32( P#pk_RankModelData.wingLevel ),
	Bin_fashionIDs = write_array(P#pk_RankModelData.fashionIDs, fun(X) -> write_int32( X ) end),
	Bin_equipIDList = write_array(P#pk_RankModelData.equipIDList, fun(X) -> encode_PlayerEquip( X ) end),
	[
		Bin_roleID,
		Bin_sb_type,
		Bin_name,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_wingLevel,
		Bin_fashionIDs,
		Bin_equipIDList	
].

%GENERATED from file:rank.h => TitleData
encode_TitleData( #pk_TitleData{} = P ) ->
	Bin_title1 = write_uint32( P#pk_TitleData.title1 ),
	Bin_title2 = write_uint32( P#pk_TitleData.title2 ),
	Bin_title3 = write_uint32( P#pk_TitleData.title3 ),
	Bin_color = write_uint32( P#pk_TitleData.color ),
	Bin_background = write_uint32( P#pk_TitleData.background ),
	Bin_customTitle = write_string( P#pk_TitleData.customTitle ),
	[
		Bin_title1,
		Bin_title2,
		Bin_title3,
		Bin_color,
		Bin_background,
		Bin_customTitle	
].

%GENERATED from file:redenvelope.h => redEnvelopeBaseInfo
encode_redEnvelopeBaseInfo( #pk_redEnvelopeBaseInfo{} = P ) ->
	Bin_redUID = write_uint64( P#pk_redEnvelopeBaseInfo.redUID ),
	Bin_creatorRoleID = write_uint64( P#pk_redEnvelopeBaseInfo.creatorRoleID ),
	Bin_targetUID = write_uint64( P#pk_redEnvelopeBaseInfo.targetUID ),
	Bin_luckContent = write_string( P#pk_redEnvelopeBaseInfo.luckContent ),
	Bin_creatorName = write_string( P#pk_redEnvelopeBaseInfo.creatorName ),
	Bin_creatorLevel = write_uint32( P#pk_redEnvelopeBaseInfo.creatorLevel ),
	Bin_type = write_uint8( P#pk_redEnvelopeBaseInfo.type ),
	Bin_targetType = write_uint8( P#pk_redEnvelopeBaseInfo.targetType ),
	Bin_creatorCareer = write_uint32( P#pk_redEnvelopeBaseInfo.creatorCareer ),
	Bin_creatorRace = write_uint8( P#pk_redEnvelopeBaseInfo.creatorRace ),
	Bin_creatorSex = write_uint8( P#pk_redEnvelopeBaseInfo.creatorSex ),
	Bin_creatorHead = write_int32( P#pk_redEnvelopeBaseInfo.creatorHead ),
	Bin_allMoney = write_uint32( P#pk_redEnvelopeBaseInfo.allMoney ),
	Bin_allNumber = write_uint32( P#pk_redEnvelopeBaseInfo.allNumber ),
	Bin_takenMoney = write_uint32( P#pk_redEnvelopeBaseInfo.takenMoney ),
	Bin_takenNumber = write_uint32( P#pk_redEnvelopeBaseInfo.takenNumber ),
	[
		Bin_redUID,
		Bin_creatorRoleID,
		Bin_targetUID,
		Bin_luckContent,
		Bin_creatorName,
		Bin_creatorLevel,
		Bin_type,
		Bin_targetType,
		Bin_creatorCareer,
		Bin_creatorRace,
		Bin_creatorSex,
		Bin_creatorHead,
		Bin_allMoney,
		Bin_allNumber,
		Bin_takenMoney,
		Bin_takenNumber	
].

%GENERATED from file:redenvelope.h => redEnvelopeHistory
encode_redEnvelopeHistory( #pk_redEnvelopeHistory{} = P ) ->
	Bin_redUID = write_uint64( P#pk_redEnvelopeHistory.redUID ),
	Bin_creatorRoleID = write_uint64( P#pk_redEnvelopeHistory.creatorRoleID ),
	Bin_creatorName = write_string( P#pk_redEnvelopeHistory.creatorName ),
	Bin_createTime = write_uint32( P#pk_redEnvelopeHistory.createTime ),
	Bin_targetType = write_uint8( P#pk_redEnvelopeHistory.targetType ),
	Bin_moneyNumber = write_int32( P#pk_redEnvelopeHistory.moneyNumber ),
	[
		Bin_redUID,
		Bin_creatorRoleID,
		Bin_creatorName,
		Bin_createTime,
		Bin_targetType,
		Bin_moneyNumber	
].

%GENERATED from file:redenvelope.h => redEnvelopeInfo
encode_redEnvelopeInfo( #pk_redEnvelopeInfo{} = P ) ->
	Bin_baseInfo = encode_redEnvelopeBaseInfo( P#pk_redEnvelopeInfo.baseInfo ),
	Bin_takenList = write_array(P#pk_redEnvelopeInfo.takenList, fun(X) -> encode_takeHistory( X ) end),
	[
		Bin_baseInfo,
		Bin_takenList	
].

%GENERATED from file:redenvelope.h => takeHistory
encode_takeHistory( #pk_takeHistory{} = P ) ->
	Bin_takeRoleID = write_uint64( P#pk_takeHistory.takeRoleID ),
	Bin_takeName = write_string( P#pk_takeHistory.takeName ),
	Bin_takeTime = write_uint32( P#pk_takeHistory.takeTime ),
	Bin_takeMoney = write_uint32( P#pk_takeHistory.takeMoney ),
	[
		Bin_takeRoleID,
		Bin_takeName,
		Bin_takeTime,
		Bin_takeMoney	
].

%GENERATED from file:ride.h => RideInfo
encode_RideInfo( #pk_RideInfo{} = P ) ->
	Bin_npcCode = write_uint64( P#pk_RideInfo.npcCode ),
	Bin_itemID = write_uint32( P#pk_RideInfo.itemID ),
	Bin_ownerID = write_uint64( P#pk_RideInfo.ownerID ),
	Bin_ownerName = write_string( P#pk_RideInfo.ownerName ),
	Bin_players = write_array(P#pk_RideInfo.players, fun(X) -> encode_RidePlayerInfo( X ) end),
	Bin_number = write_uint32( P#pk_RideInfo.number ),
	[
		Bin_npcCode,
		Bin_itemID,
		Bin_ownerID,
		Bin_ownerName,
		Bin_players,
		Bin_number	
].

%GENERATED from file:ride.h => RideItem
encode_RideItem( #pk_RideItem{} = P ) ->
	Bin_itemUID = write_uint64( P#pk_RideItem.itemUID ),
	Bin_number = write_uint32( P#pk_RideItem.number ),
	Bin_state = write_uint8( P#pk_RideItem.state ),
	[
		Bin_itemUID,
		Bin_number,
		Bin_state	
].

%GENERATED from file:ride.h => RidePlayerInfo
encode_RidePlayerInfo( #pk_RidePlayerInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_RidePlayerInfo.roleID ),
	Bin_seatID = write_uint32( P#pk_RidePlayerInfo.seatID ),
	[
		Bin_roleID,
		Bin_seatID	
].

%GENERATED from file:rune.h => RuneBaseProp
encode_RuneBaseProp( #pk_RuneBaseProp{} = P ) ->
	Bin_prop = write_int32( P#pk_RuneBaseProp.prop ),
	Bin_calcType = write_uint8( P#pk_RuneBaseProp.calcType ),
	Bin_value = write_float( P#pk_RuneBaseProp.value ),
	[
		Bin_prop,
		Bin_calcType,
		Bin_value	
].

%GENERATED from file:rune.h => RuneInfo
encode_RuneInfo( #pk_RuneInfo{} = P ) ->
	Bin_runeUID = write_uint64( P#pk_RuneInfo.runeUID ),
	Bin_pos = write_uint32( P#pk_RuneInfo.pos ),
	Bin_runeID = write_uint32( P#pk_RuneInfo.runeID ),
	Bin_level = write_uint8( P#pk_RuneInfo.level ),
	Bin_exp = write_uint32( P#pk_RuneInfo.exp ),
	Bin_isBind = write_bool( P#pk_RuneInfo.isBind ),
	Bin_validSecond = write_uint32( P#pk_RuneInfo.validSecond ),
	Bin_subType = write_uint8( P#pk_RuneInfo.subType ),
	Bin_turnPosNum = write_uint8( P#pk_RuneInfo.turnPosNum ),
	Bin_baseProps = write_array(P#pk_RuneInfo.baseProps, fun(X) -> encode_RuneBaseProp( X ) end),
	Bin_randProps = write_array(P#pk_RuneInfo.randProps, fun(X) -> encode_RuneRandProp( X ) end),
	Bin_skillProps = write_array(P#pk_RuneInfo.skillProps, fun(X) -> encode_RuneRandProp( X ) end),
	[
		Bin_runeUID,
		Bin_pos,
		Bin_runeID,
		Bin_level,
		Bin_exp,
		Bin_isBind,
		Bin_validSecond,
		Bin_subType,
		Bin_turnPosNum,
		Bin_baseProps,
		Bin_randProps,
		Bin_skillProps	
].

%GENERATED from file:rune.h => RuneRandProp
encode_RuneRandProp( #pk_RuneRandProp{} = P ) ->
	Bin_prop = encode_RuneBaseProp( P#pk_RuneRandProp.prop ),
	Bin_indexNumber = write_uint32( P#pk_RuneRandProp.indexNumber ),
	[
		Bin_prop,
		Bin_indexNumber	
].

%GENERATED from file:rune.h => RuneSuitProp
encode_RuneSuitProp( #pk_RuneSuitProp{} = P ) ->
	Bin_props = write_array(P#pk_RuneSuitProp.props, fun(X) -> encode_RuneBaseProp( X ) end),
	Bin_suitID = write_uint32( P#pk_RuneSuitProp.suitID ),
	Bin_suitNum = write_uint8( P#pk_RuneSuitProp.suitNum ),
	Bin_ownerID = write_uint32( P#pk_RuneSuitProp.ownerID ),
	[
		Bin_props,
		Bin_suitID,
		Bin_suitNum,
		Bin_ownerID	
].

%GENERATED from file:setting.h => SwitchVariantInfo
encode_SwitchVariantInfo( #pk_SwitchVariantInfo{} = P ) ->
	Bin_bitIndex = write_uint32( P#pk_SwitchVariantInfo.bitIndex ),
	Bin_bitValue = write_bool( P#pk_SwitchVariantInfo.bitValue ),
	[
		Bin_bitIndex,
		Bin_bitValue	
].

%GENERATED from file:setting.h => VariantInfo
encode_VariantInfo( #pk_VariantInfo{} = P ) ->
	Bin_index = write_uint16( P#pk_VariantInfo.index ),
	Bin_value = write_uint32( P#pk_VariantInfo.value ),
	[
		Bin_index,
		Bin_value	
].

%GENERATED from file:signin.h => SignInInfo
encode_SignInInfo( #pk_SignInInfo{} = P ) ->
	Bin_signType = write_uint8( P#pk_SignInInfo.signType ),
	Bin_itemList = write_array(P#pk_SignInInfo.itemList, fun(X) -> encode_SignItem( X ) end),
	Bin_signState = write_uint8( P#pk_SignInInfo.signState ),
	[
		Bin_signType,
		Bin_itemList,
		Bin_signState	
].

%GENERATED from file:signin.h => SignItem
encode_SignItem( #pk_SignItem{} = P ) ->
	Bin_itemID = write_uint16( P#pk_SignItem.itemID ),
	Bin_itemNumber = write_uint16( P#pk_SignItem.itemNumber ),
	[
		Bin_itemID,
		Bin_itemNumber	
].

%GENERATED from file:skill.h => LifeSkillInfo
encode_LifeSkillInfo( #pk_LifeSkillInfo{} = P ) ->
	Bin_type = write_int16( P#pk_LifeSkillInfo.type ),
	Bin_level = write_int16( P#pk_LifeSkillInfo.level ),
	Bin_exp = write_int32( P#pk_LifeSkillInfo.exp ),
	[
		Bin_type,
		Bin_level,
		Bin_exp	
].

%GENERATED from file:skill.h => OpenSlot
encode_OpenSlot( #pk_OpenSlot{} = P ) ->
	Bin_slot = write_uint8( P#pk_OpenSlot.slot ),
	Bin_type = write_uint8( P#pk_OpenSlot.type ),
	[
		Bin_slot,
		Bin_type	
].

%GENERATED from file:skill.h => PassiveSkillInfo
encode_PassiveSkillInfo( #pk_PassiveSkillInfo{} = P ) ->
	Bin_id = write_uint32( P#pk_PassiveSkillInfo.id ),
	Bin_level = write_uint32( P#pk_PassiveSkillInfo.level ),
	[
		Bin_id,
		Bin_level	
].

%GENERATED from file:skill.h => SkillInfo
encode_SkillInfo( #pk_SkillInfo{} = P ) ->
	Bin_id = write_uint32( P#pk_SkillInfo.id ),
	Bin_level = write_uint32( P#pk_SkillInfo.level ),
	Bin_remainCD = write_uint32( P#pk_SkillInfo.remainCD ),
	[
		Bin_id,
		Bin_level,
		Bin_remainCD	
].

%GENERATED from file:skill.h => SkillSlotInfo
encode_SkillSlotInfo( #pk_SkillSlotInfo{} = P ) ->
	Bin_index = write_uint32( P#pk_SkillSlotInfo.index ),
	Bin_skillID = write_uint32( P#pk_SkillSlotInfo.skillID ),
	[
		Bin_index,
		Bin_skillID	
].

%GENERATED from file:skill.h => itemInfo
encode_itemInfo( #pk_itemInfo{} = P ) ->
	Bin_itemID = write_uint16( P#pk_itemInfo.itemID ),
	Bin_itemNum = write_uint16( P#pk_itemInfo.itemNum ),
	[
		Bin_itemID,
		Bin_itemNum	
].

%GENERATED from file:skill.h => lifeSkillCanUseCount
encode_lifeSkillCanUseCount( #pk_lifeSkillCanUseCount{} = P ) ->
	Bin_type = write_int16( P#pk_lifeSkillCanUseCount.type ),
	Bin_count = write_uint32( P#pk_lifeSkillCanUseCount.count ),
	[
		Bin_type,
		Bin_count	
].

%GENERATED from file:talent.h => TalentInfo
encode_TalentInfo( #pk_TalentInfo{} = P ) ->
	Bin_id = write_uint8( P#pk_TalentInfo.id ),
	Bin_level = write_uint8( P#pk_TalentInfo.level ),
	Bin_nextlevelexp = write_uint64( P#pk_TalentInfo.nextlevelexp ),
	[
		Bin_id,
		Bin_level,
		Bin_nextlevelexp	
].

%GENERATED from file:task.h => LoopTaskState
encode_LoopTaskState( #pk_LoopTaskState{} = P ) ->
	Bin_taskID = write_uint16( P#pk_LoopTaskState.taskID ),
	Bin_state = write_uint8( P#pk_LoopTaskState.state ),
	Bin_task = encode_taskInfo( P#pk_LoopTaskState.task ),
	[
		Bin_taskID,
		Bin_state,
		Bin_task	
].

%GENERATED from file:task.h => SubmittedTaskInfo
encode_SubmittedTaskInfo( #pk_SubmittedTaskInfo{} = P ) ->
	Bin_slot = write_uint16( P#pk_SubmittedTaskInfo.slot ),
	Bin_value = write_uint64( P#pk_SubmittedTaskInfo.value ),
	[
		Bin_slot,
		Bin_value	
].

%GENERATED from file:task.h => acceptedAimTask
encode_acceptedAimTask( #pk_acceptedAimTask{} = P ) ->
	Bin_aimType = write_int32( P#pk_acceptedAimTask.aimType ),
	Bin_aimIndex = write_int32( P#pk_acceptedAimTask.aimIndex ),
	Bin_aimCurCount = write_int32( P#pk_acceptedAimTask.aimCurCount ),
	[
		Bin_aimType,
		Bin_aimIndex,
		Bin_aimCurCount	
].

%GENERATED from file:task.h => acceptedBaseTask
encode_acceptedBaseTask( #pk_acceptedBaseTask{} = P ) ->
	Bin_taskID = write_int32( P#pk_acceptedBaseTask.taskID ),
	Bin_taskProcess = write_array(P#pk_acceptedBaseTask.taskProcess, fun(X) -> encode_acceptedAimTask( X ) end),
	[
		Bin_taskID,
		Bin_taskProcess	
].

%GENERATED from file:task.h => taskInfo
encode_taskInfo( #pk_taskInfo{} = P ) ->
	Bin_taskID = write_int32( P#pk_taskInfo.taskID ),
	Bin_target = write_int32( P#pk_taskInfo.target ),
	Bin_curNumber = write_int32( P#pk_taskInfo.curNumber ),
	Bin_maxNumber = write_int32( P#pk_taskInfo.maxNumber ),
	[
		Bin_taskID,
		Bin_target,
		Bin_curNumber,
		Bin_maxNumber	
].

%GENERATED from file:team.h => FightingCapacityInfo
encode_FightingCapacityInfo( #pk_FightingCapacityInfo{} = P ) ->
	Bin_roleID = write_uint64( P#pk_FightingCapacityInfo.roleID ),
	Bin_fightingCapacity = write_uint64( P#pk_FightingCapacityInfo.fightingCapacity ),
	[
		Bin_roleID,
		Bin_fightingCapacity	
].

%GENERATED from file:team.h => NearTeamInfo
encode_NearTeamInfo( #pk_NearTeamInfo{} = P ) ->
	Bin_teamID = write_int64( P#pk_NearTeamInfo.teamID ),
	Bin_leaderID = write_uint64( P#pk_NearTeamInfo.leaderID ),
	Bin_leaderName = write_string( P#pk_NearTeamInfo.leaderName ),
	Bin_leaderLevel = write_int16( P#pk_NearTeamInfo.leaderLevel ),
	Bin_numberOfTeam = write_uint8( P#pk_NearTeamInfo.numberOfTeam ),
	Bin_career = write_uint32( P#pk_NearTeamInfo.career ),
	Bin_race = write_uint8( P#pk_NearTeamInfo.race ),
	Bin_sex = write_uint8( P#pk_NearTeamInfo.sex ),
	Bin_head = write_int32( P#pk_NearTeamInfo.head ),
	[
		Bin_teamID,
		Bin_leaderID,
		Bin_leaderName,
		Bin_leaderLevel,
		Bin_numberOfTeam,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head	
].

%GENERATED from file:team.h => NotTeamMemberInfo
encode_NotTeamMemberInfo( #pk_NotTeamMemberInfo{} = P ) ->
	Bin_id = write_uint64( P#pk_NotTeamMemberInfo.id ),
	Bin_name = write_string( P#pk_NotTeamMemberInfo.name ),
	Bin_level = write_uint16( P#pk_NotTeamMemberInfo.level ),
	Bin_career = write_uint32( P#pk_NotTeamMemberInfo.career ),
	Bin_race = write_uint8( P#pk_NotTeamMemberInfo.race ),
	Bin_sex = write_uint8( P#pk_NotTeamMemberInfo.sex ),
	Bin_head = write_int32( P#pk_NotTeamMemberInfo.head ),
	Bin_serverID = write_uint32( P#pk_NotTeamMemberInfo.serverID ),
	[
		Bin_id,
		Bin_name,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_serverID	
].

%GENERATED from file:team.h => OnlineMemberSnapshot
encode_OnlineMemberSnapshot( #pk_OnlineMemberSnapshot{} = P ) ->
	Bin_playerID = write_uint64( P#pk_OnlineMemberSnapshot.playerID ),
	Bin_code = write_uint64( P#pk_OnlineMemberSnapshot.code ),
	Bin_guildID = write_uint64( P#pk_OnlineMemberSnapshot.guildID ),
	Bin_playerName = write_string( P#pk_OnlineMemberSnapshot.playerName ),
	Bin_guildName = write_string( P#pk_OnlineMemberSnapshot.guildName ),
	Bin_career = write_uint32( P#pk_OnlineMemberSnapshot.career ),
	Bin_level = write_uint16( P#pk_OnlineMemberSnapshot.level ),
	Bin_friendState = write_uint8( P#pk_OnlineMemberSnapshot.friendState ),
	Bin_race = write_uint8( P#pk_OnlineMemberSnapshot.race ),
	Bin_sex = write_uint8( P#pk_OnlineMemberSnapshot.sex ),
	Bin_head = write_int32( P#pk_OnlineMemberSnapshot.head ),
	Bin_frameID = write_uint16( P#pk_OnlineMemberSnapshot.frameID ),
	Bin_force = write_uint32( P#pk_OnlineMemberSnapshot.force ),
	[
		Bin_playerID,
		Bin_code,
		Bin_guildID,
		Bin_playerName,
		Bin_guildName,
		Bin_career,
		Bin_level,
		Bin_friendState,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_force	
].

%GENERATED from file:team.h => TeamBaseInfo
encode_TeamBaseInfo( #pk_TeamBaseInfo{} = P ) ->
	Bin_teamID = write_uint64( P#pk_TeamBaseInfo.teamID ),
	Bin_leaderID = write_uint64( P#pk_TeamBaseInfo.leaderID ),
	Bin_copyMapID = write_int32( P#pk_TeamBaseInfo.copyMapID ),
	Bin_canBeSearched = write_int32( P#pk_TeamBaseInfo.canBeSearched ),
	Bin_searchStartTime = write_uint64( P#pk_TeamBaseInfo.searchStartTime ),
	[
		Bin_teamID,
		Bin_leaderID,
		Bin_copyMapID,
		Bin_canBeSearched,
		Bin_searchStartTime	
].

%GENERATED from file:team.h => TeamMemberInfo
encode_TeamMemberInfo( #pk_TeamMemberInfo{} = P ) ->
	Bin_playerID = write_uint64( P#pk_TeamMemberInfo.playerID ),
	Bin_code = write_uint64( P#pk_TeamMemberInfo.code ),
	Bin_playerName = write_string( P#pk_TeamMemberInfo.playerName ),
	Bin_guildID = write_uint64( P#pk_TeamMemberInfo.guildID ),
	Bin_guildName = write_string( P#pk_TeamMemberInfo.guildName ),
	Bin_force = write_uint64( P#pk_TeamMemberInfo.force ),
	Bin_level = write_uint16( P#pk_TeamMemberInfo.level ),
	Bin_career = write_uint32( P#pk_TeamMemberInfo.career ),
	Bin_race = write_uint8( P#pk_TeamMemberInfo.race ),
	Bin_sex = write_uint8( P#pk_TeamMemberInfo.sex ),
	Bin_head = write_int32( P#pk_TeamMemberInfo.head ),
	Bin_frameID = write_uint16( P#pk_TeamMemberInfo.frameID ),
	Bin_hpPercent = write_uint8( P#pk_TeamMemberInfo.hpPercent ),
	Bin_mapID = write_uint16( P#pk_TeamMemberInfo.mapID ),
	Bin_groupID = write_uint32( P#pk_TeamMemberInfo.groupID ),
	Bin_mapInstanceID = write_uint64( P#pk_TeamMemberInfo.mapInstanceID ),
	Bin_assistMapID = write_uint16( P#pk_TeamMemberInfo.assistMapID ),
	Bin_x = write_float( P#pk_TeamMemberInfo.x ),
	Bin_y = write_float( P#pk_TeamMemberInfo.y ),
	Bin_customInfo = write_string( P#pk_TeamMemberInfo.customInfo ),
	Bin_copyMapLeftCount = write_uint16( P#pk_TeamMemberInfo.copyMapLeftCount ),
	Bin_actionPoint = write_uint32( P#pk_TeamMemberInfo.actionPoint ),
	Bin_serverID = write_uint32( P#pk_TeamMemberInfo.serverID ),
	Bin_copyMapStar = write_uint16( P#pk_TeamMemberInfo.copyMapStar ),
	[
		Bin_playerID,
		Bin_code,
		Bin_playerName,
		Bin_guildID,
		Bin_guildName,
		Bin_force,
		Bin_level,
		Bin_career,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_hpPercent,
		Bin_mapID,
		Bin_groupID,
		Bin_mapInstanceID,
		Bin_assistMapID,
		Bin_x,
		Bin_y,
		Bin_customInfo,
		Bin_copyMapLeftCount,
		Bin_actionPoint,
		Bin_serverID,
		Bin_copyMapStar	
].

%GENERATED from file:team.h => TeamMemberInfoEx
encode_TeamMemberInfoEx( #pk_TeamMemberInfoEx{} = P ) ->
	Bin_playerID = write_uint64( P#pk_TeamMemberInfoEx.playerID ),
	Bin_code = write_uint64( P#pk_TeamMemberInfoEx.code ),
	Bin_level = write_uint16( P#pk_TeamMemberInfoEx.level ),
	Bin_hpPercent = write_uint16( P#pk_TeamMemberInfoEx.hpPercent ),
	Bin_mapID = write_uint16( P#pk_TeamMemberInfoEx.mapID ),
	Bin_groupID = write_uint32( P#pk_TeamMemberInfoEx.groupID ),
	Bin_mapInstanceID = write_uint64( P#pk_TeamMemberInfoEx.mapInstanceID ),
	Bin_copyMapLeftCount = write_uint16( P#pk_TeamMemberInfoEx.copyMapLeftCount ),
	Bin_actionPoint = write_uint32( P#pk_TeamMemberInfoEx.actionPoint ),
	Bin_force = write_uint64( P#pk_TeamMemberInfoEx.force ),
	Bin_assistMapID = write_uint16( P#pk_TeamMemberInfoEx.assistMapID ),
	Bin_x = write_float( P#pk_TeamMemberInfoEx.x ),
	Bin_y = write_float( P#pk_TeamMemberInfoEx.y ),
	Bin_serverID = write_uint32( P#pk_TeamMemberInfoEx.serverID ),
	Bin_copyMapStar = write_uint16( P#pk_TeamMemberInfoEx.copyMapStar ),
	[
		Bin_playerID,
		Bin_code,
		Bin_level,
		Bin_hpPercent,
		Bin_mapID,
		Bin_groupID,
		Bin_mapInstanceID,
		Bin_copyMapLeftCount,
		Bin_actionPoint,
		Bin_force,
		Bin_assistMapID,
		Bin_x,
		Bin_y,
		Bin_serverID,
		Bin_copyMapStar	
].

%GENERATED from file:team.h => TeamMemberLocation
encode_TeamMemberLocation( #pk_TeamMemberLocation{} = P ) ->
	Bin_playerID = write_uint64( P#pk_TeamMemberLocation.playerID ),
	Bin_x = write_float( P#pk_TeamMemberLocation.x ),
	Bin_y = write_float( P#pk_TeamMemberLocation.y ),
	[
		Bin_playerID,
		Bin_x,
		Bin_y	
].

%GENERATED from file:team.h => TeamMemberSnapshot
encode_TeamMemberSnapshot( #pk_TeamMemberSnapshot{} = P ) ->
	Bin_playerID = write_uint64( P#pk_TeamMemberSnapshot.playerID ),
	Bin_code = write_uint64( P#pk_TeamMemberSnapshot.code ),
	Bin_playerName = write_string( P#pk_TeamMemberSnapshot.playerName ),
	Bin_career = write_uint32( P#pk_TeamMemberSnapshot.career ),
	Bin_level = write_uint16( P#pk_TeamMemberSnapshot.level ),
	Bin_race = write_uint8( P#pk_TeamMemberSnapshot.race ),
	Bin_sex = write_uint8( P#pk_TeamMemberSnapshot.sex ),
	Bin_head = write_int32( P#pk_TeamMemberSnapshot.head ),
	Bin_frameID = write_uint16( P#pk_TeamMemberSnapshot.frameID ),
	Bin_force = write_uint64( P#pk_TeamMemberSnapshot.force ),
	Bin_guildID = write_uint64( P#pk_TeamMemberSnapshot.guildID ),
	[
		Bin_playerID,
		Bin_code,
		Bin_playerName,
		Bin_career,
		Bin_level,
		Bin_race,
		Bin_sex,
		Bin_head,
		Bin_frameID,
		Bin_force,
		Bin_guildID	
].

%GENERATED from file:team.h => TeamSnapshot
encode_TeamSnapshot( #pk_TeamSnapshot{} = P ) ->
	Bin_base = encode_TeamBaseInfo( P#pk_TeamSnapshot.base ),
	Bin_members = write_array(P#pk_TeamSnapshot.members, fun(X) -> encode_TeamMemberSnapshot( X ) end),
	[
		Bin_base,
		Bin_members	
].

%GENERATED from file:trade.h => DealRecord
encode_DealRecord( #pk_DealRecord{} = P ) ->
	Bin_itemUID = write_uint64( P#pk_DealRecord.itemUID ),
	Bin_itemID = write_uint32( P#pk_DealRecord.itemID ),
	Bin_sellType = write_uint8( P#pk_DealRecord.sellType ),
	Bin_buyorsell = write_uint8( P#pk_DealRecord.buyorsell ),
	Bin_dealTime = write_uint64( P#pk_DealRecord.dealTime ),
	Bin_gold = write_uint32( P#pk_DealRecord.gold ),
	Bin_diamond = write_uint32( P#pk_DealRecord.diamond ),
	Bin_tax = write_uint32( P#pk_DealRecord.tax ),
	Bin_equipProps = write_array(P#pk_DealRecord.equipProps, fun(X) -> encode_QueryEquipPropInfo( X ) end),
	[
		Bin_itemUID,
		Bin_itemID,
		Bin_sellType,
		Bin_buyorsell,
		Bin_dealTime,
		Bin_gold,
		Bin_diamond,
		Bin_tax,
		Bin_equipProps	
].

%GENERATED from file:trade.h => QueryEquipPropInfo
encode_QueryEquipPropInfo( #pk_QueryEquipPropInfo{} = P ) ->
	Bin_propType = write_uint8( P#pk_QueryEquipPropInfo.propType ),
	Bin_propKey = write_uint8( P#pk_QueryEquipPropInfo.propKey ),
	Bin_propAffix = write_uint16( P#pk_QueryEquipPropInfo.propAffix ),
	Bin_calcType = write_bool( P#pk_QueryEquipPropInfo.calcType ),
	Bin_propValue = write_float( P#pk_QueryEquipPropInfo.propValue ),
	[
		Bin_propType,
		Bin_propKey,
		Bin_propAffix,
		Bin_calcType,
		Bin_propValue	
].

%GENERATED from file:trade.h => QueryTradeList
encode_QueryTradeList( #pk_QueryTradeList{} = P ) ->
	Bin_orderID = write_uint64( P#pk_QueryTradeList.orderID ),
	Bin_itemUID = write_uint64( P#pk_QueryTradeList.itemUID ),
	Bin_itemID = write_uint32( P#pk_QueryTradeList.itemID ),
	Bin_roleName = write_string( P#pk_QueryTradeList.roleName ),
	Bin_sellType = write_uint8( P#pk_QueryTradeList.sellType ),
	Bin_putTime = write_uint64( P#pk_QueryTradeList.putTime ),
	Bin_downTime = write_uint64( P#pk_QueryTradeList.downTime ),
	Bin_gold = write_uint32( P#pk_QueryTradeList.gold ),
	Bin_diamond = write_uint32( P#pk_QueryTradeList.diamond ),
	Bin_destRoleName = write_string( P#pk_QueryTradeList.destRoleName ),
	Bin_quality = write_uint8( P#pk_QueryTradeList.quality ),
	Bin_itemLevel = write_uint8( P#pk_QueryTradeList.itemLevel ),
	Bin_pileCount = write_uint32( P#pk_QueryTradeList.pileCount ),
	Bin_equipProps = write_array(P#pk_QueryTradeList.equipProps, fun(X) -> encode_QueryEquipPropInfo( X ) end),
	[
		Bin_orderID,
		Bin_itemUID,
		Bin_itemID,
		Bin_roleName,
		Bin_sellType,
		Bin_putTime,
		Bin_downTime,
		Bin_gold,
		Bin_diamond,
		Bin_destRoleName,
		Bin_quality,
		Bin_itemLevel,
		Bin_pileCount,
		Bin_equipProps	
].

%GENERATED from file:trade.h => ReferenceItem
encode_ReferenceItem( #pk_ReferenceItem{} = P ) ->
	Bin_itemID = write_uint32( P#pk_ReferenceItem.itemID ),
	Bin_sellNumber = write_uint16( P#pk_ReferenceItem.sellNumber ),
	Bin_gold = write_uint32( P#pk_ReferenceItem.gold ),
	Bin_diamond = write_uint32( P#pk_ReferenceItem.diamond ),
	[
		Bin_itemID,
		Bin_sellNumber,
		Bin_gold,
		Bin_diamond	
].

%GENERATED from file:wake.h => WakeInfo
encode_WakeInfo( #pk_WakeInfo{} = P ) ->
	Bin_cardID = write_uint8( P#pk_WakeInfo.cardID ),
	Bin_level = write_uint8( P#pk_WakeInfo.level ),
	Bin_curNum = write_uint16( P#pk_WakeInfo.curNum ),
	Bin_activeProgress = write_uint16( P#pk_WakeInfo.activeProgress ),
	Bin_unlockStateMax = write_uint8( P#pk_WakeInfo.unlockStateMax ),
	Bin_curState = write_uint8( P#pk_WakeInfo.curState ),
	[
		Bin_cardID,
		Bin_level,
		Bin_curNum,
		Bin_activeProgress,
		Bin_unlockStateMax,
		Bin_curState	
].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
name(?GS2U_DateFindTreasure_Welcome_Sync) -> "GS2U_DateFindTreasure_Welcome_Sync";
name(?GS2U_DateLink_BuffAddScore_Sync) -> "GS2U_DateLink_BuffAddScore_Sync";
name(?GS2U_DateLink_BuffAddTime_Sync) -> "GS2U_DateLink_BuffAddTime_Sync";
name(?GS2U_DateLink_BuffBuff_Sync) -> "GS2U_DateLink_BuffBuff_Sync";
name(?GS2U_DateLink_BuffPower_Sync) -> "GS2U_DateLink_BuffPower_Sync";
name(?GS2U_DateLink_DeduffBuff_Sync) -> "GS2U_DateLink_DeduffBuff_Sync";
name(?GS2U_DateLink_GameEnd_Sync) -> "GS2U_DateLink_GameEnd_Sync";
name(?GS2U_DateLink_Link_Sync) -> "GS2U_DateLink_Link_Sync";
name(?GS2U_DateLink_MainTime_Sync) -> "GS2U_DateLink_MainTime_Sync";
name(?GS2U_DateLink_ResetGem_Sync) -> "GS2U_DateLink_ResetGem_Sync";
name(?GS2U_DateLink_Select_Ack) -> "GS2U_DateLink_Select_Ack";
name(?GS2U_DateLink_Welcome_Sync) -> "GS2U_DateLink_Welcome_Sync";
name(?GS2U_DatePoolShooting_Welcome_Sync) -> "GS2U_DatePoolShooting_Welcome_Sync";
name(?GS2U_DatePushBox_GreateNPC_Sync) -> "GS2U_DatePushBox_GreateNPC_Sync";
name(?GS2U_DatePushBox_Succeed_Sync) -> "GS2U_DatePushBox_Succeed_Sync";
name(?GS2U_DatePushBox_Welcome_Sync) -> "GS2U_DatePushBox_Welcome_Sync";
name(?GS2U_Date_FindTreasure_Sync) -> "GS2U_Date_FindTreasure_Sync";
name(?GS2U_Date_PlayerAnimation_Sync) -> "GS2U_Date_PlayerAnimation_Sync";
name(?GS2U_Date_RefreshSocre_Sync) -> "GS2U_Date_RefreshSocre_Sync";
name(?GS2U_Date_ResetBox_Sync) -> "GS2U_Date_ResetBox_Sync";
name(?GS2U_Date_ResetFindTreasure_Sync) -> "GS2U_Date_ResetFindTreasure_Sync";
name(?GS2U_Date_ResetPoolShooting_Sync) -> "GS2U_Date_ResetPoolShooting_Sync";
name(?GS2U_MonsterMoveSync) -> "GS2U_MonsterMoveSync";
name(?U2GS_DateEnter_Request) -> "U2GS_DateEnter_Request";
name(?U2GS_DateLink_Giveup_Requset) -> "U2GS_DateLink_Giveup_Requset";
name(?U2GS_DateLink_ResetGem_Request) -> "U2GS_DateLink_ResetGem_Request";
name(?U2GS_DateLink_Select_Request) -> "U2GS_DateLink_Select_Request";
name(?U2GS_DatePushBox_Request) -> "U2GS_DatePushBox_Request";
name(?U2GS_DateShooting_Over) -> "U2GS_DateShooting_Over";
name(?GS2U_ChangeLineResponse) -> "GS2U_ChangeLineResponse";
name(?LS2U_GameLineServerList) -> "LS2U_GameLineServerList";
name(?LS2U_LoginQue) -> "LS2U_LoginQue";
name(?LS2U_LoginResult) -> "LS2U_LoginResult";
name(?LS2Web_CryptoAck) -> "LS2Web_CryptoAck";
name(?LS2Web_NormalAck) -> "LS2Web_NormalAck";
name(?U2LS_Login_Normal) -> "U2LS_Login_Normal";
name(?U2LS_RequestGSLine) -> "U2LS_RequestGSLine";
name(?Web2LS_Crypto) -> "Web2LS_Crypto";
name(?Web2LS_Normal) -> "Web2LS_Normal";
name(?GS2U_AchieveSchedule) -> "GS2U_AchieveSchedule";
name(?GS2U_AchieveScheduleList) -> "GS2U_AchieveScheduleList";
name(?GS2U_AddTitle) -> "GS2U_AddTitle";
name(?GS2U_BadgeInfo) -> "GS2U_BadgeInfo";
name(?GS2U_BadgeInfoList) -> "GS2U_BadgeInfoList";
name(?GS2U_DelTitle) -> "GS2U_DelTitle";
name(?GS2U_InitDailyActiveInfo) -> "GS2U_InitDailyActiveInfo";
name(?GS2U_OwnTitleList) -> "GS2U_OwnTitleList";
name(?GS2U_ReceiveDailyActiveAwardResult) -> "GS2U_ReceiveDailyActiveAwardResult";
name(?GS2U_UpdateDailyActiveInfo) -> "GS2U_UpdateDailyActiveInfo";
name(?U2GS_ChangeCustomTitleText) -> "U2GS_ChangeCustomTitleText";
name(?U2GS_ChangeLimiteTitleState) -> "U2GS_ChangeLimiteTitleState";
name(?U2GS_ChangeTitleState) -> "U2GS_ChangeTitleState";
name(?U2GS_ReceiveAchieveValue) -> "U2GS_ReceiveAchieveValue";
name(?U2GS_ReceiveDailyActiveAward) -> "U2GS_ReceiveDailyActiveAward";
name(?ArenaTeamMemberPrepare) -> "ArenaTeamMemberPrepare";
name(?CrosArenaMatch) -> "CrosArenaMatch";
name(?DeleteArenaTeamMember) -> "DeleteArenaTeamMember";
name(?GS2U_ACCityMonsterSurplusTime) -> "GS2U_ACCityMonsterSurplusTime";
name(?GS2U_ActionList) -> "GS2U_ActionList";
name(?GS2U_ActivityEnd) -> "GS2U_ActivityEnd";
name(?GS2U_ActivityState) -> "GS2U_ActivityState";
name(?GS2U_ActivityStateInfo) -> "GS2U_ActivityStateInfo";
name(?GS2U_ActivityStateInit) -> "GS2U_ActivityStateInit";
name(?GS2U_AddArenaTeamMemberRequest) -> "GS2U_AddArenaTeamMemberRequest";
name(?GS2U_AllAnswerQuestion) -> "GS2U_AllAnswerQuestion";
name(?GS2U_AngelInvestmentList) -> "GS2U_AngelInvestmentList";
name(?GS2U_AnswerFirstAndLuckyPlayer) -> "GS2U_AnswerFirstAndLuckyPlayer";
name(?GS2U_AnswerQuestion) -> "GS2U_AnswerQuestion";
name(?GS2U_AnswerRank) -> "GS2U_AnswerRank";
name(?GS2U_ApplyAnswerResult) -> "GS2U_ApplyAnswerResult";
name(?GS2U_ArenaBattleList) -> "GS2U_ArenaBattleList";
name(?GS2U_ArenaRoleDead) -> "GS2U_ArenaRoleDead";
name(?GS2U_ArenaRoleList) -> "GS2U_ArenaRoleList";
name(?GS2U_AttackerDefenderQuotaNumberAck) -> "GS2U_AttackerDefenderQuotaNumberAck";
name(?GS2U_BreakDance) -> "GS2U_BreakDance";
name(?GS2U_ChangeGuardianDeclaration) -> "GS2U_ChangeGuardianDeclaration";
name(?GS2U_CollectionWords_Sync) -> "GS2U_CollectionWords_Sync";
name(?GS2U_CrosArenaBattleHighRanks) -> "GS2U_CrosArenaBattleHighRanks";
name(?GS2U_CrosArenaBattleRanks) -> "GS2U_CrosArenaBattleRanks";
name(?GS2U_CrosBattleExploits) -> "GS2U_CrosBattleExploits";
name(?GS2U_CurEscortType) -> "GS2U_CurEscortType";
name(?GS2U_DarknessCamp) -> "GS2U_DarknessCamp";
name(?GS2U_DarknessInfo) -> "GS2U_DarknessInfo";
name(?GS2U_DarknessKillOrBeKill) -> "GS2U_DarknessKillOrBeKill";
name(?GS2U_DarknessQuenenState) -> "GS2U_DarknessQuenenState";
name(?GS2U_DarknessRank) -> "GS2U_DarknessRank";
name(?GS2U_DarknessState) -> "GS2U_DarknessState";
name(?GS2U_DeadLineGiftList) -> "GS2U_DeadLineGiftList";
name(?GS2U_DestinyStar) -> "GS2U_DestinyStar";
name(?GS2U_EnterDarkness) -> "GS2U_EnterDarkness";
name(?GS2U_EscortResult) -> "GS2U_EscortResult";
name(?GS2U_GBList) -> "GS2U_GBList";
name(?GS2U_GetChargeOrUseGiftAck) -> "GS2U_GetChargeOrUseGiftAck";
name(?GS2U_Goblin_Open_State) -> "GS2U_Goblin_Open_State";
name(?GS2U_HDBattleCD) -> "GS2U_HDBattleCD";
name(?GS2U_HDBattleExploits) -> "GS2U_HDBattleExploits";
name(?GS2U_HDBattleOpenSurplusTime) -> "GS2U_HDBattleOpenSurplusTime";
name(?GS2U_HDBattlePhase) -> "GS2U_HDBattlePhase";
name(?GS2U_HDGatherSuccess) -> "GS2U_HDGatherSuccess";
name(?GS2U_IconLight) -> "GS2U_IconLight";
name(?GS2U_InitWildBossInfo) -> "GS2U_InitWildBossInfo";
name(?GS2U_JoinHDBattle) -> "GS2U_JoinHDBattle";
name(?GS2U_KillMonsterReward) -> "GS2U_KillMonsterReward";
name(?GS2U_KillPlayerNumber) -> "GS2U_KillPlayerNumber";
name(?GS2U_KillRank) -> "GS2U_KillRank";
name(?GS2U_KingBattleBuffInfo) -> "GS2U_KingBattleBuffInfo";
name(?GS2U_KingBattleRepairMirror) -> "GS2U_KingBattleRepairMirror";
name(?GS2U_KingBattleResult) -> "GS2U_KingBattleResult";
name(?GS2U_LotteryMoney) -> "GS2U_LotteryMoney";
name(?GS2U_LotteryNote) -> "GS2U_LotteryNote";
name(?GS2U_LotteryResetTime) -> "GS2U_LotteryResetTime";
name(?GS2U_LotteryResult) -> "GS2U_LotteryResult";
name(?GS2U_MapBossInfo) -> "GS2U_MapBossInfo";
name(?GS2U_MarrorInfoAck) -> "GS2U_MarrorInfoAck";
name(?GS2U_MyAnswerRank) -> "GS2U_MyAnswerRank";
name(?GS2U_NoticeWildBossDead) -> "GS2U_NoticeWildBossDead";
name(?GS2U_NoticeWildBossTarget) -> "GS2U_NoticeWildBossTarget";
name(?GS2U_OperateAct_Exchange) -> "GS2U_OperateAct_Exchange";
name(?GS2U_OperateExchangeAck) -> "GS2U_OperateExchangeAck";
name(?GS2U_PlayerAnswer) -> "GS2U_PlayerAnswer";
name(?GS2U_PlayerAnswerInfo) -> "GS2U_PlayerAnswerInfo";
name(?GS2U_PlayerAnswerResult) -> "GS2U_PlayerAnswerResult";
name(?GS2U_QueueNumber) -> "GS2U_QueueNumber";
name(?GS2U_RequestChargeOrUseListAck) -> "GS2U_RequestChargeOrUseListAck";
name(?GS2U_RequestCollectionWordsAwardAck) -> "GS2U_RequestCollectionWordsAwardAck";
name(?GS2U_RequestPictureNoticeAck) -> "GS2U_RequestPictureNoticeAck";
name(?GS2U_ReturnEscortList) -> "GS2U_ReturnEscortList";
name(?GS2U_RobitAutoAnswer) -> "GS2U_RobitAutoAnswer";
name(?GS2U_SelectCamp) -> "GS2U_SelectCamp";
name(?GS2U_SelectDanceID) -> "GS2U_SelectDanceID";
name(?GS2U_SelfDarkness) -> "GS2U_SelfDarkness";
name(?GS2U_SendAnswerData) -> "GS2U_SendAnswerData";
name(?GS2U_SevenMissionDataList) -> "GS2U_SevenMissionDataList";
name(?GS2U_SevenMissionDataUpdate) -> "GS2U_SevenMissionDataUpdate";
name(?GS2U_SwitchDance) -> "GS2U_SwitchDance";
name(?GS2U_SyncGBInfo) -> "GS2U_SyncGBInfo";
name(?GS2U_TriggerEvent) -> "GS2U_TriggerEvent";
name(?GS2U_TriggerEventResult) -> "GS2U_TriggerEventResult";
name(?GS2U_UneedleaveOutMap) -> "GS2U_UneedleaveOutMap";
name(?GS2U_UpdateArenaTeamMember) -> "GS2U_UpdateArenaTeamMember";
name(?GS2U_WorldLevel) -> "GS2U_WorldLevel";
name(?U2GS_AddArenaTeamMember) -> "U2GS_AddArenaTeamMember";
name(?U2GS_AddArenaTeamMemberAck) -> "U2GS_AddArenaTeamMemberAck";
name(?U2GS_AngelInvestment) -> "U2GS_AngelInvestment";
name(?U2GS_AngelInvestmentGet) -> "U2GS_AngelInvestmentGet";
name(?U2GS_ApplyAnswer) -> "U2GS_ApplyAnswer";
name(?U2GS_ApplyDance) -> "U2GS_ApplyDance";
name(?U2GS_AttackDefenderQuotaNumber) -> "U2GS_AttackDefenderQuotaNumber";
name(?U2GS_BreakDance) -> "U2GS_BreakDance";
name(?U2GS_BuyTime) -> "U2GS_BuyTime";
name(?U2GS_CancelApply) -> "U2GS_CancelApply";
name(?U2GS_DanceArea) -> "U2GS_DanceArea";
name(?U2GS_DarknessRank) -> "U2GS_DarknessRank";
name(?U2GS_DeadLineGiftBuy) -> "U2GS_DeadLineGiftBuy";
name(?U2GS_DeadLineGiftOpen) -> "U2GS_DeadLineGiftOpen";
name(?U2GS_GBLeaveRange) -> "U2GS_GBLeaveRange";
name(?U2GS_GBLockGather) -> "U2GS_GBLockGather";
name(?U2GS_GBRequestEnterMapLine) -> "U2GS_GBRequestEnterMapLine";
name(?U2GS_GetAnswerScore) -> "U2GS_GetAnswerScore";
name(?U2GS_GetChargeOrUseGift) -> "U2GS_GetChargeOrUseGift";
name(?U2GS_GiveMarrorFlower) -> "U2GS_GiveMarrorFlower";
name(?U2GS_GuardianDeclaration) -> "U2GS_GuardianDeclaration";
name(?U2GS_KillRank) -> "U2GS_KillRank";
name(?U2GS_KingBattleBuyAttackerBuff) -> "U2GS_KingBattleBuyAttackerBuff";
name(?U2GS_KingBattleBuyAttackerBuffOneKey) -> "U2GS_KingBattleBuyAttackerBuffOneKey";
name(?U2GS_KingBattleBuyDeffenderBuff) -> "U2GS_KingBattleBuyDeffenderBuff";
name(?U2GS_KingBattleBuyDeffenderBuffOneKey) -> "U2GS_KingBattleBuyDeffenderBuffOneKey";
name(?U2GS_KingBattleBuyMirrorBuff) -> "U2GS_KingBattleBuyMirrorBuff";
name(?U2GS_KingBattleBuyMirrorBuffOneKey) -> "U2GS_KingBattleBuyMirrorBuffOneKey";
name(?U2GS_KingBattleGetBuffInfo) -> "U2GS_KingBattleGetBuffInfo";
name(?U2GS_KingBattleRepairMirror) -> "U2GS_KingBattleRepairMirror";
name(?U2GS_OpenLotteryForm) -> "U2GS_OpenLotteryForm";
name(?U2GS_OpenSelectCamp) -> "U2GS_OpenSelectCamp";
name(?U2GS_OperateExchange) -> "U2GS_OperateExchange";
name(?U2GS_OperateExchangeRefresh) -> "U2GS_OperateExchangeRefresh";
name(?U2GS_PlayerAnswer) -> "U2GS_PlayerAnswer";
name(?U2GS_PlayerAnswerQuestion) -> "U2GS_PlayerAnswerQuestion";
name(?U2GS_QueryActivityState) -> "U2GS_QueryActivityState";
name(?U2GS_QueryAngelInvestment) -> "U2GS_QueryAngelInvestment";
name(?U2GS_QueryMapBossInfo) -> "U2GS_QueryMapBossInfo";
name(?U2GS_QuerySevenMissionData) -> "U2GS_QuerySevenMissionData";
name(?U2GS_ReadyArena) -> "U2GS_ReadyArena";
name(?U2GS_RequestCollectionWordsAward) -> "U2GS_RequestCollectionWordsAward";
name(?U2GS_RequestCrosArenaRanks) -> "U2GS_RequestCrosArenaRanks";
name(?U2GS_RequestCrosRanks) -> "U2GS_RequestCrosRanks";
name(?U2GS_RequestDarknessInfo) -> "U2GS_RequestDarknessInfo";
name(?U2GS_RequestEnterDarkness) -> "U2GS_RequestEnterDarkness";
name(?U2GS_RequestEnterNvasionMap) -> "U2GS_RequestEnterNvasionMap";
name(?U2GS_RequestEntrance) -> "U2GS_RequestEntrance";
name(?U2GS_RequestEscortList) -> "U2GS_RequestEscortList";
name(?U2GS_RequestEscortRob) -> "U2GS_RequestEscortRob";
name(?U2GS_RequestEscortSolo) -> "U2GS_RequestEscortSolo";
name(?U2GS_RequestEscortTeam) -> "U2GS_RequestEscortTeam";
name(?U2GS_RequestGBList) -> "U2GS_RequestGBList";
name(?U2GS_RequestHDBattle) -> "U2GS_RequestHDBattle";
name(?U2GS_RequestHDBattleCD) -> "U2GS_RequestHDBattleCD";
name(?U2GS_RequestHDBattleExploits) -> "U2GS_RequestHDBattleExploits";
name(?U2GS_RequestInActivity) -> "U2GS_RequestInActivity";
name(?U2GS_RequestJoinHDBattle) -> "U2GS_RequestJoinHDBattle";
name(?U2GS_RequestLottery) -> "U2GS_RequestLottery";
name(?U2GS_RequestLotteryResetTime) -> "U2GS_RequestLotteryResetTime";
name(?U2GS_RequestMarrorInfo) -> "U2GS_RequestMarrorInfo";
name(?U2GS_RequestOPActivityConfList) -> "U2GS_RequestOPActivityConfList";
name(?U2GS_RequestQueueNumber) -> "U2GS_RequestQueueNumber";
name(?U2GS_SelectCamp) -> "U2GS_SelectCamp";
name(?U2GS_SelectDanceID) -> "U2GS_SelectDanceID";
name(?U2GS_SelfDarkness) -> "U2GS_SelfDarkness";
name(?U2GS_SevenMissionCompletion) -> "U2GS_SevenMissionCompletion";
name(?U2GS_StartArena) -> "U2GS_StartArena";
name(?GS2U_BattleNotes) -> "GS2U_BattleNotes";
name(?GS2U_BattleStartSec) -> "GS2U_BattleStartSec";
name(?GS2U_Ladder1v1BattleEnd) -> "GS2U_Ladder1v1BattleEnd";
name(?GS2U_LadderTargetList) -> "GS2U_LadderTargetList";
name(?GS2U_PrepareSec) -> "GS2U_PrepareSec";
name(?GS2U_ReturnKingList) -> "GS2U_ReturnKingList";
name(?U2GS_AtuoSubmitTask) -> "U2GS_AtuoSubmitTask";
name(?U2GS_ChallengeTargetByRank) -> "U2GS_ChallengeTargetByRank";
name(?U2GS_ChallengeTargetByRoleID) -> "U2GS_ChallengeTargetByRoleID";
name(?U2GS_FreshLadderTargetList) -> "U2GS_FreshLadderTargetList";
name(?U2GS_GiveUpChallenge) -> "U2GS_GiveUpChallenge";
name(?U2GS_OpenLadder1v1) -> "U2GS_OpenLadder1v1";
name(?U2GS_RequestBattleNotes) -> "U2GS_RequestBattleNotes";
name(?U2GS_RequestKingList) -> "U2GS_RequestKingList";
name(?U2GS_RequestPlayerInfo) -> "U2GS_RequestPlayerInfo";
name(?U2GS_WorshipTarget) -> "U2GS_WorshipTarget";
name(?GS2U_FreshWWFormData) -> "GS2U_FreshWWFormData";
name(?GS2U_WWEscortResult) -> "GS2U_WWEscortResult";
name(?GS2U_WWFormData) -> "GS2U_WWFormData";
name(?GS2U_WWList) -> "GS2U_WWList";
name(?GS2U_WWPlayerInfo) -> "GS2U_WWPlayerInfo";
name(?GS2U_WWSyncMapInfo) -> "GS2U_WWSyncMapInfo";
name(?GS2U_WWSyncMapInfoOne) -> "GS2U_WWSyncMapInfoOne";
name(?GS2U_WWSyncMapInfoThree) -> "GS2U_WWSyncMapInfoThree";
name(?GS2U_WWSyncMapInfoTwo) -> "GS2U_WWSyncMapInfoTwo";
name(?U2GS_GetLastReward) -> "U2GS_GetLastReward";
name(?U2GS_GetPhaseReward) -> "U2GS_GetPhaseReward";
name(?U2GS_RequestWWForm) -> "U2GS_RequestWWForm";
name(?U2GS_RequestWWLineList) -> "U2GS_RequestWWLineList";
name(?U2GS_RequestWWPlayerInfo) -> "U2GS_RequestWWPlayerInfo";
name(?U2GS_SubmitSamplePoint) -> "U2GS_SubmitSamplePoint";
name(?U2GS_WWRequestEnterMapLine) -> "U2GS_WWRequestEnterMapLine";
name(?DelImpression) -> "DelImpression";
name(?DelTag) -> "DelTag";
name(?GS2U_AddEquipItemToBag) -> "GS2U_AddEquipItemToBag";
name(?GS2U_AddImpressionResult) -> "GS2U_AddImpressionResult";
name(?GS2U_AddNormalItemToBag) -> "GS2U_AddNormalItemToBag";
name(?GS2U_AddPraise) -> "GS2U_AddPraise";
name(?GS2U_AddTagResult) -> "GS2U_AddTagResult";
name(?GS2U_DeleteGoods) -> "GS2U_DeleteGoods";
name(?GS2U_EquipEnhancedProp) -> "GS2U_EquipEnhancedProp";
name(?GS2U_EquipGemInfoUpdate) -> "GS2U_EquipGemInfoUpdate";
name(?GS2U_EquipGemInfos) -> "GS2U_EquipGemInfos";
name(?GS2U_EquipRecastInfo) -> "GS2U_EquipRecastInfo";
name(?GS2U_EquipRecastInfoInit) -> "GS2U_EquipRecastInfoInit";
name(?GS2U_EquipRefineLevel) -> "GS2U_EquipRefineLevel";
name(?GS2U_EquipRefineResult) -> "GS2U_EquipRefineResult";
name(?GS2U_EquipRefineResultOneKey) -> "GS2U_EquipRefineResultOneKey";
name(?GS2U_EquipUpStarInfoList) -> "GS2U_EquipUpStarInfoList";
name(?GS2U_EquipUpStarRes) -> "GS2U_EquipUpStarRes";
name(?GS2U_EqupmentCombinAck) -> "GS2U_EqupmentCombinAck";
name(?GS2U_ExchangeResult) -> "GS2U_ExchangeResult";
name(?GS2U_Forbidden_Load_Photo) -> "GS2U_Forbidden_Load_Photo";
name(?GS2U_GainPraise) -> "GS2U_GainPraise";
name(?GS2U_GemEmbedAdd) -> "GS2U_GemEmbedAdd";
name(?GS2U_GemEmbedDelete) -> "GS2U_GemEmbedDelete";
name(?GS2U_GemEmbedInit) -> "GS2U_GemEmbedInit";
name(?GS2U_GemEmbedMakeResult) -> "GS2U_GemEmbedMakeResult";
name(?GS2U_GetEssenceNum) -> "GS2U_GetEssenceNum";
name(?GS2U_InitEquip) -> "GS2U_InitEquip";
name(?GS2U_InitItem) -> "GS2U_InitItem";
name(?GS2U_InitRecycle) -> "GS2U_InitRecycle";
name(?GS2U_InitSlot) -> "GS2U_InitSlot";
name(?GS2U_LockGoods) -> "GS2U_LockGoods";
name(?GS2U_LookRPInfo_Fashion) -> "GS2U_LookRPInfo_Fashion";
name(?GS2U_LookRPInfo_Marriage) -> "GS2U_LookRPInfo_Marriage";
name(?GS2U_LookRPInfo_Pet) -> "GS2U_LookRPInfo_Pet";
name(?GS2U_LookRPInfo_Result) -> "GS2U_LookRPInfo_Result";
name(?GS2U_PlayerExtenInfo) -> "GS2U_PlayerExtenInfo";
name(?GS2U_QueryEquipResult) -> "GS2U_QueryEquipResult";
name(?GS2U_QueryItemResult) -> "GS2U_QueryItemResult";
name(?GS2U_Report) -> "GS2U_Report";
name(?GS2U_Report_Max) -> "GS2U_Report_Max";
name(?GS2U_RequesBuyIDAck) -> "GS2U_RequesBuyIDAck";
name(?GS2U_RequestExchangeResourceForeverLimitIDAck) -> "GS2U_RequestExchangeResourceForeverLimitIDAck";
name(?GS2U_RequestForeverLimitIDAck) -> "GS2U_RequestForeverLimitIDAck";
name(?GS2U_ResourceExchangeList) -> "GS2U_ResourceExchangeList";
name(?GS2U_UpLoadingPhotoResult) -> "GS2U_UpLoadingPhotoResult";
name(?GS2U_UpdateEquipItem) -> "GS2U_UpdateEquipItem";
name(?GS2U_UpdateFurnitureStorageSlot) -> "GS2U_UpdateFurnitureStorageSlot";
name(?GS2U_UpdateNormalItem) -> "GS2U_UpdateNormalItem";
name(?GS2U_UseItemFireWorksNotice) -> "GS2U_UseItemFireWorksNotice";
name(?GS2U_WashEquip) -> "GS2U_WashEquip";
name(?GS2u_OwnPortraitFrame) -> "GS2u_OwnPortraitFrame";
name(?MoveGoods) -> "MoveGoods";
name(?OpenNewBagSlot) -> "OpenNewBagSlot";
name(?U2GS_AddImpression) -> "U2GS_AddImpression";
name(?U2GS_AddPraise) -> "U2GS_AddPraise";
name(?U2GS_AddTag) -> "U2GS_AddTag";
name(?U2GS_EquipEnhanced) -> "U2GS_EquipEnhanced";
name(?U2GS_EquipRecast) -> "U2GS_EquipRecast";
name(?U2GS_EquipRecastAdvance) -> "U2GS_EquipRecastAdvance";
name(?U2GS_EquipRefine) -> "U2GS_EquipRefine";
name(?U2GS_EquipRefineOneKey) -> "U2GS_EquipRefineOneKey";
name(?U2GS_EquipResolve) -> "U2GS_EquipResolve";
name(?U2GS_EquipUpStar) -> "U2GS_EquipUpStar";
name(?U2GS_EquipUpStarOneKey) -> "U2GS_EquipUpStarOneKey";
name(?U2GS_GemEmbedMake) -> "U2GS_GemEmbedMake";
name(?U2GS_GemEmbedMakeOnce) -> "U2GS_GemEmbedMakeOnce";
name(?U2GS_GemEmbedOff) -> "U2GS_GemEmbedOff";
name(?U2GS_GemEmbedOn) -> "U2GS_GemEmbedOn";
name(?U2GS_GemOperate) -> "U2GS_GemOperate";
name(?U2GS_GetPortraitFrameList) -> "U2GS_GetPortraitFrameList";
name(?U2GS_HonorLevel) -> "U2GS_HonorLevel";
name(?U2GS_LockGoods) -> "U2GS_LockGoods";
name(?U2GS_LookRPInfo_Request) -> "U2GS_LookRPInfo_Request";
name(?U2GS_OperatePortraitFrame) -> "U2GS_OperatePortraitFrame";
name(?U2GS_PlayerExtenInfo) -> "U2GS_PlayerExtenInfo";
name(?U2GS_QueryEquipByUID) -> "U2GS_QueryEquipByUID";
name(?U2GS_Report) -> "U2GS_Report";
name(?U2GS_RequesBuyID) -> "U2GS_RequesBuyID";
name(?U2GS_RequesForeverLimitID) -> "U2GS_RequesForeverLimitID";
name(?U2GS_RequestExchangeResource) -> "U2GS_RequestExchangeResource";
name(?U2GS_RequestExchangeResourceForeverLimitID) -> "U2GS_RequestExchangeResourceForeverLimitID";
name(?U2GS_ResourceExchange) -> "U2GS_ResourceExchange";
name(?U2GS_SellAllEquip) -> "U2GS_SellAllEquip";
name(?U2GS_SharedEquip) -> "U2GS_SharedEquip";
name(?U2GS_SortItem) -> "U2GS_SortItem";
name(?U2GS_UseItem) -> "U2GS_UseItem";
name(?U2GS_UseMarriageTitleItem) -> "U2GS_UseMarriageTitleItem";
name(?U2GS_WashEquip) -> "U2GS_WashEquip";
name(?UpLoadingPhoto) -> "UpLoadingPhoto";
name(?C2S_PlayerUseShiftSkill) -> "C2S_PlayerUseShiftSkill";
name(?C2S_PlayerUseSkill) -> "C2S_PlayerUseSkill";
name(?GS2U_AttackOffsetEffect) -> "GS2U_AttackOffsetEffect";
name(?GS2U_AttackResult) -> "GS2U_AttackResult";
name(?GS2U_AttackSpeed) -> "GS2U_AttackSpeed";
name(?GS2U_BattleLearnRequest) -> "GS2U_BattleLearnRequest";
name(?GS2U_BattleLearnResult) -> "GS2U_BattleLearnResult";
name(?GS2U_BreakSkill) -> "GS2U_BreakSkill";
name(?GS2U_CallSkill) -> "GS2U_CallSkill";
name(?GS2U_CarrierUseSkillToObject) -> "GS2U_CarrierUseSkillToObject";
name(?GS2U_Dead) -> "GS2U_Dead";
name(?GS2U_DeadToTeam) -> "GS2U_DeadToTeam";
name(?GS2U_ForceDeadNow) -> "GS2U_ForceDeadNow";
name(?GS2U_IsTriggerCountDown) -> "GS2U_IsTriggerCountDown";
name(?GS2U_MonsterSpeed) -> "GS2U_MonsterSpeed";
name(?GS2U_ResponseBattleAck) -> "GS2U_ResponseBattleAck";
name(?GS2U_ResponseChangePKMode) -> "GS2U_ResponseChangePKMode";
name(?GS2U_TriggerSkill) -> "GS2U_TriggerSkill";
name(?GS2U_TrunBattleInitList) -> "GS2U_TrunBattleInitList";
name(?GS2U_TrunBattleResultList) -> "GS2U_TrunBattleResultList";
name(?GS2U_UseSkillToObject) -> "GS2U_UseSkillToObject";
name(?GS2U_UseSkillToPos) -> "GS2U_UseSkillToPos";
name(?U2GS_BattleLearn) -> "U2GS_BattleLearn";
name(?U2GS_BattleLearnAck) -> "U2GS_BattleLearnAck";
name(?U2GS_RequestBattleAck) -> "U2GS_RequestBattleAck";
name(?U2GS_RequestBattleEnd) -> "U2GS_RequestBattleEnd";
name(?U2GS_RequestChangePKMode) -> "U2GS_RequestChangePKMode";
name(?GS2U_BuffHurt) -> "GS2U_BuffHurt";
name(?GS2U_BuffInfo) -> "GS2U_BuffInfo";
name(?GS2U_BuyBuffSuccess) -> "GS2U_BuyBuffSuccess";
name(?U2GS_BuyBuff) -> "U2GS_BuyBuff";
name(?U2GS_DelBuff) -> "U2GS_DelBuff";
name(?GS2U_BusinessCAInfo) -> "GS2U_BusinessCAInfo";
name(?GS2U_BusinessInfo) -> "GS2U_BusinessInfo";
name(?GS2U_BusinessPlayerInfo) -> "GS2U_BusinessPlayerInfo";
name(?GS2U_DialCostList) -> "GS2U_DialCostList";
name(?GS2U_DialItemList) -> "GS2U_DialItemList";
name(?GS2U_DialRewardList) -> "GS2U_DialRewardList";
name(?GS2U_JqueryrotateResult) -> "GS2U_JqueryrotateResult";
name(?GS2U_RechargeSuccess) -> "GS2U_RechargeSuccess";
name(?GS2U_SelfDialInfo) -> "GS2U_SelfDialInfo";
name(?U2GS_RequestBusinessInfo) -> "U2GS_RequestBusinessInfo";
name(?U2GS_RequestGetBox) -> "U2GS_RequestGetBox";
name(?U2GS_RequestGetGift) -> "U2GS_RequestGetGift";
name(?U2GS_RequestJqueryrotate) -> "U2GS_RequestJqueryrotate";
name(?U2GS_RequestSelfDialInfo) -> "U2GS_RequestSelfDialInfo";
name(?GS2U_InviteFriendToMe) -> "GS2U_InviteFriendToMe";
name(?GS2U_RecvInviteFriend) -> "GS2U_RecvInviteFriend";
name(?GS2U_RequestCompanion) -> "GS2U_RequestCompanion";
name(?GS2U_ToTargetFriendAck) -> "GS2U_ToTargetFriendAck";
name(?U2GS_AgreeInvite) -> "U2GS_AgreeInvite";
name(?U2GS_ChangePoseID) -> "U2GS_ChangePoseID";
name(?U2GS_CreateCompanion) -> "U2GS_CreateCompanion";
name(?U2GS_ExitCompanion) -> "U2GS_ExitCompanion";
name(?U2GS_InviteFriend) -> "U2GS_InviteFriend";
name(?U2GS_InviteToMe) -> "U2GS_InviteToMe";
name(?U2GS_KickCompanion) -> "U2GS_KickCompanion";
name(?U2GS_RequestCompanion) -> "U2GS_RequestCompanion";
name(?U2GS_ToTargetFriend) -> "U2GS_ToTargetFriend";
name(?U2GS_ToTargetFriendResult) -> "U2GS_ToTargetFriendResult";
name(?ActiveGuildCopy) -> "ActiveGuildCopy";
name(?GS2U_BossBattleRankResult) -> "GS2U_BossBattleRankResult";
name(?GS2U_BossBattleState) -> "GS2U_BossBattleState";
name(?GS2U_ChapterInfo) -> "GS2U_ChapterInfo";
name(?GS2U_CopyMapLeftTime) -> "GS2U_CopyMapLeftTime";
name(?GS2U_CopyMapSchedulePlayAnimation) -> "GS2U_CopyMapSchedulePlayAnimation";
name(?GS2U_CopyMapSchedulePlayCharacter) -> "GS2U_CopyMapSchedulePlayCharacter";
name(?GS2U_CopySpecialSchedule) -> "GS2U_CopySpecialSchedule";
name(?GS2U_DevilCopyMapRankList) -> "GS2U_DevilCopyMapRankList";
name(?GS2U_DevilCopyMapStarList) -> "GS2U_DevilCopyMapStarList";
name(?GS2U_FestivalTimeInfo) -> "GS2U_FestivalTimeInfo";
name(?GS2U_IsGuildCopyOpen) -> "GS2U_IsGuildCopyOpen";
name(?GS2U_MaterialInfo) -> "GS2U_MaterialInfo";
name(?GS2U_MoneyDungeonInfo) -> "GS2U_MoneyDungeonInfo";
name(?GS2U_SendGuildCopyOpenTime) -> "GS2U_SendGuildCopyOpenTime";
name(?GS2U_SpiritArea_Tick_Sync) -> "GS2U_SpiritArea_Tick_Sync";
name(?GS2U_SpiritArea_Wake_Sync) -> "GS2U_SpiritArea_Wake_Sync";
name(?GS2U_TowerInfo) -> "GS2U_TowerInfo";
name(?GS2U_UpdateDevilCopyMapStar) -> "GS2U_UpdateDevilCopyMapStar";
name(?U2GS2U_BuyCopyReward) -> "U2GS2U_BuyCopyReward";
name(?U2GS2U_CopyMapScheduleShow2) -> "U2GS2U_CopyMapScheduleShow2";
name(?U2GS_BuyFestivalPacket) -> "U2GS_BuyFestivalPacket";
name(?U2GS_CopyMapSchedulePlayAnimationOver) -> "U2GS_CopyMapSchedulePlayAnimationOver";
name(?U2GS_CopyMapSchedulePlayCharacterOver) -> "U2GS_CopyMapSchedulePlayCharacterOver";
name(?U2GS_EnterBossBattle) -> "U2GS_EnterBossBattle";
name(?U2GS_EnterFestivalCopy) -> "U2GS_EnterFestivalCopy";
name(?U2GS_EnterGuildCopy) -> "U2GS_EnterGuildCopy";
name(?U2GS_GoonCopyMap) -> "U2GS_GoonCopyMap";
name(?U2GS_MoneyDungeonGiveup) -> "U2GS_MoneyDungeonGiveup";
name(?U2GS_MoneyDungeonNext) -> "U2GS_MoneyDungeonNext";
name(?U2GS_QueryDevilCopyMapRankList) -> "U2GS_QueryDevilCopyMapRankList";
name(?U2GS_QueryDevilCopyMapStarList) -> "U2GS_QueryDevilCopyMapStarList";
name(?U2GS_RequestAutoDeal) -> "U2GS_RequestAutoDeal";
name(?U2GS_RequestMaterialInfo) -> "U2GS_RequestMaterialInfo";
name(?U2GS_UpTower) -> "U2GS_UpTower";
name(?U2GS_startNextChapter) -> "U2GS_startNextChapter";
name(?UpdataGuildHurtToBoss) -> "UpdataGuildHurtToBoss";
name(?UpdataHurtToBoss) -> "UpdataHurtToBoss";
name(?GS2U_ActiveFashionSuitList) -> "GS2U_ActiveFashionSuitList";
name(?GS2U_FashionGiftAck) -> "GS2U_FashionGiftAck";
name(?GS2U_FashionList) -> "GS2U_FashionList";
name(?GS2U_FashionResult) -> "GS2U_FashionResult";
name(?GS2U_FashionRoomLevelUp) -> "GS2U_FashionRoomLevelUp";
name(?U2GS_ActiveFashionSuit) -> "U2GS_ActiveFashionSuit";
name(?U2GS_BuyFashion) -> "U2GS_BuyFashion";
name(?U2GS_FashionBuyRequest) -> "U2GS_FashionBuyRequest";
name(?U2GS_FashionRoomLevelUp) -> "U2GS_FashionRoomLevelUp";
name(?U2GS_FashionThanksMail) -> "U2GS_FashionThanksMail";
name(?U2GS_IsDisplayFashion) -> "U2GS_IsDisplayFashion";
name(?U2GS_OperateFashion) -> "U2GS_OperateFashion";
name(?GS2U_FloatingAward) -> "GS2U_FloatingAward";
name(?GS2U_FloatingSchedule) -> "GS2U_FloatingSchedule";
name(?GS2U_ReceiveFloatingAward) -> "GS2U_ReceiveFloatingAward";
name(?U2GS_RequestFloatingAward) -> "U2GS_RequestFloatingAward";
name(?GS2U_Friend2AddFromBlack_Ask) -> "GS2U_Friend2AddFromBlack_Ask";
name(?GS2U_Friend2ApplicantReset_Sync) -> "GS2U_Friend2ApplicantReset_Sync";
name(?GS2U_Friend2BanFromFormal_Ask) -> "GS2U_Friend2BanFromFormal_Ask";
name(?GS2U_Friend2BanWithUnbanAndDel_Ask) -> "GS2U_Friend2BanWithUnbanAndDel_Ask";
name(?GS2U_Friend2BanWithUnban_Ask) -> "GS2U_Friend2BanWithUnban_Ask";
name(?GS2U_Friend2BlackReset_Sync) -> "GS2U_Friend2BlackReset_Sync";
name(?GS2U_Friend2ClosenessChange_Sync) -> "GS2U_Friend2ClosenessChange_Sync";
name(?GS2U_Friend2CrossAdd2Failed_Ack) -> "GS2U_Friend2CrossAdd2Failed_Ack";
name(?GS2U_Friend2CrossAdd2_Ack) -> "GS2U_Friend2CrossAdd2_Ack";
name(?GS2U_Friend2CrossAdd_Sync) -> "GS2U_Friend2CrossAdd_Sync";
name(?GS2U_Friend2CrossAll_Sync) -> "GS2U_Friend2CrossAll_Sync";
name(?GS2U_Friend2CrossDel_Ack) -> "GS2U_Friend2CrossDel_Ack";
name(?GS2U_Friend2CrossInit_Sync) -> "GS2U_Friend2CrossInit_Sync";
name(?GS2U_Friend2ForLook_Ack) -> "GS2U_Friend2ForLook_Ack";
name(?GS2U_Friend2FormalChatVoice_AckR) -> "GS2U_Friend2FormalChatVoice_AckR";
name(?GS2U_Friend2FormalChatVoice_AckS) -> "GS2U_Friend2FormalChatVoice_AckS";
name(?GS2U_Friend2FormalChat_Ack) -> "GS2U_Friend2FormalChat_Ack";
name(?GS2U_Friend2FormalForMarriage_Sync) -> "GS2U_Friend2FormalForMarriage_Sync";
name(?GS2U_Friend2FormalReset_Sync) -> "GS2U_Friend2FormalReset_Sync";
name(?GS2U_Friend2GetBack_AddRet) -> "GS2U_Friend2GetBack_AddRet";
name(?GS2U_Friend2GetBack_IgnoreRet) -> "GS2U_Friend2GetBack_IgnoreRet";
name(?GS2U_Friend2GetBack_SyncInfo) -> "GS2U_Friend2GetBack_SyncInfo";
name(?GS2U_Friend2MakeFormal_Sync) -> "GS2U_Friend2MakeFormal_Sync";
name(?GS2U_Friend2Recommend_Ack) -> "GS2U_Friend2Recommend_Ack";
name(?GS2U_Friend2Search_Ack) -> "GS2U_Friend2Search_Ack";
name(?GS2U_Friend2SimpleList_Ack) -> "GS2U_Friend2SimpleList_Ack";
name(?GS2U_Friend2TempReset_Sync) -> "GS2U_Friend2TempReset_Sync";
name(?GS2U_Friend2WantChat_Ack) -> "GS2U_Friend2WantChat_Ack";
name(?GS2u_Friend2Like_Ack) -> "GS2u_Friend2Like_Ack";
name(?U2GS_Friend2AddFromBlack_Reply) -> "U2GS_Friend2AddFromBlack_Reply";
name(?U2GS_Friend2Add_Request) -> "U2GS_Friend2Add_Request";
name(?U2GS_Friend2ApplicantUseOneKey_Request) -> "U2GS_Friend2ApplicantUseOneKey_Request";
name(?U2GS_Friend2ApplicantUse_Request) -> "U2GS_Friend2ApplicantUse_Request";
name(?U2GS_Friend2Applicant_Request) -> "U2GS_Friend2Applicant_Request";
name(?U2GS_Friend2BanWithDel_Reply) -> "U2GS_Friend2BanWithDel_Reply";
name(?U2GS_Friend2BanWithUnbanAndDel_Reply) -> "U2GS_Friend2BanWithUnbanAndDel_Reply";
name(?U2GS_Friend2BanWithUnban_Reply) -> "U2GS_Friend2BanWithUnban_Reply";
name(?U2GS_Friend2Ban_Request) -> "U2GS_Friend2Ban_Request";
name(?U2GS_Friend2Black_Request) -> "U2GS_Friend2Black_Request";
name(?U2GS_Friend2CrossAdd2_Request) -> "U2GS_Friend2CrossAdd2_Request";
name(?U2GS_Friend2CrossAdd_Request) -> "U2GS_Friend2CrossAdd_Request";
name(?U2GS_Friend2CrossAll_Request) -> "U2GS_Friend2CrossAll_Request";
name(?U2GS_Friend2CrossDel_Request) -> "U2GS_Friend2CrossDel_Request";
name(?U2GS_Friend2Del_Request) -> "U2GS_Friend2Del_Request";
name(?U2GS_Friend2ForLook_Request) -> "U2GS_Friend2ForLook_Request";
name(?U2GS_Friend2FormalChatVoice_Request) -> "U2GS_Friend2FormalChatVoice_Request";
name(?U2GS_Friend2FormalChat_Request) -> "U2GS_Friend2FormalChat_Request";
name(?U2GS_Friend2FormalForMarriage_Request) -> "U2GS_Friend2FormalForMarriage_Request";
name(?U2GS_Friend2FormalOP_Request) -> "U2GS_Friend2FormalOP_Request";
name(?U2GS_Friend2Formal_Request) -> "U2GS_Friend2Formal_Request";
name(?U2GS_Friend2GetBack_Add) -> "U2GS_Friend2GetBack_Add";
name(?U2GS_Friend2GetBack_Ignore) -> "U2GS_Friend2GetBack_Ignore";
name(?U2GS_Friend2GetBack_OneKeyToAdd) -> "U2GS_Friend2GetBack_OneKeyToAdd";
name(?U2GS_Friend2LimitSearch_Request) -> "U2GS_Friend2LimitSearch_Request";
name(?U2GS_Friend2Recommend_Request) -> "U2GS_Friend2Recommend_Request";
name(?U2GS_Friend2Search_Request) -> "U2GS_Friend2Search_Request";
name(?U2GS_Friend2SimpleList_Requets) -> "U2GS_Friend2SimpleList_Requets";
name(?U2GS_Friend2Temp_Request) -> "U2GS_Friend2Temp_Request";
name(?U2GS_Friend2Unban_Request) -> "U2GS_Friend2Unban_Request";
name(?U2GS_Friend2WantChat_Request) -> "U2GS_Friend2WantChat_Request";
name(?GS2U_InitGodWeapon) -> "GS2U_InitGodWeapon";
name(?GS2U_LevelUpGodWeaponResult) -> "GS2U_LevelUpGodWeaponResult";
name(?GS2U_LevelUpGodWeaponSkillResult) -> "GS2U_LevelUpGodWeaponSkillResult";
name(?U2GS_LevelUpGodWeapon) -> "U2GS_LevelUpGodWeapon";
name(?U2GS_LevelUpGodWeaponSkill) -> "U2GS_LevelUpGodWeaponSkill";
name(?GS2U_BiddingGuildMsg) -> "GS2U_BiddingGuildMsg";
name(?GS2U_ChangeDenoter) -> "GS2U_ChangeDenoter";
name(?GS2U_ChangeGuildName) -> "GS2U_ChangeGuildName";
name(?GS2U_ChangeNotice) -> "GS2U_ChangeNotice";
name(?GS2U_DonateSuccess) -> "GS2U_DonateSuccess";
name(?GS2U_ExpeditionBroadcastPos) -> "GS2U_ExpeditionBroadcastPos";
name(?GS2U_ExpeditionFinalInfo) -> "GS2U_ExpeditionFinalInfo";
name(?GS2U_ExpeditionGlobalMapInfoList) -> "GS2U_ExpeditionGlobalMapInfoList";
name(?GS2U_ExpeditionMapBattleInfoList) -> "GS2U_ExpeditionMapBattleInfoList";
name(?GS2U_ExpeditionMapInfoList) -> "GS2U_ExpeditionMapInfoList";
name(?GS2U_ExpeditionQuenenState) -> "GS2U_ExpeditionQuenenState";
name(?GS2U_GivePower) -> "GS2U_GivePower";
name(?GS2U_GuildBattleApply) -> "GS2U_GuildBattleApply";
name(?GS2U_GuildBattleResult) -> "GS2U_GuildBattleResult";
name(?GS2U_GuildBossRank) -> "GS2U_GuildBossRank";
name(?GS2U_GuildBossResoult) -> "GS2U_GuildBossResoult";
name(?GS2U_GuildBuff) -> "GS2U_GuildBuff";
name(?GS2U_GuildBuffRole) -> "GS2U_GuildBuffRole";
name(?GS2U_GuildIDList) -> "GS2U_GuildIDList";
name(?GS2U_GuildList) -> "GS2U_GuildList";
name(?GS2U_GuildLoopTask_Give_Ack) -> "GS2U_GuildLoopTask_Give_Ack";
name(?GS2U_GuildLoopTask_History_Ack) -> "GS2U_GuildLoopTask_History_Ack";
name(?GS2U_GuildLoopTask_MyGet_Sync) -> "GS2U_GuildLoopTask_MyGet_Sync";
name(?GS2U_GuildLoopTask_OpenUI_Ack) -> "GS2U_GuildLoopTask_OpenUI_Ack";
name(?GS2U_GuildLoopTask_WantGive_Ack) -> "GS2U_GuildLoopTask_WantGive_Ack";
name(?GS2U_GuildOpResult) -> "GS2U_GuildOpResult";
name(?GS2U_GuildSkill) -> "GS2U_GuildSkill";
name(?GS2U_GuildTask) -> "GS2U_GuildTask";
name(?GS2U_GuildWar) -> "GS2U_GuildWar";
name(?GS2U_GuildWarCannonHit) -> "GS2U_GuildWarCannonHit";
name(?GS2U_GuildWarData) -> "GS2U_GuildWarData";
name(?GS2U_GuildWarEnd) -> "GS2U_GuildWarEnd";
name(?GS2U_GuildWarRankForHud) -> "GS2U_GuildWarRankForHud";
name(?GS2U_Guild_ExchangeAll_Sync) -> "GS2U_Guild_ExchangeAll_Sync";
name(?GS2U_Guild_Exchange_Ack) -> "GS2U_Guild_Exchange_Ack";
name(?GS2U_Guild_FairgroundEnter_Ack) -> "GS2U_Guild_FairgroundEnter_Ack";
name(?GS2U_Guild_FairgroundRide_Sync) -> "GS2U_Guild_FairgroundRide_Sync";
name(?GS2U_Guild_FastJoin_Ack) -> "GS2U_Guild_FastJoin_Ack";
name(?GS2U_Guild_FastJoin_Get_Ack) -> "GS2U_Guild_FastJoin_Get_Ack";
name(?GS2U_Guild_FastJoin_Set_Ack) -> "GS2U_Guild_FastJoin_Set_Ack";
name(?GS2U_Guild_GodBless_Ack) -> "GS2U_Guild_GodBless_Ack";
name(?GS2U_Guild_GodBless_Schedule_Reward_Ack) -> "GS2U_Guild_GodBless_Schedule_Reward_Ack";
name(?GS2U_Guild_GodBless_Schedule_Sync) -> "GS2U_Guild_GodBless_Schedule_Sync";
name(?GS2U_Guild_OpenSupplication_Ack) -> "GS2U_Guild_OpenSupplication_Ack";
name(?GS2U_Guild_ShopBuy_Ack) -> "GS2U_Guild_ShopBuy_Ack";
name(?GS2U_Guild_SnowmanAll_Sync) -> "GS2U_Guild_SnowmanAll_Sync";
name(?GS2U_Guild_SnowmanBegin_Sync) -> "GS2U_Guild_SnowmanBegin_Sync";
name(?GS2U_Guild_SnowmanCompleteCount_Sync) -> "GS2U_Guild_SnowmanCompleteCount_Sync";
name(?GS2U_Guild_SnowmanExtraRes_Sync) -> "GS2U_Guild_SnowmanExtraRes_Sync";
name(?GS2U_Guild_SnowmanPlayer_Sync) -> "GS2U_Guild_SnowmanPlayer_Sync";
name(?GS2U_Guild_SnowmanSettle_Sync) -> "GS2U_Guild_SnowmanSettle_Sync";
name(?GS2U_Guild_SnowmanSnowman_Sync) -> "GS2U_Guild_SnowmanSnowman_Sync";
name(?GS2U_Guild_SupplicateGiveF_Ack) -> "GS2U_Guild_SupplicateGiveF_Ack";
name(?GS2U_Guild_SupplicateGive_Ack) -> "GS2U_Guild_SupplicateGive_Ack";
name(?GS2U_Guild_SupplicateGive_Sync) -> "GS2U_Guild_SupplicateGive_Sync";
name(?GS2U_Guild_Supplicate_Ack) -> "GS2U_Guild_Supplicate_Ack";
name(?GS2U_ISInApplyInfo) -> "GS2U_ISInApplyInfo";
name(?GS2U_ImpeachInfo) -> "GS2U_ImpeachInfo";
name(?GS2U_JoinGuild_Sync) -> "GS2U_JoinGuild_Sync";
name(?GS2U_MyGuildBossRank) -> "GS2U_MyGuildBossRank";
name(?GS2U_MyGuildKillBossRank) -> "GS2U_MyGuildKillBossRank";
name(?GS2U_OccupyOwnerChange) -> "GS2U_OccupyOwnerChange";
name(?GS2U_OneKeyRecruit_Ack) -> "GS2U_OneKeyRecruit_Ack";
name(?GS2U_OpenGuildForm) -> "GS2U_OpenGuildForm";
name(?GS2U_QueryGuildInfoByRoleID_Ack) -> "GS2U_QueryGuildInfoByRoleID_Ack";
name(?GS2U_QueryImpeachInfo) -> "GS2U_QueryImpeachInfo";
name(?GS2U_Recruit) -> "GS2U_Recruit";
name(?GS2U_RefreshGuildProp) -> "GS2U_RefreshGuildProp";
name(?GS2U_RequestGuildBossInfo_Sync) -> "GS2U_RequestGuildBossInfo_Sync";
name(?GS2U_RequestJoinGuildList) -> "GS2U_RequestJoinGuildList";
name(?GS2U_RequestJoinGuild_Ack) -> "GS2U_RequestJoinGuild_Ack";
name(?GS2U_RequestLookMemberList) -> "GS2U_RequestLookMemberList";
name(?GS2U_ReturnDonateTimes) -> "GS2U_ReturnDonateTimes";
name(?GS2U_ShopUpgrade) -> "GS2U_ShopUpgrade";
name(?GS2U_Upgrade_Ack) -> "GS2U_Upgrade_Ack";
name(?U2GS_AcceptGuildTask) -> "U2GS_AcceptGuildTask";
name(?U2GS_AgreeRecruit) -> "U2GS_AgreeRecruit";
name(?U2GS_Bidding) -> "U2GS_Bidding";
name(?U2GS_BuyGuildBuff) -> "U2GS_BuyGuildBuff";
name(?U2GS_ChangeDenoter) -> "U2GS_ChangeDenoter";
name(?U2GS_ChangeGuildName) -> "U2GS_ChangeGuildName";
name(?U2GS_ChangeLeader) -> "U2GS_ChangeLeader";
name(?U2GS_ChangeNotice) -> "U2GS_ChangeNotice";
name(?U2GS_CreateGuild) -> "U2GS_CreateGuild";
name(?U2GS_DealRequestJoin) -> "U2GS_DealRequestJoin";
name(?U2GS_DeleteGuild) -> "U2GS_DeleteGuild";
name(?U2GS_DonateMoney) -> "U2GS_DonateMoney";
name(?U2GS_EnterGuildBattle) -> "U2GS_EnterGuildBattle";
name(?U2GS_EnterGuildHome) -> "U2GS_EnterGuildHome";
name(?U2GS_ExitGuild) -> "U2GS_ExitGuild";
name(?U2GS_ExpeditionBroadcastPos) -> "U2GS_ExpeditionBroadcastPos";
name(?U2GS_GetGuildHomeReward) -> "U2GS_GetGuildHomeReward";
name(?U2GS_GetGuildPrize) -> "U2GS_GetGuildPrize";
name(?U2GS_GiveMeExpeditionRewardEverDay) -> "U2GS_GiveMeExpeditionRewardEverDay";
name(?U2GS_GivePower) -> "U2GS_GivePower";
name(?U2GS_GiveUpGuildTask) -> "U2GS_GiveUpGuildTask";
name(?U2GS_GuildBattleApply) -> "U2GS_GuildBattleApply";
name(?U2GS_GuildBossBuyBuff) -> "U2GS_GuildBossBuyBuff";
name(?U2GS_GuildList) -> "U2GS_GuildList";
name(?U2GS_GuildLoopTask_Give_Request) -> "U2GS_GuildLoopTask_Give_Request";
name(?U2GS_GuildLoopTask_History_Request) -> "U2GS_GuildLoopTask_History_Request";
name(?U2GS_GuildLoopTask_OpenUI_Request) -> "U2GS_GuildLoopTask_OpenUI_Request";
name(?U2GS_GuildLoopTask_WantGet_Request) -> "U2GS_GuildLoopTask_WantGet_Request";
name(?U2GS_GuildLoopTask_WantGive_Request) -> "U2GS_GuildLoopTask_WantGive_Request";
name(?U2GS_GuildReward) -> "U2GS_GuildReward";
name(?U2GS_Guild_Exchange_Request) -> "U2GS_Guild_Exchange_Request";
name(?U2GS_Guild_FairgroundEnter_Request) -> "U2GS_Guild_FairgroundEnter_Request";
name(?U2GS_Guild_FairgroundRide_Request) -> "U2GS_Guild_FairgroundRide_Request";
name(?U2GS_Guild_FastJoin_Get_Request) -> "U2GS_Guild_FastJoin_Get_Request";
name(?U2GS_Guild_FastJoin_Request) -> "U2GS_Guild_FastJoin_Request";
name(?U2GS_Guild_FastJoin_Set_Request) -> "U2GS_Guild_FastJoin_Set_Request";
name(?U2GS_Guild_GodBless_Request) -> "U2GS_Guild_GodBless_Request";
name(?U2GS_Guild_GodBless_Schedule_Request) -> "U2GS_Guild_GodBless_Schedule_Request";
name(?U2GS_Guild_GodBless_Schedule_Reward_Request) -> "U2GS_Guild_GodBless_Schedule_Reward_Request";
name(?U2GS_Guild_OpenSupplication_Request) -> "U2GS_Guild_OpenSupplication_Request";
name(?U2GS_Guild_ShopBuy_Request) -> "U2GS_Guild_ShopBuy_Request";
name(?U2GS_Guild_SnowmanCheck_Request) -> "U2GS_Guild_SnowmanCheck_Request";
name(?U2GS_Guild_SnowmanDonate_Request) -> "U2GS_Guild_SnowmanDonate_Request";
name(?U2GS_Guild_SnowmanReward_Request) -> "U2GS_Guild_SnowmanReward_Request";
name(?U2GS_Guild_SupplicateGive_Request) -> "U2GS_Guild_SupplicateGive_Request";
name(?U2GS_Guild_Supplicate_Request) -> "U2GS_Guild_Supplicate_Request";
name(?U2GS_ImpeachCreater) -> "U2GS_ImpeachCreater";
name(?U2GS_KickGuild) -> "U2GS_KickGuild";
name(?U2GS_MyGuildKllBossRank) -> "U2GS_MyGuildKllBossRank";
name(?U2GS_OneKeyRecruit_Request) -> "U2GS_OneKeyRecruit_Request";
name(?U2GS_OpenGuildForm) -> "U2GS_OpenGuildForm";
name(?U2GS_OpenGuildShop) -> "U2GS_OpenGuildShop";
name(?U2GS_QueryExpeditionFinalInfo) -> "U2GS_QueryExpeditionFinalInfo";
name(?U2GS_QueryExpeditionGlobalMapInfo) -> "U2GS_QueryExpeditionGlobalMapInfo";
name(?U2GS_QueryExpeditionMapBattleInfo) -> "U2GS_QueryExpeditionMapBattleInfo";
name(?U2GS_QueryExpeditionMapInfo) -> "U2GS_QueryExpeditionMapInfo";
name(?U2GS_QueryGuildInfoByRoleID_Request) -> "U2GS_QueryGuildInfoByRoleID_Request";
name(?U2GS_Recruit) -> "U2GS_Recruit";
name(?U2GS_RequestDonateTimes) -> "U2GS_RequestDonateTimes";
name(?U2GS_RequestEnterGuildBoss) -> "U2GS_RequestEnterGuildBoss";
name(?U2GS_RequestGuildBattleResult) -> "U2GS_RequestGuildBattleResult";
name(?U2GS_RequestGuildBossInfo) -> "U2GS_RequestGuildBossInfo";
name(?U2GS_RequestGuildBuff) -> "U2GS_RequestGuildBuff";
name(?U2GS_RequestGuildInfo_Request) -> "U2GS_RequestGuildInfo_Request";
name(?U2GS_RequestGuildRank) -> "U2GS_RequestGuildRank";
name(?U2GS_RequestGuildSkill) -> "U2GS_RequestGuildSkill";
name(?U2GS_RequestGuildTask) -> "U2GS_RequestGuildTask";
name(?U2GS_RequestGuildWar) -> "U2GS_RequestGuildWar";
name(?U2GS_RequestJoinGuild) -> "U2GS_RequestJoinGuild";
name(?U2GS_RequestJoinGuildList) -> "U2GS_RequestJoinGuildList";
name(?U2GS_RequestLookMemberList) -> "U2GS_RequestLookMemberList";
name(?U2GS_ResearchGuildSkill) -> "U2GS_ResearchGuildSkill";
name(?U2GS_ShopUpgrade) -> "U2GS_ShopUpgrade";
name(?U2GS_StudyGuildSkill) -> "U2GS_StudyGuildSkill";
name(?U2GS_SummonHX) -> "U2GS_SummonHX";
name(?U2GS_SummonMonster) -> "U2GS_SummonMonster";
name(?U2GS_SupportImpeachCreater) -> "U2GS_SupportImpeachCreater";
name(?U2GS_Upgrade) -> "U2GS_Upgrade";
name(?U2GS_UseCannon) -> "U2GS_UseCannon";
name(?U2GS_getGuildBuff) -> "U2GS_getGuildBuff";
name(?GS2U_ChangedecorateModelResult) -> "GS2U_ChangedecorateModelResult";
name(?GS2U_DelSenceTheFurniTrueResult) -> "GS2U_DelSenceTheFurniTrueResult";
name(?GS2U_EnterHome) -> "GS2U_EnterHome";
name(?GS2U_ExtendAreaResult_Sync) -> "GS2U_ExtendAreaResult_Sync";
name(?GS2U_FreshHomeAreaInfo) -> "GS2U_FreshHomeAreaInfo";
name(?GS2U_FreshHomeInfo) -> "GS2U_FreshHomeInfo";
name(?GS2U_GetPetFoodResults_Sync) -> "GS2U_GetPetFoodResults_Sync";
name(?GS2U_GivingFurniTrueForPartnerResult) -> "GS2U_GivingFurniTrueForPartnerResult";
name(?GS2U_HomeBitResult) -> "GS2U_HomeBitResult";
name(?GS2U_HomeFarming_Sync) -> "GS2U_HomeFarming_Sync";
name(?GS2U_HomeInfo) -> "GS2U_HomeInfo";
name(?GS2U_HomePlantOperate_Ack) -> "GS2U_HomePlantOperate_Ack";
name(?GS2U_HomePlant_Sync) -> "GS2U_HomePlant_Sync";
name(?GS2U_HomeVisitList) -> "GS2U_HomeVisitList";
name(?GS2U_Invitefriendstobed) -> "GS2U_Invitefriendstobed";
name(?GS2U_LoadFurniTrueResult_Sync) -> "GS2U_LoadFurniTrueResult_Sync";
name(?GS2U_PutOutPetFarmingResults_Sync) -> "GS2U_PutOutPetFarmingResults_Sync";
name(?GS2U_PutPetInFarmingResults_Sync) -> "GS2U_PutPetInFarmingResults_Sync";
name(?GS2U_SaveFurniTrueResult_Sync) -> "GS2U_SaveFurniTrueResult_Sync";
name(?GS2U_SendAllFurniInfo_Sync) -> "GS2U_SendAllFurniInfo_Sync";
name(?GS2U_SendHomeLetter) -> "GS2U_SendHomeLetter";
name(?GS2U_SetGreetingsResult_Sync) -> "GS2U_SetGreetingsResult_Sync";
name(?GS2U_UseFurnitrueResult) -> "GS2U_UseFurnitrueResult";
name(?GS2U_VisitRecord) -> "GS2U_VisitRecord";
name(?U2GS_ChangeHomeName) -> "U2GS_ChangeHomeName";
name(?U2GS_ChangedecorateModel) -> "U2GS_ChangedecorateModel";
name(?U2GS_CreateHome) -> "U2GS_CreateHome";
name(?U2GS_DelSenceTheFurniTrue) -> "U2GS_DelSenceTheFurniTrue";
name(?U2GS_EnterBitHome) -> "U2GS_EnterBitHome";
name(?U2GS_EnterHome) -> "U2GS_EnterHome";
name(?U2GS_ExtendArea) -> "U2GS_ExtendArea";
name(?U2GS_GetPetFood) -> "U2GS_GetPetFood";
name(?U2GS_GivingFurniTrueForPartner) -> "U2GS_GivingFurniTrueForPartner";
name(?U2GS_HomePlantOperate_Request) -> "U2GS_HomePlantOperate_Request";
name(?U2GS_HomeVisit) -> "U2GS_HomeVisit";
name(?U2GS_Invitefriendstobed) -> "U2GS_Invitefriendstobed";
name(?U2GS_LoadFurniTrueScheme) -> "U2GS_LoadFurniTrueScheme";
name(?U2GS_PutOutPetFarming) -> "U2GS_PutOutPetFarming";
name(?U2GS_PutPetInFarming) -> "U2GS_PutPetInFarming";
name(?U2GS_RequestHomeInfo) -> "U2GS_RequestHomeInfo";
name(?U2GS_RequestVisitRecord) -> "U2GS_RequestVisitRecord";
name(?U2GS_SaveFurniTrueScheme) -> "U2GS_SaveFurniTrueScheme";
name(?U2GS_SetGreetings) -> "U2GS_SetGreetings";
name(?U2GS_UpgradeHome) -> "U2GS_UpgradeHome";
name(?U2GS_UpgradeHomeArea) -> "U2GS_UpgradeHomeArea";
name(?U2GS_UseFurnitrue) -> "U2GS_UseFurnitrue";
name(?GS2U_GiftHistory_Sync) -> "GS2U_GiftHistory_Sync";
name(?GS2U_Gift_Ack) -> "GS2U_Gift_Ack";
name(?GS2U_IdentityCharm_Sync) -> "GS2U_IdentityCharm_Sync";
name(?GS2U_IdentityEditPic_Ack) -> "GS2U_IdentityEditPic_Ack";
name(?GS2U_IdentityEditTag_Ack) -> "GS2U_IdentityEditTag_Ack";
name(?GS2U_IdentityLike_Sync) -> "GS2U_IdentityLike_Sync";
name(?GS2U_IdentityPicDownloadData_Ack) -> "GS2U_IdentityPicDownloadData_Ack";
name(?GS2U_IdentityPicDownloadData_Sync) -> "GS2U_IdentityPicDownloadData_Sync";
name(?GS2U_IdentityPicDownloadError_Ack) -> "GS2U_IdentityPicDownloadError_Ack";
name(?GS2U_IdentityPicUpload_Ack) -> "GS2U_IdentityPicUpload_Ack";
name(?GS2U_Identity_Ack) -> "GS2U_Identity_Ack";
name(?GS2U_Report_Ack) -> "GS2U_Report_Ack";
name(?U2GS2U_IdentityEditAge) -> "U2GS2U_IdentityEditAge";
name(?U2GS2U_IdentityEditBirth) -> "U2GS2U_IdentityEditBirth";
name(?U2GS2U_IdentityEditBloodType) -> "U2GS2U_IdentityEditBloodType";
name(?U2GS2U_IdentityEditFace) -> "U2GS2U_IdentityEditFace";
name(?U2GS2U_IdentityEditHometown) -> "U2GS2U_IdentityEditHometown";
name(?U2GS2U_IdentityEditLocation) -> "U2GS2U_IdentityEditLocation";
name(?U2GS2U_IdentityEditSign) -> "U2GS2U_IdentityEditSign";
name(?U2GS2U_IdentityEditZodiac) -> "U2GS2U_IdentityEditZodiac";
name(?U2GS2U_RequestRoleHeadPic) -> "U2GS2U_RequestRoleHeadPic";
name(?U2GS_Gift_Request) -> "U2GS_Gift_Request";
name(?U2GS_IdentityEditTagAdd_Request) -> "U2GS_IdentityEditTagAdd_Request";
name(?U2GS_IdentityEditTagDel_Request) -> "U2GS_IdentityEditTagDel_Request";
name(?U2GS_IdentityPicDownloadBegin_Request) -> "U2GS_IdentityPicDownloadBegin_Request";
name(?U2GS_IdentityPicDownloadContinue_Request) -> "U2GS_IdentityPicDownloadContinue_Request";
name(?U2GS_IdentityPicUploadBegin_Request) -> "U2GS_IdentityPicUploadBegin_Request";
name(?U2GS_IdentityPicUploadData_Request) -> "U2GS_IdentityPicUploadData_Request";
name(?U2GS_Identity_Request) -> "U2GS_Identity_Request";
name(?U2GS_Report_Request) -> "U2GS_Report_Request";
name(?GS2U_BuyItemQuotaNumber) -> "GS2U_BuyItemQuotaNumber";
name(?GS2U_LookInfoItemListAtMall) -> "GS2U_LookInfoItemListAtMall";
name(?GS2U_LookInfoItemListAtNpcStore) -> "GS2U_LookInfoItemListAtNpcStore";
name(?GS2U_MysteriousShop) -> "GS2U_MysteriousShop";
name(?GS2U_ShowGainGoodsOrCoinsInfo) -> "GS2U_ShowGainGoodsOrCoinsInfo";
name(?GS2U_SingleUseItem) -> "GS2U_SingleUseItem";
name(?GS2U_UseItem) -> "GS2U_UseItem";
name(?GS2U_UseItemExpInDanResult) -> "GS2U_UseItemExpInDanResult";
name(?GS2U_UseItemGainGoodsTips) -> "GS2U_UseItemGainGoodsTips";
name(?GS2U_UseItemResult) -> "GS2U_UseItemResult";
name(?RefindResList) -> "RefindResList";
name(?U2GS_BuyItemAtGuildShopRequest) -> "U2GS_BuyItemAtGuildShopRequest";
name(?U2GS_BuyItemAtMallRequest) -> "U2GS_BuyItemAtMallRequest";
name(?U2GS_BuyItemAtNpcStoreRequest) -> "U2GS_BuyItemAtNpcStoreRequest";
name(?U2GS_BuyItemAtShopIDRequest) -> "U2GS_BuyItemAtShopIDRequest";
name(?U2GS_BuyMysteriousShopItem) -> "U2GS_BuyMysteriousShopItem";
name(?U2GS_ConvenientBuyItem) -> "U2GS_ConvenientBuyItem";
name(?U2GS_FreshMSShop) -> "U2GS_FreshMSShop";
name(?U2GS_LookInfoItemListAtMall) -> "U2GS_LookInfoItemListAtMall";
name(?U2GS_LookInfoItemListAtNpcStore) -> "U2GS_LookInfoItemListAtNpcStore";
name(?U2GS_LookInfoItemListAtShopID) -> "U2GS_LookInfoItemListAtShopID";
name(?U2GS_RefindResAll) -> "U2GS_RefindResAll";
name(?U2GS_RefindResOne) -> "U2GS_RefindResOne";
name(?U2GS_RequestMysteriousShop) -> "U2GS_RequestMysteriousShop";
name(?U2GS_UseStarMoonBox) -> "U2GS_UseStarMoonBox";
name(?GS2U_GainLuckyCoin) -> "GS2U_GainLuckyCoin";
name(?GS2U_GiveLuckyCoinResult) -> "GS2U_GiveLuckyCoinResult";
name(?GS2U_InitGainLuckyCoinInfo) -> "GS2U_InitGainLuckyCoinInfo";
name(?GS2U_LuckyDrawResult) -> "GS2U_LuckyDrawResult";
name(?U2GS_GiveLuckyCoin) -> "U2GS_GiveLuckyCoin";
name(?U2GS_LuckyDraw) -> "U2GS_LuckyDraw";
name(?U2GS_LuckyDrawEnd) -> "U2GS_LuckyDrawEnd";
name(?U2GS_OneKeyGiveLucky) -> "U2GS_OneKeyGiveLucky";
name(?GS2U_DelMailCoin) -> "GS2U_DelMailCoin";
name(?GS2U_DelMailItem) -> "GS2U_DelMailItem";
name(?GS2U_DeleteMail) -> "GS2U_DeleteMail";
name(?GS2U_GetMailItemAll) -> "GS2U_GetMailItemAll";
name(?GS2U_LockMail) -> "GS2U_LockMail";
name(?GS2U_Mail) -> "GS2U_Mail";
name(?GS2U_MailInfo) -> "GS2U_MailInfo";
name(?GS2U_SendMailAck) -> "GS2U_SendMailAck";
name(?GS2U_UnlockMail) -> "GS2U_UnlockMail";
name(?U2GS_DeleteAllReadMail) -> "U2GS_DeleteAllReadMail";
name(?U2GS_DeleteMail) -> "U2GS_DeleteMail";
name(?U2GS_GetDeleteMails) -> "U2GS_GetDeleteMails";
name(?U2GS_GetMailCoin) -> "U2GS_GetMailCoin";
name(?U2GS_GetMailItem) -> "U2GS_GetMailItem";
name(?U2GS_GetMailItemAll) -> "U2GS_GetMailItemAll";
name(?U2GS_LockMail) -> "U2GS_LockMail";
name(?U2GS_ReadMail) -> "U2GS_ReadMail";
name(?U2GS_SendMail) -> "U2GS_SendMail";
name(?U2GS_UnlockMail) -> "U2GS_UnlockMail";
name(?GS2U_FashionConfigInfo) -> "GS2U_FashionConfigInfo";
name(?GS2U_GroupBuyGoodsBuyAck) -> "GS2U_GroupBuyGoodsBuyAck";
name(?GS2U_GroupBuyRewardBuyAck) -> "GS2U_GroupBuyRewardBuyAck";
name(?GS2U_GroupBuyWhenOpen) -> "GS2U_GroupBuyWhenOpen";
name(?GS2U_KoreaNaverConfigInfo) -> "GS2U_KoreaNaverConfigInfo";
name(?GS2U_KoreaNaverRewardGetAck) -> "GS2U_KoreaNaverRewardGetAck";
name(?GS2U_MallBuyResult) -> "GS2U_MallBuyResult";
name(?GS2U_MallBuyResult2) -> "GS2U_MallBuyResult2";
name(?GS2U_MallInfoList) -> "GS2U_MallInfoList";
name(?GS2U_MallInfoList2) -> "GS2U_MallInfoList2";
name(?GS2U_MallPriceList) -> "GS2U_MallPriceList";
name(?GS2U_MallPriceList2) -> "GS2U_MallPriceList2";
name(?U2GS_GroupBuyGoodsBuyRequest) -> "U2GS_GroupBuyGoodsBuyRequest";
name(?U2GS_GroupBuyRewardBuyRequest) -> "U2GS_GroupBuyRewardBuyRequest";
name(?U2GS_GroupBuyWhenOpen) -> "U2GS_GroupBuyWhenOpen";
name(?U2GS_ItemBuyRequest) -> "U2GS_ItemBuyRequest";
name(?U2GS_ItemBuyRequest2) -> "U2GS_ItemBuyRequest2";
name(?U2GS_KoreaNaverRewardGetRequest) -> "U2GS_KoreaNaverRewardGetRequest";
name(?U2GS_MallInfo) -> "U2GS_MallInfo";
name(?U2GS_MallInfo2) -> "U2GS_MallInfo2";
name(?GS2U_AppointmentWeddingResult) -> "GS2U_AppointmentWeddingResult";
name(?GS2U_BuyLuckyBagResult) -> "GS2U_BuyLuckyBagResult";
name(?GS2U_GivegifsResult) -> "GS2U_GivegifsResult";
name(?GS2U_InvitedPersonResult) -> "GS2U_InvitedPersonResult";
name(?GS2U_LoginInitWeddingKetubba) -> "GS2U_LoginInitWeddingKetubba";
name(?GS2U_MarriageBaseInfo_Sync) -> "GS2U_MarriageBaseInfo_Sync";
name(?GS2U_MarriageBreak_Ack) -> "GS2U_MarriageBreak_Ack";
name(?GS2U_MarriageProposeRefresh_Ack) -> "GS2U_MarriageProposeRefresh_Ack";
name(?GS2U_MarriagePropose_Ack) -> "GS2U_MarriagePropose_Ack";
name(?GS2U_MarriagePropose_Ask) -> "GS2U_MarriagePropose_Ask";
name(?GS2U_MarriageRingUpPartner_Sync) -> "GS2U_MarriageRingUpPartner_Sync";
name(?GS2U_MarriageRingUp_Sync) -> "GS2U_MarriageRingUp_Sync";
name(?GS2U_MarriageSkillUp_Ack) -> "GS2U_MarriageSkillUp_Ack";
name(?GS2U_MarriageSkill_Sync) -> "GS2U_MarriageSkill_Sync";
name(?GS2U_MarriageTask_Together_Ask1) -> "GS2U_MarriageTask_Together_Ask1";
name(?GS2U_MarriageTask_Together_Ask2) -> "GS2U_MarriageTask_Together_Ask2";
name(?GS2U_OpenInvitePanelResult) -> "GS2U_OpenInvitePanelResult";
name(?GS2U_OpenketubbaResult) -> "GS2U_OpenketubbaResult";
name(?GS2U_PlayerDeletRoleInWedding) -> "GS2U_PlayerDeletRoleInWedding";
name(?GS2U_PlayerEnterMapSucc) -> "GS2U_PlayerEnterMapSucc";
name(?GS2U_RobWeddingRedResult) -> "GS2U_RobWeddingRedResult";
name(?GS2U_UseNpcInteractiveReuslt) -> "GS2U_UseNpcInteractiveReuslt";
name(?GS2U_WeddingLotteryResult) -> "GS2U_WeddingLotteryResult";
name(?GS2U_WeddingMapPhase) -> "GS2U_WeddingMapPhase";
name(?GS2U_WeddingRedState) -> "GS2U_WeddingRedState";
name(?GS2U_WeddingStartInviteAll) -> "GS2U_WeddingStartInviteAll";
name(?GS2U_receivedInvitationCard) -> "GS2U_receivedInvitationCard";
name(?U2GS_BuyLuckyBag) -> "U2GS_BuyLuckyBag";
name(?U2GS_EnterWeddingMap) -> "U2GS_EnterWeddingMap";
name(?U2GS_Givegifs) -> "U2GS_Givegifs";
name(?U2GS_InvitedPerson) -> "U2GS_InvitedPerson";
name(?U2GS_MarriageAcceptTask_Request) -> "U2GS_MarriageAcceptTask_Request";
name(?U2GS_MarriageBreak_Request) -> "U2GS_MarriageBreak_Request";
name(?U2GS_MarriagePropose_Reply) -> "U2GS_MarriagePropose_Reply";
name(?U2GS_MarriagePropose_Request) -> "U2GS_MarriagePropose_Request";
name(?U2GS_MarriageRingUp_Request) -> "U2GS_MarriageRingUp_Request";
name(?U2GS_MarriageSkillUp_Request) -> "U2GS_MarriageSkillUp_Request";
name(?U2GS_MarriageSubmitTask_Request) -> "U2GS_MarriageSubmitTask_Request";
name(?U2GS_MarriageTask_Together_Reply1) -> "U2GS_MarriageTask_Together_Reply1";
name(?U2GS_MarriageTask_Together_Reply2) -> "U2GS_MarriageTask_Together_Reply2";
name(?U2GS_OpenInvitePanel) -> "U2GS_OpenInvitePanel";
name(?U2GS_Openketubba) -> "U2GS_Openketubba";
name(?U2GS_RobWeddingRed) -> "U2GS_RobWeddingRed";
name(?U2GS_UseNpcInteractive) -> "U2GS_UseNpcInteractive";
name(?U2GS_WeddingLottery) -> "U2GS_WeddingLottery";
name(?U2GS_appointmentWedding) -> "U2GS_appointmentWedding";
name(?GS2U_LookMountInfo) -> "GS2U_LookMountInfo";
name(?GS2U_MountAck) -> "GS2U_MountAck";
name(?GS2U_MountShapeList) -> "GS2U_MountShapeList";
name(?GS2U_NewMountShape) -> "GS2U_NewMountShape";
name(?MountShapeShift) -> "MountShapeShift";
name(?U2GS_FeedMount) -> "U2GS_FeedMount";
name(?U2GS_OffMount) -> "U2GS_OffMount";
name(?U2GS_OnMount) -> "U2GS_OnMount";
name(?GS2U_NpcMomentMove) -> "GS2U_NpcMomentMove";
name(?GS2U_NpcTitleChange) -> "GS2U_NpcTitleChange";
name(?GS2U_RequestRiftNpcInfo) -> "GS2U_RequestRiftNpcInfo";
name(?U2GS_RequestEnterRift) -> "U2GS_RequestEnterRift";
name(?U2GS_RequestRiftNpcInfo) -> "U2GS_RequestRiftNpcInfo";
name(?GS2U_AckRewardLevel) -> "GS2U_AckRewardLevel";
name(?GS2U_AckStandSort) -> "GS2U_AckStandSort";
name(?GS2U_AddTempPet) -> "GS2U_AddTempPet";
name(?GS2U_BuyPowerInfo) -> "GS2U_BuyPowerInfo";
name(?GS2U_DeletePet) -> "GS2U_DeletePet";
name(?GS2U_DoublePetMountInvite) -> "GS2U_DoublePetMountInvite";
name(?GS2U_FindTerritoryFailed_Ack) -> "GS2U_FindTerritoryFailed_Ack";
name(?GS2U_FindTerritory_Ack) -> "GS2U_FindTerritory_Ack";
name(?GS2U_OffMountPetAck) -> "GS2U_OffMountPetAck";
name(?GS2U_OnMountPetAck) -> "GS2U_OnMountPetAck";
name(?GS2U_PVEBattleResult) -> "GS2U_PVEBattleResult";
name(?GS2U_PetAddAttaRes) -> "GS2U_PetAddAttaRes";
name(?GS2U_PetAssistInit) -> "GS2U_PetAssistInit";
name(?GS2U_PetAssistUpdateSlot) -> "GS2U_PetAssistUpdateSlot";
name(?GS2U_PetAttaSaveRes) -> "GS2U_PetAttaSaveRes";
name(?GS2U_PetBaseInfo) -> "GS2U_PetBaseInfo";
name(?GS2U_PetEquipInfoList) -> "GS2U_PetEquipInfoList";
name(?GS2U_PetFairyInfo) -> "GS2U_PetFairyInfo";
name(?GS2U_PetInfoList) -> "GS2U_PetInfoList";
name(?GS2U_PetLevelUp) -> "GS2U_PetLevelUp";
name(?GS2U_PetPveSweepAck) -> "GS2U_PetPveSweepAck";
name(?GS2U_PetReName) -> "GS2U_PetReName";
name(?GS2U_PetSkillCastResult) -> "GS2U_PetSkillCastResult";
name(?GS2U_PetSleep) -> "GS2U_PetSleep";
name(?GS2U_PetStrAck) -> "GS2U_PetStrAck";
name(?GS2U_PvpBattleInfoRes) -> "GS2U_PvpBattleInfoRes";
name(?GS2U_PvpBattleReportTip) -> "GS2U_PvpBattleReportTip";
name(?GS2U_PvpBattleResult) -> "GS2U_PvpBattleResult";
name(?GS2U_PvpBattleUpdateReport) -> "GS2U_PvpBattleUpdateReport";
name(?GS2U_PvpPosSaveAck) -> "GS2U_PvpPosSaveAck";
name(?GS2U_QueryTerritoryHistory_Ack) -> "GS2U_QueryTerritoryHistory_Ack";
name(?GS2U_QueryTerritoryInfo_Ack) -> "GS2U_QueryTerritoryInfo_Ack";
name(?GS2U_RawPetResult) -> "GS2U_RawPetResult";
name(?GS2U_ResetPetAck) -> "GS2U_ResetPetAck";
name(?GS2U_TerritoryBattle_Tick_Sync) -> "GS2U_TerritoryBattle_Tick_Sync";
name(?GS2U_TerritoryExploitEnd_Sync) -> "GS2U_TerritoryExploitEnd_Sync";
name(?GS2U_TerritoryExploit_Ack) -> "GS2U_TerritoryExploit_Ack";
name(?GS2U_TerritoryPlunder_Ack) -> "GS2U_TerritoryPlunder_Ack";
name(?GS2U_TerritoryVigor_Ack) -> "GS2U_TerritoryVigor_Ack";
name(?GS2U_UpStartPetResult) -> "GS2U_UpStartPetResult";
name(?GS2U_UpdateCatalogList) -> "GS2U_UpdateCatalogList";
name(?GS2U_UpdatePetSkill) -> "GS2U_UpdatePetSkill";
name(?GS2U_UpdatePetStatus) -> "GS2U_UpdatePetStatus";
name(?GS2U_UpdatePower) -> "GS2U_UpdatePower";
name(?GS2U_UpdateReel) -> "GS2U_UpdateReel";
name(?GS2U_UsePetSkillBook) -> "GS2U_UsePetSkillBook";
name(?PetReName) -> "PetReName";
name(?PetSkillReplace) -> "PetSkillReplace";
name(?PetSwitch) -> "PetSwitch";
name(?U2GS_BuyPower) -> "U2GS_BuyPower";
name(?U2GS_BuyReel) -> "U2GS_BuyReel";
name(?U2GS_DoublePetMountInvite) -> "U2GS_DoublePetMountInvite";
name(?U2GS_DoublePetMountInviteAck) -> "U2GS_DoublePetMountInviteAck";
name(?U2GS_FindTerritory_Request) -> "U2GS_FindTerritory_Request";
name(?U2GS_HideMountPet) -> "U2GS_HideMountPet";
name(?U2GS_OffMountPet) -> "U2GS_OffMountPet";
name(?U2GS_OnMountPet) -> "U2GS_OnMountPet";
name(?U2GS_PetAddAtta) -> "U2GS_PetAddAtta";
name(?U2GS_PetAssistBattle) -> "U2GS_PetAssistBattle";
name(?U2GS_PetAttaSave) -> "U2GS_PetAttaSave";
name(?U2GS_PetDisapear) -> "U2GS_PetDisapear";
name(?U2GS_PetLevelUp) -> "U2GS_PetLevelUp";
name(?U2GS_PetPveSweep) -> "U2GS_PetPveSweep";
name(?U2GS_PetSkillCast) -> "U2GS_PetSkillCast";
name(?U2GS_PetSkillOperate) -> "U2GS_PetSkillOperate";
name(?U2GS_PetStr) -> "U2GS_PetStr";
name(?U2GS_PvpBattleInfo) -> "U2GS_PvpBattleInfo";
name(?U2GS_PvpPosSave) -> "U2GS_PvpPosSave";
name(?U2GS_QueryPetFairyInfo) -> "U2GS_QueryPetFairyInfo";
name(?U2GS_QueryTerritoryHistory_Request) -> "U2GS_QueryTerritoryHistory_Request";
name(?U2GS_QueryTerritoryInfo_Request) -> "U2GS_QueryTerritoryInfo_Request";
name(?U2GS_RawPet) -> "U2GS_RawPet";
name(?U2GS_RequestBattle) -> "U2GS_RequestBattle";
name(?U2GS_RequestPvpBattle) -> "U2GS_RequestPvpBattle";
name(?U2GS_RequstReward) -> "U2GS_RequstReward";
name(?U2GS_ResetPet) -> "U2GS_ResetPet";
name(?U2GS_ShowMountPet) -> "U2GS_ShowMountPet";
name(?U2GS_StandSort) -> "U2GS_StandSort";
name(?U2GS_TerritoryExploit_Request) -> "U2GS_TerritoryExploit_Request";
name(?U2GS_TerritoryPlunder_Request) -> "U2GS_TerritoryPlunder_Request";
name(?U2GS_TerritoryVigor_Request) -> "U2GS_TerritoryVigor_Request";
name(?U2GS_UpStartPet) -> "U2GS_UpStartPet";
name(?U2GS_UsePetSkillBook) -> "U2GS_UsePetSkillBook";
name(?Any_ChangeMap) -> "Any_ChangeMap";
name(?Any_PlayerLogout) -> "Any_PlayerLogout";
name(?C2S_ChangeMap) -> "C2S_ChangeMap";
name(?GS2S_UseTheAwakeBuffRet) -> "GS2S_UseTheAwakeBuffRet";
name(?GS2U_AcceptHolidayTaskSucc) -> "GS2U_AcceptHolidayTaskSucc";
name(?GS2U_AliveApply_Ack) -> "GS2U_AliveApply_Ack";
name(?GS2U_AliveCancel_Ack) -> "GS2U_AliveCancel_Ack";
name(?GS2U_AliveCarrier_Sync) -> "GS2U_AliveCarrier_Sync";
name(?GS2U_AliveEnterSafeArea_Ack) -> "GS2U_AliveEnterSafeArea_Ack";
name(?GS2U_AliveMapState_Sync) -> "GS2U_AliveMapState_Sync";
name(?GS2U_AliveRolePos_Sync) -> "GS2U_AliveRolePos_Sync";
name(?GS2U_AliveRole_Sync) -> "GS2U_AliveRole_Sync";
name(?GS2U_AllBattleProp) -> "GS2U_AllBattleProp";
name(?GS2U_BattlePropList) -> "GS2U_BattlePropList";
name(?GS2U_BeReportNum) -> "GS2U_BeReportNum";
name(?GS2U_BlockStatusChange) -> "GS2U_BlockStatusChange";
name(?GS2U_BroadcastDisapear) -> "GS2U_BroadcastDisapear";
name(?GS2U_BroadcastDisapearFast) -> "GS2U_BroadcastDisapearFast";
name(?GS2U_BroadcastPlayerHpPC) -> "GS2U_BroadcastPlayerHpPC";
name(?GS2U_BroadcastPlayerRevive) -> "GS2U_BroadcastPlayerRevive";
name(?GS2U_BroadcastTeamRevive) -> "GS2U_BroadcastTeamRevive";
name(?GS2U_BroadcastVisibleEquipOff) -> "GS2U_BroadcastVisibleEquipOff";
name(?GS2U_BroadcastVisibleEquipOn) -> "GS2U_BroadcastVisibleEquipOn";
name(?GS2U_BusinessCashDailyGift_Ack) -> "GS2U_BusinessCashDailyGift_Ack";
name(?GS2U_BusinessSupperGift_Ack) -> "GS2U_BusinessSupperGift_Ack";
name(?GS2U_BuyLimitedResult) -> "GS2U_BuyLimitedResult";
name(?GS2U_ChangeCamp) -> "GS2U_ChangeCamp";
name(?GS2U_ChangeCarrer) -> "GS2U_ChangeCarrer";
name(?GS2U_ChangeNameResult) -> "GS2U_ChangeNameResult";
name(?GS2U_ChatErrorResult) -> "GS2U_ChatErrorResult";
name(?GS2U_Chatinfo) -> "GS2U_Chatinfo";
name(?GS2U_ClearFightObject) -> "GS2U_ClearFightObject";
name(?GS2U_CopyMapProcess) -> "GS2U_CopyMapProcess";
name(?GS2U_CopyMapProcessCurrentScheduleStatus) -> "GS2U_CopyMapProcessCurrentScheduleStatus";
name(?GS2U_CopyMapProcessCurrentScheduleSurplusSecond) -> "GS2U_CopyMapProcessCurrentScheduleSurplusSecond";
name(?GS2U_CopyMapResult) -> "GS2U_CopyMapResult";
name(?GS2U_CopyMapStatHurtList) -> "GS2U_CopyMapStatHurtList";
name(?GS2U_CopymapFailed) -> "GS2U_CopymapFailed";
name(?GS2U_CreatePlayerResult) -> "GS2U_CreatePlayerResult";
name(?GS2U_CrossNewPlayerCode) -> "GS2U_CrossNewPlayerCode";
name(?GS2U_CrossStep) -> "GS2U_CrossStep";
name(?GS2U_DashTo) -> "GS2U_DashTo";
name(?GS2U_DeletePlayerResult) -> "GS2U_DeletePlayerResult";
name(?GS2U_EnterMapFailed) -> "GS2U_EnterMapFailed";
name(?GS2U_Error) -> "GS2U_Error";
name(?GS2U_EveryDayGetPower_Sync) -> "GS2U_EveryDayGetPower_Sync";
name(?GS2U_GetRewardUpdateResource) -> "GS2U_GetRewardUpdateResource";
name(?GS2U_GiveGiftEfects) -> "GS2U_GiveGiftEfects";
name(?GS2U_HateInfo) -> "GS2U_HateInfo";
name(?GS2U_HaveIconAndActionList) -> "GS2U_HaveIconAndActionList";
name(?GS2U_HeartBeatAck) -> "GS2U_HeartBeatAck";
name(?GS2U_HisoryForce_Ack) -> "GS2U_HisoryForce_Ack";
name(?GS2U_InvateEnterCopyMap) -> "GS2U_InvateEnterCopyMap";
name(?GS2U_KickOutTip) -> "GS2U_KickOutTip";
name(?GS2U_KillPlayerResponse) -> "GS2U_KillPlayerResponse";
name(?GS2U_KillValueResponse) -> "GS2U_KillValueResponse";
name(?GS2U_LBS_BesideRole_Ack) -> "GS2U_LBS_BesideRole_Ack";
name(?GS2U_LoginResult) -> "GS2U_LoginResult";
name(?GS2U_LookInfoPlayer) -> "GS2U_LookInfoPlayer";
name(?GS2U_LotteryForTowerBeginTimeEndTime) -> "GS2U_LotteryForTowerBeginTimeEndTime";
name(?GS2U_LotteryForTowerInfo) -> "GS2U_LotteryForTowerInfo";
name(?GS2U_LotteryForTowerRandonAward) -> "GS2U_LotteryForTowerRandonAward";
name(?GS2U_MapLevel) -> "GS2U_MapLevel";
name(?GS2U_MapLineList) -> "GS2U_MapLineList";
name(?GS2U_MaterialCopyMapResult) -> "GS2U_MaterialCopyMapResult";
name(?GS2U_MissionObjectList) -> "GS2U_MissionObjectList";
name(?GS2U_MoneyChanges) -> "GS2U_MoneyChanges";
name(?GS2U_MoneyDungeonCopyMapResult) -> "GS2U_MoneyDungeonCopyMapResult";
name(?GS2U_MoneyTreeAck) -> "GS2U_MoneyTreeAck";
name(?GS2U_MoneyTreeBox) -> "GS2U_MoneyTreeBox";
name(?GS2U_MonsterBookEnterNewMap_Sync) -> "GS2U_MonsterBookEnterNewMap_Sync";
name(?GS2U_MonsterBookNeed_Sync) -> "GS2U_MonsterBookNeed_Sync";
name(?GS2U_MonsterBookReward_Ack) -> "GS2U_MonsterBookReward_Ack";
name(?GS2U_MonsterBookSnap_Ack) -> "GS2U_MonsterBookSnap_Ack";
name(?GS2U_MonsterBookUnlock_Ack) -> "GS2U_MonsterBookUnlock_Ack";
name(?GS2U_MonsterBook_Ack) -> "GS2U_MonsterBook_Ack";
name(?GS2U_MonsterList) -> "GS2U_MonsterList";
name(?GS2U_MonthCardEndTips) -> "GS2U_MonthCardEndTips";
name(?GS2U_MoveInfo) -> "GS2U_MoveInfo";
name(?GS2U_MsgBoxTips) -> "GS2U_MsgBoxTips";
name(?GS2U_NoticeAdd) -> "GS2U_NoticeAdd";
name(?GS2U_NoticeDel) -> "GS2U_NoticeDel";
name(?GS2U_NoticeResponse) -> "GS2U_NoticeResponse";
name(?GS2U_NpcList) -> "GS2U_NpcList";
name(?GS2U_NpcStatusChange) -> "GS2U_NpcStatusChange";
name(?GS2U_ObjBrief) -> "GS2U_ObjBrief";
name(?GS2U_PetList) -> "GS2U_PetList";
name(?GS2U_PetLvlChange) -> "GS2U_PetLvlChange";
name(?GS2U_PetRawLvlChange) -> "GS2U_PetRawLvlChange";
name(?GS2U_PlayerAddExp) -> "GS2U_PlayerAddExp";
name(?GS2U_PlayerAwakenInfo) -> "GS2U_PlayerAwakenInfo";
name(?GS2U_PlayerBaseInfo) -> "GS2U_PlayerBaseInfo";
name(?GS2U_PlayerBlood) -> "GS2U_PlayerBlood";
name(?GS2U_PlayerChangedWealth) -> "GS2U_PlayerChangedWealth";
name(?GS2U_PlayerCour) -> "GS2U_PlayerCour";
name(?GS2U_PlayerDead) -> "GS2U_PlayerDead";
name(?GS2U_PlayerHp) -> "GS2U_PlayerHp";
name(?GS2U_PlayerInitEnd) -> "GS2U_PlayerInitEnd";
name(?GS2U_PlayerLevelUp) -> "GS2U_PlayerLevelUp";
name(?GS2U_PlayerPhys) -> "GS2U_PlayerPhys";
name(?GS2U_PlayerRevive) -> "GS2U_PlayerRevive";
name(?GS2U_PlayerSp) -> "GS2U_PlayerSp";
name(?GS2U_PlotDialogue) -> "GS2U_PlotDialogue";
name(?GS2U_PropSync) -> "GS2U_PropSync";
name(?GS2U_PushInfo) -> "GS2U_PushInfo";
name(?GS2U_RaceApplyInfo_Sync) -> "GS2U_RaceApplyInfo_Sync";
name(?GS2U_RaceApplyState) -> "GS2U_RaceApplyState";
name(?GS2U_RaceApply_Ack) -> "GS2U_RaceApply_Ack";
name(?GS2U_RaceCancel_Ack) -> "GS2U_RaceCancel_Ack";
name(?GS2U_RaceInit) -> "GS2U_RaceInit";
name(?GS2U_RaceInviteList) -> "GS2U_RaceInviteList";
name(?GS2U_RaceInvite_S2B) -> "GS2U_RaceInvite_S2B";
name(?GS2U_RaceMapGiveUp_Sync) -> "GS2U_RaceMapGiveUp_Sync";
name(?GS2U_RaceMapItem_Sync) -> "GS2U_RaceMapItem_Sync";
name(?GS2U_RaceMapMilestone_Sync) -> "GS2U_RaceMapMilestone_Sync";
name(?GS2U_RaceMapState_Sync) -> "GS2U_RaceMapState_Sync";
name(?GS2U_RaceSeletPet) -> "GS2U_RaceSeletPet";
name(?GS2U_RaceType_Sync) -> "GS2U_RaceType_Sync";
name(?GS2U_ReceivePlayerLevelRewardResult) -> "GS2U_ReceivePlayerLevelRewardResult";
name(?GS2U_ReconnectLoginRequestFail) -> "GS2U_ReconnectLoginRequestFail";
name(?GS2U_RequestAutoDealAck) -> "GS2U_RequestAutoDealAck";
name(?GS2U_RequestGoddessCodeAck) -> "GS2U_RequestGoddessCodeAck";
name(?GS2U_RequestOneKeyDealAck) -> "GS2U_RequestOneKeyDealAck";
name(?GS2U_RequestRechargeAck) -> "GS2U_RequestRechargeAck";
name(?GS2U_RequestRechargeHasGiftIDListAck) -> "GS2U_RequestRechargeHasGiftIDListAck";
name(?GS2U_RequestTargetCopyMapScore) -> "GS2U_RequestTargetCopyMapScore";
name(?GS2U_ResetCopyMap) -> "GS2U_ResetCopyMap";
name(?GS2U_RespChatVoice) -> "GS2U_RespChatVoice";
name(?GS2U_RespChatVoiceError) -> "GS2U_RespChatVoiceError";
name(?GS2U_RoleAwakeInof) -> "GS2U_RoleAwakeInof";
name(?GS2U_RoleAwakeingRet) -> "GS2U_RoleAwakeingRet";
name(?GS2U_SelPlayerResult) -> "GS2U_SelPlayerResult";
name(?GS2U_SendGiftNotice) -> "GS2U_SendGiftNotice";
name(?GS2U_SendPlayerDailyCountList) -> "GS2U_SendPlayerDailyCountList";
name(?GS2U_SendServerType) -> "GS2U_SendServerType";
name(?GS2U_SessionKey) -> "GS2U_SessionKey";
name(?GS2U_SetUpAnchor) -> "GS2U_SetUpAnchor";
name(?GS2U_SevenDayAimReward_Ack) -> "GS2U_SevenDayAimReward_Ack";
name(?GS2U_SevenDayAimState_Sync) -> "GS2U_SevenDayAimState_Sync";
name(?GS2U_SevenDayAimUpdate_Sync) -> "GS2U_SevenDayAimUpdate_Sync";
name(?GS2U_ShiftTo) -> "GS2U_ShiftTo";
name(?GS2U_ShowAction) -> "GS2U_ShowAction";
name(?GS2U_SpecificEvent_Sync) -> "GS2U_SpecificEvent_Sync";
name(?GS2U_StopMove) -> "GS2U_StopMove";
name(?GS2U_StopTheAwakeBuffRet) -> "GS2U_StopTheAwakeBuffRet";
name(?GS2U_SyncServerTime) -> "GS2U_SyncServerTime";
name(?GS2U_TaskUseItemList) -> "GS2U_TaskUseItemList";
name(?GS2U_TheAwakeBuffInfo) -> "GS2U_TheAwakeBuffInfo";
name(?GS2U_ThirtyDayLoginGiftState_Sync) -> "GS2U_ThirtyDayLoginGiftState_Sync";
name(?GS2U_ThirtyDayLoginGift_Ack) -> "GS2U_ThirtyDayLoginGift_Ack";
name(?GS2U_TipsError) -> "GS2U_TipsError";
name(?GS2U_TipsString) -> "GS2U_TipsString";
name(?GS2U_TransferNewPos) -> "GS2U_TransferNewPos";
name(?GS2U_UserPlayerList) -> "GS2U_UserPlayerList";
name(?GS2U_WingRise) -> "GS2U_WingRise";
name(?GS2U_WorldBossBuyBuff) -> "GS2U_WorldBossBuyBuff";
name(?GS2U_XmlNoticeResponse) -> "GS2U_XmlNoticeResponse";
name(?GS2U_action_point_info) -> "GS2U_action_point_info";
name(?GS2U_copy_map_destory_time) -> "GS2U_copy_map_destory_time";
name(?GS2U_lottery_award_items) -> "GS2U_lottery_award_items";
name(?GS2U_lottery_sys_info) -> "GS2U_lottery_sys_info";
name(?GS2U_lsbattlefield_award_list) -> "GS2U_lsbattlefield_award_list";
name(?GS2U_lsbattlefield_rank_list) -> "GS2U_lsbattlefield_rank_list";
name(?GS2U_monsterChange) -> "GS2U_monsterChange";
name(?GS2U_returnFriendPos) -> "GS2U_returnFriendPos";
name(?GS2U_synch_lsbattlefield_state) -> "GS2U_synch_lsbattlefield_state";
name(?GetPlayerOnlineReward) -> "GetPlayerOnlineReward";
name(?PlayerLevelReward) -> "PlayerLevelReward";
name(?U2GS2U_RaceAutoMatch) -> "U2GS2U_RaceAutoMatch";
name(?U2GS_AcceptHolidayTask) -> "U2GS_AcceptHolidayTask";
name(?U2GS_ActiveCodeRequest) -> "U2GS_ActiveCodeRequest";
name(?U2GS_AliveApply_Request) -> "U2GS_AliveApply_Request";
name(?U2GS_AliveCancel_Request) -> "U2GS_AliveCancel_Request";
name(?U2GS_AliveEnterSafeArea_Request) -> "U2GS_AliveEnterSafeArea_Request";
name(?U2GS_BusinessCashDailyGift_Request) -> "U2GS_BusinessCashDailyGift_Request";
name(?U2GS_BusinessSupperGift_Request) -> "U2GS_BusinessSupperGift_Request";
name(?U2GS_Buy4System) -> "U2GS_Buy4System";
name(?U2GS_BuyLimitSales) -> "U2GS_BuyLimitSales";
name(?U2GS_ChangeCarrer) -> "U2GS_ChangeCarrer";
name(?U2GS_ChangeLineLoginRequest) -> "U2GS_ChangeLineLoginRequest";
name(?U2GS_ChangeLineRequest) -> "U2GS_ChangeLineRequest";
name(?U2GS_ChangeLineRequestAck) -> "U2GS_ChangeLineRequestAck";
name(?U2GS_ChangeName) -> "U2GS_ChangeName";
name(?U2GS_ChangeWingLevel) -> "U2GS_ChangeWingLevel";
name(?U2GS_ChatInfo) -> "U2GS_ChatInfo";
name(?U2GS_ChatVoice) -> "U2GS_ChatVoice";
name(?U2GS_CommonditiesPush) -> "U2GS_CommonditiesPush";
name(?U2GS_CopyChat) -> "U2GS_CopyChat";
name(?U2GS_DashTo) -> "U2GS_DashTo";
name(?U2GS_DigTransferMap) -> "U2GS_DigTransferMap";
name(?U2GS_EnterActiveMap) -> "U2GS_EnterActiveMap";
name(?U2GS_EnterCopyMap) -> "U2GS_EnterCopyMap";
name(?U2GS_EnteredMap) -> "U2GS_EnteredMap";
name(?U2GS_EqupmentCombin) -> "U2GS_EqupmentCombin";
name(?U2GS_EveryDayGetPower) -> "U2GS_EveryDayGetPower";
name(?U2GS_ExpToVigour) -> "U2GS_ExpToVigour";
name(?U2GS_GetLeavedExp) -> "U2GS_GetLeavedExp";
name(?U2GS_GetMapLevel) -> "U2GS_GetMapLevel";
name(?U2GS_GetQuestionnaireSurveyAward) -> "U2GS_GetQuestionnaireSurveyAward";
name(?U2GS_GetUpdateReward) -> "U2GS_GetUpdateReward";
name(?U2GS_GetVipReward) -> "U2GS_GetVipReward";
name(?U2GS_GoToExpMap) -> "U2GS_GoToExpMap";
name(?U2GS_HeartBeat) -> "U2GS_HeartBeat";
name(?U2GS_HeartBeatReal) -> "U2GS_HeartBeatReal";
name(?U2GS_HisoryForce_Request) -> "U2GS_HisoryForce_Request";
name(?U2GS_Join_lsbattlefield) -> "U2GS_Join_lsbattlefield";
name(?U2GS_KillValueRequest) -> "U2GS_KillValueRequest";
name(?U2GS_LBS_BesideRole_Request) -> "U2GS_LBS_BesideRole_Request";
name(?U2GS_LBS_Request) -> "U2GS_LBS_Request";
name(?U2GS_LeaveCopyMap) -> "U2GS_LeaveCopyMap";
name(?U2GS_LoadedMap) -> "U2GS_LoadedMap";
name(?U2GS_LotteryForTowerInfo) -> "U2GS_LotteryForTowerInfo";
name(?U2GS_LotteryForTowerRandonAward) -> "U2GS_LotteryForTowerRandonAward";
name(?U2GS_MoneyTree) -> "U2GS_MoneyTree";
name(?U2GS_MonsterBookReward_Request) -> "U2GS_MonsterBookReward_Request";
name(?U2GS_MonsterBookSnap_Request) -> "U2GS_MonsterBookSnap_Request";
name(?U2GS_MonsterBookUnlock_Request) -> "U2GS_MonsterBookUnlock_Request";
name(?U2GS_MonsterBook_Request) -> "U2GS_MonsterBook_Request";
name(?U2GS_MonthCardGettingEvent) -> "U2GS_MonthCardGettingEvent";
name(?U2GS_MoveTo) -> "U2GS_MoveTo";
name(?U2GS_NoticeRequest) -> "U2GS_NoticeRequest";
name(?U2GS_PlayerAwakenUseItem) -> "U2GS_PlayerAwakenUseItem";
name(?U2GS_PlayerCoupleBack) -> "U2GS_PlayerCoupleBack";
name(?U2GS_PlotDialogueEnd) -> "U2GS_PlotDialogueEnd";
name(?U2GS_QueryTargetObject) -> "U2GS_QueryTargetObject";
name(?U2GS_RaceApply) -> "U2GS_RaceApply";
name(?U2GS_RaceApply_Request) -> "U2GS_RaceApply_Request";
name(?U2GS_RaceCancel) -> "U2GS_RaceCancel";
name(?U2GS_RaceCancel_Request) -> "U2GS_RaceCancel_Request";
name(?U2GS_RaceInviteList) -> "U2GS_RaceInviteList";
name(?U2GS_RaceInvite_A2S) -> "U2GS_RaceInvite_A2S";
name(?U2GS_RaceInvite_B2S) -> "U2GS_RaceInvite_B2S";
name(?U2GS_RaceMapItem_Request) -> "U2GS_RaceMapItem_Request";
name(?U2GS_RaceSelectPet) -> "U2GS_RaceSelectPet";
name(?U2GS_RecClientEvent) -> "U2GS_RecClientEvent";
name(?U2GS_ReceivePlayerLevelReward) -> "U2GS_ReceivePlayerLevelReward";
name(?U2GS_RechargeGettingEvent) -> "U2GS_RechargeGettingEvent";
name(?U2GS_ReconnectLoginRequest) -> "U2GS_ReconnectLoginRequest";
name(?U2GS_RenewChangeCarrer) -> "U2GS_RenewChangeCarrer";
name(?U2GS_ReqChatVoice) -> "U2GS_ReqChatVoice";
name(?U2GS_RequestCreatePlayer) -> "U2GS_RequestCreatePlayer";
name(?U2GS_RequestDeletePlayer) -> "U2GS_RequestDeletePlayer";
name(?U2GS_RequestEnterMapLine) -> "U2GS_RequestEnterMapLine";
name(?U2GS_RequestGoddessCode) -> "U2GS_RequestGoddessCode";
name(?U2GS_RequestLogin) -> "U2GS_RequestLogin";
name(?U2GS_RequestMapLineList) -> "U2GS_RequestMapLineList";
name(?U2GS_RequestObjInfo) -> "U2GS_RequestObjInfo";
name(?U2GS_RequestRecharge) -> "U2GS_RequestRecharge";
name(?U2GS_RequestRechargeHasGiftIDList) -> "U2GS_RequestRechargeHasGiftIDList";
name(?U2GS_RequestRevive) -> "U2GS_RequestRevive";
name(?U2GS_RequestTargetCopyMapScore) -> "U2GS_RequestTargetCopyMapScore";
name(?U2GS_ResetCopyMap) -> "U2GS_ResetCopyMap";
name(?U2GS_ResetPosToRevivePt) -> "U2GS_ResetPosToRevivePt";
name(?U2GS_ResetRoleAwake) -> "U2GS_ResetRoleAwake";
name(?U2GS_RoleAwakeing) -> "U2GS_RoleAwakeing";
name(?U2GS_SelPlayerEnterGame) -> "U2GS_SelPlayerEnterGame";
name(?U2GS_SelectTarget) -> "U2GS_SelectTarget";
name(?U2GS_SessionKeyAck) -> "U2GS_SessionKeyAck";
name(?U2GS_SevenDayAimReward_Request) -> "U2GS_SevenDayAimReward_Request";
name(?U2GS_ShowAction) -> "U2GS_ShowAction";
name(?U2GS_ShowHeadEmoticonIcon) -> "U2GS_ShowHeadEmoticonIcon";
name(?U2GS_StartMeditation) -> "U2GS_StartMeditation";
name(?U2GS_StopMove) -> "U2GS_StopMove";
name(?U2GS_StopTheAwakeBuff) -> "U2GS_StopTheAwakeBuff";
name(?U2GS_Telesport) -> "U2GS_Telesport";
name(?U2GS_ThirtyDayLoginGift_Request) -> "U2GS_ThirtyDayLoginGift_Request";
name(?U2GS_Transfer2NewPos) -> "U2GS_Transfer2NewPos";
name(?U2GS_TransferMap) -> "U2GS_TransferMap";
name(?U2GS_UseTheAwakeBuff) -> "U2GS_UseTheAwakeBuff";
name(?U2GS_WingRise) -> "U2GS_WingRise";
name(?U2GS_WingRiseOneTouch) -> "U2GS_WingRiseOneTouch";
name(?U2GS_XmlNoticeRequest) -> "U2GS_XmlNoticeRequest";
name(?U2GS_buy_action_count) -> "U2GS_buy_action_count";
name(?U2GS_buy_action_point) -> "U2GS_buy_action_point";
name(?U2GS_getFriendPos) -> "U2GS_getFriendPos";
name(?U2GS_get_action_point_info) -> "U2GS_get_action_point_info";
name(?U2GS_get_copy_map_destory_time) -> "U2GS_get_copy_map_destory_time";
name(?U2GS_get_lottery_sys_info) -> "U2GS_get_lottery_sys_info";
name(?U2GS_lottery_start) -> "U2GS_lottery_start";
name(?U2GS_save_current_guide_id) -> "U2GS_save_current_guide_id";
name(?GS2U_GetPlayerInitDataEnd) -> "GS2U_GetPlayerInitDataEnd";
name(?GS2U_GotoNewMap) -> "GS2U_GotoNewMap";
name(?GS2U_HearBeat) -> "GS2U_HearBeat";
name(?GS2U_KickByServer) -> "GS2U_KickByServer";
name(?GS2U_PlayerInitBase) -> "GS2U_PlayerInitBase";
name(?GS2U_RemoteMonster) -> "GS2U_RemoteMonster";
name(?GS2U_RemoteNpc) -> "GS2U_RemoteNpc";
name(?GS2U_RemotePet) -> "GS2U_RemotePet";
name(?GS2U_RemotePlayer) -> "GS2U_RemotePlayer";
name(?GS2U_RemoveRemote) -> "GS2U_RemoveRemote";
name(?GS2U_SyncStand) -> "GS2U_SyncStand";
name(?GS2U_SyncWalk) -> "GS2U_SyncWalk";
name(?U2GS_ChangeMap) -> "U2GS_ChangeMap";
name(?U2GS_ExitGame) -> "U2GS_ExitGame";
name(?U2GS_GetPlayerInitData) -> "U2GS_GetPlayerInitData";
name(?U2GS_GetRemoteObjInfo) -> "U2GS_GetRemoteObjInfo";
name(?U2GS_HearBeat) -> "U2GS_HearBeat";
name(?U2GS_PlayerStopWalk) -> "U2GS_PlayerStopWalk";
name(?U2GS_PlayerWalk) -> "U2GS_PlayerWalk";
name(?GS2U_ActivityMapRankData) -> "GS2U_ActivityMapRankData";
name(?GS2U_MyKillNumber) -> "GS2U_MyKillNumber";
name(?GS2U_MyRankingAndDamage) -> "GS2U_MyRankingAndDamage";
name(?GS2U_RefreshRank) -> "GS2U_RefreshRank";
name(?GS2U_SendCharmRankFirstData) -> "GS2U_SendCharmRankFirstData";
name(?GS2U_SendPropList) -> "GS2U_SendPropList";
name(?GS2U_SendRank) -> "GS2U_SendRank";
name(?GS2U_SendRankModelData) -> "GS2U_SendRankModelData";
name(?U2GS_RequestActivityMapRank) -> "U2GS_RequestActivityMapRank";
name(?U2GS_RequestPropList) -> "U2GS_RequestPropList";
name(?U2GS_RequestRank) -> "U2GS_RequestRank";
name(?U2GS_RequestRankAward) -> "U2GS_RequestRankAward";
name(?GS2U_RedEnvelopeHistoryAck) -> "GS2U_RedEnvelopeHistoryAck";
name(?GS2U_RedEnvelopeInfoAck) -> "GS2U_RedEnvelopeInfoAck";
name(?GS2U_RedEnvelopeQuery) -> "GS2U_RedEnvelopeQuery";
name(?GS2U_RobRedEnvelopeAck) -> "GS2U_RobRedEnvelopeAck";
name(?U2GS_GiveUpRedEnvelope) -> "U2GS_GiveUpRedEnvelope";
name(?U2GS_RedEnvelopeHistory) -> "U2GS_RedEnvelopeHistory";
name(?U2GS_RedEnvelopeInfo) -> "U2GS_RedEnvelopeInfo";
name(?U2GS_RedEnvelopeQuery) -> "U2GS_RedEnvelopeQuery";
name(?U2GS_RobRedEnvelope) -> "U2GS_RobRedEnvelope";
name(?U2GS_SendRedEnvelope) -> "U2GS_SendRedEnvelope";
name(?DeleteRide) -> "DeleteRide";
name(?RequestDownRide) -> "RequestDownRide";
name(?RequestRecycle) -> "RequestRecycle";
name(?RequestUpRide) -> "RequestUpRide";
name(?RequestUse) -> "RequestUse";
name(?SyncPlayerInfo) -> "SyncPlayerInfo";
name(?SyncRideInfo) -> "SyncRideInfo";
name(?SyncRideItem) -> "SyncRideItem";
name(?DeleteRunes) -> "DeleteRunes";
name(?GS2U_QueryRuneTipsAck) -> "GS2U_QueryRuneTipsAck";
name(?GS2U_RPRuneInfoList) -> "GS2U_RPRuneInfoList";
name(?GS2U_RuneCastAck) -> "GS2U_RuneCastAck";
name(?GS2U_RuneCastProp) -> "GS2U_RuneCastProp";
name(?GS2U_RuneCompoundAck) -> "GS2U_RuneCompoundAck";
name(?GS2U_RuneEmbedOffAck) -> "GS2U_RuneEmbedOffAck";
name(?GS2U_RuneEmbedOnAck) -> "GS2U_RuneEmbedOnAck";
name(?GS2U_RuneFuseAck) -> "GS2U_RuneFuseAck";
name(?GS2U_RuneGrid) -> "GS2U_RuneGrid";
name(?GS2U_RuneInfoList) -> "GS2U_RuneInfoList";
name(?GS2U_RuneMeltAck) -> "GS2U_RuneMeltAck";
name(?GS2U_RuneOpenBorad) -> "GS2U_RuneOpenBorad";
name(?GS2U_RuneSuitPropList) -> "GS2U_RuneSuitPropList";
name(?GS2U_RuneTurnPosAck) -> "GS2U_RuneTurnPosAck";
name(?RuneEmbedOn) -> "RuneEmbedOn";
name(?U2GS_OpenRuneGrid) -> "U2GS_OpenRuneGrid";
name(?U2GS_QueryRuneTips) -> "U2GS_QueryRuneTips";
name(?U2GS_RequestSuitProp) -> "U2GS_RequestSuitProp";
name(?U2GS_RuneCast) -> "U2GS_RuneCast";
name(?U2GS_RuneCastAffirm) -> "U2GS_RuneCastAffirm";
name(?U2GS_RuneCompound) -> "U2GS_RuneCompound";
name(?U2GS_RuneEmbedOff) -> "U2GS_RuneEmbedOff";
name(?U2GS_RuneFuse) -> "U2GS_RuneFuse";
name(?U2GS_RuneMelt) -> "U2GS_RuneMelt";
name(?U2GS_RuneReserve) -> "U2GS_RuneReserve";
name(?U2GS_RuneTurnPos) -> "U2GS_RuneTurnPos";
name(?U2GS_SellRune) -> "U2GS_SellRune";
name(?GS2U_GridPlayerRotw) -> "GS2U_GridPlayerRotw";
name(?Any_UpdateBitVariant) -> "Any_UpdateBitVariant";
name(?Any_UpdateVariant) -> "Any_UpdateVariant";
name(?GS2U_VariantInfo) -> "GS2U_VariantInfo";
name(?U2GS_AllTeamInvitationSetting) -> "U2GS_AllTeamInvitationSetting";
name(?BindPhoneAwardGet) -> "BindPhoneAwardGet";
name(?EveryDaySignIn) -> "EveryDaySignIn";
name(?GS2U_BindPhoneResult) -> "GS2U_BindPhoneResult";
name(?GS2U_SignIn) -> "GS2U_SignIn";
name(?SevenDaySignIn) -> "SevenDaySignIn";
name(?U2GS_AccuReward) -> "U2GS_AccuReward";
name(?U2GS_BindPhone) -> "U2GS_BindPhone";
name(?U2GS_SignIn) -> "U2GS_SignIn";
name(?GS2U_BreakLifeSkill) -> "GS2U_BreakLifeSkill";
name(?GS2U_ChangeSkillSlotResult) -> "GS2U_ChangeSkillSlotResult";
name(?GS2U_GiveRewardAck) -> "GS2U_GiveRewardAck";
name(?GS2U_InitLifeSkillList) -> "GS2U_InitLifeSkillList";
name(?GS2U_InitiativeSkillSlotInfoList) -> "GS2U_InitiativeSkillSlotInfoList";
name(?GS2U_LifeSkillCanUseCount) -> "GS2U_LifeSkillCanUseCount";
name(?GS2U_OpenSkill) -> "GS2U_OpenSkill";
name(?GS2U_OpenSlot) -> "GS2U_OpenSlot";
name(?GS2U_OpenSlotList) -> "GS2U_OpenSlotList";
name(?GS2U_PassiveSkillInfo) -> "GS2U_PassiveSkillInfo";
name(?GS2U_PassiveSkillInfoList) -> "GS2U_PassiveSkillInfoList";
name(?GS2U_PassiveSkillSlotInfoList) -> "GS2U_PassiveSkillSlotInfoList";
name(?GS2U_ReduceCD) -> "GS2U_ReduceCD";
name(?GS2U_SkillInfo) -> "GS2U_SkillInfo";
name(?GS2U_SkillInfoList) -> "GS2U_SkillInfoList";
name(?GS2U_TransformSkillSlotInfoList) -> "GS2U_TransformSkillSlotInfoList";
name(?GS2U_TriggerPassiveSkill) -> "GS2U_TriggerPassiveSkill";
name(?GS2U_UpdateLifeSkill) -> "GS2U_UpdateLifeSkill";
name(?GS2U_UpgradeSkill_Result) -> "GS2U_UpgradeSkill_Result";
name(?U2GS_BuySpirit) -> "U2GS_BuySpirit";
name(?U2GS_ChangeSkillSlotRequest) -> "U2GS_ChangeSkillSlotRequest";
name(?U2GS_FinishLifeSkill) -> "U2GS_FinishLifeSkill";
name(?U2GS_GiveReward) -> "U2GS_GiveReward";
name(?U2GS_LifeSkillBuyCount) -> "U2GS_LifeSkillBuyCount";
name(?U2GS_PassiveUpSkill) -> "U2GS_PassiveUpSkill";
name(?U2GS_ResetSkill) -> "U2GS_ResetSkill";
name(?U2GS_UpSkill) -> "U2GS_UpSkill";
name(?U2GS_UpgradeSkill_Request) -> "U2GS_UpgradeSkill_Request";
name(?U2GS_UseLifeSkill) -> "U2GS_UseLifeSkill";
name(?GS2U_TalentInitAck) -> "GS2U_TalentInitAck";
name(?GS2U_TalentLevelUpSuccess) -> "GS2U_TalentLevelUpSuccess";
name(?U2GS_TalentInit) -> "U2GS_TalentInit";
name(?U2GS_TalentLevelUp) -> "U2GS_TalentLevelUp";
name(?GS2U_AcceptTask) -> "GS2U_AcceptTask";
name(?GS2U_AcceptTaskList) -> "GS2U_AcceptTaskList";
name(?GS2U_AddNewAcceptTask) -> "GS2U_AddNewAcceptTask";
name(?GS2U_AddNewCompleteTask) -> "GS2U_AddNewCompleteTask";
name(?GS2U_CollectObj_Failed) -> "GS2U_CollectObj_Failed";
name(?GS2U_CompleteTaskList) -> "GS2U_CompleteTaskList";
name(?GS2U_DeleteAcceptTask) -> "GS2U_DeleteAcceptTask";
name(?GS2U_SyncStateLoopTask) -> "GS2U_SyncStateLoopTask";
name(?GS2U_TalkToNpcResult) -> "GS2U_TalkToNpcResult";
name(?GS2U_TaskList) -> "GS2U_TaskList";
name(?GS2U_UpdateAcceptTask) -> "GS2U_UpdateAcceptTask";
name(?GS2U_UpdateTask) -> "GS2U_UpdateTask";
name(?U2GS_AcceptTask) -> "U2GS_AcceptTask";
name(?U2GS_CollectObj) -> "U2GS_CollectObj";
name(?U2GS_DropTask) -> "U2GS_DropTask";
name(?U2GS_RequestAcceptLoopTask) -> "U2GS_RequestAcceptLoopTask";
name(?U2GS_RequestAcceptTask) -> "U2GS_RequestAcceptTask";
name(?U2GS_RequestHandIn) -> "U2GS_RequestHandIn";
name(?U2GS_RequestOneKeyLoopTask) -> "U2GS_RequestOneKeyLoopTask";
name(?U2GS_RequestOperateLoopTask) -> "U2GS_RequestOperateLoopTask";
name(?U2GS_ResetTask) -> "U2GS_ResetTask";
name(?U2GS_SumbitTask) -> "U2GS_SumbitTask";
name(?U2GS_TalkToNpc) -> "U2GS_TalkToNpc";
name(?U2GS_TriggerTaskBuff) -> "U2GS_TriggerTaskBuff";
name(?U2GS_UseItemObj) -> "U2GS_UseItemObj";
name(?GS2U_AddTeamMemberInfo) -> "GS2U_AddTeamMemberInfo";
name(?GS2U_BeenInviteTeam) -> "GS2U_BeenInviteTeam";
name(?GS2U_DelTeammateInfo) -> "GS2U_DelTeammateInfo";
name(?GS2U_FastTeamAck) -> "GS2U_FastTeamAck";
name(?GS2U_FastTeamSucc) -> "GS2U_FastTeamSucc";
name(?GS2U_InviteUJoinTeam) -> "GS2U_InviteUJoinTeam";
name(?GS2U_KickOutByLeader) -> "GS2U_KickOutByLeader";
name(?GS2U_MyTeamInfo) -> "GS2U_MyTeamInfo";
name(?GS2U_NearTeamInfo) -> "GS2U_NearTeamInfo";
name(?GS2U_NearbyPlayer_Ack) -> "GS2U_NearbyPlayer_Ack";
name(?GS2U_NewMemberJoin) -> "GS2U_NewMemberJoin";
name(?GS2U_QueryRoleListAck) -> "GS2U_QueryRoleListAck";
name(?GS2U_QueryTeamListAck) -> "GS2U_QueryTeamListAck";
name(?GS2U_QueryTeamListThisLineAck) -> "GS2U_QueryTeamListThisLineAck";
name(?GS2U_QuickTeamMatchAck) -> "GS2U_QuickTeamMatchAck";
name(?GS2U_ReceiveNotice) -> "GS2U_ReceiveNotice";
name(?GS2U_RequestFightingCapacity) -> "GS2U_RequestFightingCapacity";
name(?GS2U_TeamChangeLeader) -> "GS2U_TeamChangeLeader";
name(?GS2U_TeamDisbanded) -> "GS2U_TeamDisbanded";
name(?GS2U_TeamInfo) -> "GS2U_TeamInfo";
name(?GS2U_TeamLeaderStartCopymap) -> "GS2U_TeamLeaderStartCopymap";
name(?GS2U_TeamMemberExtInfo) -> "GS2U_TeamMemberExtInfo";
name(?GS2U_TeamMemberOffline) -> "GS2U_TeamMemberOffline";
name(?GS2U_TeamMemberOnline) -> "GS2U_TeamMemberOnline";
name(?GS2U_TeamMemberOnlineState) -> "GS2U_TeamMemberOnlineState";
name(?GS2U_TeamReset) -> "GS2U_TeamReset";
name(?GS2U_TeammateLeave) -> "GS2U_TeammateLeave";
name(?GS2U_TeammateLeaveAwayTeam) -> "GS2U_TeammateLeaveAwayTeam";
name(?GS2U_TeammateLocation) -> "GS2U_TeammateLocation";
name(?GS2U_TeammateStartCopymapAck) -> "GS2U_TeammateStartCopymapAck";
name(?GS2U_UpdateMemberExInfo) -> "GS2U_UpdateMemberExInfo";
name(?GS2U_UpdateTeamInfo) -> "GS2U_UpdateTeamInfo";
name(?U2GS_AckInviteJoinTeam) -> "U2GS_AckInviteJoinTeam";
name(?U2GS_AckInviteTeam) -> "U2GS_AckInviteTeam";
name(?U2GS_CancelFastTeam) -> "U2GS_CancelFastTeam";
name(?U2GS_IsOpenMapPanel) -> "U2GS_IsOpenMapPanel";
name(?U2GS_LeaveAwayTeam) -> "U2GS_LeaveAwayTeam";
name(?U2GS_NearbyPlayer_Request) -> "U2GS_NearbyPlayer_Request";
name(?U2GS_NoticeLeader) -> "U2GS_NoticeLeader";
name(?U2GS_OperateTeam) -> "U2GS_OperateTeam";
name(?U2GS_QueryRoleList) -> "U2GS_QueryRoleList";
name(?U2GS_QueryTeamList) -> "U2GS_QueryTeamList";
name(?U2GS_QueryTeamListThisLine) -> "U2GS_QueryTeamListThisLine";
name(?U2GS_QuickJoinTeam) -> "U2GS_QuickJoinTeam";
name(?U2GS_QuickTeamMatch) -> "U2GS_QuickTeamMatch";
name(?U2GS_QuickTeamStart) -> "U2GS_QuickTeamStart";
name(?U2GS_RequestFightingCapacity) -> "U2GS_RequestFightingCapacity";
name(?U2GS_RequestNearByTeamInfo) -> "U2GS_RequestNearByTeamInfo";
name(?U2GS_TeamOp) -> "U2GS_TeamOp";
name(?GS2U_BuyTradeFaild) -> "GS2U_BuyTradeFaild";
name(?GS2U_BuyTradeSuccess) -> "GS2U_BuyTradeSuccess";
name(?GS2U_DealRecord) -> "GS2U_DealRecord";
name(?GS2U_OpTradeResult) -> "GS2U_OpTradeResult";
name(?GS2U_QueryTrade) -> "GS2U_QueryTrade";
name(?GS2U_QueryTradeInfo) -> "GS2U_QueryTradeInfo";
name(?GS2U_ReferenceItem) -> "GS2U_ReferenceItem";
name(?U2GS_DownTrade) -> "U2GS_DownTrade";
name(?U2GS_NextResult) -> "U2GS_NextResult";
name(?U2GS_PutTrade) -> "U2GS_PutTrade";
name(?U2GS_QueryNewestTrade) -> "U2GS_QueryNewestTrade";
name(?U2GS_QuerySelfTrade) -> "U2GS_QuerySelfTrade";
name(?U2GS_QueryTrade) -> "U2GS_QueryTrade";
name(?U2GS_ReferenceItem) -> "U2GS_ReferenceItem";
name(?U2GS_RequestDealRecord) -> "U2GS_RequestDealRecord";
name(?U2GS_ResultSort) -> "U2GS_ResultSort";
name(?U2GS_TradeBuy) -> "U2GS_TradeBuy";
name(?U2GS_TradeRefuse) -> "U2GS_TradeRefuse";
name(?GS2U_GoddessActiveSkill) -> "GS2U_GoddessActiveSkill";
name(?GS2U_WakeInfo) -> "GS2U_WakeInfo";
name(?GS2U_WakeInfoList) -> "GS2U_WakeInfoList";
name(?U2GS_CallGoddess) -> "U2GS_CallGoddess";
name(?U2GS_ChangeState) -> "U2GS_ChangeState";
name(?U2GS_OnKeyUpWakeInfo) -> "U2GS_OnKeyUpWakeInfo";
name(?U2GS_UnlockCard) -> "U2GS_UnlockCard";
name(?U2GS_UnlockState) -> "U2GS_UnlockState";
name(?U2GS_UpGradeWakeInfo) -> "U2GS_UpGradeWakeInfo";
name(?U2GS_UpWakeInfo) -> "U2GS_UpWakeInfo";
name(?GS2U_InitWarriorTrialAck) -> "GS2U_InitWarriorTrialAck";
name(?GS2U_InitWarriorTrialMissionInfo) -> "GS2U_InitWarriorTrialMissionInfo";
name(?GS2U_SweepWarriorTrialSuccess) -> "GS2U_SweepWarriorTrialSuccess";
name(?GS2U_WarriorFirstKillReward_Ack) -> "GS2U_WarriorFirstKillReward_Ack";
name(?GS2U_WarriorTrialSuccess) -> "GS2U_WarriorTrialSuccess";
name(?U2GS_BeginWarriorTrial) -> "U2GS_BeginWarriorTrial";
name(?U2GS_CompleteWarriorTrail) -> "U2GS_CompleteWarriorTrail";
name(?U2GS_SweepWarriorTrial) -> "U2GS_SweepWarriorTrial";
name(?U2GS_SweepWarriorTrial_OneKey_Request) -> "U2GS_SweepWarriorTrial_OneKey_Request";
name(?U2GS_WarriorFirstKillReward_Request) -> "U2GS_WarriorFirstKillReward_Request";
name(?U2GS_WarriorTrialInit) -> "U2GS_WarriorTrialInit";
name(MsgID) -> "ErrorNetMsg_" ++ erlang:integer_to_list(MsgID).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cmd_list()->
	[
		?GS2U_DateFindTreasure_Welcome_Sync
		,?GS2U_DateLink_BuffAddScore_Sync
		,?GS2U_DateLink_BuffAddTime_Sync
		,?GS2U_DateLink_BuffBuff_Sync
		,?GS2U_DateLink_BuffPower_Sync
		,?GS2U_DateLink_DeduffBuff_Sync
		,?GS2U_DateLink_GameEnd_Sync
		,?GS2U_DateLink_Link_Sync
		,?GS2U_DateLink_MainTime_Sync
		,?GS2U_DateLink_ResetGem_Sync
		,?GS2U_DateLink_Select_Ack
		,?GS2U_DateLink_Welcome_Sync
		,?GS2U_DatePoolShooting_Welcome_Sync
		,?GS2U_DatePushBox_GreateNPC_Sync
		,?GS2U_DatePushBox_Succeed_Sync
		,?GS2U_DatePushBox_Welcome_Sync
		,?GS2U_Date_FindTreasure_Sync
		,?GS2U_Date_PlayerAnimation_Sync
		,?GS2U_Date_RefreshSocre_Sync
		,?GS2U_Date_ResetBox_Sync
		,?GS2U_Date_ResetFindTreasure_Sync
		,?GS2U_Date_ResetPoolShooting_Sync
		,?GS2U_MonsterMoveSync
		,?U2GS_DateEnter_Request
		,?U2GS_DateLink_Giveup_Requset
		,?U2GS_DateLink_ResetGem_Request
		,?U2GS_DateLink_Select_Request
		,?U2GS_DatePushBox_Request
		,?U2GS_DateShooting_Over
		,?GS2U_ChangeLineResponse
		,?LS2U_GameLineServerList
		,?LS2U_LoginQue
		,?LS2U_LoginResult
		,?LS2Web_CryptoAck
		,?LS2Web_NormalAck
		,?U2LS_Login_Normal
		,?U2LS_RequestGSLine
		,?Web2LS_Crypto
		,?Web2LS_Normal
		,?GS2U_AchieveSchedule
		,?GS2U_AchieveScheduleList
		,?GS2U_AddTitle
		,?GS2U_BadgeInfo
		,?GS2U_BadgeInfoList
		,?GS2U_DelTitle
		,?GS2U_InitDailyActiveInfo
		,?GS2U_OwnTitleList
		,?GS2U_ReceiveDailyActiveAwardResult
		,?GS2U_UpdateDailyActiveInfo
		,?U2GS_ChangeCustomTitleText
		,?U2GS_ChangeLimiteTitleState
		,?U2GS_ChangeTitleState
		,?U2GS_ReceiveAchieveValue
		,?U2GS_ReceiveDailyActiveAward
		,?ArenaTeamMemberPrepare
		,?CrosArenaMatch
		,?DeleteArenaTeamMember
		,?GS2U_ACCityMonsterSurplusTime
		,?GS2U_ActionList
		,?GS2U_ActivityEnd
		,?GS2U_ActivityState
		,?GS2U_ActivityStateInfo
		,?GS2U_ActivityStateInit
		,?GS2U_AddArenaTeamMemberRequest
		,?GS2U_AllAnswerQuestion
		,?GS2U_AngelInvestmentList
		,?GS2U_AnswerFirstAndLuckyPlayer
		,?GS2U_AnswerQuestion
		,?GS2U_AnswerRank
		,?GS2U_ApplyAnswerResult
		,?GS2U_ArenaBattleList
		,?GS2U_ArenaRoleDead
		,?GS2U_ArenaRoleList
		,?GS2U_AttackerDefenderQuotaNumberAck
		,?GS2U_BreakDance
		,?GS2U_ChangeGuardianDeclaration
		,?GS2U_CollectionWords_Sync
		,?GS2U_CrosArenaBattleHighRanks
		,?GS2U_CrosArenaBattleRanks
		,?GS2U_CrosBattleExploits
		,?GS2U_CurEscortType
		,?GS2U_DarknessCamp
		,?GS2U_DarknessInfo
		,?GS2U_DarknessKillOrBeKill
		,?GS2U_DarknessQuenenState
		,?GS2U_DarknessRank
		,?GS2U_DarknessState
		,?GS2U_DeadLineGiftList
		,?GS2U_DestinyStar
		,?GS2U_EnterDarkness
		,?GS2U_EscortResult
		,?GS2U_GBList
		,?GS2U_GetChargeOrUseGiftAck
		,?GS2U_Goblin_Open_State
		,?GS2U_HDBattleCD
		,?GS2U_HDBattleExploits
		,?GS2U_HDBattleOpenSurplusTime
		,?GS2U_HDBattlePhase
		,?GS2U_HDGatherSuccess
		,?GS2U_IconLight
		,?GS2U_InitWildBossInfo
		,?GS2U_JoinHDBattle
		,?GS2U_KillMonsterReward
		,?GS2U_KillPlayerNumber
		,?GS2U_KillRank
		,?GS2U_KingBattleBuffInfo
		,?GS2U_KingBattleRepairMirror
		,?GS2U_KingBattleResult
		,?GS2U_LotteryMoney
		,?GS2U_LotteryNote
		,?GS2U_LotteryResetTime
		,?GS2U_LotteryResult
		,?GS2U_MapBossInfo
		,?GS2U_MarrorInfoAck
		,?GS2U_MyAnswerRank
		,?GS2U_NoticeWildBossDead
		,?GS2U_NoticeWildBossTarget
		,?GS2U_OperateAct_Exchange
		,?GS2U_OperateExchangeAck
		,?GS2U_PlayerAnswer
		,?GS2U_PlayerAnswerInfo
		,?GS2U_PlayerAnswerResult
		,?GS2U_QueueNumber
		,?GS2U_RequestChargeOrUseListAck
		,?GS2U_RequestCollectionWordsAwardAck
		,?GS2U_RequestPictureNoticeAck
		,?GS2U_ReturnEscortList
		,?GS2U_RobitAutoAnswer
		,?GS2U_SelectCamp
		,?GS2U_SelectDanceID
		,?GS2U_SelfDarkness
		,?GS2U_SendAnswerData
		,?GS2U_SevenMissionDataList
		,?GS2U_SevenMissionDataUpdate
		,?GS2U_SwitchDance
		,?GS2U_SyncGBInfo
		,?GS2U_TriggerEvent
		,?GS2U_TriggerEventResult
		,?GS2U_UneedleaveOutMap
		,?GS2U_UpdateArenaTeamMember
		,?GS2U_WorldLevel
		,?U2GS_AddArenaTeamMember
		,?U2GS_AddArenaTeamMemberAck
		,?U2GS_AngelInvestment
		,?U2GS_AngelInvestmentGet
		,?U2GS_ApplyAnswer
		,?U2GS_ApplyDance
		,?U2GS_AttackDefenderQuotaNumber
		,?U2GS_BreakDance
		,?U2GS_BuyTime
		,?U2GS_CancelApply
		,?U2GS_DanceArea
		,?U2GS_DarknessRank
		,?U2GS_DeadLineGiftBuy
		,?U2GS_DeadLineGiftOpen
		,?U2GS_GBLeaveRange
		,?U2GS_GBLockGather
		,?U2GS_GBRequestEnterMapLine
		,?U2GS_GetAnswerScore
		,?U2GS_GetChargeOrUseGift
		,?U2GS_GiveMarrorFlower
		,?U2GS_GuardianDeclaration
		,?U2GS_KillRank
		,?U2GS_KingBattleBuyAttackerBuff
		,?U2GS_KingBattleBuyAttackerBuffOneKey
		,?U2GS_KingBattleBuyDeffenderBuff
		,?U2GS_KingBattleBuyDeffenderBuffOneKey
		,?U2GS_KingBattleBuyMirrorBuff
		,?U2GS_KingBattleBuyMirrorBuffOneKey
		,?U2GS_KingBattleGetBuffInfo
		,?U2GS_KingBattleRepairMirror
		,?U2GS_OpenLotteryForm
		,?U2GS_OpenSelectCamp
		,?U2GS_OperateExchange
		,?U2GS_OperateExchangeRefresh
		,?U2GS_PlayerAnswer
		,?U2GS_PlayerAnswerQuestion
		,?U2GS_QueryActivityState
		,?U2GS_QueryAngelInvestment
		,?U2GS_QueryMapBossInfo
		,?U2GS_QuerySevenMissionData
		,?U2GS_ReadyArena
		,?U2GS_RequestCollectionWordsAward
		,?U2GS_RequestCrosArenaRanks
		,?U2GS_RequestCrosRanks
		,?U2GS_RequestDarknessInfo
		,?U2GS_RequestEnterDarkness
		,?U2GS_RequestEnterNvasionMap
		,?U2GS_RequestEntrance
		,?U2GS_RequestEscortList
		,?U2GS_RequestEscortRob
		,?U2GS_RequestEscortSolo
		,?U2GS_RequestEscortTeam
		,?U2GS_RequestGBList
		,?U2GS_RequestHDBattle
		,?U2GS_RequestHDBattleCD
		,?U2GS_RequestHDBattleExploits
		,?U2GS_RequestInActivity
		,?U2GS_RequestJoinHDBattle
		,?U2GS_RequestLottery
		,?U2GS_RequestLotteryResetTime
		,?U2GS_RequestMarrorInfo
		,?U2GS_RequestOPActivityConfList
		,?U2GS_RequestQueueNumber
		,?U2GS_SelectCamp
		,?U2GS_SelectDanceID
		,?U2GS_SelfDarkness
		,?U2GS_SevenMissionCompletion
		,?U2GS_StartArena
		,?GS2U_BattleNotes
		,?GS2U_BattleStartSec
		,?GS2U_Ladder1v1BattleEnd
		,?GS2U_LadderTargetList
		,?GS2U_PrepareSec
		,?GS2U_ReturnKingList
		,?U2GS_AtuoSubmitTask
		,?U2GS_ChallengeTargetByRank
		,?U2GS_ChallengeTargetByRoleID
		,?U2GS_FreshLadderTargetList
		,?U2GS_GiveUpChallenge
		,?U2GS_OpenLadder1v1
		,?U2GS_RequestBattleNotes
		,?U2GS_RequestKingList
		,?U2GS_RequestPlayerInfo
		,?U2GS_WorshipTarget
		,?GS2U_FreshWWFormData
		,?GS2U_WWEscortResult
		,?GS2U_WWFormData
		,?GS2U_WWList
		,?GS2U_WWPlayerInfo
		,?GS2U_WWSyncMapInfo
		,?GS2U_WWSyncMapInfoOne
		,?GS2U_WWSyncMapInfoThree
		,?GS2U_WWSyncMapInfoTwo
		,?U2GS_GetLastReward
		,?U2GS_GetPhaseReward
		,?U2GS_RequestWWForm
		,?U2GS_RequestWWLineList
		,?U2GS_RequestWWPlayerInfo
		,?U2GS_SubmitSamplePoint
		,?U2GS_WWRequestEnterMapLine
		,?DelImpression
		,?DelTag
		,?GS2U_AddEquipItemToBag
		,?GS2U_AddImpressionResult
		,?GS2U_AddNormalItemToBag
		,?GS2U_AddPraise
		,?GS2U_AddTagResult
		,?GS2U_DeleteGoods
		,?GS2U_EquipEnhancedProp
		,?GS2U_EquipGemInfoUpdate
		,?GS2U_EquipGemInfos
		,?GS2U_EquipRecastInfo
		,?GS2U_EquipRecastInfoInit
		,?GS2U_EquipRefineLevel
		,?GS2U_EquipRefineResult
		,?GS2U_EquipRefineResultOneKey
		,?GS2U_EquipUpStarInfoList
		,?GS2U_EquipUpStarRes
		,?GS2U_EqupmentCombinAck
		,?GS2U_ExchangeResult
		,?GS2U_Forbidden_Load_Photo
		,?GS2U_GainPraise
		,?GS2U_GemEmbedAdd
		,?GS2U_GemEmbedDelete
		,?GS2U_GemEmbedInit
		,?GS2U_GemEmbedMakeResult
		,?GS2U_GetEssenceNum
		,?GS2U_InitEquip
		,?GS2U_InitItem
		,?GS2U_InitRecycle
		,?GS2U_InitSlot
		,?GS2U_LockGoods
		,?GS2U_LookRPInfo_Fashion
		,?GS2U_LookRPInfo_Marriage
		,?GS2U_LookRPInfo_Pet
		,?GS2U_LookRPInfo_Result
		,?GS2U_PlayerExtenInfo
		,?GS2U_QueryEquipResult
		,?GS2U_QueryItemResult
		,?GS2U_Report
		,?GS2U_Report_Max
		,?GS2U_RequesBuyIDAck
		,?GS2U_RequestExchangeResourceForeverLimitIDAck
		,?GS2U_RequestForeverLimitIDAck
		,?GS2U_ResourceExchangeList
		,?GS2U_UpLoadingPhotoResult
		,?GS2U_UpdateEquipItem
		,?GS2U_UpdateFurnitureStorageSlot
		,?GS2U_UpdateNormalItem
		,?GS2U_UseItemFireWorksNotice
		,?GS2U_WashEquip
		,?GS2u_OwnPortraitFrame
		,?MoveGoods
		,?OpenNewBagSlot
		,?U2GS_AddImpression
		,?U2GS_AddPraise
		,?U2GS_AddTag
		,?U2GS_EquipEnhanced
		,?U2GS_EquipRecast
		,?U2GS_EquipRecastAdvance
		,?U2GS_EquipRefine
		,?U2GS_EquipRefineOneKey
		,?U2GS_EquipResolve
		,?U2GS_EquipUpStar
		,?U2GS_EquipUpStarOneKey
		,?U2GS_GemEmbedMake
		,?U2GS_GemEmbedMakeOnce
		,?U2GS_GemEmbedOff
		,?U2GS_GemEmbedOn
		,?U2GS_GemOperate
		,?U2GS_GetPortraitFrameList
		,?U2GS_HonorLevel
		,?U2GS_LockGoods
		,?U2GS_LookRPInfo_Request
		,?U2GS_OperatePortraitFrame
		,?U2GS_PlayerExtenInfo
		,?U2GS_QueryEquipByUID
		,?U2GS_Report
		,?U2GS_RequesBuyID
		,?U2GS_RequesForeverLimitID
		,?U2GS_RequestExchangeResource
		,?U2GS_RequestExchangeResourceForeverLimitID
		,?U2GS_ResourceExchange
		,?U2GS_SellAllEquip
		,?U2GS_SharedEquip
		,?U2GS_SortItem
		,?U2GS_UseItem
		,?U2GS_UseMarriageTitleItem
		,?U2GS_WashEquip
		,?UpLoadingPhoto
		,?C2S_PlayerUseShiftSkill
		,?C2S_PlayerUseSkill
		,?GS2U_AttackOffsetEffect
		,?GS2U_AttackResult
		,?GS2U_AttackSpeed
		,?GS2U_BattleLearnRequest
		,?GS2U_BattleLearnResult
		,?GS2U_BreakSkill
		,?GS2U_CallSkill
		,?GS2U_CarrierUseSkillToObject
		,?GS2U_Dead
		,?GS2U_DeadToTeam
		,?GS2U_ForceDeadNow
		,?GS2U_IsTriggerCountDown
		,?GS2U_MonsterSpeed
		,?GS2U_ResponseBattleAck
		,?GS2U_ResponseChangePKMode
		,?GS2U_TriggerSkill
		,?GS2U_TrunBattleInitList
		,?GS2U_TrunBattleResultList
		,?GS2U_UseSkillToObject
		,?GS2U_UseSkillToPos
		,?U2GS_BattleLearn
		,?U2GS_BattleLearnAck
		,?U2GS_RequestBattleAck
		,?U2GS_RequestBattleEnd
		,?U2GS_RequestChangePKMode
		,?GS2U_BuffHurt
		,?GS2U_BuffInfo
		,?GS2U_BuyBuffSuccess
		,?U2GS_BuyBuff
		,?U2GS_DelBuff
		,?GS2U_BusinessCAInfo
		,?GS2U_BusinessInfo
		,?GS2U_BusinessPlayerInfo
		,?GS2U_DialCostList
		,?GS2U_DialItemList
		,?GS2U_DialRewardList
		,?GS2U_JqueryrotateResult
		,?GS2U_RechargeSuccess
		,?GS2U_SelfDialInfo
		,?U2GS_RequestBusinessInfo
		,?U2GS_RequestGetBox
		,?U2GS_RequestGetGift
		,?U2GS_RequestJqueryrotate
		,?U2GS_RequestSelfDialInfo
		,?GS2U_InviteFriendToMe
		,?GS2U_RecvInviteFriend
		,?GS2U_RequestCompanion
		,?GS2U_ToTargetFriendAck
		,?U2GS_AgreeInvite
		,?U2GS_ChangePoseID
		,?U2GS_CreateCompanion
		,?U2GS_ExitCompanion
		,?U2GS_InviteFriend
		,?U2GS_InviteToMe
		,?U2GS_KickCompanion
		,?U2GS_RequestCompanion
		,?U2GS_ToTargetFriend
		,?U2GS_ToTargetFriendResult
		,?ActiveGuildCopy
		,?GS2U_BossBattleRankResult
		,?GS2U_BossBattleState
		,?GS2U_ChapterInfo
		,?GS2U_CopyMapLeftTime
		,?GS2U_CopyMapSchedulePlayAnimation
		,?GS2U_CopyMapSchedulePlayCharacter
		,?GS2U_CopySpecialSchedule
		,?GS2U_DevilCopyMapRankList
		,?GS2U_DevilCopyMapStarList
		,?GS2U_FestivalTimeInfo
		,?GS2U_IsGuildCopyOpen
		,?GS2U_MaterialInfo
		,?GS2U_MoneyDungeonInfo
		,?GS2U_SendGuildCopyOpenTime
		,?GS2U_SpiritArea_Tick_Sync
		,?GS2U_SpiritArea_Wake_Sync
		,?GS2U_TowerInfo
		,?GS2U_UpdateDevilCopyMapStar
		,?U2GS2U_BuyCopyReward
		,?U2GS2U_CopyMapScheduleShow2
		,?U2GS_BuyFestivalPacket
		,?U2GS_CopyMapSchedulePlayAnimationOver
		,?U2GS_CopyMapSchedulePlayCharacterOver
		,?U2GS_EnterBossBattle
		,?U2GS_EnterFestivalCopy
		,?U2GS_EnterGuildCopy
		,?U2GS_GoonCopyMap
		,?U2GS_MoneyDungeonGiveup
		,?U2GS_MoneyDungeonNext
		,?U2GS_QueryDevilCopyMapRankList
		,?U2GS_QueryDevilCopyMapStarList
		,?U2GS_RequestAutoDeal
		,?U2GS_RequestMaterialInfo
		,?U2GS_UpTower
		,?U2GS_startNextChapter
		,?UpdataGuildHurtToBoss
		,?UpdataHurtToBoss
		,?GS2U_ActiveFashionSuitList
		,?GS2U_FashionGiftAck
		,?GS2U_FashionList
		,?GS2U_FashionResult
		,?GS2U_FashionRoomLevelUp
		,?U2GS_ActiveFashionSuit
		,?U2GS_BuyFashion
		,?U2GS_FashionBuyRequest
		,?U2GS_FashionRoomLevelUp
		,?U2GS_FashionThanksMail
		,?U2GS_IsDisplayFashion
		,?U2GS_OperateFashion
		,?GS2U_FloatingAward
		,?GS2U_FloatingSchedule
		,?GS2U_ReceiveFloatingAward
		,?U2GS_RequestFloatingAward
		,?GS2U_Friend2AddFromBlack_Ask
		,?GS2U_Friend2ApplicantReset_Sync
		,?GS2U_Friend2BanFromFormal_Ask
		,?GS2U_Friend2BanWithUnbanAndDel_Ask
		,?GS2U_Friend2BanWithUnban_Ask
		,?GS2U_Friend2BlackReset_Sync
		,?GS2U_Friend2ClosenessChange_Sync
		,?GS2U_Friend2CrossAdd2Failed_Ack
		,?GS2U_Friend2CrossAdd2_Ack
		,?GS2U_Friend2CrossAdd_Sync
		,?GS2U_Friend2CrossAll_Sync
		,?GS2U_Friend2CrossDel_Ack
		,?GS2U_Friend2CrossInit_Sync
		,?GS2U_Friend2ForLook_Ack
		,?GS2U_Friend2FormalChatVoice_AckR
		,?GS2U_Friend2FormalChatVoice_AckS
		,?GS2U_Friend2FormalChat_Ack
		,?GS2U_Friend2FormalForMarriage_Sync
		,?GS2U_Friend2FormalReset_Sync
		,?GS2U_Friend2GetBack_AddRet
		,?GS2U_Friend2GetBack_IgnoreRet
		,?GS2U_Friend2GetBack_SyncInfo
		,?GS2U_Friend2MakeFormal_Sync
		,?GS2U_Friend2Recommend_Ack
		,?GS2U_Friend2Search_Ack
		,?GS2U_Friend2SimpleList_Ack
		,?GS2U_Friend2TempReset_Sync
		,?GS2U_Friend2WantChat_Ack
		,?GS2u_Friend2Like_Ack
		,?U2GS_Friend2AddFromBlack_Reply
		,?U2GS_Friend2Add_Request
		,?U2GS_Friend2ApplicantUseOneKey_Request
		,?U2GS_Friend2ApplicantUse_Request
		,?U2GS_Friend2Applicant_Request
		,?U2GS_Friend2BanWithDel_Reply
		,?U2GS_Friend2BanWithUnbanAndDel_Reply
		,?U2GS_Friend2BanWithUnban_Reply
		,?U2GS_Friend2Ban_Request
		,?U2GS_Friend2Black_Request
		,?U2GS_Friend2CrossAdd2_Request
		,?U2GS_Friend2CrossAdd_Request
		,?U2GS_Friend2CrossAll_Request
		,?U2GS_Friend2CrossDel_Request
		,?U2GS_Friend2Del_Request
		,?U2GS_Friend2ForLook_Request
		,?U2GS_Friend2FormalChatVoice_Request
		,?U2GS_Friend2FormalChat_Request
		,?U2GS_Friend2FormalForMarriage_Request
		,?U2GS_Friend2FormalOP_Request
		,?U2GS_Friend2Formal_Request
		,?U2GS_Friend2GetBack_Add
		,?U2GS_Friend2GetBack_Ignore
		,?U2GS_Friend2GetBack_OneKeyToAdd
		,?U2GS_Friend2LimitSearch_Request
		,?U2GS_Friend2Recommend_Request
		,?U2GS_Friend2Search_Request
		,?U2GS_Friend2SimpleList_Requets
		,?U2GS_Friend2Temp_Request
		,?U2GS_Friend2Unban_Request
		,?U2GS_Friend2WantChat_Request
		,?GS2U_InitGodWeapon
		,?GS2U_LevelUpGodWeaponResult
		,?GS2U_LevelUpGodWeaponSkillResult
		,?U2GS_LevelUpGodWeapon
		,?U2GS_LevelUpGodWeaponSkill
		,?GS2U_BiddingGuildMsg
		,?GS2U_ChangeDenoter
		,?GS2U_ChangeGuildName
		,?GS2U_ChangeNotice
		,?GS2U_DonateSuccess
		,?GS2U_ExpeditionBroadcastPos
		,?GS2U_ExpeditionFinalInfo
		,?GS2U_ExpeditionGlobalMapInfoList
		,?GS2U_ExpeditionMapBattleInfoList
		,?GS2U_ExpeditionMapInfoList
		,?GS2U_ExpeditionQuenenState
		,?GS2U_GivePower
		,?GS2U_GuildBattleApply
		,?GS2U_GuildBattleResult
		,?GS2U_GuildBossRank
		,?GS2U_GuildBossResoult
		,?GS2U_GuildBuff
		,?GS2U_GuildBuffRole
		,?GS2U_GuildIDList
		,?GS2U_GuildList
		,?GS2U_GuildLoopTask_Give_Ack
		,?GS2U_GuildLoopTask_History_Ack
		,?GS2U_GuildLoopTask_MyGet_Sync
		,?GS2U_GuildLoopTask_OpenUI_Ack
		,?GS2U_GuildLoopTask_WantGive_Ack
		,?GS2U_GuildOpResult
		,?GS2U_GuildSkill
		,?GS2U_GuildTask
		,?GS2U_GuildWar
		,?GS2U_GuildWarCannonHit
		,?GS2U_GuildWarData
		,?GS2U_GuildWarEnd
		,?GS2U_GuildWarRankForHud
		,?GS2U_Guild_ExchangeAll_Sync
		,?GS2U_Guild_Exchange_Ack
		,?GS2U_Guild_FairgroundEnter_Ack
		,?GS2U_Guild_FairgroundRide_Sync
		,?GS2U_Guild_FastJoin_Ack
		,?GS2U_Guild_FastJoin_Get_Ack
		,?GS2U_Guild_FastJoin_Set_Ack
		,?GS2U_Guild_GodBless_Ack
		,?GS2U_Guild_GodBless_Schedule_Reward_Ack
		,?GS2U_Guild_GodBless_Schedule_Sync
		,?GS2U_Guild_OpenSupplication_Ack
		,?GS2U_Guild_ShopBuy_Ack
		,?GS2U_Guild_SnowmanAll_Sync
		,?GS2U_Guild_SnowmanBegin_Sync
		,?GS2U_Guild_SnowmanCompleteCount_Sync
		,?GS2U_Guild_SnowmanExtraRes_Sync
		,?GS2U_Guild_SnowmanPlayer_Sync
		,?GS2U_Guild_SnowmanSettle_Sync
		,?GS2U_Guild_SnowmanSnowman_Sync
		,?GS2U_Guild_SupplicateGiveF_Ack
		,?GS2U_Guild_SupplicateGive_Ack
		,?GS2U_Guild_SupplicateGive_Sync
		,?GS2U_Guild_Supplicate_Ack
		,?GS2U_ISInApplyInfo
		,?GS2U_ImpeachInfo
		,?GS2U_JoinGuild_Sync
		,?GS2U_MyGuildBossRank
		,?GS2U_MyGuildKillBossRank
		,?GS2U_OccupyOwnerChange
		,?GS2U_OneKeyRecruit_Ack
		,?GS2U_OpenGuildForm
		,?GS2U_QueryGuildInfoByRoleID_Ack
		,?GS2U_QueryImpeachInfo
		,?GS2U_Recruit
		,?GS2U_RefreshGuildProp
		,?GS2U_RequestGuildBossInfo_Sync
		,?GS2U_RequestJoinGuildList
		,?GS2U_RequestJoinGuild_Ack
		,?GS2U_RequestLookMemberList
		,?GS2U_ReturnDonateTimes
		,?GS2U_ShopUpgrade
		,?GS2U_Upgrade_Ack
		,?U2GS_AcceptGuildTask
		,?U2GS_AgreeRecruit
		,?U2GS_Bidding
		,?U2GS_BuyGuildBuff
		,?U2GS_ChangeDenoter
		,?U2GS_ChangeGuildName
		,?U2GS_ChangeLeader
		,?U2GS_ChangeNotice
		,?U2GS_CreateGuild
		,?U2GS_DealRequestJoin
		,?U2GS_DeleteGuild
		,?U2GS_DonateMoney
		,?U2GS_EnterGuildBattle
		,?U2GS_EnterGuildHome
		,?U2GS_ExitGuild
		,?U2GS_ExpeditionBroadcastPos
		,?U2GS_GetGuildHomeReward
		,?U2GS_GetGuildPrize
		,?U2GS_GiveMeExpeditionRewardEverDay
		,?U2GS_GivePower
		,?U2GS_GiveUpGuildTask
		,?U2GS_GuildBattleApply
		,?U2GS_GuildBossBuyBuff
		,?U2GS_GuildList
		,?U2GS_GuildLoopTask_Give_Request
		,?U2GS_GuildLoopTask_History_Request
		,?U2GS_GuildLoopTask_OpenUI_Request
		,?U2GS_GuildLoopTask_WantGet_Request
		,?U2GS_GuildLoopTask_WantGive_Request
		,?U2GS_GuildReward
		,?U2GS_Guild_Exchange_Request
		,?U2GS_Guild_FairgroundEnter_Request
		,?U2GS_Guild_FairgroundRide_Request
		,?U2GS_Guild_FastJoin_Get_Request
		,?U2GS_Guild_FastJoin_Request
		,?U2GS_Guild_FastJoin_Set_Request
		,?U2GS_Guild_GodBless_Request
		,?U2GS_Guild_GodBless_Schedule_Request
		,?U2GS_Guild_GodBless_Schedule_Reward_Request
		,?U2GS_Guild_OpenSupplication_Request
		,?U2GS_Guild_ShopBuy_Request
		,?U2GS_Guild_SnowmanCheck_Request
		,?U2GS_Guild_SnowmanDonate_Request
		,?U2GS_Guild_SnowmanReward_Request
		,?U2GS_Guild_SupplicateGive_Request
		,?U2GS_Guild_Supplicate_Request
		,?U2GS_ImpeachCreater
		,?U2GS_KickGuild
		,?U2GS_MyGuildKllBossRank
		,?U2GS_OneKeyRecruit_Request
		,?U2GS_OpenGuildForm
		,?U2GS_OpenGuildShop
		,?U2GS_QueryExpeditionFinalInfo
		,?U2GS_QueryExpeditionGlobalMapInfo
		,?U2GS_QueryExpeditionMapBattleInfo
		,?U2GS_QueryExpeditionMapInfo
		,?U2GS_QueryGuildInfoByRoleID_Request
		,?U2GS_Recruit
		,?U2GS_RequestDonateTimes
		,?U2GS_RequestEnterGuildBoss
		,?U2GS_RequestGuildBattleResult
		,?U2GS_RequestGuildBossInfo
		,?U2GS_RequestGuildBuff
		,?U2GS_RequestGuildInfo_Request
		,?U2GS_RequestGuildRank
		,?U2GS_RequestGuildSkill
		,?U2GS_RequestGuildTask
		,?U2GS_RequestGuildWar
		,?U2GS_RequestJoinGuild
		,?U2GS_RequestJoinGuildList
		,?U2GS_RequestLookMemberList
		,?U2GS_ResearchGuildSkill
		,?U2GS_ShopUpgrade
		,?U2GS_StudyGuildSkill
		,?U2GS_SummonHX
		,?U2GS_SummonMonster
		,?U2GS_SupportImpeachCreater
		,?U2GS_Upgrade
		,?U2GS_UseCannon
		,?U2GS_getGuildBuff
		,?GS2U_ChangedecorateModelResult
		,?GS2U_DelSenceTheFurniTrueResult
		,?GS2U_EnterHome
		,?GS2U_ExtendAreaResult_Sync
		,?GS2U_FreshHomeAreaInfo
		,?GS2U_FreshHomeInfo
		,?GS2U_GetPetFoodResults_Sync
		,?GS2U_GivingFurniTrueForPartnerResult
		,?GS2U_HomeBitResult
		,?GS2U_HomeFarming_Sync
		,?GS2U_HomeInfo
		,?GS2U_HomePlantOperate_Ack
		,?GS2U_HomePlant_Sync
		,?GS2U_HomeVisitList
		,?GS2U_Invitefriendstobed
		,?GS2U_LoadFurniTrueResult_Sync
		,?GS2U_PutOutPetFarmingResults_Sync
		,?GS2U_PutPetInFarmingResults_Sync
		,?GS2U_SaveFurniTrueResult_Sync
		,?GS2U_SendAllFurniInfo_Sync
		,?GS2U_SendHomeLetter
		,?GS2U_SetGreetingsResult_Sync
		,?GS2U_UseFurnitrueResult
		,?GS2U_VisitRecord
		,?U2GS_ChangeHomeName
		,?U2GS_ChangedecorateModel
		,?U2GS_CreateHome
		,?U2GS_DelSenceTheFurniTrue
		,?U2GS_EnterBitHome
		,?U2GS_EnterHome
		,?U2GS_ExtendArea
		,?U2GS_GetPetFood
		,?U2GS_GivingFurniTrueForPartner
		,?U2GS_HomePlantOperate_Request
		,?U2GS_HomeVisit
		,?U2GS_Invitefriendstobed
		,?U2GS_LoadFurniTrueScheme
		,?U2GS_PutOutPetFarming
		,?U2GS_PutPetInFarming
		,?U2GS_RequestHomeInfo
		,?U2GS_RequestVisitRecord
		,?U2GS_SaveFurniTrueScheme
		,?U2GS_SetGreetings
		,?U2GS_UpgradeHome
		,?U2GS_UpgradeHomeArea
		,?U2GS_UseFurnitrue
		,?GS2U_GiftHistory_Sync
		,?GS2U_Gift_Ack
		,?GS2U_IdentityCharm_Sync
		,?GS2U_IdentityEditPic_Ack
		,?GS2U_IdentityEditTag_Ack
		,?GS2U_IdentityLike_Sync
		,?GS2U_IdentityPicDownloadData_Ack
		,?GS2U_IdentityPicDownloadData_Sync
		,?GS2U_IdentityPicDownloadError_Ack
		,?GS2U_IdentityPicUpload_Ack
		,?GS2U_Identity_Ack
		,?GS2U_Report_Ack
		,?U2GS2U_IdentityEditAge
		,?U2GS2U_IdentityEditBirth
		,?U2GS2U_IdentityEditBloodType
		,?U2GS2U_IdentityEditFace
		,?U2GS2U_IdentityEditHometown
		,?U2GS2U_IdentityEditLocation
		,?U2GS2U_IdentityEditSign
		,?U2GS2U_IdentityEditZodiac
		,?U2GS2U_RequestRoleHeadPic
		,?U2GS_Gift_Request
		,?U2GS_IdentityEditTagAdd_Request
		,?U2GS_IdentityEditTagDel_Request
		,?U2GS_IdentityPicDownloadBegin_Request
		,?U2GS_IdentityPicDownloadContinue_Request
		,?U2GS_IdentityPicUploadBegin_Request
		,?U2GS_IdentityPicUploadData_Request
		,?U2GS_Identity_Request
		,?U2GS_Report_Request
		,?GS2U_BuyItemQuotaNumber
		,?GS2U_LookInfoItemListAtMall
		,?GS2U_LookInfoItemListAtNpcStore
		,?GS2U_MysteriousShop
		,?GS2U_ShowGainGoodsOrCoinsInfo
		,?GS2U_SingleUseItem
		,?GS2U_UseItem
		,?GS2U_UseItemExpInDanResult
		,?GS2U_UseItemGainGoodsTips
		,?GS2U_UseItemResult
		,?RefindResList
		,?U2GS_BuyItemAtGuildShopRequest
		,?U2GS_BuyItemAtMallRequest
		,?U2GS_BuyItemAtNpcStoreRequest
		,?U2GS_BuyItemAtShopIDRequest
		,?U2GS_BuyMysteriousShopItem
		,?U2GS_ConvenientBuyItem
		,?U2GS_FreshMSShop
		,?U2GS_LookInfoItemListAtMall
		,?U2GS_LookInfoItemListAtNpcStore
		,?U2GS_LookInfoItemListAtShopID
		,?U2GS_RefindResAll
		,?U2GS_RefindResOne
		,?U2GS_RequestMysteriousShop
		,?U2GS_UseStarMoonBox
		,?GS2U_GainLuckyCoin
		,?GS2U_GiveLuckyCoinResult
		,?GS2U_InitGainLuckyCoinInfo
		,?GS2U_LuckyDrawResult
		,?U2GS_GiveLuckyCoin
		,?U2GS_LuckyDraw
		,?U2GS_LuckyDrawEnd
		,?U2GS_OneKeyGiveLucky
		,?GS2U_DelMailCoin
		,?GS2U_DelMailItem
		,?GS2U_DeleteMail
		,?GS2U_GetMailItemAll
		,?GS2U_LockMail
		,?GS2U_Mail
		,?GS2U_MailInfo
		,?GS2U_SendMailAck
		,?GS2U_UnlockMail
		,?U2GS_DeleteAllReadMail
		,?U2GS_DeleteMail
		,?U2GS_GetDeleteMails
		,?U2GS_GetMailCoin
		,?U2GS_GetMailItem
		,?U2GS_GetMailItemAll
		,?U2GS_LockMail
		,?U2GS_ReadMail
		,?U2GS_SendMail
		,?U2GS_UnlockMail
		,?GS2U_FashionConfigInfo
		,?GS2U_GroupBuyGoodsBuyAck
		,?GS2U_GroupBuyRewardBuyAck
		,?GS2U_GroupBuyWhenOpen
		,?GS2U_KoreaNaverConfigInfo
		,?GS2U_KoreaNaverRewardGetAck
		,?GS2U_MallBuyResult
		,?GS2U_MallBuyResult2
		,?GS2U_MallInfoList
		,?GS2U_MallInfoList2
		,?GS2U_MallPriceList
		,?GS2U_MallPriceList2
		,?U2GS_GroupBuyGoodsBuyRequest
		,?U2GS_GroupBuyRewardBuyRequest
		,?U2GS_GroupBuyWhenOpen
		,?U2GS_ItemBuyRequest
		,?U2GS_ItemBuyRequest2
		,?U2GS_KoreaNaverRewardGetRequest
		,?U2GS_MallInfo
		,?U2GS_MallInfo2
		,?GS2U_AppointmentWeddingResult
		,?GS2U_BuyLuckyBagResult
		,?GS2U_GivegifsResult
		,?GS2U_InvitedPersonResult
		,?GS2U_LoginInitWeddingKetubba
		,?GS2U_MarriageBaseInfo_Sync
		,?GS2U_MarriageBreak_Ack
		,?GS2U_MarriageProposeRefresh_Ack
		,?GS2U_MarriagePropose_Ack
		,?GS2U_MarriagePropose_Ask
		,?GS2U_MarriageRingUpPartner_Sync
		,?GS2U_MarriageRingUp_Sync
		,?GS2U_MarriageSkillUp_Ack
		,?GS2U_MarriageSkill_Sync
		,?GS2U_MarriageTask_Together_Ask1
		,?GS2U_MarriageTask_Together_Ask2
		,?GS2U_OpenInvitePanelResult
		,?GS2U_OpenketubbaResult
		,?GS2U_PlayerDeletRoleInWedding
		,?GS2U_PlayerEnterMapSucc
		,?GS2U_RobWeddingRedResult
		,?GS2U_UseNpcInteractiveReuslt
		,?GS2U_WeddingLotteryResult
		,?GS2U_WeddingMapPhase
		,?GS2U_WeddingRedState
		,?GS2U_WeddingStartInviteAll
		,?GS2U_receivedInvitationCard
		,?U2GS_BuyLuckyBag
		,?U2GS_EnterWeddingMap
		,?U2GS_Givegifs
		,?U2GS_InvitedPerson
		,?U2GS_MarriageAcceptTask_Request
		,?U2GS_MarriageBreak_Request
		,?U2GS_MarriagePropose_Reply
		,?U2GS_MarriagePropose_Request
		,?U2GS_MarriageRingUp_Request
		,?U2GS_MarriageSkillUp_Request
		,?U2GS_MarriageSubmitTask_Request
		,?U2GS_MarriageTask_Together_Reply1
		,?U2GS_MarriageTask_Together_Reply2
		,?U2GS_OpenInvitePanel
		,?U2GS_Openketubba
		,?U2GS_RobWeddingRed
		,?U2GS_UseNpcInteractive
		,?U2GS_WeddingLottery
		,?U2GS_appointmentWedding
		,?GS2U_LookMountInfo
		,?GS2U_MountAck
		,?GS2U_MountShapeList
		,?GS2U_NewMountShape
		,?MountShapeShift
		,?U2GS_FeedMount
		,?U2GS_OffMount
		,?U2GS_OnMount
		,?GS2U_NpcMomentMove
		,?GS2U_NpcTitleChange
		,?GS2U_RequestRiftNpcInfo
		,?U2GS_RequestEnterRift
		,?U2GS_RequestRiftNpcInfo
		,?GS2U_AckRewardLevel
		,?GS2U_AckStandSort
		,?GS2U_AddTempPet
		,?GS2U_BuyPowerInfo
		,?GS2U_DeletePet
		,?GS2U_DoublePetMountInvite
		,?GS2U_FindTerritoryFailed_Ack
		,?GS2U_FindTerritory_Ack
		,?GS2U_OffMountPetAck
		,?GS2U_OnMountPetAck
		,?GS2U_PVEBattleResult
		,?GS2U_PetAddAttaRes
		,?GS2U_PetAssistInit
		,?GS2U_PetAssistUpdateSlot
		,?GS2U_PetAttaSaveRes
		,?GS2U_PetBaseInfo
		,?GS2U_PetEquipInfoList
		,?GS2U_PetFairyInfo
		,?GS2U_PetInfoList
		,?GS2U_PetLevelUp
		,?GS2U_PetPveSweepAck
		,?GS2U_PetReName
		,?GS2U_PetSkillCastResult
		,?GS2U_PetSleep
		,?GS2U_PetStrAck
		,?GS2U_PvpBattleInfoRes
		,?GS2U_PvpBattleReportTip
		,?GS2U_PvpBattleResult
		,?GS2U_PvpBattleUpdateReport
		,?GS2U_PvpPosSaveAck
		,?GS2U_QueryTerritoryHistory_Ack
		,?GS2U_QueryTerritoryInfo_Ack
		,?GS2U_RawPetResult
		,?GS2U_ResetPetAck
		,?GS2U_TerritoryBattle_Tick_Sync
		,?GS2U_TerritoryExploitEnd_Sync
		,?GS2U_TerritoryExploit_Ack
		,?GS2U_TerritoryPlunder_Ack
		,?GS2U_TerritoryVigor_Ack
		,?GS2U_UpStartPetResult
		,?GS2U_UpdateCatalogList
		,?GS2U_UpdatePetSkill
		,?GS2U_UpdatePetStatus
		,?GS2U_UpdatePower
		,?GS2U_UpdateReel
		,?GS2U_UsePetSkillBook
		,?PetReName
		,?PetSkillReplace
		,?PetSwitch
		,?U2GS_BuyPower
		,?U2GS_BuyReel
		,?U2GS_DoublePetMountInvite
		,?U2GS_DoublePetMountInviteAck
		,?U2GS_FindTerritory_Request
		,?U2GS_HideMountPet
		,?U2GS_OffMountPet
		,?U2GS_OnMountPet
		,?U2GS_PetAddAtta
		,?U2GS_PetAssistBattle
		,?U2GS_PetAttaSave
		,?U2GS_PetDisapear
		,?U2GS_PetLevelUp
		,?U2GS_PetPveSweep
		,?U2GS_PetSkillCast
		,?U2GS_PetSkillOperate
		,?U2GS_PetStr
		,?U2GS_PvpBattleInfo
		,?U2GS_PvpPosSave
		,?U2GS_QueryPetFairyInfo
		,?U2GS_QueryTerritoryHistory_Request
		,?U2GS_QueryTerritoryInfo_Request
		,?U2GS_RawPet
		,?U2GS_RequestBattle
		,?U2GS_RequestPvpBattle
		,?U2GS_RequstReward
		,?U2GS_ResetPet
		,?U2GS_ShowMountPet
		,?U2GS_StandSort
		,?U2GS_TerritoryExploit_Request
		,?U2GS_TerritoryPlunder_Request
		,?U2GS_TerritoryVigor_Request
		,?U2GS_UpStartPet
		,?U2GS_UsePetSkillBook
		,?Any_ChangeMap
		,?Any_PlayerLogout
		,?C2S_ChangeMap
		,?GS2S_UseTheAwakeBuffRet
		,?GS2U_AcceptHolidayTaskSucc
		,?GS2U_AliveApply_Ack
		,?GS2U_AliveCancel_Ack
		,?GS2U_AliveCarrier_Sync
		,?GS2U_AliveEnterSafeArea_Ack
		,?GS2U_AliveMapState_Sync
		,?GS2U_AliveRolePos_Sync
		,?GS2U_AliveRole_Sync
		,?GS2U_AllBattleProp
		,?GS2U_BattlePropList
		,?GS2U_BeReportNum
		,?GS2U_BlockStatusChange
		,?GS2U_BroadcastDisapear
		,?GS2U_BroadcastDisapearFast
		,?GS2U_BroadcastPlayerHpPC
		,?GS2U_BroadcastPlayerRevive
		,?GS2U_BroadcastTeamRevive
		,?GS2U_BroadcastVisibleEquipOff
		,?GS2U_BroadcastVisibleEquipOn
		,?GS2U_BusinessCashDailyGift_Ack
		,?GS2U_BusinessSupperGift_Ack
		,?GS2U_BuyLimitedResult
		,?GS2U_ChangeCamp
		,?GS2U_ChangeCarrer
		,?GS2U_ChangeNameResult
		,?GS2U_ChatErrorResult
		,?GS2U_Chatinfo
		,?GS2U_ClearFightObject
		,?GS2U_CopyMapProcess
		,?GS2U_CopyMapProcessCurrentScheduleStatus
		,?GS2U_CopyMapProcessCurrentScheduleSurplusSecond
		,?GS2U_CopyMapResult
		,?GS2U_CopyMapStatHurtList
		,?GS2U_CopymapFailed
		,?GS2U_CreatePlayerResult
		,?GS2U_CrossNewPlayerCode
		,?GS2U_CrossStep
		,?GS2U_DashTo
		,?GS2U_DeletePlayerResult
		,?GS2U_EnterMapFailed
		,?GS2U_Error
		,?GS2U_EveryDayGetPower_Sync
		,?GS2U_GetRewardUpdateResource
		,?GS2U_GiveGiftEfects
		,?GS2U_HateInfo
		,?GS2U_HaveIconAndActionList
		,?GS2U_HeartBeatAck
		,?GS2U_HisoryForce_Ack
		,?GS2U_InvateEnterCopyMap
		,?GS2U_KickOutTip
		,?GS2U_KillPlayerResponse
		,?GS2U_KillValueResponse
		,?GS2U_LBS_BesideRole_Ack
		,?GS2U_LoginResult
		,?GS2U_LookInfoPlayer
		,?GS2U_LotteryForTowerBeginTimeEndTime
		,?GS2U_LotteryForTowerInfo
		,?GS2U_LotteryForTowerRandonAward
		,?GS2U_MapLevel
		,?GS2U_MapLineList
		,?GS2U_MaterialCopyMapResult
		,?GS2U_MissionObjectList
		,?GS2U_MoneyChanges
		,?GS2U_MoneyDungeonCopyMapResult
		,?GS2U_MoneyTreeAck
		,?GS2U_MoneyTreeBox
		,?GS2U_MonsterBookEnterNewMap_Sync
		,?GS2U_MonsterBookNeed_Sync
		,?GS2U_MonsterBookReward_Ack
		,?GS2U_MonsterBookSnap_Ack
		,?GS2U_MonsterBookUnlock_Ack
		,?GS2U_MonsterBook_Ack
		,?GS2U_MonsterList
		,?GS2U_MonthCardEndTips
		,?GS2U_MoveInfo
		,?GS2U_MsgBoxTips
		,?GS2U_NoticeAdd
		,?GS2U_NoticeDel
		,?GS2U_NoticeResponse
		,?GS2U_NpcList
		,?GS2U_NpcStatusChange
		,?GS2U_ObjBrief
		,?GS2U_PetList
		,?GS2U_PetLvlChange
		,?GS2U_PetRawLvlChange
		,?GS2U_PlayerAddExp
		,?GS2U_PlayerAwakenInfo
		,?GS2U_PlayerBaseInfo
		,?GS2U_PlayerBlood
		,?GS2U_PlayerChangedWealth
		,?GS2U_PlayerCour
		,?GS2U_PlayerDead
		,?GS2U_PlayerHp
		,?GS2U_PlayerInitEnd
		,?GS2U_PlayerLevelUp
		,?GS2U_PlayerPhys
		,?GS2U_PlayerRevive
		,?GS2U_PlayerSp
		,?GS2U_PlotDialogue
		,?GS2U_PropSync
		,?GS2U_PushInfo
		,?GS2U_RaceApplyInfo_Sync
		,?GS2U_RaceApplyState
		,?GS2U_RaceApply_Ack
		,?GS2U_RaceCancel_Ack
		,?GS2U_RaceInit
		,?GS2U_RaceInviteList
		,?GS2U_RaceInvite_S2B
		,?GS2U_RaceMapGiveUp_Sync
		,?GS2U_RaceMapItem_Sync
		,?GS2U_RaceMapMilestone_Sync
		,?GS2U_RaceMapState_Sync
		,?GS2U_RaceSeletPet
		,?GS2U_RaceType_Sync
		,?GS2U_ReceivePlayerLevelRewardResult
		,?GS2U_ReconnectLoginRequestFail
		,?GS2U_RequestAutoDealAck
		,?GS2U_RequestGoddessCodeAck
		,?GS2U_RequestOneKeyDealAck
		,?GS2U_RequestRechargeAck
		,?GS2U_RequestRechargeHasGiftIDListAck
		,?GS2U_RequestTargetCopyMapScore
		,?GS2U_ResetCopyMap
		,?GS2U_RespChatVoice
		,?GS2U_RespChatVoiceError
		,?GS2U_RoleAwakeInof
		,?GS2U_RoleAwakeingRet
		,?GS2U_SelPlayerResult
		,?GS2U_SendGiftNotice
		,?GS2U_SendPlayerDailyCountList
		,?GS2U_SendServerType
		,?GS2U_SessionKey
		,?GS2U_SetUpAnchor
		,?GS2U_SevenDayAimReward_Ack
		,?GS2U_SevenDayAimState_Sync
		,?GS2U_SevenDayAimUpdate_Sync
		,?GS2U_ShiftTo
		,?GS2U_ShowAction
		,?GS2U_SpecificEvent_Sync
		,?GS2U_StopMove
		,?GS2U_StopTheAwakeBuffRet
		,?GS2U_SyncServerTime
		,?GS2U_TaskUseItemList
		,?GS2U_TheAwakeBuffInfo
		,?GS2U_ThirtyDayLoginGiftState_Sync
		,?GS2U_ThirtyDayLoginGift_Ack
		,?GS2U_TipsError
		,?GS2U_TipsString
		,?GS2U_TransferNewPos
		,?GS2U_UserPlayerList
		,?GS2U_WingRise
		,?GS2U_WorldBossBuyBuff
		,?GS2U_XmlNoticeResponse
		,?GS2U_action_point_info
		,?GS2U_copy_map_destory_time
		,?GS2U_lottery_award_items
		,?GS2U_lottery_sys_info
		,?GS2U_lsbattlefield_award_list
		,?GS2U_lsbattlefield_rank_list
		,?GS2U_monsterChange
		,?GS2U_returnFriendPos
		,?GS2U_synch_lsbattlefield_state
		,?GetPlayerOnlineReward
		,?PlayerLevelReward
		,?U2GS2U_RaceAutoMatch
		,?U2GS_AcceptHolidayTask
		,?U2GS_ActiveCodeRequest
		,?U2GS_AliveApply_Request
		,?U2GS_AliveCancel_Request
		,?U2GS_AliveEnterSafeArea_Request
		,?U2GS_BusinessCashDailyGift_Request
		,?U2GS_BusinessSupperGift_Request
		,?U2GS_Buy4System
		,?U2GS_BuyLimitSales
		,?U2GS_ChangeCarrer
		,?U2GS_ChangeLineLoginRequest
		,?U2GS_ChangeLineRequest
		,?U2GS_ChangeLineRequestAck
		,?U2GS_ChangeName
		,?U2GS_ChangeWingLevel
		,?U2GS_ChatInfo
		,?U2GS_ChatVoice
		,?U2GS_CommonditiesPush
		,?U2GS_CopyChat
		,?U2GS_DashTo
		,?U2GS_DigTransferMap
		,?U2GS_EnterActiveMap
		,?U2GS_EnterCopyMap
		,?U2GS_EnteredMap
		,?U2GS_EqupmentCombin
		,?U2GS_EveryDayGetPower
		,?U2GS_ExpToVigour
		,?U2GS_GetLeavedExp
		,?U2GS_GetMapLevel
		,?U2GS_GetQuestionnaireSurveyAward
		,?U2GS_GetUpdateReward
		,?U2GS_GetVipReward
		,?U2GS_GoToExpMap
		,?U2GS_HeartBeat
		,?U2GS_HeartBeatReal
		,?U2GS_HisoryForce_Request
		,?U2GS_Join_lsbattlefield
		,?U2GS_KillValueRequest
		,?U2GS_LBS_BesideRole_Request
		,?U2GS_LBS_Request
		,?U2GS_LeaveCopyMap
		,?U2GS_LoadedMap
		,?U2GS_LotteryForTowerInfo
		,?U2GS_LotteryForTowerRandonAward
		,?U2GS_MoneyTree
		,?U2GS_MonsterBookReward_Request
		,?U2GS_MonsterBookSnap_Request
		,?U2GS_MonsterBookUnlock_Request
		,?U2GS_MonsterBook_Request
		,?U2GS_MonthCardGettingEvent
		,?U2GS_MoveTo
		,?U2GS_NoticeRequest
		,?U2GS_PlayerAwakenUseItem
		,?U2GS_PlayerCoupleBack
		,?U2GS_PlotDialogueEnd
		,?U2GS_QueryTargetObject
		,?U2GS_RaceApply
		,?U2GS_RaceApply_Request
		,?U2GS_RaceCancel
		,?U2GS_RaceCancel_Request
		,?U2GS_RaceInviteList
		,?U2GS_RaceInvite_A2S
		,?U2GS_RaceInvite_B2S
		,?U2GS_RaceMapItem_Request
		,?U2GS_RaceSelectPet
		,?U2GS_RecClientEvent
		,?U2GS_ReceivePlayerLevelReward
		,?U2GS_RechargeGettingEvent
		,?U2GS_ReconnectLoginRequest
		,?U2GS_RenewChangeCarrer
		,?U2GS_ReqChatVoice
		,?U2GS_RequestCreatePlayer
		,?U2GS_RequestDeletePlayer
		,?U2GS_RequestEnterMapLine
		,?U2GS_RequestGoddessCode
		,?U2GS_RequestLogin
		,?U2GS_RequestMapLineList
		,?U2GS_RequestObjInfo
		,?U2GS_RequestRecharge
		,?U2GS_RequestRechargeHasGiftIDList
		,?U2GS_RequestRevive
		,?U2GS_RequestTargetCopyMapScore
		,?U2GS_ResetCopyMap
		,?U2GS_ResetPosToRevivePt
		,?U2GS_ResetRoleAwake
		,?U2GS_RoleAwakeing
		,?U2GS_SelPlayerEnterGame
		,?U2GS_SelectTarget
		,?U2GS_SessionKeyAck
		,?U2GS_SevenDayAimReward_Request
		,?U2GS_ShowAction
		,?U2GS_ShowHeadEmoticonIcon
		,?U2GS_StartMeditation
		,?U2GS_StopMove
		,?U2GS_StopTheAwakeBuff
		,?U2GS_Telesport
		,?U2GS_ThirtyDayLoginGift_Request
		,?U2GS_Transfer2NewPos
		,?U2GS_TransferMap
		,?U2GS_UseTheAwakeBuff
		,?U2GS_WingRise
		,?U2GS_WingRiseOneTouch
		,?U2GS_XmlNoticeRequest
		,?U2GS_buy_action_count
		,?U2GS_buy_action_point
		,?U2GS_getFriendPos
		,?U2GS_get_action_point_info
		,?U2GS_get_copy_map_destory_time
		,?U2GS_get_lottery_sys_info
		,?U2GS_lottery_start
		,?U2GS_save_current_guide_id
		,?GS2U_GetPlayerInitDataEnd
		,?GS2U_GotoNewMap
		,?GS2U_HearBeat
		,?GS2U_KickByServer
		,?GS2U_PlayerInitBase
		,?GS2U_RemoteMonster
		,?GS2U_RemoteNpc
		,?GS2U_RemotePet
		,?GS2U_RemotePlayer
		,?GS2U_RemoveRemote
		,?GS2U_SyncStand
		,?GS2U_SyncWalk
		,?U2GS_ChangeMap
		,?U2GS_ExitGame
		,?U2GS_GetPlayerInitData
		,?U2GS_GetRemoteObjInfo
		,?U2GS_HearBeat
		,?U2GS_PlayerStopWalk
		,?U2GS_PlayerWalk
		,?GS2U_ActivityMapRankData
		,?GS2U_MyKillNumber
		,?GS2U_MyRankingAndDamage
		,?GS2U_RefreshRank
		,?GS2U_SendCharmRankFirstData
		,?GS2U_SendPropList
		,?GS2U_SendRank
		,?GS2U_SendRankModelData
		,?U2GS_RequestActivityMapRank
		,?U2GS_RequestPropList
		,?U2GS_RequestRank
		,?U2GS_RequestRankAward
		,?GS2U_RedEnvelopeHistoryAck
		,?GS2U_RedEnvelopeInfoAck
		,?GS2U_RedEnvelopeQuery
		,?GS2U_RobRedEnvelopeAck
		,?U2GS_GiveUpRedEnvelope
		,?U2GS_RedEnvelopeHistory
		,?U2GS_RedEnvelopeInfo
		,?U2GS_RedEnvelopeQuery
		,?U2GS_RobRedEnvelope
		,?U2GS_SendRedEnvelope
		,?DeleteRide
		,?RequestDownRide
		,?RequestRecycle
		,?RequestUpRide
		,?RequestUse
		,?SyncPlayerInfo
		,?SyncRideInfo
		,?SyncRideItem
		,?DeleteRunes
		,?GS2U_QueryRuneTipsAck
		,?GS2U_RPRuneInfoList
		,?GS2U_RuneCastAck
		,?GS2U_RuneCastProp
		,?GS2U_RuneCompoundAck
		,?GS2U_RuneEmbedOffAck
		,?GS2U_RuneEmbedOnAck
		,?GS2U_RuneFuseAck
		,?GS2U_RuneGrid
		,?GS2U_RuneInfoList
		,?GS2U_RuneMeltAck
		,?GS2U_RuneOpenBorad
		,?GS2U_RuneSuitPropList
		,?GS2U_RuneTurnPosAck
		,?RuneEmbedOn
		,?U2GS_OpenRuneGrid
		,?U2GS_QueryRuneTips
		,?U2GS_RequestSuitProp
		,?U2GS_RuneCast
		,?U2GS_RuneCastAffirm
		,?U2GS_RuneCompound
		,?U2GS_RuneEmbedOff
		,?U2GS_RuneFuse
		,?U2GS_RuneMelt
		,?U2GS_RuneReserve
		,?U2GS_RuneTurnPos
		,?U2GS_SellRune
		,?GS2U_GridPlayerRotw
		,?Any_UpdateBitVariant
		,?Any_UpdateVariant
		,?GS2U_VariantInfo
		,?U2GS_AllTeamInvitationSetting
		,?BindPhoneAwardGet
		,?EveryDaySignIn
		,?GS2U_BindPhoneResult
		,?GS2U_SignIn
		,?SevenDaySignIn
		,?U2GS_AccuReward
		,?U2GS_BindPhone
		,?U2GS_SignIn
		,?GS2U_BreakLifeSkill
		,?GS2U_ChangeSkillSlotResult
		,?GS2U_GiveRewardAck
		,?GS2U_InitLifeSkillList
		,?GS2U_InitiativeSkillSlotInfoList
		,?GS2U_LifeSkillCanUseCount
		,?GS2U_OpenSkill
		,?GS2U_OpenSlot
		,?GS2U_OpenSlotList
		,?GS2U_PassiveSkillInfo
		,?GS2U_PassiveSkillInfoList
		,?GS2U_PassiveSkillSlotInfoList
		,?GS2U_ReduceCD
		,?GS2U_SkillInfo
		,?GS2U_SkillInfoList
		,?GS2U_TransformSkillSlotInfoList
		,?GS2U_TriggerPassiveSkill
		,?GS2U_UpdateLifeSkill
		,?GS2U_UpgradeSkill_Result
		,?U2GS_BuySpirit
		,?U2GS_ChangeSkillSlotRequest
		,?U2GS_FinishLifeSkill
		,?U2GS_GiveReward
		,?U2GS_LifeSkillBuyCount
		,?U2GS_PassiveUpSkill
		,?U2GS_ResetSkill
		,?U2GS_UpSkill
		,?U2GS_UpgradeSkill_Request
		,?U2GS_UseLifeSkill
		,?GS2U_TalentInitAck
		,?GS2U_TalentLevelUpSuccess
		,?U2GS_TalentInit
		,?U2GS_TalentLevelUp
		,?GS2U_AcceptTask
		,?GS2U_AcceptTaskList
		,?GS2U_AddNewAcceptTask
		,?GS2U_AddNewCompleteTask
		,?GS2U_CollectObj_Failed
		,?GS2U_CompleteTaskList
		,?GS2U_DeleteAcceptTask
		,?GS2U_SyncStateLoopTask
		,?GS2U_TalkToNpcResult
		,?GS2U_TaskList
		,?GS2U_UpdateAcceptTask
		,?GS2U_UpdateTask
		,?U2GS_AcceptTask
		,?U2GS_CollectObj
		,?U2GS_DropTask
		,?U2GS_RequestAcceptLoopTask
		,?U2GS_RequestAcceptTask
		,?U2GS_RequestHandIn
		,?U2GS_RequestOneKeyLoopTask
		,?U2GS_RequestOperateLoopTask
		,?U2GS_ResetTask
		,?U2GS_SumbitTask
		,?U2GS_TalkToNpc
		,?U2GS_TriggerTaskBuff
		,?U2GS_UseItemObj
		,?GS2U_AddTeamMemberInfo
		,?GS2U_BeenInviteTeam
		,?GS2U_DelTeammateInfo
		,?GS2U_FastTeamAck
		,?GS2U_FastTeamSucc
		,?GS2U_InviteUJoinTeam
		,?GS2U_KickOutByLeader
		,?GS2U_MyTeamInfo
		,?GS2U_NearTeamInfo
		,?GS2U_NearbyPlayer_Ack
		,?GS2U_NewMemberJoin
		,?GS2U_QueryRoleListAck
		,?GS2U_QueryTeamListAck
		,?GS2U_QueryTeamListThisLineAck
		,?GS2U_QuickTeamMatchAck
		,?GS2U_ReceiveNotice
		,?GS2U_RequestFightingCapacity
		,?GS2U_TeamChangeLeader
		,?GS2U_TeamDisbanded
		,?GS2U_TeamInfo
		,?GS2U_TeamLeaderStartCopymap
		,?GS2U_TeamMemberExtInfo
		,?GS2U_TeamMemberOffline
		,?GS2U_TeamMemberOnline
		,?GS2U_TeamMemberOnlineState
		,?GS2U_TeamReset
		,?GS2U_TeammateLeave
		,?GS2U_TeammateLeaveAwayTeam
		,?GS2U_TeammateLocation
		,?GS2U_TeammateStartCopymapAck
		,?GS2U_UpdateMemberExInfo
		,?GS2U_UpdateTeamInfo
		,?U2GS_AckInviteJoinTeam
		,?U2GS_AckInviteTeam
		,?U2GS_CancelFastTeam
		,?U2GS_IsOpenMapPanel
		,?U2GS_LeaveAwayTeam
		,?U2GS_NearbyPlayer_Request
		,?U2GS_NoticeLeader
		,?U2GS_OperateTeam
		,?U2GS_QueryRoleList
		,?U2GS_QueryTeamList
		,?U2GS_QueryTeamListThisLine
		,?U2GS_QuickJoinTeam
		,?U2GS_QuickTeamMatch
		,?U2GS_QuickTeamStart
		,?U2GS_RequestFightingCapacity
		,?U2GS_RequestNearByTeamInfo
		,?U2GS_TeamOp
		,?GS2U_BuyTradeFaild
		,?GS2U_BuyTradeSuccess
		,?GS2U_DealRecord
		,?GS2U_OpTradeResult
		,?GS2U_QueryTrade
		,?GS2U_QueryTradeInfo
		,?GS2U_ReferenceItem
		,?U2GS_DownTrade
		,?U2GS_NextResult
		,?U2GS_PutTrade
		,?U2GS_QueryNewestTrade
		,?U2GS_QuerySelfTrade
		,?U2GS_QueryTrade
		,?U2GS_ReferenceItem
		,?U2GS_RequestDealRecord
		,?U2GS_ResultSort
		,?U2GS_TradeBuy
		,?U2GS_TradeRefuse
		,?GS2U_GoddessActiveSkill
		,?GS2U_WakeInfo
		,?GS2U_WakeInfoList
		,?U2GS_CallGoddess
		,?U2GS_ChangeState
		,?U2GS_OnKeyUpWakeInfo
		,?U2GS_UnlockCard
		,?U2GS_UnlockState
		,?U2GS_UpGradeWakeInfo
		,?U2GS_UpWakeInfo
		,?GS2U_InitWarriorTrialAck
		,?GS2U_InitWarriorTrialMissionInfo
		,?GS2U_SweepWarriorTrialSuccess
		,?GS2U_WarriorFirstKillReward_Ack
		,?GS2U_WarriorTrialSuccess
		,?U2GS_BeginWarriorTrial
		,?U2GS_CompleteWarriorTrail
		,?U2GS_SweepWarriorTrial
		,?U2GS_SweepWarriorTrial_OneKey_Request
		,?U2GS_WarriorFirstKillReward_Request
		,?U2GS_WarriorTrialInit

	].